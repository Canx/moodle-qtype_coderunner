{"version":3,"sources":["../../../src/blockly/blocks/variables.js"],"names":["goog","provide","require","Blockly","Constants","Variables","HUE","defineBlocksWithJsonArray","CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN","customContextMenu","options","isInFlyout","type","opposite_type","contextMenuMsg","Msg","option","enabled","workspace","remainingCapacity","name","getField","getText","text","replace","xmlField","utils","xml","createElement","setAttribute","appendChild","createTextNode","xmlBlock","callback","ContextMenu","callbackFactory","push","renameOption","RENAME_VARIABLE","RENAME_OPTION_CALLBACK_FACTORY","deleteOption","DELETE_VARIABLE","DELETE_OPTION_CALLBACK_FACTORY","unshift","block","variable","getVariable","renameVariable","deleteVariableById","getId","refreshToolboxSelection","Extensions","registerMixin"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Variable blocks for Blockly.\n\n * This file is scraped to extract a .json file of block definitions. The array\n * passed to defineBlocksWithJsonArray(..) must be strict JSON: double quotes\n * only, no outside references, no functions, no trailing commas, etc. The one\n * exception is end-of-line comments, which the scraper will remove.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Blocks.variables');  // Deprecated.\ngoog.provide('Blockly.Constants.Variables');\n\ngoog.require('Blockly');\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.FieldLabel');\ngoog.require('Blockly.FieldVariable');\n\n\n/**\n * Unused constant for the common HSV hue for all blocks in this category.\n * @deprecated Use Blockly.Msg['VARIABLES_HUE']. (2018 April 5)\n */\nBlockly.Constants.Variables.HUE = 330;\n\nBlockly.defineBlocksWithJsonArray([  // BEGIN JSON EXTRACT\n  // Block for variable getter.\n  {\n    \"type\": \"variables_get\",\n    \"message0\": \"%1\",\n    \"args0\": [\n      {\n        \"type\": \"field_variable\",\n        \"name\": \"VAR\",\n        \"variable\": \"%{BKY_VARIABLES_DEFAULT_NAME}\"\n      }\n    ],\n    \"output\": null,\n    \"style\": \"variable_blocks\",\n    \"helpUrl\": \"%{BKY_VARIABLES_GET_HELPURL}\",\n    \"tooltip\": \"%{BKY_VARIABLES_GET_TOOLTIP}\",\n    \"extensions\": [\"contextMenu_variableSetterGetter\"]\n  },\n  // Block for variable setter.\n  {\n    \"type\": \"variables_set\",\n    \"message0\": \"%{BKY_VARIABLES_SET}\",\n    \"args0\": [\n      {\n        \"type\": \"field_variable\",\n        \"name\": \"VAR\",\n        \"variable\": \"%{BKY_VARIABLES_DEFAULT_NAME}\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"VALUE\"\n      }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"variable_blocks\",\n    \"tooltip\": \"%{BKY_VARIABLES_SET_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_VARIABLES_SET_HELPURL}\",\n    \"extensions\": [\"contextMenu_variableSetterGetter\"]\n  }\n]);  // END JSON EXTRACT (Do not delete this comment.)\n\n/**\n * Mixin to add context menu items to create getter/setter blocks for this\n * setter/getter.\n * Used by blocks 'variables_set' and 'variables_get'.\n * @mixin\n * @augments Blockly.Block\n * @package\n * @readonly\n */\nBlockly.Constants.Variables.CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN = {\n  /**\n   * Add menu option to create getter/setter block for this setter/getter.\n   * @param {!Array} options List of menu options to add to.\n   * @this {Blockly.Block}\n   */\n  customContextMenu: function(options) {\n    if (!this.isInFlyout) {\n      // Getter blocks have the option to create a setter block, and vice versa.\n      if (this.type == 'variables_get') {\n        var opposite_type = 'variables_set';\n        var contextMenuMsg = Blockly.Msg['VARIABLES_GET_CREATE_SET'];\n      } else {\n        var opposite_type = 'variables_get';\n        var contextMenuMsg = Blockly.Msg['VARIABLES_SET_CREATE_GET'];\n      }\n\n      var option = {enabled: this.workspace.remainingCapacity() > 0};\n      var name = this.getField('VAR').getText();\n      option.text = contextMenuMsg.replace('%1', name);\n      var xmlField = Blockly.utils.xml.createElement('field');\n      xmlField.setAttribute('name', 'VAR');\n      xmlField.appendChild(Blockly.utils.xml.createTextNode(name));\n      var xmlBlock = Blockly.utils.xml.createElement('block');\n      xmlBlock.setAttribute('type', opposite_type);\n      xmlBlock.appendChild(xmlField);\n      option.callback = Blockly.ContextMenu.callbackFactory(this, xmlBlock);\n      options.push(option);\n      // Getter blocks have the option to rename or delete that variable.\n    } else {\n      if (this.type == 'variables_get' || this.type == 'variables_get_reporter') {\n        var renameOption = {\n          text: Blockly.Msg.RENAME_VARIABLE,\n          enabled: true,\n          callback: Blockly.Constants.Variables.RENAME_OPTION_CALLBACK_FACTORY(this)\n        };\n        var name = this.getField('VAR').getText();\n        var deleteOption = {\n          text: Blockly.Msg.DELETE_VARIABLE.replace('%1', name),\n          enabled: true,\n          callback: Blockly.Constants.Variables.DELETE_OPTION_CALLBACK_FACTORY(this)\n        };\n        options.unshift(renameOption);\n        options.unshift(deleteOption);\n      }\n    }\n  }\n};\n\n/**\n  * Callback for rename variable dropdown menu option associated with a\n  * variable getter block.\n  * @param {!Blockly.Block} block The block with the variable to rename.\n  * @return {!function()} A function that renames the variable.\n  */\nBlockly.Constants.Variables.RENAME_OPTION_CALLBACK_FACTORY = function(block) {\n  return function() {\n    var workspace = block.workspace;\n    var variable = block.getField('VAR').getVariable();\n    Blockly.Variables.renameVariable(workspace, variable);\n  };\n};\n\n/**\n * Callback for delete variable dropdown menu option associated with a\n * variable getter block.\n * @param {!Blockly.Block} block The block with the variable to delete.\n * @return {!function()} A function that deletes the variable.\n */\nBlockly.Constants.Variables.DELETE_OPTION_CALLBACK_FACTORY = function(block) {\n  return function() {\n    var workspace = block.workspace;\n    var variable = block.getField('VAR').getVariable();\n    workspace.deleteVariableById(variable.getId());\n    workspace.refreshToolboxSelection();\n  };\n};\n\nBlockly.Extensions.registerMixin('contextMenu_variableSetterGetter',\n    Blockly.Constants.Variables.CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN);\n"],"file":"variables.min.js"}