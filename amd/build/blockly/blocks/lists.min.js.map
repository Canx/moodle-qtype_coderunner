{"version":3,"sources":["../../../src/blockly/blocks/lists.js"],"names":["goog","provide","require","Blockly","Constants","Lists","HUE","defineBlocksWithJsonArray","Blocks","init","setHelpUrl","Msg","setStyle","itemCount_","updateShape_","setOutput","setMutator","Mutator","setTooltip","mutationToDom","container","utils","xml","createElement","setAttribute","domToMutation","xmlElement","parseInt","getAttribute","decompose","workspace","containerBlock","newBlock","initSvg","connection","getInput","i","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","push","valueConnection_","targetBlock","targetConnection","indexOf","disconnect","length","reconnect","saveConnections","input","removeInput","appendDummyInput","appendField","appendValueInput","setAlign","ALIGN_RIGHT","appendStatementInput","contextMenu","setPreviousStatement","setNextStatement","OPERATORS","setCheck","FieldDropdown","setInputsInline","thisBlock","replace","options","oneBasedIndex","MODE","WHERE_OPTIONS","modeMenu","value","getSourceBlock","updateStatement_","updateAt_","mode","getFieldValue","where","tooltip","msg","isStatement","outputConnection","isAt","type","INPUT_VALUE","newStatement","oldStatement","unplug","menu","newAt","block","setFieldValue","moveInputBefore","isAt1","isAt2","n","jsonInit","dropdown","newMode","updateType_","Error","inputConnection","setShadowDom","inputBlock","isShadow","dispose","bumpNeighbours"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview List blocks for Blockly.\n *\n * This file is scraped to extract a .json file of block definitions. The array\n * passed to defineBlocksWithJsonArray(..) must be strict JSON: double quotes\n * only, no outside references, no functions, no trailing commas, etc. The one\n * exception is end-of-line comments, which the scraper will remove.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Blocks.lists');  // Deprecated\ngoog.provide('Blockly.Constants.Lists');\n\ngoog.require('Blockly');\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.FieldDropdown');\ngoog.require('Blockly.FieldLabel');\ngoog.require('Blockly.Mutator');\n\n\n/**\n * Unused constant for the common HSV hue for all blocks in this category.\n * @deprecated Use Blockly.Msg['LISTS_HUE']. (2018 April 5)\n */\nBlockly.Constants.Lists.HUE = 260;\n\nBlockly.defineBlocksWithJsonArray([  // BEGIN JSON EXTRACT\n  // Block for creating an empty list\n  // The 'list_create_with' block is preferred as it is more flexible.\n  // <block type=\"lists_create_with\">\n  //   <mutation items=\"0\"></mutation>\n  // </block>\n  {\n    \"type\": \"lists_create_empty\",\n    \"message0\": \"%{BKY_LISTS_CREATE_EMPTY_TITLE}\",\n    \"output\": \"Array\",\n    \"style\": \"list_blocks\",\n    \"tooltip\": \"%{BKY_LISTS_CREATE_EMPTY_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_LISTS_CREATE_EMPTY_HELPURL}\"\n  },\n  // Block for creating a list with one element repeated.\n  {\n    \"type\": \"lists_repeat\",\n    \"message0\": \"%{BKY_LISTS_REPEAT_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"ITEM\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"NUM\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"output\": \"Array\",\n    \"style\": \"list_blocks\",\n    \"tooltip\": \"%{BKY_LISTS_REPEAT_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_LISTS_REPEAT_HELPURL}\"\n  },\n  // Block for reversing a list.\n  {\n    \"type\": \"lists_reverse\",\n    \"message0\": \"%{BKY_LISTS_REVERSE_MESSAGE0}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"LIST\",\n        \"check\": \"Array\"\n      }\n    ],\n    \"output\": \"Array\",\n    \"inputsInline\": true,\n    \"style\": \"list_blocks\",\n    \"tooltip\": \"%{BKY_LISTS_REVERSE_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_LISTS_REVERSE_HELPURL}\"\n  },\n  // Block for checking if a list is empty\n  {\n    \"type\": \"lists_isEmpty\",\n    \"message0\": \"%{BKY_LISTS_ISEMPTY_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"VALUE\",\n        \"check\": [\"String\", \"Array\"]\n      }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"list_blocks\",\n    \"tooltip\": \"%{BKY_LISTS_ISEMPTY_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_LISTS_ISEMPTY_HELPURL}\"\n  },\n  // Block for getting the list length\n  {\n    \"type\": \"lists_length\",\n    \"message0\": \"%{BKY_LISTS_LENGTH_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"VALUE\",\n        \"check\": [\"String\", \"Array\"]\n      }\n    ],\n    \"output\": \"Number\",\n    \"style\": \"list_blocks\",\n    \"tooltip\": \"%{BKY_LISTS_LENGTH_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_LISTS_LENGTH_HELPURL}\"\n  }\n]);  // END JSON EXTRACT (Do not delete this comment.)\n\nBlockly.Blocks['lists_create_with'] = {\n  /**\n   * Block for creating a list with any number of elements of any type.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.setHelpUrl(Blockly.Msg['LISTS_CREATE_WITH_HELPURL']);\n    this.setStyle('list_blocks');\n    this.itemCount_ = 3;\n    this.updateShape_();\n    this.setOutput(true, 'Array');\n    this.setMutator(new Blockly.Mutator(['lists_create_with_item']));\n    this.setTooltip(Blockly.Msg['LISTS_CREATE_WITH_TOOLTIP']);\n  },\n  /**\n   * Create XML to represent list inputs.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    container.setAttribute('items', this.itemCount_);\n    return container;\n  },\n  /**\n   * Parse XML to restore the list inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\n    this.updateShape_();\n  },\n  /**\n   * Populate the mutator's dialog with this block's components.\n   * @param {!Blockly.Workspace} workspace Mutator's workspace.\n   * @return {!Blockly.Block} Root block in mutator.\n   * @this {Blockly.Block}\n   */\n  decompose: function(workspace) {\n    var containerBlock = workspace.newBlock('lists_create_with_container');\n    containerBlock.initSvg();\n    var connection = containerBlock.getInput('STACK').connection;\n    for (var i = 0; i < this.itemCount_; i++) {\n      var itemBlock = workspace.newBlock('lists_create_with_item');\n      itemBlock.initSvg();\n      connection.connect(itemBlock.previousConnection);\n      connection = itemBlock.nextConnection;\n    }\n    return containerBlock;\n  },\n  /**\n   * Reconfigure this block based on the mutator dialog's components.\n   * @param {!Blockly.Block} containerBlock Root block in mutator.\n   * @this {Blockly.Block}\n   */\n  compose: function(containerBlock) {\n    var itemBlock = containerBlock.getInputTargetBlock('STACK');\n    // Count number of inputs.\n    var connections = [];\n    while (itemBlock) {\n      connections.push(itemBlock.valueConnection_);\n      itemBlock = itemBlock.nextConnection &&\n          itemBlock.nextConnection.targetBlock();\n    }\n    // Disconnect any children that don't belong.\n    for (var i = 0; i < this.itemCount_; i++) {\n      var connection = this.getInput('ADD' + i).connection.targetConnection;\n      if (connection && connections.indexOf(connection) == -1) {\n        connection.disconnect();\n      }\n    }\n    this.itemCount_ = connections.length;\n    this.updateShape_();\n    // Reconnect any child blocks.\n    for (var i = 0; i < this.itemCount_; i++) {\n      Blockly.Mutator.reconnect(connections[i], this, 'ADD' + i);\n    }\n  },\n  /**\n   * Store pointers to any connected child blocks.\n   * @param {!Blockly.Block} containerBlock Root block in mutator.\n   * @this {Blockly.Block}\n   */\n  saveConnections: function(containerBlock) {\n    var itemBlock = containerBlock.getInputTargetBlock('STACK');\n    var i = 0;\n    while (itemBlock) {\n      var input = this.getInput('ADD' + i);\n      itemBlock.valueConnection_ = input && input.connection.targetConnection;\n      i++;\n      itemBlock = itemBlock.nextConnection &&\n          itemBlock.nextConnection.targetBlock();\n    }\n  },\n  /**\n   * Modify this block to have the correct number of inputs.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateShape_: function() {\n    if (this.itemCount_ && this.getInput('EMPTY')) {\n      this.removeInput('EMPTY');\n    } else if (!this.itemCount_ && !this.getInput('EMPTY')) {\n      this.appendDummyInput('EMPTY')\n          .appendField(Blockly.Msg['LISTS_CREATE_EMPTY_TITLE']);\n    }\n    // Add new inputs.\n    for (var i = 0; i < this.itemCount_; i++) {\n      if (!this.getInput('ADD' + i)) {\n        var input = this.appendValueInput('ADD' + i)\n            .setAlign(Blockly.ALIGN_RIGHT);\n        if (i == 0) {\n          input.appendField(Blockly.Msg['LISTS_CREATE_WITH_INPUT_WITH']);\n        }\n      }\n    }\n    // Remove deleted inputs.\n    while (this.getInput('ADD' + i)) {\n      this.removeInput('ADD' + i);\n      i++;\n    }\n  }\n};\n\nBlockly.Blocks['lists_create_with_container'] = {\n  /**\n   * Mutator block for list container.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.setStyle('list_blocks');\n    this.appendDummyInput()\n        .appendField(Blockly.Msg['LISTS_CREATE_WITH_CONTAINER_TITLE_ADD']);\n    this.appendStatementInput('STACK');\n    this.setTooltip(Blockly.Msg['LISTS_CREATE_WITH_CONTAINER_TOOLTIP']);\n    this.contextMenu = false;\n  }\n};\n\nBlockly.Blocks['lists_create_with_item'] = {\n  /**\n   * Mutator block for adding items.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.setStyle('list_blocks');\n    this.appendDummyInput()\n        .appendField(Blockly.Msg['LISTS_CREATE_WITH_ITEM_TITLE']);\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setTooltip(Blockly.Msg['LISTS_CREATE_WITH_ITEM_TOOLTIP']);\n    this.contextMenu = false;\n  }\n};\n\nBlockly.Blocks['lists_indexOf'] = {\n  /**\n   * Block for finding an item in the list.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    var OPERATORS =\n        [\n          [Blockly.Msg['LISTS_INDEX_OF_FIRST'], 'FIRST'],\n          [Blockly.Msg['LISTS_INDEX_OF_LAST'], 'LAST']\n        ];\n    this.setHelpUrl(Blockly.Msg['LISTS_INDEX_OF_HELPURL']);\n    this.setStyle('list_blocks');\n    this.setOutput(true, 'Number');\n    this.appendValueInput('VALUE')\n        .setCheck('Array')\n        .appendField(Blockly.Msg['LISTS_INDEX_OF_INPUT_IN_LIST']);\n    this.appendValueInput('FIND')\n        .appendField(new Blockly.FieldDropdown(OPERATORS), 'END');\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      return Blockly.Msg['LISTS_INDEX_OF_TOOLTIP'].replace('%1',\n          thisBlock.workspace.options.oneBasedIndex ? '0' : '-1');\n    });\n  }\n};\n\nBlockly.Blocks['lists_getIndex'] = {\n  /**\n   * Block for getting element at index.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    var MODE =\n        [\n          [Blockly.Msg['LISTS_GET_INDEX_GET'], 'GET'],\n          [Blockly.Msg['LISTS_GET_INDEX_GET_REMOVE'], 'GET_REMOVE'],\n          [Blockly.Msg['LISTS_GET_INDEX_REMOVE'], 'REMOVE']\n        ];\n    this.WHERE_OPTIONS =\n        [\n          [Blockly.Msg['LISTS_GET_INDEX_FROM_START'], 'FROM_START'],\n          [Blockly.Msg['LISTS_GET_INDEX_FROM_END'], 'FROM_END'],\n          [Blockly.Msg['LISTS_GET_INDEX_FIRST'], 'FIRST'],\n          [Blockly.Msg['LISTS_GET_INDEX_LAST'], 'LAST'],\n          [Blockly.Msg['LISTS_GET_INDEX_RANDOM'], 'RANDOM']\n        ];\n    this.setHelpUrl(Blockly.Msg['LISTS_GET_INDEX_HELPURL']);\n    this.setStyle('list_blocks');\n    var modeMenu = new Blockly.FieldDropdown(MODE, function(value) {\n      var isStatement = (value == 'REMOVE');\n      this.getSourceBlock().updateStatement_(isStatement);\n    });\n    this.appendValueInput('VALUE')\n        .setCheck('Array')\n        .appendField(Blockly.Msg['LISTS_GET_INDEX_INPUT_IN_LIST']);\n    this.appendDummyInput()\n        .appendField(modeMenu, 'MODE')\n        .appendField('', 'SPACE');\n    this.appendDummyInput('AT');\n    if (Blockly.Msg['LISTS_GET_INDEX_TAIL']) {\n      this.appendDummyInput('TAIL')\n          .appendField(Blockly.Msg['LISTS_GET_INDEX_TAIL']);\n    }\n    this.setInputsInline(true);\n    this.setOutput(true);\n    this.updateAt_(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var mode = thisBlock.getFieldValue('MODE');\n      var where = thisBlock.getFieldValue('WHERE');\n      var tooltip = '';\n      switch (mode + ' ' + where) {\n        case 'GET FROM_START':\n        case 'GET FROM_END':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_FROM'];\n          break;\n        case 'GET FIRST':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_FIRST'];\n          break;\n        case 'GET LAST':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_LAST'];\n          break;\n        case 'GET RANDOM':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_RANDOM'];\n          break;\n        case 'GET_REMOVE FROM_START':\n        case 'GET_REMOVE FROM_END':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM'];\n          break;\n        case 'GET_REMOVE FIRST':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST'];\n          break;\n        case 'GET_REMOVE LAST':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST'];\n          break;\n        case 'GET_REMOVE RANDOM':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM'];\n          break;\n        case 'REMOVE FROM_START':\n        case 'REMOVE FROM_END':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM'];\n          break;\n        case 'REMOVE FIRST':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST'];\n          break;\n        case 'REMOVE LAST':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST'];\n          break;\n        case 'REMOVE RANDOM':\n          tooltip = Blockly.Msg['LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM'];\n          break;\n      }\n      if (where == 'FROM_START' || where == 'FROM_END') {\n        var msg = (where == 'FROM_START') ?\n            Blockly.Msg['LISTS_INDEX_FROM_START_TOOLTIP'] :\n            Blockly.Msg['LISTS_INDEX_FROM_END_TOOLTIP'];\n        tooltip += '  ' + msg.replace('%1',\n                thisBlock.workspace.options.oneBasedIndex ? '#1' : '#0');\n      }\n      return tooltip;\n    });\n  },\n  /**\n   * Create XML to represent whether the block is a statement or a value.\n   * Also represent whether there is an 'AT' input.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    var isStatement = !this.outputConnection;\n    container.setAttribute('statement', isStatement);\n    var isAt = this.getInput('AT').type == Blockly.INPUT_VALUE;\n    container.setAttribute('at', isAt);\n    return container;\n  },\n  /**\n   * Parse XML to restore the 'AT' input.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    // Note: Until January 2013 this block did not have mutations,\n    // so 'statement' defaults to false and 'at' defaults to true.\n    var isStatement = (xmlElement.getAttribute('statement') == 'true');\n    this.updateStatement_(isStatement);\n    var isAt = (xmlElement.getAttribute('at') != 'false');\n    this.updateAt_(isAt);\n  },\n  /**\n   * Switch between a value block and a statement block.\n   * @param {boolean} newStatement True if the block should be a statement.\n   *     False if the block should be a value.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateStatement_: function(newStatement) {\n    var oldStatement = !this.outputConnection;\n    if (newStatement != oldStatement) {\n      this.unplug(true, true);\n      if (newStatement) {\n        this.setOutput(false);\n        this.setPreviousStatement(true);\n        this.setNextStatement(true);\n      } else {\n        this.setPreviousStatement(false);\n        this.setNextStatement(false);\n        this.setOutput(true);\n      }\n    }\n  },\n  /**\n   * Create or delete an input for the numeric index.\n   * @param {boolean} isAt True if the input should exist.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateAt_: function(isAt) {\n    // Destroy old 'AT' and 'ORDINAL' inputs.\n    this.removeInput('AT');\n    this.removeInput('ORDINAL', true);\n    // Create either a value 'AT' input or a dummy input.\n    if (isAt) {\n      this.appendValueInput('AT').setCheck('Number');\n      if (Blockly.Msg['ORDINAL_NUMBER_SUFFIX']) {\n        this.appendDummyInput('ORDINAL')\n            .appendField(Blockly.Msg['ORDINAL_NUMBER_SUFFIX']);\n      }\n    } else {\n      this.appendDummyInput('AT');\n    }\n    var menu = new Blockly.FieldDropdown(this.WHERE_OPTIONS, function(value) {\n      var newAt = (value == 'FROM_START') || (value == 'FROM_END');\n      // The 'isAt' variable is available due to this function being a closure.\n      if (newAt != isAt) {\n        var block = this.getSourceBlock();\n        block.updateAt_(newAt);\n        // This menu has been destroyed and replaced.  Update the replacement.\n        block.setFieldValue(value, 'WHERE');\n        return null;\n      }\n      return undefined;\n    });\n    this.getInput('AT').appendField(menu, 'WHERE');\n    if (Blockly.Msg['LISTS_GET_INDEX_TAIL']) {\n      this.moveInputBefore('TAIL', null);\n    }\n  }\n};\n\nBlockly.Blocks['lists_setIndex'] = {\n  /**\n   * Block for setting the element at index.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    var MODE =\n        [\n          [Blockly.Msg['LISTS_SET_INDEX_SET'], 'SET'],\n          [Blockly.Msg['LISTS_SET_INDEX_INSERT'], 'INSERT']\n        ];\n    this.WHERE_OPTIONS =\n        [\n          [Blockly.Msg['LISTS_GET_INDEX_FROM_START'], 'FROM_START'],\n          [Blockly.Msg['LISTS_GET_INDEX_FROM_END'], 'FROM_END'],\n          [Blockly.Msg['LISTS_GET_INDEX_FIRST'], 'FIRST'],\n          [Blockly.Msg['LISTS_GET_INDEX_LAST'], 'LAST'],\n          [Blockly.Msg['LISTS_GET_INDEX_RANDOM'], 'RANDOM']\n        ];\n    this.setHelpUrl(Blockly.Msg['LISTS_SET_INDEX_HELPURL']);\n    this.setStyle('list_blocks');\n    this.appendValueInput('LIST')\n        .setCheck('Array')\n        .appendField(Blockly.Msg['LISTS_SET_INDEX_INPUT_IN_LIST']);\n    this.appendDummyInput()\n        .appendField(new Blockly.FieldDropdown(MODE), 'MODE')\n        .appendField('', 'SPACE');\n    this.appendDummyInput('AT');\n    this.appendValueInput('TO')\n        .appendField(Blockly.Msg['LISTS_SET_INDEX_INPUT_TO']);\n    this.setInputsInline(true);\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setTooltip(Blockly.Msg['LISTS_SET_INDEX_TOOLTIP']);\n    this.updateAt_(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      var mode = thisBlock.getFieldValue('MODE');\n      var where = thisBlock.getFieldValue('WHERE');\n      var tooltip = '';\n      switch (mode + ' ' + where) {\n        case 'SET FROM_START':\n        case 'SET FROM_END':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_SET_FROM'];\n          break;\n        case 'SET FIRST':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_SET_FIRST'];\n          break;\n        case 'SET LAST':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_SET_LAST'];\n          break;\n        case 'SET RANDOM':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_SET_RANDOM'];\n          break;\n        case 'INSERT FROM_START':\n        case 'INSERT FROM_END':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_INSERT_FROM'];\n          break;\n        case 'INSERT FIRST':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST'];\n          break;\n        case 'INSERT LAST':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_INSERT_LAST'];\n          break;\n        case 'INSERT RANDOM':\n          tooltip = Blockly.Msg['LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM'];\n          break;\n      }\n      if (where == 'FROM_START' || where == 'FROM_END') {\n        tooltip += '  ' + Blockly.Msg['LISTS_INDEX_FROM_START_TOOLTIP']\n            .replace('%1',\n                thisBlock.workspace.options.oneBasedIndex ? '#1' : '#0');\n      }\n      return tooltip;\n    });\n  },\n  /**\n   * Create XML to represent whether there is an 'AT' input.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    var isAt = this.getInput('AT').type == Blockly.INPUT_VALUE;\n    container.setAttribute('at', isAt);\n    return container;\n  },\n  /**\n   * Parse XML to restore the 'AT' input.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    // Note: Until January 2013 this block did not have mutations,\n    // so 'at' defaults to true.\n    var isAt = (xmlElement.getAttribute('at') != 'false');\n    this.updateAt_(isAt);\n  },\n  /**\n   * Create or delete an input for the numeric index.\n   * @param {boolean} isAt True if the input should exist.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateAt_: function(isAt) {\n    // Destroy old 'AT' and 'ORDINAL' input.\n    this.removeInput('AT');\n    this.removeInput('ORDINAL', true);\n    // Create either a value 'AT' input or a dummy input.\n    if (isAt) {\n      this.appendValueInput('AT').setCheck('Number');\n      if (Blockly.Msg['ORDINAL_NUMBER_SUFFIX']) {\n        this.appendDummyInput('ORDINAL')\n            .appendField(Blockly.Msg['ORDINAL_NUMBER_SUFFIX']);\n      }\n    } else {\n      this.appendDummyInput('AT');\n    }\n    var menu = new Blockly.FieldDropdown(this.WHERE_OPTIONS, function(value) {\n      var newAt = (value == 'FROM_START') || (value == 'FROM_END');\n      // The 'isAt' variable is available due to this function being a closure.\n      if (newAt != isAt) {\n        var block = this.getSourceBlock();\n        block.updateAt_(newAt);\n        // This menu has been destroyed and replaced.  Update the replacement.\n        block.setFieldValue(value, 'WHERE');\n        return null;\n      }\n      return undefined;\n    });\n    this.moveInputBefore('AT', 'TO');\n    if (this.getInput('ORDINAL')) {\n      this.moveInputBefore('ORDINAL', 'TO');\n    }\n\n    this.getInput('AT').appendField(menu, 'WHERE');\n  }\n};\n\nBlockly.Blocks['lists_getSublist'] = {\n  /**\n   * Block for getting sublist.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this['WHERE_OPTIONS_1'] =\n        [\n          [Blockly.Msg['LISTS_GET_SUBLIST_START_FROM_START'], 'FROM_START'],\n          [Blockly.Msg['LISTS_GET_SUBLIST_START_FROM_END'], 'FROM_END'],\n          [Blockly.Msg['LISTS_GET_SUBLIST_START_FIRST'], 'FIRST']\n        ];\n    this['WHERE_OPTIONS_2'] =\n        [\n          [Blockly.Msg['LISTS_GET_SUBLIST_END_FROM_START'], 'FROM_START'],\n          [Blockly.Msg['LISTS_GET_SUBLIST_END_FROM_END'], 'FROM_END'],\n          [Blockly.Msg['LISTS_GET_SUBLIST_END_LAST'], 'LAST']\n        ];\n    this.setHelpUrl(Blockly.Msg['LISTS_GET_SUBLIST_HELPURL']);\n    this.setStyle('list_blocks');\n    this.appendValueInput('LIST')\n        .setCheck('Array')\n        .appendField(Blockly.Msg['LISTS_GET_SUBLIST_INPUT_IN_LIST']);\n    this.appendDummyInput('AT1');\n    this.appendDummyInput('AT2');\n    if (Blockly.Msg['LISTS_GET_SUBLIST_TAIL']) {\n      this.appendDummyInput('TAIL')\n          .appendField(Blockly.Msg['LISTS_GET_SUBLIST_TAIL']);\n    }\n    this.setInputsInline(true);\n    this.setOutput(true, 'Array');\n    this.updateAt_(1, true);\n    this.updateAt_(2, true);\n    this.setTooltip(Blockly.Msg['LISTS_GET_SUBLIST_TOOLTIP']);\n  },\n  /**\n   * Create XML to represent whether there are 'AT' inputs.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    var isAt1 = this.getInput('AT1').type == Blockly.INPUT_VALUE;\n    container.setAttribute('at1', isAt1);\n    var isAt2 = this.getInput('AT2').type == Blockly.INPUT_VALUE;\n    container.setAttribute('at2', isAt2);\n    return container;\n  },\n  /**\n   * Parse XML to restore the 'AT' inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    var isAt1 = (xmlElement.getAttribute('at1') == 'true');\n    var isAt2 = (xmlElement.getAttribute('at2') == 'true');\n    this.updateAt_(1, isAt1);\n    this.updateAt_(2, isAt2);\n  },\n  /**\n   * Create or delete an input for a numeric index.\n   * This block has two such inputs, independent of each other.\n   * @param {number} n Specify first or second input (1 or 2).\n   * @param {boolean} isAt True if the input should exist.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateAt_: function(n, isAt) {\n    // Create or delete an input for the numeric index.\n    // Destroy old 'AT' and 'ORDINAL' inputs.\n    this.removeInput('AT' + n);\n    this.removeInput('ORDINAL' + n, true);\n    // Create either a value 'AT' input or a dummy input.\n    if (isAt) {\n      this.appendValueInput('AT' + n).setCheck('Number');\n      if (Blockly.Msg['ORDINAL_NUMBER_SUFFIX']) {\n        this.appendDummyInput('ORDINAL' + n)\n            .appendField(Blockly.Msg['ORDINAL_NUMBER_SUFFIX']);\n      }\n    } else {\n      this.appendDummyInput('AT' + n);\n    }\n    var menu = new Blockly.FieldDropdown(this['WHERE_OPTIONS_' + n],\n        function(value) {\n          var newAt = (value == 'FROM_START') || (value == 'FROM_END');\n          // The 'isAt' variable is available due to this function being a\n          // closure.\n          if (newAt != isAt) {\n            var block = this.getSourceBlock();\n            block.updateAt_(n, newAt);\n            // This menu has been destroyed and replaced.\n            // Update the replacement.\n            block.setFieldValue(value, 'WHERE' + n);\n            return null;\n          }\n        });\n    this.getInput('AT' + n)\n        .appendField(menu, 'WHERE' + n);\n    if (n == 1) {\n      this.moveInputBefore('AT1', 'AT2');\n      if (this.getInput('ORDINAL1')) {\n        this.moveInputBefore('ORDINAL1', 'AT2');\n      }\n    }\n    if (Blockly.Msg['LISTS_GET_SUBLIST_TAIL']) {\n      this.moveInputBefore('TAIL', null);\n    }\n  }\n};\n\nBlockly.Blocks['lists_sort'] = {\n  /**\n   * Block for sorting a list.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": Blockly.Msg['LISTS_SORT_TITLE'],\n      \"args0\": [\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"TYPE\",\n          \"options\": [\n            [Blockly.Msg['LISTS_SORT_TYPE_NUMERIC'], \"NUMERIC\"],\n            [Blockly.Msg['LISTS_SORT_TYPE_TEXT'], \"TEXT\"],\n            [Blockly.Msg['LISTS_SORT_TYPE_IGNORECASE'], \"IGNORE_CASE\"]\n          ]\n        },\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"DIRECTION\",\n          \"options\": [\n            [Blockly.Msg['LISTS_SORT_ORDER_ASCENDING'], \"1\"],\n            [Blockly.Msg['LISTS_SORT_ORDER_DESCENDING'], \"-1\"]\n          ]\n        },\n        {\n          \"type\": \"input_value\",\n          \"name\": \"LIST\",\n          \"check\": \"Array\"\n        }\n      ],\n      \"output\": \"Array\",\n      \"style\": \"list_blocks\",\n      \"tooltip\": Blockly.Msg['LISTS_SORT_TOOLTIP'],\n      \"helpUrl\": Blockly.Msg['LISTS_SORT_HELPURL']\n    });\n  }\n};\n\nBlockly.Blocks['lists_split'] = {\n  /**\n   * Block for splitting text into a list, or joining a list into text.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    // Assign 'this' to a variable for use in the closures below.\n    var thisBlock = this;\n    var dropdown = new Blockly.FieldDropdown(\n        [\n          [Blockly.Msg['LISTS_SPLIT_LIST_FROM_TEXT'], 'SPLIT'],\n          [Blockly.Msg['LISTS_SPLIT_TEXT_FROM_LIST'], 'JOIN']\n        ],\n        function(newMode) {\n          thisBlock.updateType_(newMode);\n        });\n    this.setHelpUrl(Blockly.Msg['LISTS_SPLIT_HELPURL']);\n    this.setStyle('list_blocks');\n    this.appendValueInput('INPUT')\n        .setCheck('String')\n        .appendField(dropdown, 'MODE');\n    this.appendValueInput('DELIM')\n        .setCheck('String')\n        .appendField(Blockly.Msg['LISTS_SPLIT_WITH_DELIMITER']);\n    this.setInputsInline(true);\n    this.setOutput(true, 'Array');\n    this.setTooltip(function() {\n      var mode = thisBlock.getFieldValue('MODE');\n      if (mode == 'SPLIT') {\n        return Blockly.Msg['LISTS_SPLIT_TOOLTIP_SPLIT'];\n      } else if (mode == 'JOIN') {\n        return Blockly.Msg['LISTS_SPLIT_TOOLTIP_JOIN'];\n      }\n      throw Error('Unknown mode: ' + mode);\n    });\n  },\n  /**\n   * Modify this block to have the correct input and output types.\n   * @param {string} newMode Either 'SPLIT' or 'JOIN'.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateType_: function(newMode) {\n    var mode = this.getFieldValue('MODE');\n    if (mode != newMode) {\n      var inputConnection = this.getInput('INPUT').connection;\n      inputConnection.setShadowDom(null);\n      var inputBlock = inputConnection.targetBlock();\n      if (inputBlock) {\n        inputConnection.disconnect();\n        if (inputBlock.isShadow()) {\n          inputBlock.dispose();\n        } else {\n          this.bumpNeighbours();\n        }\n      }\n    }\n    if (newMode == 'SPLIT') {\n      this.outputConnection.setCheck('Array');\n      this.getInput('INPUT').setCheck('String');\n    } else {\n      this.outputConnection.setCheck('String');\n      this.getInput('INPUT').setCheck('Array');\n    }\n  },\n  /**\n   * Create XML to represent the input and output types.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    container.setAttribute('mode', this.getFieldValue('MODE'));\n    return container;\n  },\n  /**\n   * Parse XML to restore the input and output types.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    this.updateType_(xmlElement.getAttribute('mode'));\n  }\n};\n"],"file":"lists.min.js"}