{"version":3,"sources":["../../../src/blockly/blocks/procedures.js"],"names":["goog","provide","require","Blockly","Blocks","init","nameField","FieldTextInput","Procedures","rename","setSpellcheck","appendDummyInput","appendField","Msg","setMutator","Mutator","workspace","options","comments","parentWorkspace","setCommentText","setStyle","setTooltip","setHelpUrl","arguments_","argumentVarModels_","setStatements_","statementConnection_","hasStatements","hasStatements_","appendStatementInput","getInput","moveInputBefore","removeInput","updateParams_","paramString","length","join","Events","disable","setFieldValue","enable","mutationToDom","opt_paramIds","container","utils","xml","createElement","setAttribute","getFieldValue","i","parameter","argModel","name","getId","paramIds_","appendChild","domToMutation","xmlElement","childNode","childNodes","nodeName","toLowerCase","varName","getAttribute","varId","push","variable","Variables","getOrCreateVariablePackage","console","log","mutateCallers","decompose","containerBlockNode","statementNode","node","argBlockNode","fieldNode","argumentName","createTextNode","nextNode","containerBlock","Xml","domToBlock","type","compose","paramBlock","getInputTargetBlock","getVariable","id","nextConnection","targetBlock","reconnect","stackConnection","connection","targetConnection","stackBlock","unplug","bumpNeighbours","getProcedureDef","getVars","getVarModels","renameVarById","oldId","newId","oldVariable","getVariableById","oldName","newVar","change","displayRenamedVar_","updateVarName","newName","mutator","isVisible","blocks","workspace_","getAllBlocks","block","Names","equals","customContextMenu","isInFlyout","option","enabled","text","replace","xmlMutation","xmlArg","xmlBlock","callType_","callback","ContextMenu","callbackFactory","isCollapsed","argOption","argVar","argXmlField","generateVariableFieldDom","argXmlBlock","appendValueInput","setAlign","ALIGN_RIGHT","FieldCheckbox","contextMenu","field","DEFAULT_ARG","validator_","oldShowEditorFn_","showEditor_","newShowEditorFn","createdVariables_","setPreviousStatement","setNextStatement","onFinishEditing_","deleteIntermediateVars_","sourceBlock","getSourceBlock","outerWs","findParentWs","targetWorkspace","caselessName","otherVar","model","renameVariableById","createVariable","newText","deleteVariableById","quarkConnections_","quarkIds_","previousEnabledState_","getProcedureCall","renameProcedure","baseMsg","outputConnection","setProcedureParameters_","paramNames","paramIds","defBlock","getDefinition","mutatorOpen","RangeError","setCollapsed","savedRendered","rendered","input","indexOf","disconnect","concat","updateShape_","quarkId","render","getField","setValue","FieldLabel","topRow","removeField","args","onchange","event","isFlyout","recordUndo","BLOCK_CREATE","ids","def","defType_","JSON","stringify","setGroup","group","xy","getRelativeToSurfaceXY","x","SNAP_RADIUS","RTL","y","mutation","domToWorkspace","BLOCK_DELETE","dispose","CHANGE","element","blockId","oldGroup","getGroup","newValue","isEnabled","setEnabled","isMovable","centerOnBlock","select","setOutput","setCheck","setInputsInline","hasReturnValue_","value","isDragging","legal","FUNCTION_TYPES","getSurroundParent","setWarningText","getInheritedDisabled"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Procedure blocks for Blockly.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Blocks.procedures');\n\ngoog.require('Blockly');\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.Comment');\ngoog.require('Blockly.FieldCheckbox');\ngoog.require('Blockly.FieldLabel');\ngoog.require('Blockly.FieldTextInput');\ngoog.require('Blockly.Mutator');\ngoog.require('Blockly.Warning');\n\n\nBlockly.Blocks['procedures_defnoreturn'] = {\n  /**\n   * Block for defining a procedure with no return value.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    var nameField = new Blockly.FieldTextInput('',\n        Blockly.Procedures.rename);\n    nameField.setSpellcheck(false);\n    this.appendDummyInput()\n        .appendField(Blockly.Msg['PROCEDURES_DEFNORETURN_TITLE'])\n        .appendField(nameField, 'NAME')\n        .appendField('', 'PARAMS');\n    this.setMutator(new Blockly.Mutator(['procedures_mutatorarg']));\n    if ((this.workspace.options.comments ||\n         (this.workspace.options.parentWorkspace &&\n          this.workspace.options.parentWorkspace.options.comments)) &&\n        Blockly.Msg['PROCEDURES_DEFNORETURN_COMMENT']) {\n      this.setCommentText(Blockly.Msg['PROCEDURES_DEFNORETURN_COMMENT']);\n    }\n    this.setStyle('procedure_blocks');\n    this.setTooltip(Blockly.Msg['PROCEDURES_DEFNORETURN_TOOLTIP']);\n    this.setHelpUrl(Blockly.Msg['PROCEDURES_DEFNORETURN_HELPURL']);\n    this.arguments_ = [];\n    this.argumentVarModels_ = [];\n    this.setStatements_(true);\n    this.statementConnection_ = null;\n  },\n  /**\n   * Add or remove the statement block from this function definition.\n   * @param {boolean} hasStatements True if a statement block is needed.\n   * @this {Blockly.Block}\n   */\n  setStatements_: function(hasStatements) {\n    if (this.hasStatements_ === hasStatements) {\n      return;\n    }\n    if (hasStatements) {\n      this.appendStatementInput('STACK')\n          .appendField(Blockly.Msg['PROCEDURES_DEFNORETURN_DO']);\n      if (this.getInput('RETURN')) {\n        this.moveInputBefore('STACK', 'RETURN');\n      }\n    } else {\n      this.removeInput('STACK', true);\n    }\n    this.hasStatements_ = hasStatements;\n  },\n  /**\n   * Update the display of parameters for this procedure definition block.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateParams_: function() {\n\n    // Merge the arguments into a human-readable list.\n    var paramString = '';\n    if (this.arguments_.length) {\n      paramString = Blockly.Msg['PROCEDURES_BEFORE_PARAMS'] +\n          ' ' + this.arguments_.join(', ');\n    }\n    // The params field is deterministic based on the mutation,\n    // no need to fire a change event.\n    Blockly.Events.disable();\n    try {\n      this.setFieldValue(paramString, 'PARAMS');\n    } finally {\n      Blockly.Events.enable();\n    }\n  },\n  /**\n   * Create XML to represent the argument inputs.\n   * @param {boolean=} opt_paramIds If true include the IDs of the parameter\n   *     quarks.  Used by Blockly.Procedures.mutateCallers for reconnection.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function(opt_paramIds) {\n    var container = Blockly.utils.xml.createElement('mutation');\n    if (opt_paramIds) {\n      container.setAttribute('name', this.getFieldValue('NAME'));\n    }\n    for (var i = 0; i < this.argumentVarModels_.length; i++) {\n      var parameter = Blockly.utils.xml.createElement('arg');\n      var argModel = this.argumentVarModels_[i];\n      parameter.setAttribute('name', argModel.name);\n      parameter.setAttribute('varid', argModel.getId());\n      if (opt_paramIds && this.paramIds_) {\n        parameter.setAttribute('paramId', this.paramIds_[i]);\n      }\n      container.appendChild(parameter);\n    }\n\n    // Save whether the statement input is visible.\n    if (!this.hasStatements_) {\n      container.setAttribute('statements', 'false');\n    }\n    return container;\n  },\n  /**\n   * Parse XML to restore the argument inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    this.arguments_ = [];\n    this.argumentVarModels_ = [];\n    for (var i = 0, childNode; (childNode = xmlElement.childNodes[i]); i++) {\n      if (childNode.nodeName.toLowerCase() == 'arg') {\n        var varName = childNode.getAttribute('name');\n        var varId = childNode.getAttribute('varid') || childNode.getAttribute('varId');\n        this.arguments_.push(varName);\n        var variable = Blockly.Variables.getOrCreateVariablePackage(\n            this.workspace, varId, varName, '');\n        if (variable != null) {\n          this.argumentVarModels_.push(variable);\n        } else {\n          console.log('Failed to create a variable with name ' + varName + ', ignoring.');\n        }\n      }\n    }\n    this.updateParams_();\n    Blockly.Procedures.mutateCallers(this);\n\n    // Show or hide the statement input.\n    this.setStatements_(xmlElement.getAttribute('statements') !== 'false');\n  },\n  /**\n   * Populate the mutator's dialog with this block's components.\n   * @param {!Blockly.Workspace} workspace Mutator's workspace.\n   * @return {!Blockly.Block} Root block in mutator.\n   * @this {Blockly.Block}\n   */\n  decompose: function(workspace) {\n    /*\n     * Creates the following XML:\n     * <block type=\"procedures_mutatorcontainer\">\n     *   <statement name=\"STACK\">\n     *     <block type=\"procedures_mutatorarg\">\n     *       <field name=\"NAME\">arg1_name</field>\n     *       <next>etc...</next>\n     *     </block>\n     *   </statement>\n     * </block>\n     */\n\n    var containerBlockNode = Blockly.utils.xml.createElement('block');\n    containerBlockNode.setAttribute('type', 'procedures_mutatorcontainer');\n    var statementNode = Blockly.utils.xml.createElement('statement');\n    statementNode.setAttribute('name', 'STACK');\n    containerBlockNode.appendChild(statementNode);\n\n    var node = statementNode;\n    for (var i = 0; i < this.arguments_.length; i++) {\n      var argBlockNode = Blockly.utils.xml.createElement('block');\n      argBlockNode.setAttribute('type', 'procedures_mutatorarg');\n      var fieldNode = Blockly.utils.xml.createElement('field');\n      fieldNode.setAttribute('name', 'NAME');\n      var argumentName = Blockly.utils.xml.createTextNode(this.arguments_[i]);\n      fieldNode.appendChild(argumentName);\n      argBlockNode.appendChild(fieldNode);\n      var nextNode = Blockly.utils.xml.createElement('next');\n      argBlockNode.appendChild(nextNode);\n\n      node.appendChild(argBlockNode);\n      node = nextNode;\n    }\n\n    var containerBlock = Blockly.Xml.domToBlock(containerBlockNode, workspace);\n\n    if (this.type == 'procedures_defreturn') {\n      containerBlock.setFieldValue(this.hasStatements_, 'STATEMENTS');\n    } else {\n      containerBlock.removeInput('STATEMENT_INPUT');\n    }\n\n    // Initialize procedure's callers with blank IDs.\n    Blockly.Procedures.mutateCallers(this);\n    return containerBlock;\n  },\n  /**\n   * Reconfigure this block based on the mutator dialog's components.\n   * @param {!Blockly.Block} containerBlock Root block in mutator.\n   * @this {Blockly.Block}\n   */\n  compose: function(containerBlock) {\n    // Parameter list.\n    this.arguments_ = [];\n    this.paramIds_ = [];\n    this.argumentVarModels_ = [];\n    var paramBlock = containerBlock.getInputTargetBlock('STACK');\n    while (paramBlock) {\n      var varName = paramBlock.getFieldValue('NAME');\n      this.arguments_.push(varName);\n      var variable = this.workspace.getVariable(varName, '');\n      this.argumentVarModels_.push(variable);\n\n      this.paramIds_.push(paramBlock.id);\n      paramBlock = paramBlock.nextConnection &&\n          paramBlock.nextConnection.targetBlock();\n    }\n    this.updateParams_();\n    Blockly.Procedures.mutateCallers(this);\n\n    // Show/hide the statement input.\n    var hasStatements = containerBlock.getFieldValue('STATEMENTS');\n    if (hasStatements !== null) {\n      hasStatements = hasStatements == 'TRUE';\n      if (this.hasStatements_ != hasStatements) {\n        if (hasStatements) {\n          this.setStatements_(true);\n          // Restore the stack, if one was saved.\n          Blockly.Mutator.reconnect(this.statementConnection_, this, 'STACK');\n          this.statementConnection_ = null;\n        } else {\n          // Save the stack, then disconnect it.\n          var stackConnection = this.getInput('STACK').connection;\n          this.statementConnection_ = stackConnection.targetConnection;\n          if (this.statementConnection_) {\n            var stackBlock = stackConnection.targetBlock();\n            stackBlock.unplug();\n            stackBlock.bumpNeighbours();\n          }\n          this.setStatements_(false);\n        }\n      }\n    }\n  },\n  /**\n   * Return the signature of this procedure definition.\n   * @return {!Array} Tuple containing three elements:\n   *     - the name of the defined procedure,\n   *     - a list of all its arguments,\n   *     - that it DOES NOT have a return value.\n   * @this {Blockly.Block}\n   */\n  getProcedureDef: function() {\n    return [this.getFieldValue('NAME'), this.arguments_, false];\n  },\n  /**\n   * Return all variables referenced by this block.\n   * @return {!Array.<string>} List of variable names.\n   * @this {Blockly.Block}\n   */\n  getVars: function() {\n    return this.arguments_;\n  },\n  /**\n   * Return all variables referenced by this block.\n   * @return {!Array.<!Blockly.VariableModel>} List of variable models.\n   * @this {Blockly.Block}\n   */\n  getVarModels: function() {\n    return this.argumentVarModels_;\n  },\n  /**\n   * Notification that a variable is renaming.\n   * If the ID matches one of this block's variables, rename it.\n   * @param {string} oldId ID of variable to rename.\n   * @param {string} newId ID of new variable.  May be the same as oldId, but\n   *     with an updated name.  Guaranteed to be the same type as the old\n   *     variable.\n   * @override\n   * @this {Blockly.Block}\n   */\n  renameVarById: function(oldId, newId) {\n    var oldVariable = this.workspace.getVariableById(oldId);\n    if (oldVariable.type != '') {\n      // Procedure arguments always have the empty type.\n      return;\n    }\n    var oldName = oldVariable.name;\n    var newVar = this.workspace.getVariableById(newId);\n\n    var change = false;\n    for (var i = 0; i < this.argumentVarModels_.length; i++) {\n      if (this.argumentVarModels_[i].getId() == oldId) {\n        this.arguments_[i] = newVar.name;\n        this.argumentVarModels_[i] = newVar;\n        change = true;\n      }\n    }\n    if (change) {\n      this.displayRenamedVar_(oldName, newVar.name);\n      Blockly.Procedures.mutateCallers(this);\n    }\n  },\n  /**\n   * Notification that a variable is renaming but keeping the same ID.  If the\n   * variable is in use on this block, rerender to show the new name.\n   * @param {!Blockly.VariableModel} variable The variable being renamed.\n   * @package\n   * @override\n   * @this {Blockly.Block}\n   */\n  updateVarName: function(variable) {\n    var newName = variable.name;\n    var change = false;\n    for (var i = 0; i < this.argumentVarModels_.length; i++) {\n      if (this.argumentVarModels_[i].getId() == variable.getId()) {\n        var oldName = this.arguments_[i];\n        this.arguments_[i] = newName;\n        change = true;\n      }\n    }\n    if (change) {\n      this.displayRenamedVar_(oldName, newName);\n      Blockly.Procedures.mutateCallers(this);\n    }\n  },\n  /**\n   * Update the display to reflect a newly renamed argument.\n   * @param {string} oldName The old display name of the argument.\n   * @param {string} newName The new display name of the argument.\n   * @private\n   * @this {Blockly.Block}\n   */\n  displayRenamedVar_: function(oldName, newName) {\n    this.updateParams_();\n    // Update the mutator's variables if the mutator is open.\n    if (this.mutator && this.mutator.isVisible()) {\n      var blocks = this.mutator.workspace_.getAllBlocks(false);\n      for (var i = 0, block; (block = blocks[i]); i++) {\n        if (block.type == 'procedures_mutatorarg' &&\n            Blockly.Names.equals(oldName, block.getFieldValue('NAME'))) {\n          block.setFieldValue(newName, 'NAME');\n        }\n      }\n    }\n  },\n  /**\n   * Add custom menu options to this block's context menu.\n   * @param {!Array} options List of menu options to add to.\n   * @this {Blockly.Block}\n   */\n  customContextMenu: function(options) {\n    if (this.isInFlyout) {\n      return;\n    }\n    // Add option to create caller.\n    var option = {enabled: true};\n    var name = this.getFieldValue('NAME');\n    option.text = Blockly.Msg['PROCEDURES_CREATE_DO'].replace('%1', name);\n    var xmlMutation = Blockly.utils.xml.createElement('mutation');\n    xmlMutation.setAttribute('name', name);\n    for (var i = 0; i < this.arguments_.length; i++) {\n      var xmlArg = Blockly.utils.xml.createElement('arg');\n      xmlArg.setAttribute('name', this.arguments_[i]);\n      xmlMutation.appendChild(xmlArg);\n    }\n    var xmlBlock = Blockly.utils.xml.createElement('block');\n    xmlBlock.setAttribute('type', this.callType_);\n    xmlBlock.appendChild(xmlMutation);\n    option.callback = Blockly.ContextMenu.callbackFactory(this, xmlBlock);\n    options.push(option);\n\n    // Add options to create getters for each parameter.\n    if (!this.isCollapsed()) {\n      for (var i = 0; i < this.argumentVarModels_.length; i++) {\n        var argOption = {enabled: true};\n        var argVar = this.argumentVarModels_[i];\n        argOption.text = Blockly.Msg['VARIABLES_SET_CREATE_GET']\n            .replace('%1', argVar.name);\n\n        var argXmlField = Blockly.Variables.generateVariableFieldDom(argVar);\n        var argXmlBlock = Blockly.utils.xml.createElement('block');\n        argXmlBlock.setAttribute('type', 'variables_get');\n        argXmlBlock.appendChild(argXmlField);\n        argOption.callback =\n            Blockly.ContextMenu.callbackFactory(this, argXmlBlock);\n        options.push(argOption);\n      }\n    }\n  },\n  callType_: 'procedures_callnoreturn'\n};\n\nBlockly.Blocks['procedures_defreturn'] = {\n  /**\n   * Block for defining a procedure with a return value.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    var nameField = new Blockly.FieldTextInput('',\n        Blockly.Procedures.rename);\n    nameField.setSpellcheck(false);\n    this.appendDummyInput()\n        .appendField(Blockly.Msg['PROCEDURES_DEFRETURN_TITLE'])\n        .appendField(nameField, 'NAME')\n        .appendField('', 'PARAMS');\n    this.appendValueInput('RETURN')\n        .setAlign(Blockly.ALIGN_RIGHT)\n        .appendField(Blockly.Msg['PROCEDURES_DEFRETURN_RETURN']);\n    this.setMutator(new Blockly.Mutator(['procedures_mutatorarg']));\n    if ((this.workspace.options.comments ||\n         (this.workspace.options.parentWorkspace &&\n          this.workspace.options.parentWorkspace.options.comments)) &&\n        Blockly.Msg['PROCEDURES_DEFRETURN_COMMENT']) {\n      this.setCommentText(Blockly.Msg['PROCEDURES_DEFRETURN_COMMENT']);\n    }\n    this.setStyle('procedure_blocks');\n    this.setTooltip(Blockly.Msg['PROCEDURES_DEFRETURN_TOOLTIP']);\n    this.setHelpUrl(Blockly.Msg['PROCEDURES_DEFRETURN_HELPURL']);\n    this.arguments_ = [];\n    this.argumentVarModels_ = [];\n    this.setStatements_(true);\n    this.statementConnection_ = null;\n  },\n  setStatements_: Blockly.Blocks['procedures_defnoreturn'].setStatements_,\n  updateParams_: Blockly.Blocks['procedures_defnoreturn'].updateParams_,\n  mutationToDom: Blockly.Blocks['procedures_defnoreturn'].mutationToDom,\n  domToMutation: Blockly.Blocks['procedures_defnoreturn'].domToMutation,\n  decompose: Blockly.Blocks['procedures_defnoreturn'].decompose,\n  compose: Blockly.Blocks['procedures_defnoreturn'].compose,\n  /**\n   * Return the signature of this procedure definition.\n   * @return {!Array} Tuple containing three elements:\n   *     - the name of the defined procedure,\n   *     - a list of all its arguments,\n   *     - that it DOES have a return value.\n   * @this {Blockly.Block}\n   */\n  getProcedureDef: function() {\n    return [this.getFieldValue('NAME'), this.arguments_, true];\n  },\n  getVars: Blockly.Blocks['procedures_defnoreturn'].getVars,\n  getVarModels: Blockly.Blocks['procedures_defnoreturn'].getVarModels,\n  renameVarById: Blockly.Blocks['procedures_defnoreturn'].renameVarById,\n  updateVarName: Blockly.Blocks['procedures_defnoreturn'].updateVarName,\n  displayRenamedVar_: Blockly.Blocks['procedures_defnoreturn'].displayRenamedVar_,\n  customContextMenu: Blockly.Blocks['procedures_defnoreturn'].customContextMenu,\n  callType_: 'procedures_callreturn'\n};\n\nBlockly.Blocks['procedures_mutatorcontainer'] = {\n  /**\n   * Mutator block for procedure container.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.appendDummyInput()\n        .appendField(Blockly.Msg['PROCEDURES_MUTATORCONTAINER_TITLE']);\n    this.appendStatementInput('STACK');\n    this.appendDummyInput('STATEMENT_INPUT')\n        .appendField(Blockly.Msg['PROCEDURES_ALLOW_STATEMENTS'])\n        .appendField(new Blockly.FieldCheckbox('TRUE'), 'STATEMENTS');\n    this.setStyle('procedure_blocks');\n    this.setTooltip(Blockly.Msg['PROCEDURES_MUTATORCONTAINER_TOOLTIP']);\n    this.contextMenu = false;\n  },\n};\n\nBlockly.Blocks['procedures_mutatorarg'] = {\n  /**\n   * Mutator block for procedure argument.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    var field = new Blockly.FieldTextInput(\n        Blockly.Procedures.DEFAULT_ARG, this.validator_);\n    // Hack: override showEditor to do just a little bit more work.\n    // We don't have a good place to hook into the start of a text edit.\n    field.oldShowEditorFn_ = field.showEditor_;\n    var newShowEditorFn = function() {\n      this.createdVariables_ = [];\n      this.oldShowEditorFn_();\n    };\n    field.showEditor_ = newShowEditorFn;\n\n    this.appendDummyInput()\n        .appendField(Blockly.Msg['PROCEDURES_MUTATORARG_TITLE'])\n        .appendField(field, 'NAME');\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setStyle('procedure_blocks');\n    this.setTooltip(Blockly.Msg['PROCEDURES_MUTATORARG_TOOLTIP']);\n    this.contextMenu = false;\n\n    // Create the default variable when we drag the block in from the flyout.\n    // Have to do this after installing the field on the block.\n    field.onFinishEditing_ = this.deleteIntermediateVars_;\n    // Create an empty list so onFinishEditing_ has something to look at, even\n    // though the editor was never opened.\n    field.createdVariables_ = [];\n    field.onFinishEditing_('x');\n  },\n\n  /**\n   * Obtain a valid name for the procedure argument. Create a variable if\n   * necessary.\n   * Merge runs of whitespace.  Strip leading and trailing whitespace.\n   * Beyond this, all names are legal.\n   * @param {string} varName User-supplied name.\n   * @return {?string} Valid name, or null if a name was not specified.\n   * @private\n   * @this Blockly.FieldTextInput\n   */\n  validator_: function(varName) {\n    var sourceBlock = this.getSourceBlock();\n    var outerWs = Blockly.Mutator.findParentWs(sourceBlock.workspace);\n    varName = varName.replace(/[\\s\\xa0]+/g, ' ').replace(/^ | $/g, '');\n    if (!varName) {\n      return null;\n    }\n\n    // Prevents duplicate parameter names in functions\n    var workspace = sourceBlock.workspace.targetWorkspace ||\n        sourceBlock.workspace;\n    var blocks = workspace.getAllBlocks(false);\n    var caselessName = varName.toLowerCase();\n    for (var i = 0; i < blocks.length; i++) {\n      if (blocks[i].id == this.getSourceBlock().id) {\n        continue;\n      }\n      // Other blocks values may not be set yet when this is loaded.\n      var otherVar = blocks[i].getFieldValue('NAME');\n      if (otherVar && otherVar.toLowerCase() == caselessName) {\n        return null;\n      }\n    }\n\n    // Don't create variables for arg blocks that\n    // only exist in the mutator's flyout.\n    if (sourceBlock.isInFlyout) {\n      return varName;\n    }\n\n    var model = outerWs.getVariable(varName, '');\n    if (model && model.name != varName) {\n      // Rename the variable (case change)\n      outerWs.renameVariableById(model.getId(), varName);\n    }\n    if (!model) {\n      model = outerWs.createVariable(varName, '');\n      if (model && this.createdVariables_) {\n        this.createdVariables_.push(model);\n      }\n    }\n    return varName;\n  },\n\n  /**\n   * Called when focusing away from the text field.\n   * Deletes all variables that were created as the user typed their intended\n   * variable name.\n   * @param {string} newText The new variable name.\n   * @private\n   * @this Blockly.FieldTextInput\n   */\n  deleteIntermediateVars_: function(newText) {\n    var outerWs = Blockly.Mutator.findParentWs(this.getSourceBlock().workspace);\n    if (!outerWs) {\n      return;\n    }\n    for (var i = 0; i < this.createdVariables_.length; i++) {\n      var model = this.createdVariables_[i];\n      if (model.name != newText) {\n        outerWs.deleteVariableById(model.getId());\n      }\n    }\n  }\n};\n\nBlockly.Blocks['procedures_callnoreturn'] = {\n  /**\n   * Block for calling a procedure with no return value.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.appendDummyInput('TOPROW')\n        .appendField(this.id, 'NAME');\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setStyle('procedure_blocks');\n    // Tooltip is set in renameProcedure.\n    this.setHelpUrl(Blockly.Msg['PROCEDURES_CALLNORETURN_HELPURL']);\n    this.arguments_ = [];\n    this.argumentVarModels_ = [];\n    this.quarkConnections_ = {};\n    this.quarkIds_ = null;\n    this.previousEnabledState_ = true;\n  },\n\n  /**\n   * Returns the name of the procedure this block calls.\n   * @return {string} Procedure name.\n   * @this {Blockly.Block}\n   */\n  getProcedureCall: function() {\n    // The NAME field is guaranteed to exist, null will never be returned.\n    return /** @type {string} */ (this.getFieldValue('NAME'));\n  },\n  /**\n   * Notification that a procedure is renaming.\n   * If the name matches this block's procedure, rename it.\n   * @param {string} oldName Previous name of procedure.\n   * @param {string} newName Renamed procedure.\n   * @this {Blockly.Block}\n   */\n  renameProcedure: function(oldName, newName) {\n    if (Blockly.Names.equals(oldName, this.getProcedureCall())) {\n      this.setFieldValue(newName, 'NAME');\n      var baseMsg = this.outputConnection ?\n          Blockly.Msg['PROCEDURES_CALLRETURN_TOOLTIP'] :\n          Blockly.Msg['PROCEDURES_CALLNORETURN_TOOLTIP'];\n      this.setTooltip(baseMsg.replace('%1', newName));\n    }\n  },\n  /**\n   * Notification that the procedure's parameters have changed.\n   * @param {!Array.<string>} paramNames New param names, e.g. ['x', 'y', 'z'].\n   * @param {!Array.<string>} paramIds IDs of params (consistent for each\n   *     parameter through the life of a mutator, regardless of param renaming),\n   *     e.g. ['piua', 'f8b_', 'oi.o'].\n   * @private\n   * @this {Blockly.Block}\n   */\n  setProcedureParameters_: function(paramNames, paramIds) {\n    // Data structures:\n    // this.arguments = ['x', 'y']\n    //     Existing param names.\n    // this.quarkConnections_ {piua: null, f8b_: Blockly.Connection}\n    //     Look-up of paramIds to connections plugged into the call block.\n    // this.quarkIds_ = ['piua', 'f8b_']\n    //     Existing param IDs.\n    // Note that quarkConnections_ may include IDs that no longer exist, but\n    // which might reappear if a param is reattached in the mutator.\n    var defBlock = Blockly.Procedures.getDefinition(this.getProcedureCall(),\n        this.workspace);\n    var mutatorOpen = defBlock && defBlock.mutator &&\n        defBlock.mutator.isVisible();\n    if (!mutatorOpen) {\n      this.quarkConnections_ = {};\n      this.quarkIds_ = null;\n    }\n    if (!paramIds) {\n      // Reset the quarks (a mutator is about to open).\n      return;\n    }\n    // Test arguments (arrays of strings) for changes. '\\n' is not a valid\n    // argument name character, so it is a valid delimiter here.\n    if (paramNames.join('\\n') == this.arguments_.join('\\n')) {\n      // No change.\n      this.quarkIds_ = paramIds;\n      return;\n    }\n    if (paramIds.length != paramNames.length) {\n      throw RangeError('paramNames and paramIds must be the same length.');\n    }\n    this.setCollapsed(false);\n    if (!this.quarkIds_) {\n      // Initialize tracking for this block.\n      this.quarkConnections_ = {};\n      this.quarkIds_ = [];\n    }\n    // Switch off rendering while the block is rebuilt.\n    var savedRendered = this.rendered;\n    this.rendered = false;\n    // Update the quarkConnections_ with existing connections.\n    for (var i = 0; i < this.arguments_.length; i++) {\n      var input = this.getInput('ARG' + i);\n      if (input) {\n        var connection = input.connection.targetConnection;\n        this.quarkConnections_[this.quarkIds_[i]] = connection;\n        if (mutatorOpen && connection &&\n            paramIds.indexOf(this.quarkIds_[i]) == -1) {\n          // This connection should no longer be attached to this block.\n          connection.disconnect();\n          connection.getSourceBlock().bumpNeighbours();\n        }\n      }\n    }\n    // Rebuild the block's arguments.\n    this.arguments_ = [].concat(paramNames);\n    // And rebuild the argument model list.\n    this.argumentVarModels_ = [];\n    for (var i = 0; i < this.arguments_.length; i++) {\n      var variable = Blockly.Variables.getOrCreateVariablePackage(\n          this.workspace, null, this.arguments_[i], '');\n      this.argumentVarModels_.push(variable);\n    }\n\n    this.updateShape_();\n    this.quarkIds_ = paramIds;\n    // Reconnect any child blocks.\n    if (this.quarkIds_) {\n      for (var i = 0; i < this.arguments_.length; i++) {\n        var quarkId = this.quarkIds_[i];\n        if (quarkId in this.quarkConnections_) {\n          var connection = this.quarkConnections_[quarkId];\n          if (!Blockly.Mutator.reconnect(connection, this, 'ARG' + i)) {\n            // Block no longer exists or has been attached elsewhere.\n            delete this.quarkConnections_[quarkId];\n          }\n        }\n      }\n    }\n    // Restore rendering and show the changes.\n    this.rendered = savedRendered;\n    if (this.rendered) {\n      this.render();\n    }\n  },\n  /**\n   * Modify this block to have the correct number of arguments.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateShape_: function() {\n    for (var i = 0; i < this.arguments_.length; i++) {\n      var field = this.getField('ARGNAME' + i);\n      if (field) {\n        // Ensure argument name is up to date.\n        // The argument name field is deterministic based on the mutation,\n        // no need to fire a change event.\n        Blockly.Events.disable();\n        try {\n          field.setValue(this.arguments_[i]);\n        } finally {\n          Blockly.Events.enable();\n        }\n      } else {\n        // Add new input.\n        field = new Blockly.FieldLabel(this.arguments_[i]);\n        var input = this.appendValueInput('ARG' + i)\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(field, 'ARGNAME' + i);\n        input.init();\n      }\n    }\n    // Remove deleted inputs.\n    while (this.getInput('ARG' + i)) {\n      this.removeInput('ARG' + i);\n      i++;\n    }\n    // Add 'with:' if there are parameters, remove otherwise.\n    var topRow = this.getInput('TOPROW');\n    if (topRow) {\n      if (this.arguments_.length) {\n        if (!this.getField('WITH')) {\n          topRow.appendField(Blockly.Msg['PROCEDURES_CALL_BEFORE_PARAMS'], 'WITH');\n          topRow.init();\n        }\n      } else {\n        if (this.getField('WITH')) {\n          topRow.removeField('WITH');\n        }\n      }\n    }\n  },\n  /**\n   * Create XML to represent the (non-editable) name and arguments.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    container.setAttribute('name', this.getProcedureCall());\n    for (var i = 0; i < this.arguments_.length; i++) {\n      var parameter = Blockly.utils.xml.createElement('arg');\n      parameter.setAttribute('name', this.arguments_[i]);\n      container.appendChild(parameter);\n    }\n    return container;\n  },\n  /**\n   * Parse XML to restore the (non-editable) name and parameters.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    var name = xmlElement.getAttribute('name');\n    this.renameProcedure(this.getProcedureCall(), name);\n    var args = [];\n    var paramIds = [];\n    for (var i = 0, childNode; (childNode = xmlElement.childNodes[i]); i++) {\n      if (childNode.nodeName.toLowerCase() == 'arg') {\n        args.push(childNode.getAttribute('name'));\n        paramIds.push(childNode.getAttribute('paramId'));\n      }\n    }\n    this.setProcedureParameters_(args, paramIds);\n  },\n  /**\n   * Return all variables referenced by this block.\n   * @return {!Array.<string>} List of variable names.\n   * @this {Blockly.Block}\n   */\n  getVars: function() {\n    return this.arguments_;\n  },\n  /**\n   * Return all variables referenced by this block.\n   * @return {!Array.<!Blockly.VariableModel>} List of variable models.\n   * @this {Blockly.Block}\n   */\n  getVarModels: function() {\n    return this.argumentVarModels_;\n  },\n  /**\n   * Procedure calls cannot exist without the corresponding procedure\n   * definition.  Enforce this link whenever an event is fired.\n   * @param {!Blockly.Events.Abstract} event Change event.\n   * @this {Blockly.Block}\n   */\n  onchange: function(event) {\n    if (!this.workspace || this.workspace.isFlyout) {\n      // Block is deleted or is in a flyout.\n      return;\n    }\n    if (!event.recordUndo) {\n      // Events not generated by user. Skip handling.\n      return;\n    }\n    if (event.type == Blockly.Events.BLOCK_CREATE &&\n        event.ids.indexOf(this.id) != -1) {\n      // Look for the case where a procedure call was created (usually through\n      // paste) and there is no matching definition.  In this case, create\n      // an empty definition block with the correct signature.\n      var name = this.getProcedureCall();\n      var def = Blockly.Procedures.getDefinition(name, this.workspace);\n      if (def && (def.type != this.defType_ ||\n          JSON.stringify(def.getVars()) != JSON.stringify(this.arguments_))) {\n        // The signatures don't match.\n        def = null;\n      }\n      if (!def) {\n        Blockly.Events.setGroup(event.group);\n        /**\n         * Create matching definition block.\n         * <xml xmlns=\"https://developers.google.com/blockly/xml\">\n         *   <block type=\"procedures_defreturn\" x=\"10\" y=\"20\">\n         *     <mutation name=\"test\">\n         *       <arg name=\"x\"></arg>\n         *     </mutation>\n         *     <field name=\"NAME\">test</field>\n         *   </block>\n         * </xml>\n         */\n        var xml = Blockly.utils.xml.createElement('xml');\n        var block = Blockly.utils.xml.createElement('block');\n        block.setAttribute('type', this.defType_);\n        var xy = this.getRelativeToSurfaceXY();\n        var x = xy.x + Blockly.SNAP_RADIUS * (this.RTL ? -1 : 1);\n        var y = xy.y + Blockly.SNAP_RADIUS * 2;\n        block.setAttribute('x', x);\n        block.setAttribute('y', y);\n        var mutation = this.mutationToDom();\n        block.appendChild(mutation);\n        var field = Blockly.utils.xml.createElement('field');\n        field.setAttribute('name', 'NAME');\n        field.appendChild(Blockly.utils.xml.createTextNode(\n            this.getProcedureCall()));\n        block.appendChild(field);\n        xml.appendChild(block);\n        Blockly.Xml.domToWorkspace(xml, this.workspace);\n        Blockly.Events.setGroup(false);\n      }\n    } else if (event.type == Blockly.Events.BLOCK_DELETE) {\n      // Look for the case where a procedure definition has been deleted,\n      // leaving this block (a procedure call) orphaned.  In this case, delete\n      // the orphan.\n      var name = this.getProcedureCall();\n      var def = Blockly.Procedures.getDefinition(name, this.workspace);\n      if (!def) {\n        Blockly.Events.setGroup(event.group);\n        this.dispose(true);\n        Blockly.Events.setGroup(false);\n      }\n    } else if (event.type == Blockly.Events.CHANGE && event.element == 'disabled') {\n      var name = this.getProcedureCall();\n      var def = Blockly.Procedures.getDefinition(name, this.workspace);\n      if (def && def.id == event.blockId) {\n        // in most cases the old group should be ''\n        var oldGroup = Blockly.Events.getGroup();\n        if (oldGroup) {\n          // This should only be possible programmatically and may indicate a problem\n          // with event grouping. If you see this message please investigate. If the\n          // use ends up being valid we may need to reorder events in the undo stack.\n          console.log('Saw an existing group while responding to a definition change');\n        }\n        Blockly.Events.setGroup(event.group);\n        if (event.newValue) {\n          this.previousEnabledState_ = this.isEnabled();\n          this.setEnabled(false);\n        } else {\n          this.setEnabled(this.previousEnabledState_);\n        }\n        Blockly.Events.setGroup(oldGroup);\n      }\n    }\n  },\n  /**\n   * Add menu option to find the definition block for this call.\n   * @param {!Array} options List of menu options to add to.\n   * @this {Blockly.Block}\n   */\n  customContextMenu: function(options) {\n    if (!this.workspace.isMovable()) {\n      // If we center on the block and the workspace isn't movable we could\n      // loose blocks at the edges of the workspace.\n      return;\n    }\n\n    var option = {enabled: true};\n    option.text = Blockly.Msg['PROCEDURES_HIGHLIGHT_DEF'];\n    var name = this.getProcedureCall();\n    var workspace = this.workspace;\n    option.callback = function() {\n      var def = Blockly.Procedures.getDefinition(name, workspace);\n      if (def) {\n        workspace.centerOnBlock(def.id);\n        def.select();\n      }\n    };\n    options.push(option);\n  },\n  defType_: 'procedures_defnoreturn'\n};\n\nBlockly.Blocks['procedures_callreturn'] = {\n  /**\n   * Block for calling a procedure with a return value.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.appendDummyInput('TOPROW')\n        .appendField('', 'NAME');\n    this.setOutput(true);\n    this.setStyle('procedure_blocks');\n    // Tooltip is set in domToMutation.\n    this.setHelpUrl(Blockly.Msg['PROCEDURES_CALLRETURN_HELPURL']);\n    this.arguments_ = [];\n    this.quarkConnections_ = {};\n    this.quarkIds_ = null;\n    this.previousEnabledState_ = true;\n  },\n\n  getProcedureCall: Blockly.Blocks['procedures_callnoreturn'].getProcedureCall,\n  renameProcedure: Blockly.Blocks['procedures_callnoreturn'].renameProcedure,\n  setProcedureParameters_:\n      Blockly.Blocks['procedures_callnoreturn'].setProcedureParameters_,\n  updateShape_: Blockly.Blocks['procedures_callnoreturn'].updateShape_,\n  mutationToDom: Blockly.Blocks['procedures_callnoreturn'].mutationToDom,\n  domToMutation: Blockly.Blocks['procedures_callnoreturn'].domToMutation,\n  getVars: Blockly.Blocks['procedures_callnoreturn'].getVars,\n  getVarModels: Blockly.Blocks['procedures_callnoreturn'].getVarModels,\n  onchange: Blockly.Blocks['procedures_callnoreturn'].onchange,\n  customContextMenu:\n      Blockly.Blocks['procedures_callnoreturn'].customContextMenu,\n  defType_: 'procedures_defreturn'\n};\n\nBlockly.Blocks['procedures_ifreturn'] = {\n  /**\n   * Block for conditionally returning a value from a procedure.\n   * @this {Blockly.Block}\n   */\n  init: function() {\n    this.appendValueInput('CONDITION')\n        .setCheck('Boolean')\n        .appendField(Blockly.Msg['CONTROLS_IF_MSG_IF']);\n    this.appendValueInput('VALUE')\n        .appendField(Blockly.Msg['PROCEDURES_DEFRETURN_RETURN']);\n    this.setInputsInline(true);\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setStyle('procedure_blocks');\n    this.setTooltip(Blockly.Msg['PROCEDURES_IFRETURN_TOOLTIP']);\n    this.setHelpUrl(Blockly.Msg['PROCEDURES_IFRETURN_HELPURL']);\n    this.hasReturnValue_ = true;\n  },\n  /**\n   * Create XML to represent whether this block has a return value.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    container.setAttribute('value', Number(this.hasReturnValue_));\n    return container;\n  },\n  /**\n   * Parse XML to restore whether this block has a return value.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    var value = xmlElement.getAttribute('value');\n    this.hasReturnValue_ = (value == 1);\n    if (!this.hasReturnValue_) {\n      this.removeInput('VALUE');\n      this.appendDummyInput('VALUE')\n          .appendField(Blockly.Msg['PROCEDURES_DEFRETURN_RETURN']);\n    }\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Add warning if this flow block is not nested inside a loop.\n   * @param {!Blockly.Events.Abstract} _e Change event.\n   * @this {Blockly.Block}\n   */\n  onchange: function(_e) {\n    if (!this.workspace.isDragging || this.workspace.isDragging()) {\n      return;  // Don't change state at the start of a drag.\n    }\n    var legal = false;\n    // Is the block nested in a procedure?\n    var block = this;\n    do {\n      if (this.FUNCTION_TYPES.indexOf(block.type) != -1) {\n        legal = true;\n        break;\n      }\n      block = block.getSurroundParent();\n    } while (block);\n    if (legal) {\n      // If needed, toggle whether this block has a return value.\n      if (block.type == 'procedures_defnoreturn' && this.hasReturnValue_) {\n        this.removeInput('VALUE');\n        this.appendDummyInput('VALUE')\n            .appendField(Blockly.Msg['PROCEDURES_DEFRETURN_RETURN']);\n        this.hasReturnValue_ = false;\n      } else if (block.type == 'procedures_defreturn' &&\n                 !this.hasReturnValue_) {\n        this.removeInput('VALUE');\n        this.appendValueInput('VALUE')\n            .appendField(Blockly.Msg['PROCEDURES_DEFRETURN_RETURN']);\n        this.hasReturnValue_ = true;\n      }\n      this.setWarningText(null);\n      if (!this.isInFlyout) {\n        this.setEnabled(true);\n      }\n    } else {\n      this.setWarningText(Blockly.Msg['PROCEDURES_IFRETURN_WARNING']);\n      if (!this.isInFlyout && !this.getInheritedDisabled()) {\n        this.setEnabled(false);\n      }\n    }\n  },\n  /**\n   * List of block types that are functions and thus do not need warnings.\n   * To add a new function type add this to your code:\n   * Blockly.Blocks['procedures_ifreturn'].FUNCTION_TYPES.push('custom_func');\n   */\n  FUNCTION_TYPES: ['procedures_defnoreturn', 'procedures_defreturn']\n};\n"],"file":"procedures.min.js"}