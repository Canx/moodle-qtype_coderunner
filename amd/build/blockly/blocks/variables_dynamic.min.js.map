{"version":3,"sources":["../../../src/blockly/blocks/variables_dynamic.js"],"names":["goog","provide","require","Blockly","Constants","VariablesDynamic","HUE","defineBlocksWithJsonArray","CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN","customContextMenu","options","isInFlyout","opposite_type","contextMenuMsg","id","getFieldValue","variableModel","workspace","getVariableById","varType","type","Msg","option","enabled","remainingCapacity","name","getField","getText","text","replace","xmlField","utils","xml","createElement","setAttribute","appendChild","createTextNode","xmlBlock","callback","ContextMenu","callbackFactory","push","renameOption","RENAME_VARIABLE","Variables","RENAME_OPTION_CALLBACK_FACTORY","deleteOption","DELETE_VARIABLE","DELETE_OPTION_CALLBACK_FACTORY","unshift","onchange","getVariable","outputConnection","setCheck","getInput","connection","block","variable","renameVariable","deleteVariableById","getId","refreshToolboxSelection","Extensions","registerMixin"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Variable blocks for Blockly.\n\n * This file is scraped to extract a .json file of block definitions. The array\n * passed to defineBlocksWithJsonArray(..) must be strict JSON: double quotes\n * only, no outside references, no functions, no trailing commas, etc. The one\n * exception is end-of-line comments, which the scraper will remove.\n * @author duzc2dtw@gmail.com (Du Tian Wei)\n */\n'use strict';\n\ngoog.provide('Blockly.Constants.VariablesDynamic');\n\ngoog.require('Blockly');\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.FieldLabel');\ngoog.require('Blockly.FieldVariable');\n\n\n/**\n * Unused constant for the common HSV hue for all blocks in this category.\n * @deprecated Use Blockly.Msg['VARIABLES_DYNAMIC_HUE']. (2018 April 5)\n */\nBlockly.Constants.VariablesDynamic.HUE = 310;\n\nBlockly.defineBlocksWithJsonArray([ // BEGIN JSON EXTRACT\n  // Block for variable getter.\n  {\n    \"type\": \"variables_get_dynamic\",\n    \"message0\": \"%1\",\n    \"args0\": [{\n      \"type\": \"field_variable\",\n      \"name\": \"VAR\",\n      \"variable\": \"%{BKY_VARIABLES_DEFAULT_NAME}\"\n    }],\n    \"output\": null,\n    \"style\": \"variable_dynamic_blocks\",\n    \"helpUrl\": \"%{BKY_VARIABLES_GET_HELPURL}\",\n    \"tooltip\": \"%{BKY_VARIABLES_GET_TOOLTIP}\",\n    \"extensions\": [\"contextMenu_variableDynamicSetterGetter\"]\n  },\n  // Block for variable setter.\n  {\n    \"type\": \"variables_set_dynamic\",\n    \"message0\": \"%{BKY_VARIABLES_SET}\",\n    \"args0\": [{\n      \"type\": \"field_variable\",\n      \"name\": \"VAR\",\n      \"variable\": \"%{BKY_VARIABLES_DEFAULT_NAME}\"\n    },\n    {\n      \"type\": \"input_value\",\n      \"name\": \"VALUE\"\n    }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"variable_dynamic_blocks\",\n    \"tooltip\": \"%{BKY_VARIABLES_SET_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_VARIABLES_SET_HELPURL}\",\n    \"extensions\": [\"contextMenu_variableDynamicSetterGetter\"]\n  }\n]); // END JSON EXTRACT (Do not delete this comment.)\n\n/**\n * Mixin to add context menu items to create getter/setter blocks for this\n * setter/getter.\n * Used by blocks 'variables_set_dynamic' and 'variables_get_dynamic'.\n * @mixin\n * @augments Blockly.Block\n * @package\n * @readonly\n */\nBlockly.Constants.VariablesDynamic.CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN = {\n  /**\n   * Add menu option to create getter/setter block for this setter/getter.\n   * @param {!Array} options List of menu options to add to.\n   * @this {Blockly.Block}\n   */\n  customContextMenu: function(options) {\n    // Getter blocks have the option to create a setter block, and vice versa.\n    if (!this.isInFlyout) {\n      var opposite_type;\n      var contextMenuMsg;\n      var id = this.getFieldValue('VAR');\n      var variableModel = this.workspace.getVariableById(id);\n      var varType = variableModel.type;\n      if (this.type == 'variables_get_dynamic') {\n        opposite_type = 'variables_set_dynamic';\n        contextMenuMsg = Blockly.Msg['VARIABLES_GET_CREATE_SET'];\n      } else {\n        opposite_type = 'variables_get_dynamic';\n        contextMenuMsg = Blockly.Msg['VARIABLES_SET_CREATE_GET'];\n      }\n\n      var option = {enabled: this.workspace.remainingCapacity() > 0};\n      var name = this.getField('VAR').getText();\n      option.text = contextMenuMsg.replace('%1', name);\n      var xmlField = Blockly.utils.xml.createElement('field');\n      xmlField.setAttribute('name', 'VAR');\n      xmlField.setAttribute('variabletype', varType);\n      xmlField.appendChild(Blockly.utils.xml.createTextNode(name));\n      var xmlBlock = Blockly.utils.xml.createElement('block');\n      xmlBlock.setAttribute('type', opposite_type);\n      xmlBlock.appendChild(xmlField);\n      option.callback = Blockly.ContextMenu.callbackFactory(this, xmlBlock);\n      options.push(option);\n    } else {\n      if (this.type == 'variables_get_dynamic' ||\n       this.type == 'variables_get_reporter_dynamic') {\n        var renameOption = {\n          text: Blockly.Msg.RENAME_VARIABLE,\n          enabled: true,\n          callback: Blockly.Constants.Variables.RENAME_OPTION_CALLBACK_FACTORY(this)\n        };\n        var name = this.getField('VAR').getText();\n        var deleteOption = {\n          text: Blockly.Msg.DELETE_VARIABLE.replace('%1', name),\n          enabled: true,\n          callback: Blockly.Constants.Variables.DELETE_OPTION_CALLBACK_FACTORY(this)\n        };\n        options.unshift(renameOption);\n        options.unshift(deleteOption);\n      }\n    }\n  },\n  /**\n   * Called whenever anything on the workspace changes.\n   * Set the connection type for this block.\n   * @param {!Blockly.Events.Abstract} _e Change event.\n   * @this {Blockly.Block}\n   */\n  onchange: function(_e) {\n    var id = this.getFieldValue('VAR');\n    var variableModel = Blockly.Variables.getVariable(this.workspace, id);\n    if (this.type == 'variables_get_dynamic') {\n      this.outputConnection.setCheck(variableModel.type);\n    } else {\n      this.getInput('VALUE').connection.setCheck(variableModel.type);\n    }\n  }\n};\n\n/**\n  * Callback for rename variable dropdown menu option associated with a\n  * variable getter block.\n  * @param {!Blockly.Block} block The block with the variable to rename.\n  * @return {!function()} A function that renames the variable.\n  */\nBlockly.Constants.VariablesDynamic.RENAME_OPTION_CALLBACK_FACTORY = function(block) {\n  return function() {\n    var workspace = block.workspace;\n    var variable = block.getField('VAR').getVariable();\n    Blockly.Variables.renameVariable(workspace, variable);\n  };\n};\n\n/**\n * Callback for delete variable dropdown menu option associated with a\n * variable getter block.\n * @param {!Blockly.Block} block The block with the variable to delete.\n * @return {!function()} A function that deletes the variable.\n */\nBlockly.Constants.VariablesDynamic.DELETE_OPTION_CALLBACK_FACTORY = function(block) {\n  return function() {\n    var workspace = block.workspace;\n    var variable = block.getField('VAR').getVariable();\n    workspace.deleteVariableById(variable.getId());\n    workspace.refreshToolboxSelection();\n  };\n};\n\nBlockly.Extensions.registerMixin('contextMenu_variableDynamicSetterGetter',\n    Blockly.Constants.VariablesDynamic.CUSTOM_CONTEXT_MENU_VARIABLE_GETTER_SETTER_MIXIN);\n"],"file":"variables_dynamic.min.js"}