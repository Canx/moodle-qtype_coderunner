{"version":3,"sources":["../../../src/blockly/blocks/math.js"],"names":["goog","provide","require","Blockly","Constants","Math","HUE","defineBlocksWithJsonArray","TOOLTIPS_BY_OP","Extensions","register","buildTooltipForDropdown","IS_DIVISIBLEBY_MUTATOR_MIXIN","mutationToDom","container","utils","xml","createElement","divisorInput","getFieldValue","setAttribute","domToMutation","xmlElement","getAttribute","updateShape_","inputExists","getInput","appendValueInput","setCheck","removeInput","IS_DIVISIBLE_MUTATOR_EXTENSION","getField","setValidator","option","getSourceBlock","registerMutator","buildTooltipWithFieldText","LIST_MODES_MUTATOR_MIXIN","updateType_","newOp","outputConnection","LIST_MODES_MUTATOR_EXTENSION","bind"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Math blocks for Blockly.\n *\n * This file is scraped to extract a .json file of block definitions. The array\n * passed to defineBlocksWithJsonArray(..) must be strict JSON: double quotes\n * only, no outside references, no functions, no trailing commas, etc. The one\n * exception is end-of-line comments, which the scraper will remove.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Blocks.math');  // Deprecated\ngoog.provide('Blockly.Constants.Math');\n\ngoog.require('Blockly');\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.FieldDropdown');\ngoog.require('Blockly.FieldLabel');\ngoog.require('Blockly.FieldNumber');\ngoog.require('Blockly.FieldVariable');\n\n\n/**\n * Unused constant for the common HSV hue for all blocks in this category.\n * @deprecated Use Blockly.Msg['MATH_HUE']. (2018 April 5)\n */\nBlockly.Constants.Math.HUE = 230;\n\nBlockly.defineBlocksWithJsonArray([  // BEGIN JSON EXTRACT\n  // Block for numeric value.\n  {\n    \"type\": \"math_number\",\n    \"message0\": \"%1\",\n    \"args0\": [{\n      \"type\": \"field_number\",\n      \"name\": \"NUM\",\n      \"value\": 0\n    }],\n    \"output\": \"Number\",\n    \"helpUrl\": \"%{BKY_MATH_NUMBER_HELPURL}\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_NUMBER_TOOLTIP}\",\n    \"extensions\": [\"parent_tooltip_when_inline\"]\n  },\n\n  // Block for basic arithmetic operator.\n  {\n    \"type\": \"math_arithmetic\",\n    \"message0\": \"%1 %2 %3\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"A\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_MATH_ADDITION_SYMBOL}\", \"ADD\"],\n          [\"%{BKY_MATH_SUBTRACTION_SYMBOL}\", \"MINUS\"],\n          [\"%{BKY_MATH_MULTIPLICATION_SYMBOL}\", \"MULTIPLY\"],\n          [\"%{BKY_MATH_DIVISION_SYMBOL}\", \"DIVIDE\"],\n          [\"%{BKY_MATH_POWER_SYMBOL}\", \"POWER\"]\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"B\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"inputsInline\": true,\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_ARITHMETIC_HELPURL}\",\n    \"extensions\": [\"math_op_tooltip\"]\n  },\n\n  // Block for advanced math operators with single operand.\n  {\n    \"type\": \"math_single\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_MATH_SINGLE_OP_ROOT}\", 'ROOT'],\n          [\"%{BKY_MATH_SINGLE_OP_ABSOLUTE}\", 'ABS'],\n          ['-', 'NEG'],\n          ['ln', 'LN'],\n          ['log10', 'LOG10'],\n          ['e^', 'EXP'],\n          ['10^', 'POW10']\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"NUM\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_SINGLE_HELPURL}\",\n    \"extensions\": [\"math_op_tooltip\"]\n  },\n\n  // Block for trigonometry operators.\n  {\n    \"type\": \"math_trig\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_MATH_TRIG_SIN}\", \"SIN\"],\n          [\"%{BKY_MATH_TRIG_COS}\", \"COS\"],\n          [\"%{BKY_MATH_TRIG_TAN}\", \"TAN\"],\n          [\"%{BKY_MATH_TRIG_ASIN}\", \"ASIN\"],\n          [\"%{BKY_MATH_TRIG_ACOS}\", \"ACOS\"],\n          [\"%{BKY_MATH_TRIG_ATAN}\", \"ATAN\"]\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"NUM\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_TRIG_HELPURL}\",\n    \"extensions\": [\"math_op_tooltip\"]\n  },\n\n  // Block for constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  {\n    \"type\": \"math_constant\",\n    \"message0\": \"%1\",\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"CONSTANT\",\n        \"options\": [\n          [\"\\u03c0\", \"PI\"],\n          [\"e\", \"E\"],\n          [\"\\u03c6\", \"GOLDEN_RATIO\"],\n          [\"sqrt(2)\", \"SQRT2\"],\n          [\"sqrt(\\u00bd)\", \"SQRT1_2\"],\n          [\"\\u221e\", \"INFINITY\"]\n        ]\n      }\n    ],\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_CONSTANT_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_MATH_CONSTANT_HELPURL}\"\n  },\n\n  // Block for checking if a number is even, odd, prime, whole, positive,\n  // negative or if it is divisible by certain number.\n  {\n    \"type\": \"math_number_property\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"NUMBER_TO_CHECK\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"PROPERTY\",\n        \"options\": [\n          [\"%{BKY_MATH_IS_EVEN}\", \"EVEN\"],\n          [\"%{BKY_MATH_IS_ODD}\", \"ODD\"],\n          [\"%{BKY_MATH_IS_PRIME}\", \"PRIME\"],\n          [\"%{BKY_MATH_IS_WHOLE}\", \"WHOLE\"],\n          [\"%{BKY_MATH_IS_POSITIVE}\", \"POSITIVE\"],\n          [\"%{BKY_MATH_IS_NEGATIVE}\", \"NEGATIVE\"],\n          [\"%{BKY_MATH_IS_DIVISIBLE_BY}\", \"DIVISIBLE_BY\"]\n        ]\n      }\n    ],\n    \"inputsInline\": true,\n    \"output\": \"Boolean\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_IS_TOOLTIP}\",\n    \"mutator\": \"math_is_divisibleby_mutator\"\n  },\n\n  // Block for adding to a variable in place.\n  {\n    \"type\": \"math_change\",\n    \"message0\": \"%{BKY_MATH_CHANGE_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"field_variable\",\n        \"name\": \"VAR\",\n        \"variable\": \"%{BKY_MATH_CHANGE_TITLE_ITEM}\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"DELTA\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"variable_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_CHANGE_HELPURL}\",\n    \"extensions\": [\"math_change_tooltip\"]\n  },\n\n  // Block for rounding functions.\n  {\n    \"type\": \"math_round\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_MATH_ROUND_OPERATOR_ROUND}\", \"ROUND\"],\n          [\"%{BKY_MATH_ROUND_OPERATOR_ROUNDUP}\", \"ROUNDUP\"],\n          [\"%{BKY_MATH_ROUND_OPERATOR_ROUNDDOWN}\", \"ROUNDDOWN\"]\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"NUM\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_ROUND_HELPURL}\",\n    \"tooltip\": \"%{BKY_MATH_ROUND_TOOLTIP}\"\n  },\n\n  // Block for evaluating a list of numbers to return sum, average, min, max,\n  // etc.  Some functions also work on text (min, max, mode, median).\n  {\n    \"type\": \"math_on_list\",\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n      {\n        \"type\": \"field_dropdown\",\n        \"name\": \"OP\",\n        \"options\": [\n          [\"%{BKY_MATH_ONLIST_OPERATOR_SUM}\", \"SUM\"],\n          [\"%{BKY_MATH_ONLIST_OPERATOR_MIN}\", \"MIN\"],\n          [\"%{BKY_MATH_ONLIST_OPERATOR_MAX}\", \"MAX\"],\n          [\"%{BKY_MATH_ONLIST_OPERATOR_AVERAGE}\", \"AVERAGE\"],\n          [\"%{BKY_MATH_ONLIST_OPERATOR_MEDIAN}\", \"MEDIAN\"],\n          [\"%{BKY_MATH_ONLIST_OPERATOR_MODE}\", \"MODE\"],\n          [\"%{BKY_MATH_ONLIST_OPERATOR_STD_DEV}\", \"STD_DEV\"],\n          [\"%{BKY_MATH_ONLIST_OPERATOR_RANDOM}\", \"RANDOM\"]\n        ]\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"LIST\",\n        \"check\": \"Array\"\n      }\n    ],\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"helpUrl\": \"%{BKY_MATH_ONLIST_HELPURL}\",\n    \"mutator\": \"math_modes_of_list_mutator\",\n    \"extensions\": [\"math_op_tooltip\"]\n  },\n\n  // Block for remainder of a division.\n  {\n    \"type\": \"math_modulo\",\n    \"message0\": \"%{BKY_MATH_MODULO_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"DIVIDEND\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"DIVISOR\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"inputsInline\": true,\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_MODULO_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_MATH_MODULO_HELPURL}\"\n  },\n\n  // Block for constraining a number between two limits.\n  {\n    \"type\": \"math_constrain\",\n    \"message0\": \"%{BKY_MATH_CONSTRAIN_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"VALUE\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"LOW\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"HIGH\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"inputsInline\": true,\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_CONSTRAIN_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_MATH_CONSTRAIN_HELPURL}\"\n  },\n\n  // Block for random integer between [X] and [Y].\n  {\n    \"type\": \"math_random_int\",\n    \"message0\": \"%{BKY_MATH_RANDOM_INT_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"FROM\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"TO\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"inputsInline\": true,\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_RANDOM_INT_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_MATH_RANDOM_INT_HELPURL}\"\n  },\n\n  // Block for random integer between [X] and [Y].\n  {\n    \"type\": \"math_random_float\",\n    \"message0\": \"%{BKY_MATH_RANDOM_FLOAT_TITLE_RANDOM}\",\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_RANDOM_FLOAT_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_MATH_RANDOM_FLOAT_HELPURL}\"\n  },\n\n  // Block for calculating atan2 of [X] and [Y].\n  {\n    \"type\": \"math_atan2\",\n    \"message0\": \"%{BKY_MATH_ATAN2_TITLE}\",\n    \"args0\": [\n      {\n        \"type\": \"input_value\",\n        \"name\": \"X\",\n        \"check\": \"Number\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"Y\",\n        \"check\": \"Number\"\n      }\n    ],\n    \"inputsInline\": true,\n    \"output\": \"Number\",\n    \"style\": \"math_blocks\",\n    \"tooltip\": \"%{BKY_MATH_ATAN2_TOOLTIP}\",\n    \"helpUrl\": \"%{BKY_MATH_ATAN2_HELPURL}\"\n  }\n]);  // END JSON EXTRACT (Do not delete this comment.)\n\n/**\n * Mapping of math block OP value to tooltip message for blocks\n * math_arithmetic, math_simple, math_trig, and math_on_lists.\n * @see {Blockly.Extensions#buildTooltipForDropdown}\n * @package\n * @readonly\n */\nBlockly.Constants.Math.TOOLTIPS_BY_OP = {\n  // math_arithmetic\n  'ADD': '%{BKY_MATH_ARITHMETIC_TOOLTIP_ADD}',\n  'MINUS': '%{BKY_MATH_ARITHMETIC_TOOLTIP_MINUS}',\n  'MULTIPLY': '%{BKY_MATH_ARITHMETIC_TOOLTIP_MULTIPLY}',\n  'DIVIDE': '%{BKY_MATH_ARITHMETIC_TOOLTIP_DIVIDE}',\n  'POWER': '%{BKY_MATH_ARITHMETIC_TOOLTIP_POWER}',\n\n  // math_simple\n  'ROOT': '%{BKY_MATH_SINGLE_TOOLTIP_ROOT}',\n  'ABS': '%{BKY_MATH_SINGLE_TOOLTIP_ABS}',\n  'NEG': '%{BKY_MATH_SINGLE_TOOLTIP_NEG}',\n  'LN': '%{BKY_MATH_SINGLE_TOOLTIP_LN}',\n  'LOG10': '%{BKY_MATH_SINGLE_TOOLTIP_LOG10}',\n  'EXP': '%{BKY_MATH_SINGLE_TOOLTIP_EXP}',\n  'POW10': '%{BKY_MATH_SINGLE_TOOLTIP_POW10}',\n\n  // math_trig\n  'SIN': '%{BKY_MATH_TRIG_TOOLTIP_SIN}',\n  'COS': '%{BKY_MATH_TRIG_TOOLTIP_COS}',\n  'TAN': '%{BKY_MATH_TRIG_TOOLTIP_TAN}',\n  'ASIN': '%{BKY_MATH_TRIG_TOOLTIP_ASIN}',\n  'ACOS': '%{BKY_MATH_TRIG_TOOLTIP_ACOS}',\n  'ATAN': '%{BKY_MATH_TRIG_TOOLTIP_ATAN}',\n\n  // math_on_lists\n  'SUM': '%{BKY_MATH_ONLIST_TOOLTIP_SUM}',\n  'MIN': '%{BKY_MATH_ONLIST_TOOLTIP_MIN}',\n  'MAX': '%{BKY_MATH_ONLIST_TOOLTIP_MAX}',\n  'AVERAGE': '%{BKY_MATH_ONLIST_TOOLTIP_AVERAGE}',\n  'MEDIAN': '%{BKY_MATH_ONLIST_TOOLTIP_MEDIAN}',\n  'MODE': '%{BKY_MATH_ONLIST_TOOLTIP_MODE}',\n  'STD_DEV': '%{BKY_MATH_ONLIST_TOOLTIP_STD_DEV}',\n  'RANDOM': '%{BKY_MATH_ONLIST_TOOLTIP_RANDOM}'\n};\n\nBlockly.Extensions.register('math_op_tooltip',\n    Blockly.Extensions.buildTooltipForDropdown(\n        'OP', Blockly.Constants.Math.TOOLTIPS_BY_OP));\n\n\n/**\n * Mixin for mutator functions in the 'math_is_divisibleby_mutator'\n * extension.\n * @mixin\n * @augments Blockly.Block\n * @package\n */\nBlockly.Constants.Math.IS_DIVISIBLEBY_MUTATOR_MIXIN = {\n  /**\n   * Create XML to represent whether the 'divisorInput' should be present.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    var divisorInput = (this.getFieldValue('PROPERTY') == 'DIVISIBLE_BY');\n    container.setAttribute('divisor_input', divisorInput);\n    return container;\n  },\n  /**\n   * Parse XML to restore the 'divisorInput'.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    var divisorInput = (xmlElement.getAttribute('divisor_input') == 'true');\n    this.updateShape_(divisorInput);\n  },\n  /**\n   * Modify this block to have (or not have) an input for 'is divisible by'.\n   * @param {boolean} divisorInput True if this block has a divisor input.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateShape_: function(divisorInput) {\n    // Add or remove a Value Input.\n    var inputExists = this.getInput('DIVISOR');\n    if (divisorInput) {\n      if (!inputExists) {\n        this.appendValueInput('DIVISOR')\n            .setCheck('Number');\n      }\n    } else if (inputExists) {\n      this.removeInput('DIVISOR');\n    }\n  }\n};\n\n/**\n * 'math_is_divisibleby_mutator' extension to the 'math_property' block that\n * can update the block shape (add/remove divisor input) based on whether\n * property is \"divisible by\".\n * @this {Blockly.Block}\n * @package\n */\nBlockly.Constants.Math.IS_DIVISIBLE_MUTATOR_EXTENSION = function() {\n  this.getField('PROPERTY').setValidator(function(option) {\n    var divisorInput = (option == 'DIVISIBLE_BY');\n    this.getSourceBlock().updateShape_(divisorInput);\n  });\n};\n\nBlockly.Extensions.registerMutator('math_is_divisibleby_mutator',\n    Blockly.Constants.Math.IS_DIVISIBLEBY_MUTATOR_MIXIN,\n    Blockly.Constants.Math.IS_DIVISIBLE_MUTATOR_EXTENSION);\n\n// Update the tooltip of 'math_change' block to reference the variable.\nBlockly.Extensions.register('math_change_tooltip',\n    Blockly.Extensions.buildTooltipWithFieldText(\n        '%{BKY_MATH_CHANGE_TOOLTIP}', 'VAR'));\n\n/**\n * Mixin with mutator methods to support alternate output based if the\n * 'math_on_list' block uses the 'MODE' operation.\n * @mixin\n * @augments Blockly.Block\n * @package\n * @readonly\n */\nBlockly.Constants.Math.LIST_MODES_MUTATOR_MIXIN = {\n  /**\n   * Modify this block to have the correct output type.\n   * @param {string} newOp Either 'MODE' or some op than returns a number.\n   * @private\n   * @this {Blockly.Block}\n   */\n  updateType_: function(newOp) {\n    if (newOp == 'MODE') {\n      this.outputConnection.setCheck('Array');\n    } else {\n      this.outputConnection.setCheck('Number');\n    }\n  },\n  /**\n   * Create XML to represent the output type.\n   * @return {!Element} XML storage element.\n   * @this {Blockly.Block}\n   */\n  mutationToDom: function() {\n    var container = Blockly.utils.xml.createElement('mutation');\n    container.setAttribute('op', this.getFieldValue('OP'));\n    return container;\n  },\n  /**\n   * Parse XML to restore the output type.\n   * @param {!Element} xmlElement XML storage element.\n   * @this {Blockly.Block}\n   */\n  domToMutation: function(xmlElement) {\n    this.updateType_(xmlElement.getAttribute('op'));\n  }\n};\n\n/**\n * Extension to 'math_on_list' blocks that allows support of\n * modes operation (outputs a list of numbers).\n * @this {Blockly.Block}\n * @package\n */\nBlockly.Constants.Math.LIST_MODES_MUTATOR_EXTENSION = function() {\n  this.getField('OP').setValidator(function(newOp) {\n    this.updateType_(newOp);\n  }.bind(this));\n};\n\nBlockly.Extensions.registerMutator('math_modes_of_list_mutator',\n    Blockly.Constants.Math.LIST_MODES_MUTATOR_MIXIN,\n    Blockly.Constants.Math.LIST_MODES_MUTATOR_EXTENSION);\n"],"file":"math.min.js"}