{"version":3,"sources":["../../../../src/blockly/generators/dart/logic.js"],"names":["goog","provide","require","Blockly","Dart","block","n","code","branchCode","conditionCode","STATEMENT_PREFIX","injectId","valueToCode","ORDER_NONE","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","operator","getFieldValue","order","ORDER_EQUALITY","ORDER_RELATIONAL","argument0","argument1","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","defaultArgument","ORDER_UNARY_PREFIX","ORDER_ATOMIC","value_if","ORDER_CONDITIONAL","value_then","value_else"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for logic blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Dart.logic');\n\ngoog.require('Blockly.Dart');\n\n\nBlockly.Dart['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  if (Blockly.Dart.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode = Blockly.Dart.valueToCode(block, 'IF' + n,\n        Blockly.Dart.ORDER_NONE) || 'false';\n    branchCode = Blockly.Dart.statementToCode(block, 'DO' + n);\n    if (Blockly.Dart.STATEMENT_SUFFIX) {\n      branchCode = Blockly.Dart.prefixLines(\n          Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, block),\n          Blockly.Dart.INDENT) + branchCode;\n    }\n    code += (n > 0 ? 'else ' : '') +\n        'if (' + conditionCode + ') {\\n' + branchCode + '}';\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || Blockly.Dart.STATEMENT_SUFFIX) {\n    branchCode = Blockly.Dart.statementToCode(block, 'ELSE');\n    if (Blockly.Dart.STATEMENT_SUFFIX) {\n      branchCode = Blockly.Dart.prefixLines(\n          Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, block),\n          Blockly.Dart.INDENT) + branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nBlockly.Dart['controls_ifelse'] = Blockly.Dart['controls_if'];\n\nBlockly.Dart['logic_compare'] = function(block) {\n  // Comparison operator.\n  var OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>='\n  };\n  var operator = OPERATORS[block.getFieldValue('OP')];\n  var order = (operator == '==' || operator == '!=') ?\n      Blockly.Dart.ORDER_EQUALITY : Blockly.Dart.ORDER_RELATIONAL;\n  var argument0 = Blockly.Dart.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.Dart.valueToCode(block, 'B', order) || '0';\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nBlockly.Dart['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  var operator = (block.getFieldValue('OP') == 'AND') ? '&&' : '||';\n  var order = (operator == '&&') ? Blockly.Dart.ORDER_LOGICAL_AND :\n      Blockly.Dart.ORDER_LOGICAL_OR;\n  var argument0 = Blockly.Dart.valueToCode(block, 'A', order);\n  var argument1 = Blockly.Dart.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    var defaultArgument = (operator == '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nBlockly.Dart['logic_negate'] = function(block) {\n  // Negation.\n  var order = Blockly.Dart.ORDER_UNARY_PREFIX;\n  var argument0 = Blockly.Dart.valueToCode(block, 'BOOL', order) || 'true';\n  var code = '!' + argument0;\n  return [code, order];\n};\n\nBlockly.Dart['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\n  return [code, Blockly.Dart.ORDER_ATOMIC];\n};\n\nBlockly.Dart['logic_null'] = function(block) {\n  // Null data type.\n  return ['null', Blockly.Dart.ORDER_ATOMIC];\n};\n\nBlockly.Dart['logic_ternary'] = function(block) {\n  // Ternary operator.\n  var value_if = Blockly.Dart.valueToCode(block, 'IF',\n      Blockly.Dart.ORDER_CONDITIONAL) || 'false';\n  var value_then = Blockly.Dart.valueToCode(block, 'THEN',\n      Blockly.Dart.ORDER_CONDITIONAL) || 'null';\n  var value_else = Blockly.Dart.valueToCode(block, 'ELSE',\n      Blockly.Dart.ORDER_CONDITIONAL) || 'null';\n  var code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Blockly.Dart.ORDER_CONDITIONAL];\n};\n"],"file":"logic.min.js"}