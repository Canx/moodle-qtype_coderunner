{"version":3,"sources":["../../../../src/blockly/generators/dart/lists.js"],"names":["goog","provide","require","Blockly","Dart","addReservedWords","ORDER_ATOMIC","block","elements","Array","itemCount_","i","valueToCode","ORDER_NONE","code","join","element","repeatCount","ORDER_UNARY_POSTFIX","list","operator","getFieldValue","item","workspace","options","oneBasedIndex","ORDER_ADDITIVE","mode","where","listOrder","cacheList","listVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","match","definitions_","xVar","at","getAdjusted","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","Error","value","ORDER_ASSIGNMENT","where1","where2","at1","at2","direction","type","sortFunctionName","input","delimiter"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for list blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Dart.lists');\n\ngoog.require('Blockly.Dart');\n\n\nBlockly.Dart.addReservedWords('Math');\n\nBlockly.Dart['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['[]', Blockly.Dart.ORDER_ATOMIC];\n};\n\nBlockly.Dart['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Blockly.Dart.valueToCode(block, 'ADD' + i,\n        Blockly.Dart.ORDER_NONE) || 'null';\n  }\n  var code = '[' + elements.join(', ') + ']';\n  return [code, Blockly.Dart.ORDER_ATOMIC];\n};\n\nBlockly.Dart['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  var element = Blockly.Dart.valueToCode(block, 'ITEM',\n      Blockly.Dart.ORDER_NONE) || 'null';\n  var repeatCount = Blockly.Dart.valueToCode(block, 'NUM',\n      Blockly.Dart.ORDER_NONE) || '0';\n  var code = 'new List.filled(' + repeatCount + ', ' + element + ')';\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['lists_length'] = function(block) {\n  // String or array length.\n  var list = Blockly.Dart.valueToCode(block, 'VALUE',\n      Blockly.Dart.ORDER_UNARY_POSTFIX) || '[]';\n  return [list + '.length', Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var list = Blockly.Dart.valueToCode(block, 'VALUE',\n      Blockly.Dart.ORDER_UNARY_POSTFIX) || '[]';\n  return [list + '.isEmpty', Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  var operator = block.getFieldValue('END') == 'FIRST' ?\n      'indexOf' : 'lastIndexOf';\n  var item = Blockly.Dart.valueToCode(block, 'FIND',\n      Blockly.Dart.ORDER_NONE) || '\\'\\'';\n  var list = Blockly.Dart.valueToCode(block, 'VALUE',\n      Blockly.Dart.ORDER_UNARY_POSTFIX) || '[]';\n  var code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Blockly.Dart.ORDER_ADDITIVE];\n  }\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var listOrder = (where == 'RANDOM' || where == 'FROM_END') ?\n      Blockly.Dart.ORDER_NONE : Blockly.Dart.ORDER_UNARY_POSTFIX;\n  var list = Blockly.Dart.valueToCode(block, 'VALUE', listOrder) || '[]';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    var listVar = Blockly.Dart.variableDB_.getDistinctName(\n        'tmp_list', Blockly.VARIABLE_CATEGORY_NAME);\n    var code = 'List ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  // If `list` would be evaluated more than once (which is the case for\n  // RANDOM REMOVE and FROM_END) and is non-trivial, make sure to access it\n  // only once.\n  if (((where == 'RANDOM' && mode == 'REMOVE') || where == 'FROM_END') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (where == 'RANDOM') {\n      Blockly.Dart.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      // We can use multiple statements.\n      var code = cacheList();\n      var xVar = Blockly.Dart.variableDB_.getDistinctName(\n          'tmp_x', Blockly.VARIABLE_CATEGORY_NAME);\n      code += 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n          '.length);\\n';\n      code += list + '.removeAt(' + xVar + ');\\n';\n      return code;\n    } else {  // where == 'FROM_END'\n      if (mode == 'REMOVE') {\n        // We can use multiple statements.\n        var at = Blockly.Dart.getAdjusted(block, 'AT', 1, false,\n            Blockly.Dart.ORDER_ADDITIVE);\n        var code = cacheList();\n        code += list + '.removeAt(' + list + '.length' + ' - ' + at + ');\\n';\n        return code;\n\n      } else if (mode == 'GET') {\n        var at = Blockly.Dart.getAdjusted(block, 'AT', 1);\n        // We need to create a procedure to avoid reevaluating values.\n        var functionName = Blockly.Dart.provideFunction_(\n            'lists_get_from_end',\n            ['dynamic ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n            '(List my_list, num x) {',\n              '  x = my_list.length - x;',\n              '  return my_list[x];',\n              '}']);\n        var code = functionName + '(' + list + ', ' + at + ')';\n        return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n      } else if (mode == 'GET_REMOVE') {\n        var at = Blockly.Dart.getAdjusted(block, 'AT', 1);\n        // We need to create a procedure to avoid reevaluating values.\n        var functionName = Blockly.Dart.provideFunction_(\n            'lists_remove_from_end',\n            ['dynamic ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n            '(List my_list, num x) {',\n              '  x = my_list.length - x;',\n              '  return my_list.removeAt(x);',\n              '}']);\n        var code = functionName + '(' + list + ', ' + at + ')';\n        return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n      }\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    switch (where) {\n      case 'FIRST':\n        if (mode == 'GET') {\n          var code = list + '.first';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'GET_REMOVE') {\n          var code = list + '.removeAt(0)';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'REMOVE') {\n          return list + '.removeAt(0);\\n';\n        }\n        break;\n      case 'LAST':\n        if (mode == 'GET') {\n          var code = list + '.last';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'GET_REMOVE') {\n          var code = list + '.removeLast()';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'REMOVE') {\n          return list + '.removeLast();\\n';\n        }\n        break;\n      case 'FROM_START':\n        var at = Blockly.Dart.getAdjusted(block, 'AT');\n        if (mode == 'GET') {\n          var code = list + '[' + at + ']';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'GET_REMOVE') {\n          var code = list + '.removeAt(' + at + ')';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'REMOVE') {\n          return list + '.removeAt(' + at + ');\\n';\n        }\n        break;\n      case 'FROM_END':\n        var at = Blockly.Dart.getAdjusted(block, 'AT', 1, false,\n            Blockly.Dart.ORDER_ADDITIVE);\n        if (mode == 'GET') {\n          var code = list + '[' + list + '.length - ' + at + ']';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\n          var code = list + '.removeAt(' + list + '.length - ' + at + ')';\n          if (mode == 'GET_REMOVE') {\n            return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n          } else if (mode == 'REMOVE') {\n            return code + ';\\n';\n          }\n        }\n        break;\n      case 'RANDOM':\n        Blockly.Dart.definitions_['import_dart_math'] =\n            'import \\'dart:math\\' as Math;';\n        if (mode == 'REMOVE') {\n          // We can use multiple statements.\n          var xVar = Blockly.Dart.variableDB_.getDistinctName(\n              'tmp_x', Blockly.VARIABLE_CATEGORY_NAME);\n          var code = 'int ' + xVar + ' = new Math.Random().nextInt(' + list +\n              '.length);\\n';\n          code += list + '.removeAt(' + xVar + ');\\n';\n          return code;\n        } else if (mode == 'GET') {\n          var functionName = Blockly.Dart.provideFunction_(\n              'lists_get_random_item',\n              ['dynamic ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List my_list) {',\n                '  int x = new Math.Random().nextInt(my_list.length);',\n                '  return my_list[x];',\n                '}']);\n          var code = functionName + '(' + list + ')';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        } else if (mode == 'GET_REMOVE') {\n          var functionName = Blockly.Dart.provideFunction_(\n              'lists_remove_random_item',\n              ['dynamic ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List my_list) {',\n                '  int x = new Math.Random().nextInt(my_list.length);',\n                '  return my_list.removeAt(x);',\n                '}']);\n          var code = functionName + '(' + list + ')';\n          return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n        }\n        break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nBlockly.Dart['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var list = Blockly.Dart.valueToCode(block, 'LIST',\n      Blockly.Dart.ORDER_UNARY_POSTFIX) || '[]';\n  var value = Blockly.Dart.valueToCode(block, 'TO',\n      Blockly.Dart.ORDER_ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    var listVar = Blockly.Dart.variableDB_.getDistinctName(\n        'tmp_list', Blockly.VARIABLE_CATEGORY_NAME);\n    var code = 'List ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode == 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode == 'INSERT') {\n        return list + '.insert(0, ' + value + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode == 'SET') {\n        var code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode == 'INSERT') {\n        return list + '.add(' + value + ');\\n';\n      }\n      break;\n    case 'FROM_START':\n      var at = Blockly.Dart.getAdjusted(block, 'AT');\n      if (mode == 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode == 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ');\\n';\n      }\n      break;\n    case 'FROM_END':\n      var at = Blockly.Dart.getAdjusted(block, 'AT', 1, false,\n          Blockly.Dart.ORDER_ADDITIVE);\n      var code = cacheList();\n      if (mode == 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value +\n            ';\\n';\n        return code;\n      } else if (mode == 'INSERT') {\n        code += list + '.insert(' + list + '.length - ' + at + ', ' +\n            value + ');\\n';\n        return code;\n      }\n      break;\n    case 'RANDOM':\n      Blockly.Dart.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      var code = cacheList();\n      var xVar = Blockly.Dart.variableDB_.getDistinctName(\n          'tmp_x', Blockly.VARIABLE_CATEGORY_NAME);\n      code += 'int ' + xVar +\n          ' = new Math.Random().nextInt(' + list + '.length);\\n';\n      if (mode == 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode == 'INSERT') {\n        code += list + '.insert(' + xVar + ', ' + value + ');\\n';\n        return code;\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\nBlockly.Dart['lists_getSublist'] = function(block) {\n  // Get sublist.\n  var list = Blockly.Dart.valueToCode(block, 'LIST',\n      Blockly.Dart.ORDER_UNARY_POSTFIX) || '[]';\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  if (list.match(/^\\w+$/) || (where1 != 'FROM_END' && where2 == 'FROM_START')) {\n    // If the list is a is a variable or doesn't require a call for length,\n    // don't generate a helper function.\n    switch (where1) {\n      case 'FROM_START':\n        var at1 = Blockly.Dart.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        var at1 = Blockly.Dart.getAdjusted(block, 'AT1', 1, false,\n            Blockly.Dart.ORDER_ADDITIVE);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        var at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    switch (where2) {\n      case 'FROM_START':\n        var at2 = Blockly.Dart.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        var at2 = Blockly.Dart.getAdjusted(block, 'AT2', 0, false,\n            Blockly.Dart.ORDER_ADDITIVE);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        // There is no second index if LAST option is chosen.\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    if (where2 == 'LAST') {\n      var code = list + '.sublist(' + at1 + ')';\n    } else {\n      var code = list + '.sublist(' + at1 + ', ' + at2 + ')';\n    }\n  } else {\n    var at1 = Blockly.Dart.getAdjusted(block, 'AT1');\n    var at2 = Blockly.Dart.getAdjusted(block, 'AT2');\n    var functionName = Blockly.Dart.provideFunction_(\n        'lists_get_sublist',\n        ['List ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n            '(List list, String where1, num at1, String where2, num at2) {',\n         '  int getAt(String where, num at) {',\n         '    if (where == \\'FROM_END\\') {',\n         '      at = list.length - 1 - at;',\n         '    } else if (where == \\'FIRST\\') {',\n         '      at = 0;',\n         '    } else if (where == \\'LAST\\') {',\n         '      at = list.length - 1;',\n         '    } else if (where != \\'FROM_START\\') {',\n         '      throw \\'Unhandled option (lists_getSublist).\\';',\n         '    }',\n         '    return at;',\n         '  }',\n         '  at1 = getAt(where1, at1);',\n         '  at2 = getAt(where2, at2) + 1;',\n         '  return list.sublist(at1, at2);',\n         '}']);\n    var code = functionName + '(' + list + ', \\'' +\n        where1 + '\\', ' + at1 + ', \\'' + where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  var list = Blockly.Dart.valueToCode(block, 'LIST',\n      Blockly.Dart.ORDER_NONE) || '[]';\n  var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  var type = block.getFieldValue('TYPE');\n  var sortFunctionName = Blockly.Dart.provideFunction_(\n      'lists_sort',\n      ['List ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n          '(List list, String type, int direction) {',\n       '  var compareFuncs = {',\n       '    \"NUMERIC\": (a, b) => (direction * a.compareTo(b)).toInt(),',\n       '    \"TEXT\": (a, b) => direction * ' +\n          'a.toString().compareTo(b.toString()),',\n       '    \"IGNORE_CASE\": ',\n       '       (a, b) => direction * ',\n       '      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())',\n       '  };',\n       '  list = new List.from(list);', // Clone the list.\n       '  var compare = compareFuncs[type];',\n       '  list.sort(compare);',\n       '  return list;',\n       '}']);\n  return [sortFunctionName + '(' + list + ', ' +\n      '\"' + type + '\", ' + direction + ')',\n      Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  var input = Blockly.Dart.valueToCode(block, 'INPUT',\n      Blockly.Dart.ORDER_UNARY_POSTFIX);\n  var delimiter = Blockly.Dart.valueToCode(block, 'DELIM',\n      Blockly.Dart.ORDER_NONE) || '\\'\\'';\n  var mode = block.getFieldValue('MODE');\n  if (mode == 'SPLIT') {\n    if (!input) {\n      input = '\\'\\'';\n    }\n    var functionName = 'split';\n  } else if (mode == 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    var functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  var code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  var list = Blockly.Dart.valueToCode(block, 'LIST',\n      Blockly.Dart.ORDER_NONE) || '[]';\n  // XXX What should the operator precedence be for a `new`?\n  var code = 'new List.from(' + list + '.reversed)';\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n"],"file":"lists.min.js"}