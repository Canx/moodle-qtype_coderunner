{"version":3,"sources":["../../../../src/blockly/generators/dart/procedures.js"],"names":["goog","provide","require","Blockly","Dart","block","funcName","variableDB_","getName","getFieldValue","PROCEDURE_CATEGORY_NAME","xfix1","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","prefixLines","INDENT","loopTrap","INFINITE_LOOP_TRAP","branch","statementToCode","returnValue","valueToCode","ORDER_NONE","xfix2","returnType","args","variables","getVars","i","length","VARIABLE_CATEGORY_NAME","code","join","scrub_","definitions_","ORDER_UNARY_POSTFIX","tuple","condition","hasReturnValue_","value"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,yBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,cAAb,EAGAC,OAAO,CAACC,IAAR,sBAAuC,SAASC,CAAT,CAAgB,IAEjDC,CAAAA,CAAQ,CAAGH,OAAO,CAACC,IAAR,CAAaG,WAAb,CAAyBC,OAAzB,CAAiCH,CAAK,CAACI,aAAN,CAAoB,MAApB,CAAjC,CACXN,OAAO,CAACO,uBADG,CAFsC,CAIjDC,CAAK,CAAG,EAJyC,CAKrD,GAAIR,OAAO,CAACC,IAAR,CAAaQ,gBAAjB,CAAmC,CACjCD,CAAK,EAAIR,OAAO,CAACC,IAAR,CAAaS,QAAb,CAAsBV,OAAO,CAACC,IAAR,CAAaQ,gBAAnC,CAAqDP,CAArD,CACV,CACD,GAAIF,OAAO,CAACC,IAAR,CAAaU,gBAAjB,CAAmC,CACjCH,CAAK,EAAIR,OAAO,CAACC,IAAR,CAAaS,QAAb,CAAsBV,OAAO,CAACC,IAAR,CAAaU,gBAAnC,CAAqDT,CAArD,CACV,CACD,GAAIM,CAAJ,CAAW,CACTA,CAAK,CAAGR,OAAO,CAACC,IAAR,CAAaW,WAAb,CAAyBJ,CAAzB,CAAgCR,OAAO,CAACC,IAAR,CAAaY,MAA7C,CACT,CACD,GAAIC,CAAAA,CAAQ,CAAG,EAAf,CACA,GAAId,OAAO,CAACC,IAAR,CAAac,kBAAjB,CAAqC,CACnCD,CAAQ,CAAGd,OAAO,CAACC,IAAR,CAAaW,WAAb,CACPZ,OAAO,CAACC,IAAR,CAAaS,QAAb,CAAsBV,OAAO,CAACC,IAAR,CAAac,kBAAnC,CAAuDb,CAAvD,CADO,CAEPF,OAAO,CAACC,IAAR,CAAaY,MAFN,CAGZ,CAnBoD,GAoBjDG,CAAAA,CAAM,CAAGhB,OAAO,CAACC,IAAR,CAAagB,eAAb,CAA6Bf,CAA7B,CAAoC,OAApC,CApBwC,CAqBjDgB,CAAW,CAAGlB,OAAO,CAACC,IAAR,CAAakB,WAAb,CAAyBjB,CAAzB,CAAgC,QAAhC,CACdF,OAAO,CAACC,IAAR,CAAamB,UADC,GACc,EAtBqB,CAuBjDC,CAAK,CAAG,EAvByC,CAwBrD,GAAIL,CAAM,EAAIE,CAAd,CAA2B,CAEzBG,CAAK,CAAGb,CACT,CACD,GAAIU,CAAJ,CAAiB,CACfA,CAAW,CAAGlB,OAAO,CAACC,IAAR,CAAaY,MAAb,CAAsB,SAAtB,CAAkCK,CAAlC,CAAgD,KAC/D,CAID,OAHII,CAAAA,CAAU,CAAGJ,CAAW,CAAG,SAAH,CAAe,MAG3C,CAFIK,CAAI,CAAG,EAEX,CADIC,CAAS,CAAGtB,CAAK,CAACuB,OAAN,EAChB,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,CAAS,CAACG,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzCH,CAAI,CAACG,CAAD,CAAJ,CAAU1B,OAAO,CAACC,IAAR,CAAaG,WAAb,CAAyBC,OAAzB,CAAiCmB,CAAS,CAACE,CAAD,CAA1C,CACN1B,OAAO,CAAC4B,sBADF,CAEX,CACD,GAAIC,CAAAA,CAAI,CAAGP,CAAU,CAAG,GAAb,CAAmBnB,CAAnB,CAA8B,GAA9B,CAAoCoB,CAAI,CAACO,IAAL,CAAU,IAAV,CAApC,CAAsD,OAAtD,CACPtB,CADO,CACCM,CADD,CACYE,CADZ,CACqBK,CADrB,CAC6BH,CAD7B,CAC2C,GADtD,CAEAW,CAAI,CAAG7B,OAAO,CAACC,IAAR,CAAa8B,MAAb,CAAoB7B,CAApB,CAA2B2B,CAA3B,CAAP,CAEA7B,OAAO,CAACC,IAAR,CAAa+B,YAAb,CAA0B,IAAM7B,CAAhC,EAA4C0B,CAA5C,CACA,MAAO,KACR,CA5CD,CAgDA7B,OAAO,CAACC,IAAR,wBAAyCD,OAAO,CAACC,IAAR,qBAAzC,CAEAD,OAAO,CAACC,IAAR,uBAAwC,SAASC,CAAT,CAAgB,CAMtD,OAJIC,CAAAA,CAAQ,CAAGH,OAAO,CAACC,IAAR,CAAaG,WAAb,CAAyBC,OAAzB,CAAiCH,CAAK,CAACI,aAAN,CAAoB,MAApB,CAAjC,CACXN,OAAO,CAACO,uBADG,CAIf,CAFIgB,CAAI,CAAG,EAEX,CADIC,CAAS,CAAGtB,CAAK,CAACuB,OAAN,EAChB,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,CAAS,CAACG,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzCH,CAAI,CAACG,CAAD,CAAJ,CAAU1B,OAAO,CAACC,IAAR,CAAakB,WAAb,CAAyBjB,CAAzB,CAAgC,MAAQwB,CAAxC,CACN1B,OAAO,CAACC,IAAR,CAAamB,UADP,GACsB,MACjC,CACD,GAAIS,CAAAA,CAAI,CAAG1B,CAAQ,CAAG,GAAX,CAAiBoB,CAAI,CAACO,IAAL,CAAU,IAAV,CAAjB,CAAmC,GAA9C,CACA,MAAO,CAACD,CAAD,CAAO7B,OAAO,CAACC,IAAR,CAAagC,mBAApB,CACR,CAZD,CAcAjC,OAAO,CAACC,IAAR,yBAA0C,SAASC,CAAT,CAAgB,CAIxD,GAAIgC,CAAAA,CAAK,CAAGlC,OAAO,CAACC,IAAR,uBAAsCC,CAAtC,CAAZ,CACA,MAAOgC,CAAAA,CAAK,CAAC,CAAD,CAAL,CAAW,KACnB,CAND,CAQAlC,OAAO,CAACC,IAAR,qBAAsC,SAASC,CAAT,CAAgB,IAEhDiC,CAAAA,CAAS,CAAGnC,OAAO,CAACC,IAAR,CAAakB,WAAb,CAAyBjB,CAAzB,CAAgC,WAAhC,CACZF,OAAO,CAACC,IAAR,CAAamB,UADD,GACgB,OAHoB,CAIhDS,CAAI,CAAG,OAASM,CAAT,CAAqB,OAJoB,CAKpD,GAAInC,OAAO,CAACC,IAAR,CAAaU,gBAAjB,CAAmC,CAGjCkB,CAAI,EAAI7B,OAAO,CAACC,IAAR,CAAaW,WAAb,CACJZ,OAAO,CAACC,IAAR,CAAaS,QAAb,CAAsBV,OAAO,CAACC,IAAR,CAAaU,gBAAnC,CAAqDT,CAArD,CADI,CAEJF,OAAO,CAACC,IAAR,CAAaY,MAFT,CAGT,CACD,GAAIX,CAAK,CAACkC,eAAV,CAA2B,CACzB,GAAIC,CAAAA,CAAK,CAAGrC,OAAO,CAACC,IAAR,CAAakB,WAAb,CAAyBjB,CAAzB,CAAgC,OAAhC,CACRF,OAAO,CAACC,IAAR,CAAamB,UADL,GACoB,MADhC,CAEAS,CAAI,EAAI7B,OAAO,CAACC,IAAR,CAAaY,MAAb,CAAsB,SAAtB,CAAkCwB,CAAlC,CAA0C,KACnD,CAJD,IAIO,CACLR,CAAI,EAAI7B,OAAO,CAACC,IAAR,CAAaY,MAAb,CAAsB,WAC/B,CACDgB,CAAI,EAAI,KAAR,CACA,MAAOA,CAAAA,CACR,CArBD","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for procedure blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Dart.procedures');\n\ngoog.require('Blockly.Dart');\n\n\nBlockly.Dart['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  var funcName = Blockly.Dart.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.PROCEDURE_CATEGORY_NAME);\n  var xfix1 = '';\n  if (Blockly.Dart.STATEMENT_PREFIX) {\n    xfix1 += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_PREFIX, block);\n  }\n  if (Blockly.Dart.STATEMENT_SUFFIX) {\n    xfix1 += Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = Blockly.Dart.prefixLines(xfix1, Blockly.Dart.INDENT);\n  }\n  var loopTrap = '';\n  if (Blockly.Dart.INFINITE_LOOP_TRAP) {\n    loopTrap = Blockly.Dart.prefixLines(\n        Blockly.Dart.injectId(Blockly.Dart.INFINITE_LOOP_TRAP, block),\n        Blockly.Dart.INDENT);\n  }\n  var branch = Blockly.Dart.statementToCode(block, 'STACK');\n  var returnValue = Blockly.Dart.valueToCode(block, 'RETURN',\n      Blockly.Dart.ORDER_NONE) || '';\n  var xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Blockly.Dart.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  var returnType = returnValue ? 'dynamic' : 'void';\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.Dart.variableDB_.getName(variables[i],\n        Blockly.VARIABLE_CATEGORY_NAME);\n  }\n  var code = returnType + ' ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = Blockly.Dart.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Blockly.Dart.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Dart['procedures_defnoreturn'] = Blockly.Dart['procedures_defreturn'];\n\nBlockly.Dart['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Dart.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.PROCEDURE_CATEGORY_NAME);\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.Dart.valueToCode(block, 'ARG' + i,\n        Blockly.Dart.ORDER_NONE) || 'null';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  var tuple = Blockly.Dart['procedures_callreturn'](block);\n  return tuple[0] + ';\\n';\n};\n\nBlockly.Dart['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Dart.valueToCode(block, 'CONDITION',\n      Blockly.Dart.ORDER_NONE) || 'false';\n  var code = 'if (' + condition + ') {\\n';\n  if (Blockly.Dart.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += Blockly.Dart.prefixLines(\n        Blockly.Dart.injectId(Blockly.Dart.STATEMENT_SUFFIX, block),\n        Blockly.Dart.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    var value = Blockly.Dart.valueToCode(block, 'VALUE',\n        Blockly.Dart.ORDER_NONE) || 'null';\n    code += Blockly.Dart.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += Blockly.Dart.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n"],"file":"procedures.min.js"}