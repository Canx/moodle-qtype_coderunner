{"version":3,"sources":["../../../../src/blockly/generators/dart/math.js"],"names":["goog","provide","require","Blockly","Dart","addReservedWords","block","code","getFieldValue","order","ORDER_UNARY_POSTFIX","Infinity","ORDER_UNARY_PREFIX","ORDER_ATOMIC","OPERATORS","ORDER_ADDITIVE","ORDER_MULTIPLICATIVE","ORDER_NONE","tuple","operator","argument0","valueToCode","argument1","definitions_","arg","substring","Error","CONSTANTS","constant","number_to_check","dropdown_property","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","divisor","ORDER_EQUALITY","varName","variableDB_","getName","VARIABLE_CATEGORY_NAME","func","list","argument2"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Dart for math blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Dart.math');\n\ngoog.require('Blockly.Dart');\n\n\nBlockly.Dart.addReservedWords('Math');\n\nBlockly.Dart['math_number'] = function(block) {\n  // Numeric value.\n  var code = Number(block.getFieldValue('NUM'));\n  var order;\n  if (code == Infinity) {\n    code = 'double.infinity';\n    order = Blockly.Dart.ORDER_UNARY_POSTFIX;\n  } else if (code == -Infinity) {\n    code = '-double.infinity';\n    order = Blockly.Dart.ORDER_UNARY_PREFIX;\n  } else {\n    // -4.abs() returns -4 in Dart due to strange order of operation choices.\n    // -4 is actually an operator and a number.  Reflect this in the order.\n    order = code < 0 ?\n        Blockly.Dart.ORDER_UNARY_PREFIX : Blockly.Dart.ORDER_ATOMIC;\n  }\n  return [code, order];\n};\n\nBlockly.Dart['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  var OPERATORS = {\n    'ADD': [' + ', Blockly.Dart.ORDER_ADDITIVE],\n    'MINUS': [' - ', Blockly.Dart.ORDER_ADDITIVE],\n    'MULTIPLY': [' * ', Blockly.Dart.ORDER_MULTIPLICATIVE],\n    'DIVIDE': [' / ', Blockly.Dart.ORDER_MULTIPLICATIVE],\n    'POWER': [null, Blockly.Dart.ORDER_NONE]  // Handle power separately.\n  };\n  var tuple = OPERATORS[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Blockly.Dart.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.Dart.valueToCode(block, 'B', order) || '0';\n  var code;\n  // Power in Dart requires a special case since it has no operator.\n  if (!operator) {\n    Blockly.Dart.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nBlockly.Dart['math_single'] = function(block) {\n  // Math operators with single operand.\n  var operator = block.getFieldValue('OP');\n  var code;\n  var arg;\n  if (operator == 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Blockly.Dart.valueToCode(block, 'NUM',\n        Blockly.Dart.ORDER_UNARY_PREFIX) || '0';\n    if (arg[0] == '-') {\n      // --3 is not legal in Dart.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Blockly.Dart.ORDER_UNARY_PREFIX];\n  }\n  Blockly.Dart.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  if (operator == 'ABS' || operator.substring(0, 5) == 'ROUND') {\n    arg = Blockly.Dart.valueToCode(block, 'NUM',\n        Blockly.Dart.ORDER_UNARY_POSTFIX) || '0';\n  } else if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\n    arg = Blockly.Dart.valueToCode(block, 'NUM',\n        Blockly.Dart.ORDER_MULTIPLICATIVE) || '0';\n  } else {\n    arg = Blockly.Dart.valueToCode(block, 'NUM',\n        Blockly.Dart.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = arg + '.abs()';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = arg + '.round()';\n      break;\n    case 'ROUNDUP':\n      code = arg + '.ceil()';\n      break;\n    case 'ROUNDDOWN':\n      code = arg + '.floor()';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.pi)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.pi)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Blockly.Dart.ORDER_MULTIPLICATIVE];\n};\n\nBlockly.Dart['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  var CONSTANTS = {\n    'PI': ['Math.pi', Blockly.Dart.ORDER_UNARY_POSTFIX],\n    'E': ['Math.e', Blockly.Dart.ORDER_UNARY_POSTFIX],\n    'GOLDEN_RATIO':\n        ['(1 + Math.sqrt(5)) / 2', Blockly.Dart.ORDER_MULTIPLICATIVE],\n    'SQRT2': ['Math.sqrt2', Blockly.Dart.ORDER_UNARY_POSTFIX],\n    'SQRT1_2': ['Math.sqrt1_2', Blockly.Dart.ORDER_UNARY_POSTFIX],\n    'INFINITY': ['double.infinity', Blockly.Dart.ORDER_ATOMIC]\n  };\n  var constant = block.getFieldValue('CONSTANT');\n  if (constant != 'INFINITY') {\n    Blockly.Dart.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n  }\n  return CONSTANTS[constant];\n};\n\nBlockly.Dart['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  var number_to_check = Blockly.Dart.valueToCode(block, 'NUMBER_TO_CHECK',\n      Blockly.Dart.ORDER_MULTIPLICATIVE);\n  if (!number_to_check) {\n    return ['false', Blockly.Dart.ORDER_ATOMIC];\n  }\n  var dropdown_property = block.getFieldValue('PROPERTY');\n  var code;\n  if (dropdown_property == 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    Blockly.Dart.definitions_['import_dart_math'] =\n        'import \\'dart:math\\' as Math;';\n    var functionName = Blockly.Dart.provideFunction_(\n        'math_isPrime',\n        ['bool ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + '(n) {',\n         '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n         '  if (n == 2 || n == 3) {',\n         '    return true;',\n         '  }',\n         '  // False if n is null, negative, is 1, or not whole.',\n         '  // And false if n is divisible by 2 or 3.',\n         '  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 ||' +\n            ' n % 3 == 0) {',\n         '    return false;',\n         '  }',\n         '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n         '  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {',\n         '    if (n % (x - 1) == 0 || n % (x + 1) == 0) {',\n         '      return false;',\n         '    }',\n         '  }',\n         '  return true;',\n         '}']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n  }\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = number_to_check + ' % 2 == 0';\n      break;\n    case 'ODD':\n      code = number_to_check + ' % 2 == 1';\n      break;\n    case 'WHOLE':\n      code = number_to_check + ' % 1 == 0';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY':\n      var divisor = Blockly.Dart.valueToCode(block, 'DIVISOR',\n          Blockly.Dart.ORDER_MULTIPLICATIVE);\n      if (!divisor) {\n        return ['false', Blockly.Dart.ORDER_ATOMIC];\n      }\n      code = number_to_check + ' % ' + divisor + ' == 0';\n      break;\n  }\n  return [code, Blockly.Dart.ORDER_EQUALITY];\n};\n\nBlockly.Dart['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.Dart.valueToCode(block, 'DELTA',\n      Blockly.Dart.ORDER_ADDITIVE) || '0';\n  var varName = Blockly.Dart.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  return varName + ' = (' + varName + ' is num ? ' + varName + ' : 0) + ' +\n      argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nBlockly.Dart['math_round'] = Blockly.Dart['math_single'];\n// Trigonometry functions have a single operand.\nBlockly.Dart['math_trig'] = Blockly.Dart['math_single'];\n\nBlockly.Dart['math_on_list'] = function(block) {\n  // Math functions for lists.\n  var func = block.getFieldValue('OP');\n  var list = Blockly.Dart.valueToCode(block, 'LIST',\n      Blockly.Dart.ORDER_NONE) || '[]';\n  var code;\n  switch (func) {\n    case 'SUM':\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_sum',\n          ['num ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List<num> myList) {',\n           '  num sumVal = 0;',\n           '  myList.forEach((num entry) {sumVal += entry;});',\n           '  return sumVal;',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MIN':\n      Blockly.Dart.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_min',\n          ['num ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List<num> myList) {',\n           '  if (myList.isEmpty) return null;',\n           '  num minVal = myList[0];',\n           '  myList.forEach((num entry) ' +\n              '{minVal = Math.min(minVal, entry);});',\n           '  return minVal;',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MAX':\n      Blockly.Dart.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_max',\n          ['num ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List<num> myList) {',\n           '  if (myList.isEmpty) return null;',\n           '  num maxVal = myList[0];',\n           '  myList.forEach((num entry) ' +\n              '{maxVal = Math.max(maxVal, entry);});',\n           '  return maxVal;',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'AVERAGE':\n      // This operation exclude null and values that are not int or float:\n      //   math_mean([null,null,\"aString\",1,9]) == 5.0.\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_mean',\n          ['num ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List myList) {',\n           '  // First filter list for numbers only.',\n           '  List localList = new List.from(myList);',\n           '  localList.removeWhere((a) => a is! num);',\n           '  if (localList.isEmpty) return null;',\n           '  num sumVal = 0;',\n           '  localList.forEach((var entry) {sumVal += entry;});',\n           '  return sumVal / localList.length;',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MEDIAN':\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_median',\n          ['num ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List myList) {',\n           '  // First filter list for numbers only, then sort, ' +\n              'then return middle value',\n           '  // or the average of two middle values if list has an ' +\n              'even number of elements.',\n           '  List localList = new List.from(myList);',\n           '  localList.removeWhere((a) => a is! num);',\n           '  if (localList.isEmpty) return null;',\n           '  localList.sort((a, b) => (a - b));',\n           '  int index = localList.length ~/ 2;',\n           '  if (localList.length % 2 == 1) {',\n           '    return localList[index];',\n           '  } else {',\n           '    return (localList[index - 1] + localList[index]) / 2;',\n           '  }',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MODE':\n      Blockly.Dart.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_modes',\n          ['List ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List values) {',\n           '  List modes = [];',\n           '  List counts = [];',\n           '  int maxCount = 0;',\n           '  for (int i = 0; i < values.length; i++) {',\n           '    var value = values[i];',\n           '    bool found = false;',\n           '    int thisCount;',\n           '    for (int j = 0; j < counts.length; j++) {',\n           '      if (counts[j][0] == value) {',\n           '        thisCount = ++counts[j][1];',\n           '        found = true;',\n           '        break;',\n           '      }',\n           '    }',\n           '    if (!found) {',\n           '      counts.add([value, 1]);',\n           '      thisCount = 1;',\n           '    }',\n           '    maxCount = Math.max(thisCount, maxCount);',\n           '  }',\n           '  for (int j = 0; j < counts.length; j++) {',\n           '    if (counts[j][1] == maxCount) {',\n           '        modes.add(counts[j][0]);',\n           '    }',\n           '  }',\n           '  return modes;',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'STD_DEV':\n      Blockly.Dart.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_standard_deviation',\n          ['num ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List myList) {',\n           '  // First filter list for numbers only.',\n           '  List numbers = new List.from(myList);',\n           '  numbers.removeWhere((a) => a is! num);',\n           '  if (numbers.isEmpty) return null;',\n           '  num n = numbers.length;',\n           '  num sum = 0;',\n           '  numbers.forEach((x) => sum += x);',\n           '  num mean = sum / n;',\n           '  num sumSquare = 0;',\n           '  numbers.forEach((x) => sumSquare += ' +\n              'Math.pow(x - mean, 2));',\n           '  return Math.sqrt(sumSquare / n);',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'RANDOM':\n      Blockly.Dart.definitions_['import_dart_math'] =\n          'import \\'dart:math\\' as Math;';\n      var functionName = Blockly.Dart.provideFunction_(\n          'math_random_item',\n          ['dynamic ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ +\n              '(List myList) {',\n           '  int x = new Math.Random().nextInt(myList.length);',\n           '  return myList[x];',\n           '}']);\n      code = functionName + '(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['math_modulo'] = function(block) {\n  // Remainder computation.\n  var argument0 = Blockly.Dart.valueToCode(block, 'DIVIDEND',\n      Blockly.Dart.ORDER_MULTIPLICATIVE) || '0';\n  var argument1 = Blockly.Dart.valueToCode(block, 'DIVISOR',\n      Blockly.Dart.ORDER_MULTIPLICATIVE) || '0';\n  var code = argument0 + ' % ' + argument1;\n  return [code, Blockly.Dart.ORDER_MULTIPLICATIVE];\n};\n\nBlockly.Dart['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  Blockly.Dart.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  var argument0 = Blockly.Dart.valueToCode(block, 'VALUE',\n      Blockly.Dart.ORDER_NONE) || '0';\n  var argument1 = Blockly.Dart.valueToCode(block, 'LOW',\n      Blockly.Dart.ORDER_NONE) || '0';\n  var argument2 = Blockly.Dart.valueToCode(block, 'HIGH',\n      Blockly.Dart.ORDER_NONE) || 'double.infinity';\n  var code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  Blockly.Dart.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  var argument0 = Blockly.Dart.valueToCode(block, 'FROM',\n      Blockly.Dart.ORDER_NONE) || '0';\n  var argument1 = Blockly.Dart.valueToCode(block, 'TO',\n      Blockly.Dart.ORDER_NONE) || '0';\n  var functionName = Blockly.Dart.provideFunction_(\n      'math_random_int',\n      ['int ' + Blockly.Dart.FUNCTION_NAME_PLACEHOLDER_ + '(num a, num b) {',\n       '  if (a > b) {',\n       '    // Swap a and b to ensure a is smaller.',\n       '    num c = a;',\n       '    a = b;',\n       '    b = c;',\n       '  }',\n       '  return new Math.Random().nextInt(b - a + 1) + a;',\n       '}']);\n  var code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  Blockly.Dart.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  return ['new Math.Random().nextDouble()', Blockly.Dart.ORDER_UNARY_POSTFIX];\n};\n\nBlockly.Dart['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  Blockly.Dart.definitions_['import_dart_math'] =\n      'import \\'dart:math\\' as Math;';\n  var argument0 = Blockly.Dart.valueToCode(block, 'X',\n      Blockly.Dart.ORDER_NONE) || '0';\n  var argument1 = Blockly.Dart.valueToCode(block, 'Y',\n      Blockly.Dart.ORDER_NONE) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.pi * 180',\n      Blockly.Dart.ORDER_MULTIPLICATIVE];\n};\n"],"file":"math.min.js"}