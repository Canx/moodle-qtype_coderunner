{"version":3,"sources":["../../../../src/blockly/generators/javascript/procedures.js"],"names":["goog","provide","require","Blockly","JavaScript","block","funcName","variableDB_","getName","getFieldValue","PROCEDURE_CATEGORY_NAME","xfix1","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","prefixLines","INDENT","loopTrap","INFINITE_LOOP_TRAP","branch","statementToCode","returnValue","valueToCode","ORDER_NONE","xfix2","args","variables","getVars","i","length","VARIABLE_CATEGORY_NAME","code","join","scrub_","definitions_","ORDER_COMMA","ORDER_FUNCTION_CALL","tuple","condition","hasReturnValue_","value"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for procedure blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.JavaScript.procedures');\n\ngoog.require('Blockly.JavaScript');\n\n\nBlockly.JavaScript['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  var funcName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var xfix1 = '';\n  if (Blockly.JavaScript.STATEMENT_PREFIX) {\n    xfix1 += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX,\n        block);\n  }\n  if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n    xfix1 += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n        block);\n  }\n  if (xfix1) {\n    xfix1 = Blockly.JavaScript.prefixLines(xfix1, Blockly.JavaScript.INDENT);\n  }\n  var loopTrap = '';\n  if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\n    loopTrap = Blockly.JavaScript.prefixLines(\n        Blockly.JavaScript.injectId(Blockly.JavaScript.INFINITE_LOOP_TRAP,\n        block), Blockly.JavaScript.INDENT);\n  }\n  var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\n  var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN',\n      Blockly.JavaScript.ORDER_NONE) || '';\n  var xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Blockly.JavaScript.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.JavaScript.variableDB_.getName(variables[i],\n        Blockly.VARIABLE_CATEGORY_NAME);\n  }\n  var code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = Blockly.JavaScript.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Blockly.JavaScript.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.JavaScript['procedures_defnoreturn'] =\n    Blockly.JavaScript['procedures_defreturn'];\n\nBlockly.JavaScript['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.JavaScript.valueToCode(block, 'ARG' + i,\n        Blockly.JavaScript.ORDER_COMMA) || 'null';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};\n\nBlockly.JavaScript['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  var tuple = Blockly.JavaScript['procedures_callreturn'](block);\n  return tuple[0] + ';\\n';\n};\n\nBlockly.JavaScript['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION',\n      Blockly.JavaScript.ORDER_NONE) || 'false';\n  var code = 'if (' + condition + ') {\\n';\n  if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += Blockly.JavaScript.prefixLines(\n        Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX, block),\n        Blockly.JavaScript.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE',\n        Blockly.JavaScript.ORDER_NONE) || 'null';\n    code += Blockly.JavaScript.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += Blockly.JavaScript.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n"],"file":"procedures.min.js"}