{"version":3,"sources":["../../../../src/blockly/generators/javascript/loops.js"],"names":["goog","provide","require","Blockly","JavaScript","block","getField","repeats","getFieldValue","valueToCode","ORDER_ASSIGNMENT","branch","statementToCode","addLoopTrap","code","loopVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","endVar","match","isNumber","until","argument0","ORDER_LOGICAL_NOT","ORDER_NONE","variable0","getName","argument1","increment","up","step","Math","abs","startVar","incVar","INDENT","listVar","indexVar","xfix","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","loop","Constants","Loops","CONTROL_FLOW_IN_LOOP_CHECK_MIXIN","getSurroundLoop","suppressPrefixSuffix","Error"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for loop blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.JavaScript.loops');\n\ngoog.require('Blockly.JavaScript');\n\n\nBlockly.JavaScript['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    var repeats = Blockly.JavaScript.valueToCode(block, 'TIMES',\n        Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  }\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block);\n  var code = '';\n  var loopVar = Blockly.JavaScript.variableDB_.getDistinctName(\n      'count', Blockly.VARIABLE_CATEGORY_NAME);\n  var endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\n    endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        'repeat_end', Blockly.VARIABLE_CATEGORY_NAME);\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (var ' + loopVar + ' = 0; ' +\n      loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' +\n      branch + '}\\n';\n  return code;\n};\n\nBlockly.JavaScript['controls_repeat'] =\n    Blockly.JavaScript['controls_repeat_ext'];\n\nBlockly.JavaScript['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  var until = block.getFieldValue('MODE') == 'UNTIL';\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL',\n      until ? Blockly.JavaScript.ORDER_LOGICAL_NOT :\n      Blockly.JavaScript.ORDER_NONE) || 'false';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nBlockly.JavaScript['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(Number(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.VARIABLE_CATEGORY_NAME);\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      endVar = Blockly.JavaScript.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.VARIABLE_CATEGORY_NAME);\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.VARIABLE_CATEGORY_NAME);\n    code += 'var ' + incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.JavaScript.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.JavaScript['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\n      Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block);\n  var code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  var listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = Blockly.JavaScript.variableDB_.getDistinctName(\n        variable0 + '_list', Blockly.VARIABLE_CATEGORY_NAME);\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(\n      variable0 + '_index', Blockly.VARIABLE_CATEGORY_NAME);\n  branch = Blockly.JavaScript.INDENT + variable0 + ' = ' +\n      listVar + '[' + indexVar + '];\\n' + branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nBlockly.JavaScript['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  var xfix = '';\n  if (Blockly.JavaScript.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX,\n        block);\n  }\n  if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n        block);\n  }\n  if (Blockly.JavaScript.STATEMENT_PREFIX) {\n    var loop = Blockly.Constants.Loops\n        .CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(block);\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_PREFIX,\n          loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n"],"file":"loops.min.js"}