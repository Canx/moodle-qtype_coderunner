{"version":3,"sources":["../../../../src/blockly/generators/javascript/math.js"],"names":["goog","provide","require","Blockly","JavaScript","block","code","getFieldValue","order","ORDER_ATOMIC","ORDER_UNARY_NEGATION","OPERATORS","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_COMMA","tuple","operator","argument0","valueToCode","argument1","ORDER_FUNCTION_CALL","arg","ORDER_NONE","Error","CONSTANTS","ORDER_MEMBER","number_to_check","ORDER_MODULUS","dropdown_property","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","divisor","ORDER_EQUALITY","varName","variableDB_","getName","VARIABLE_CATEGORY_NAME","func","list","argument2"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating JavaScript for math blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.JavaScript.math');\n\ngoog.require('Blockly.JavaScript');\n\n\nBlockly.JavaScript['math_number'] = function(block) {\n  // Numeric value.\n  var code = Number(block.getFieldValue('NUM'));\n  var order = code >= 0 ? Blockly.JavaScript.ORDER_ATOMIC :\n              Blockly.JavaScript.ORDER_UNARY_NEGATION;\n  return [code, order];\n};\n\nBlockly.JavaScript['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  var OPERATORS = {\n    'ADD': [' + ', Blockly.JavaScript.ORDER_ADDITION],\n    'MINUS': [' - ', Blockly.JavaScript.ORDER_SUBTRACTION],\n    'MULTIPLY': [' * ', Blockly.JavaScript.ORDER_MULTIPLICATION],\n    'DIVIDE': [' / ', Blockly.JavaScript.ORDER_DIVISION],\n    'POWER': [null, Blockly.JavaScript.ORDER_COMMA]  // Handle power separately.\n  };\n  var tuple = OPERATORS[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order) || '0';\n  var code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nBlockly.JavaScript['math_single'] = function(block) {\n  // Math operators with single operand.\n  var operator = block.getFieldValue('OP');\n  var code;\n  var arg;\n  if (operator == 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM',\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || '0';\n    if (arg[0] == '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Blockly.JavaScript.ORDER_UNARY_NEGATION];\n  }\n  if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM',\n        Blockly.JavaScript.ORDER_DIVISION) || '0';\n  } else {\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM',\n        Blockly.JavaScript.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Blockly.JavaScript.ORDER_DIVISION];\n};\n\nBlockly.JavaScript['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  var CONSTANTS = {\n    'PI': ['Math.PI', Blockly.JavaScript.ORDER_MEMBER],\n    'E': ['Math.E', Blockly.JavaScript.ORDER_MEMBER],\n    'GOLDEN_RATIO':\n        ['(1 + Math.sqrt(5)) / 2', Blockly.JavaScript.ORDER_DIVISION],\n    'SQRT2': ['Math.SQRT2', Blockly.JavaScript.ORDER_MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', Blockly.JavaScript.ORDER_MEMBER],\n    'INFINITY': ['Infinity', Blockly.JavaScript.ORDER_ATOMIC]\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nBlockly.JavaScript['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  var number_to_check = Blockly.JavaScript.valueToCode(block, 'NUMBER_TO_CHECK',\n      Blockly.JavaScript.ORDER_MODULUS) || '0';\n  var dropdown_property = block.getFieldValue('PROPERTY');\n  var code;\n  if (dropdown_property == 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    var functionName = Blockly.JavaScript.provideFunction_(\n        'mathIsPrime',\n        ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + '(n) {',\n         '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n         '  if (n == 2 || n == 3) {',\n         '    return true;',\n         '  }',\n         '  // False if n is NaN, negative, is 1, or not whole.',\n         '  // And false if n is divisible by 2 or 3.',\n         '  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 ||' +\n            ' n % 3 == 0) {',\n         '    return false;',\n         '  }',\n         '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n         '  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {',\n         '    if (n % (x - 1) == 0 || n % (x + 1) == 0) {',\n         '      return false;',\n         '    }',\n         '  }',\n         '  return true;',\n         '}']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  }\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = number_to_check + ' % 2 == 0';\n      break;\n    case 'ODD':\n      code = number_to_check + ' % 2 == 1';\n      break;\n    case 'WHOLE':\n      code = number_to_check + ' % 1 == 0';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY':\n      var divisor = Blockly.JavaScript.valueToCode(block, 'DIVISOR',\n          Blockly.JavaScript.ORDER_MODULUS) || '0';\n      code = number_to_check + ' % ' + divisor + ' == 0';\n      break;\n  }\n  return [code, Blockly.JavaScript.ORDER_EQUALITY];\n};\n\nBlockly.JavaScript['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA',\n      Blockly.JavaScript.ORDER_ADDITION) || '0';\n  var varName = Blockly.JavaScript.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  return varName + ' = (typeof ' + varName + ' == \\'number\\' ? ' + varName +\n      ' : 0) + ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nBlockly.JavaScript['math_round'] = Blockly.JavaScript['math_single'];\n// Trigonometry functions have a single operand.\nBlockly.JavaScript['math_trig'] = Blockly.JavaScript['math_single'];\n\nBlockly.JavaScript['math_on_list'] = function(block) {\n  // Math functions for lists.\n  var func = block.getFieldValue('OP');\n  var list, code;\n  switch (func) {\n    case 'SUM':\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;})';\n      break;\n    case 'MIN':\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_COMMA) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_COMMA) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE':\n      // mathMean([null,null,1,3]) == 2.0.\n      var functionName = Blockly.JavaScript.provideFunction_(\n          'mathMean',\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  return myList.reduce(function(x, y) {return x + y;}) / ' +\n                  'myList.length;',\n            '}']);\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MEDIAN':\n      // mathMedian([null,null,1,3]) == 2.0.\n      var functionName = Blockly.JavaScript.provideFunction_(\n          'mathMedian',\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(myList) {',\n            '  var localList = myList.filter(function (x) ' +\n              '{return typeof x == \\'number\\';});',\n            '  if (!localList.length) return null;',\n            '  localList.sort(function(a, b) {return b - a;});',\n            '  if (localList.length % 2 == 0) {',\n            '    return (localList[localList.length / 2 - 1] + ' +\n              'localList[localList.length / 2]) / 2;',\n            '  } else {',\n            '    return localList[(localList.length - 1) / 2];',\n            '  }',\n            '}']);\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      var functionName = Blockly.JavaScript.provideFunction_(\n          'mathModes',\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(values) {',\n            '  var modes = [];',\n            '  var counts = [];',\n            '  var maxCount = 0;',\n            '  for (var i = 0; i < values.length; i++) {',\n            '    var value = values[i];',\n            '    var found = false;',\n            '    var thisCount;',\n            '    for (var j = 0; j < counts.length; j++) {',\n            '      if (counts[j][0] === value) {',\n            '        thisCount = ++counts[j][1];',\n            '        found = true;',\n            '        break;',\n            '      }',\n            '    }',\n            '    if (!found) {',\n            '      counts.push([value, 1]);',\n            '      thisCount = 1;',\n            '    }',\n            '    maxCount = Math.max(thisCount, maxCount);',\n            '  }',\n            '  for (var j = 0; j < counts.length; j++) {',\n            '    if (counts[j][1] == maxCount) {',\n            '        modes.push(counts[j][0]);',\n            '    }',\n            '  }',\n            '  return modes;',\n            '}']);\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'STD_DEV':\n      var functionName = Blockly.JavaScript.provideFunction_(\n          'mathStandardDeviation',\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(numbers) {',\n            '  var n = numbers.length;',\n            '  if (!n) return null;',\n            '  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;',\n            '  var variance = 0;',\n            '  for (var j = 0; j < n; j++) {',\n            '    variance += Math.pow(numbers[j] - mean, 2);',\n            '  }',\n            '  variance = variance / n;',\n            '  return Math.sqrt(variance);',\n            '}']);\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'RANDOM':\n      var functionName = Blockly.JavaScript.provideFunction_(\n          'mathRandomList',\n          ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n              '(list) {',\n            '  var x = Math.floor(Math.random() * list.length);',\n            '  return list[x];',\n            '}']);\n      list = Blockly.JavaScript.valueToCode(block, 'LIST',\n          Blockly.JavaScript.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};\n\nBlockly.JavaScript['math_modulo'] = function(block) {\n  // Remainder computation.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'DIVIDEND',\n      Blockly.JavaScript.ORDER_MODULUS) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'DIVISOR',\n      Blockly.JavaScript.ORDER_MODULUS) || '0';\n  var code = argument0 + ' % ' + argument1;\n  return [code, Blockly.JavaScript.ORDER_MODULUS];\n};\n\nBlockly.JavaScript['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE',\n      Blockly.JavaScript.ORDER_COMMA) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'LOW',\n      Blockly.JavaScript.ORDER_COMMA) || '0';\n  var argument2 = Blockly.JavaScript.valueToCode(block, 'HIGH',\n      Blockly.JavaScript.ORDER_COMMA) || 'Infinity';\n  var code = 'Math.min(Math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};\n\nBlockly.JavaScript['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM',\n      Blockly.JavaScript.ORDER_COMMA) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO',\n      Blockly.JavaScript.ORDER_COMMA) || '0';\n  var functionName = Blockly.JavaScript.provideFunction_(\n      'mathRandomInt',\n      ['function ' + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ +\n          '(a, b) {',\n       '  if (a > b) {',\n       '    // Swap a and b to ensure a is smaller.',\n       '    var c = a;',\n       '    a = b;',\n       '    b = c;',\n       '  }',\n       '  return Math.floor(Math.random() * (b - a + 1) + a);',\n       '}']);\n  var code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};\n\nBlockly.JavaScript['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};\n\nBlockly.JavaScript['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'X',\n      Blockly.JavaScript.ORDER_COMMA) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'Y',\n      Blockly.JavaScript.ORDER_COMMA) || '0';\n  return ['Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n      Blockly.JavaScript.ORDER_DIVISION];\n};\n"],"file":"math.min.js"}