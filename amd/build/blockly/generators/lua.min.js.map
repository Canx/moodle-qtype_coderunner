{"version":3,"sources":["../../../src/blockly/generators/lua.js"],"names":["goog","provide","require","Blockly","Lua","Generator","addReservedWords","ORDER_ATOMIC","ORDER_HIGH","ORDER_EXPONENTIATION","ORDER_UNARY","ORDER_MULTIPLICATIVE","ORDER_ADDITIVE","ORDER_CONCATENATION","ORDER_RELATIONAL","ORDER_AND","ORDER_OR","ORDER_NONE","init","workspace","definitions_","Object","create","functionNames_","variableDB_","Names","RESERVED_WORDS_","reset","setVariableMap","getVariableMap","finish","code","definitions","name","push","join","scrubNakedValue","line","quote_","string","replace","multiline_quote_","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","utils","wrap","COMMENT_WRAP","prefixLines","i","inputList","length","type","INPUT_VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Lua for blocks.\n * @author rodrigoq@google.com (Rodrigo Queiro)\n * Based on Ellen Spertus's blocky-lua project.\n */\n'use strict';\n\ngoog.provide('Blockly.Lua');\n\ngoog.require('Blockly.Generator');\ngoog.require('Blockly.utils.string');\n\n\n/**\n * Lua code generator.\n * @type {!Blockly.Generator}\n */\nBlockly.Lua = new Blockly.Generator('Lua');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * @private\n */\nBlockly.Lua.addReservedWords(\n    // Special character\n    '_,' +\n    // From theoriginalbit's script:\n    // https://github.com/espertus/blockly-lua/issues/6\n    '__inext,assert,bit,colors,colours,coroutine,disk,dofile,error,fs,' +\n    'fetfenv,getmetatable,gps,help,io,ipairs,keys,loadfile,loadstring,math,' +\n    'native,next,os,paintutils,pairs,parallel,pcall,peripheral,print,' +\n    'printError,rawequal,rawget,rawset,read,rednet,redstone,rs,select,' +\n    'setfenv,setmetatable,sleep,string,table,term,textutils,tonumber,' +\n    'tostring,turtle,type,unpack,vector,write,xpcall,_VERSION,__indext,' +\n    // Not included in the script, probably because it wasn't enabled:\n    'HTTP,' +\n    // Keywords (http://www.lua.org/pil/1.3.html).\n    'and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,or,' +\n    'repeat,return,then,true,until,while,' +\n    // Metamethods (http://www.lua.org/manual/5.2/manual.html).\n    'add,sub,mul,div,mod,pow,unm,concat,len,eq,lt,le,index,newindex,call,' +\n    // Basic functions (http://www.lua.org/manual/5.2/manual.html, section 6.1).\n    'assert,collectgarbage,dofile,error,_G,getmetatable,inpairs,load,' +\n    'loadfile,next,pairs,pcall,print,rawequal,rawget,rawlen,rawset,select,' +\n    'setmetatable,tonumber,tostring,type,_VERSION,xpcall,' +\n    // Modules (http://www.lua.org/manual/5.2/manual.html, section 6.3).\n    'require,package,string,table,math,bit32,io,file,os,debug'\n);\n\n/**\n * Order of operation ENUMs.\n * http://www.lua.org/manual/5.3/manual.html#3.4.8\n */\nBlockly.Lua.ORDER_ATOMIC = 0;          // literals\n// The next level was not explicit in documentation and inferred by Ellen.\nBlockly.Lua.ORDER_HIGH = 1;            // Function calls, tables[]\nBlockly.Lua.ORDER_EXPONENTIATION = 2;  // ^\nBlockly.Lua.ORDER_UNARY = 3;           // not # - ~\nBlockly.Lua.ORDER_MULTIPLICATIVE = 4;  // * / %\nBlockly.Lua.ORDER_ADDITIVE = 5;        // + -\nBlockly.Lua.ORDER_CONCATENATION = 6;   // ..\nBlockly.Lua.ORDER_RELATIONAL = 7;      // < > <=  >= ~= ==\nBlockly.Lua.ORDER_AND = 8;             // and\nBlockly.Lua.ORDER_OR = 9;              // or\nBlockly.Lua.ORDER_NONE = 99;\n\n/**\n * Note: Lua is not supporting zero-indexing since the language itself is\n * one-indexed, so the generator does not repoct the oneBasedIndex configuration\n * option used for lists and text.\n */\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Lua.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Lua.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Lua.functionNames_ = Object.create(null);\n\n  if (!Blockly.Lua.variableDB_) {\n    Blockly.Lua.variableDB_ =\n        new Blockly.Names(Blockly.Lua.RESERVED_WORDS_);\n  } else {\n    Blockly.Lua.variableDB_.reset();\n  }\n  Blockly.Lua.variableDB_.setVariableMap(workspace.getVariableMap());\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.Lua.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  var definitions = [];\n  for (var name in Blockly.Lua.definitions_) {\n    definitions.push(Blockly.Lua.definitions_[name]);\n  }\n  // Clean up temporary data.\n  delete Blockly.Lua.definitions_;\n  delete Blockly.Lua.functionNames_;\n  Blockly.Lua.variableDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything. In Lua, an expression is not a legal statement, so we must assign\n * the value to the (conventionally ignored) _.\n * http://lua-users.org/wiki/ExpressionsAsStatements\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.Lua.scrubNakedValue = function(line) {\n  return 'local _ = ' + line + '\\n';\n};\n\n/**\n * Encode a string as a properly escaped Lua string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} Lua string.\n * @private\n */\nBlockly.Lua.quote_ = function(string) {\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline Lua string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} Lua string.\n * @private\n */\nBlockly.Lua.multiline_quote_ = function(string) {\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/'/g, '\\\\\\'');\n  return '[===' + string + '===]';\n};\n\n/**\n * Common tasks for generating Lua from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The Lua code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} Lua code with comments and subsequent blocks added.\n * @private\n */\nBlockly.Lua.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      comment = Blockly.utils.string.wrap(comment,\n          Blockly.Lua.COMMENT_WRAP - 3);\n      commentCode += Blockly.Lua.prefixLines(comment, '-- ') + '\\n';\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type == Blockly.INPUT_VALUE) {\n        var childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = Blockly.Lua.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += Blockly.Lua.prefixLines(comment, '-- ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Blockly.Lua.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n"],"file":"lua.min.js"}