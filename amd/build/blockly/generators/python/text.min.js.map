{"version":3,"sources":["../../../../src/blockly/generators/python/text.js"],"names":["goog","provide","require","Blockly","Python","block","code","quote_","getFieldValue","ORDER_ATOMIC","multiline_quote_","text","forceString_","value","strRegExp","test","itemCount_","element","valueToCode","ORDER_NONE","ORDER_FUNCTION_CALL","element0","element1","ORDER_ADDITIVE","elements","i","tempVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","join","varName","getName","ORDER_LOGICAL_NOT","operator","substring","ORDER_MEMBER","workspace","options","oneBasedIndex","where","at","getAdjustedInt","definitions_","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","Error","where1","where2","at1","at2","isNumber","msg","getField","toNumber","sub","from","to"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for text blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Python.texts');\n\ngoog.require('Blockly.Python');\n\n\nBlockly.Python['text'] = function(block) {\n  // Text value.\n  var code = Blockly.Python.quote_(block.getFieldValue('TEXT'));\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['text_multiline'] = function(block) {\n  // Text value.\n  var code = Blockly.Python.multiline_quote_(block.getFieldValue('TEXT'));\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n/**\n * Enclose the provided value in 'str(...)' function.\n * Leave string literals alone.\n * @param {string} value Code evaluating to a value.\n * @return {string} Code evaluating to a string.\n * @private\n */\nBlockly.Python.text.forceString_ = function(value) {\n  if (Blockly.Python.text.forceString_.strRegExp.test(value)) {\n    return value;\n  }\n  return 'str(' + value + ')';\n};\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nBlockly.Python.text.forceString_.strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\nBlockly.Python['text_join'] = function(block) {\n  // Create a string made up of any number of elements of any type.\n  //Should we allow joining by '-' or ',' or any other characters?\n  switch (block.itemCount_) {\n    case 0:\n      return ['\\'\\'', Blockly.Python.ORDER_ATOMIC];\n      break;\n    case 1:\n      var element = Blockly.Python.valueToCode(block, 'ADD0',\n              Blockly.Python.ORDER_NONE) || '\\'\\'';\n      var code = Blockly.Python.text.forceString_(element);\n      return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n      break;\n    case 2:\n      var element0 = Blockly.Python.valueToCode(block, 'ADD0',\n          Blockly.Python.ORDER_NONE) || '\\'\\'';\n      var element1 = Blockly.Python.valueToCode(block, 'ADD1',\n          Blockly.Python.ORDER_NONE) || '\\'\\'';\n      var code = Blockly.Python.text.forceString_(element0) + ' + ' +\n          Blockly.Python.text.forceString_(element1);\n      return [code, Blockly.Python.ORDER_ADDITIVE];\n      break;\n    default:\n      var elements = [];\n      for (var i = 0; i < block.itemCount_; i++) {\n        elements[i] = Blockly.Python.valueToCode(block, 'ADD' + i,\n                Blockly.Python.ORDER_NONE) || '\\'\\'';\n      }\n      var tempVar = Blockly.Python.variableDB_.getDistinctName('x',\n          Blockly.VARIABLE_CATEGORY_NAME);\n      var code = '\\'\\'.join([str(' + tempVar + ') for ' + tempVar + ' in [' +\n          elements.join(', ') + ']])';\n      return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n  }\n};\n\nBlockly.Python['text_append'] = function(block) {\n  // Append to a variable in place.\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  var value = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return varName + ' = str(' + varName + ') + ' +\n      Blockly.Python.text.forceString_(value) + '\\n';\n};\n\nBlockly.Python['text_length'] = function(block) {\n  // Is the string null or array empty?\n  var text = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return ['len(' + text + ')', Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['text_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var text = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  var code = 'not len(' + text + ')';\n  return [code, Blockly.Python.ORDER_LOGICAL_NOT];\n};\n\nBlockly.Python['text_indexOf'] = function(block) {\n  // Search the text for a substring.\n  // Should we allow for non-case sensitive???\n  var operator = block.getFieldValue('END') == 'FIRST' ? 'find' : 'rfind';\n  var substring = Blockly.Python.valueToCode(block, 'FIND',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  var text = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  var code = text + '.' + operator + '(' + substring + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Blockly.Python.ORDER_ADDITIVE];\n  }\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['text_charAt'] = function(block) {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var text = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  switch (where) {\n    case 'FIRST':\n      var code = text + '[0]';\n      return [code, Blockly.Python.ORDER_MEMBER];\n    case 'LAST':\n      var code = text + '[-1]';\n      return [code, Blockly.Python.ORDER_MEMBER];\n    case 'FROM_START':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT');\n      var code = text + '[' + at + ']';\n      return [code, Blockly.Python.ORDER_MEMBER];\n    case 'FROM_END':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT', 1, true);\n      var code = text + '[' + at + ']';\n      return [code, Blockly.Python.ORDER_MEMBER];\n    case 'RANDOM':\n      Blockly.Python.definitions_['import_random'] = 'import random';\n      var functionName = Blockly.Python.provideFunction_(\n          'text_random_letter',\n          ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(text):',\n           '  x = int(random.random() * len(text))',\n           '  return text[x];']);\n      code = functionName + '(' + text + ')';\n      return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n  }\n  throw Error('Unhandled option (text_charAt).');\n};\n\nBlockly.Python['text_getSubstring'] = function(block) {\n  // Get substring.\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  var text = Blockly.Python.valueToCode(block, 'STRING',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  switch (where1) {\n    case 'FROM_START':\n      var at1 = Blockly.Python.getAdjustedInt(block, 'AT1');\n      if (at1 == '0') {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      var at1 = Blockly.Python.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      var at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n  switch (where2) {\n    case 'FROM_START':\n      var at2 = Blockly.Python.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      var at2 = Blockly.Python.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!Blockly.isNumber(String(at2))) {\n        Blockly.Python.definitions_['import_sys'] = 'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 == '0') {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      var at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n  var code = text + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Blockly.Python.ORDER_MEMBER];\n};\n\nBlockly.Python['text_changeCase'] = function(block) {\n  // Change capitalization.\n  var OPERATORS = {\n    'UPPERCASE': '.upper()',\n    'LOWERCASE': '.lower()',\n    'TITLECASE': '.title()'\n  };\n  var operator = OPERATORS[block.getFieldValue('CASE')];\n  var text = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  var code = text + operator;\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['text_trim'] = function(block) {\n  // Trim spaces.\n  var OPERATORS = {\n    'LEFT': '.lstrip()',\n    'RIGHT': '.rstrip()',\n    'BOTH': '.strip()'\n  };\n  var operator = OPERATORS[block.getFieldValue('MODE')];\n  var text = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  var code = text + operator;\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['text_print'] = function(block) {\n  // Print statement.\n  var msg = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  return 'print(' + msg + ')\\n';\n};\n\nBlockly.Python['text_prompt_ext'] = function(block) {\n  // Prompt function.\n  var functionName = Blockly.Python.provideFunction_(\n      'text_prompt',\n      ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(msg):',\n       '  try:',\n       '    return raw_input(msg)',\n       '  except NameError:',\n       '    return input(msg)']);\n  if (block.getField('TEXT')) {\n    // Internal message.\n    var msg = Blockly.Python.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    var msg = Blockly.Python.valueToCode(block, 'TEXT',\n        Blockly.Python.ORDER_NONE) || '\\'\\'';\n  }\n  var code = functionName + '(' + msg + ')';\n  var toNumber = block.getFieldValue('TYPE') == 'NUMBER';\n  if (toNumber) {\n    code = 'float(' + code + ')';\n  }\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['text_prompt'] = Blockly.Python['text_prompt_ext'];\n\nBlockly.Python['text_count'] = function(block) {\n  var text = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  var sub = Blockly.Python.valueToCode(block, 'SUB',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  var code = text + '.count(' + sub + ')';\n  return [code, Blockly.Python.ORDER_MEMBER];\n};\n\nBlockly.Python['text_replace'] = function(block) {\n  var text = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  var from = Blockly.Python.valueToCode(block, 'FROM',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  var to = Blockly.Python.valueToCode(block, 'TO',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  var code = text + '.replace(' + from + ', ' + to + ')';\n  return [code, Blockly.Python.ORDER_MEMBER];\n};\n\nBlockly.Python['text_reverse'] = function(block) {\n  var text = Blockly.Python.valueToCode(block, 'TEXT',\n      Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n  var code = text + '[::-1]';\n  return [code, Blockly.Python.ORDER_MEMBER];\n};\n"],"file":"text.min.js"}