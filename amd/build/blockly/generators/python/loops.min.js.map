{"version":3,"sources":["../../../../src/blockly/generators/python/loops.js"],"names":["goog","provide","require","Blockly","Python","block","getField","repeats","parseInt","getFieldValue","valueToCode","ORDER_NONE","isNumber","branch","statementToCode","addLoopTrap","PASS","loopVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","code","until","argument0","ORDER_LOGICAL_NOT","variable0","getName","argument1","increment","range","defineUpRange","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","defineDownRange","generateUpDownRange","start","end","inc","Math","abs","scrub","arg","suffix","match","varName","startVar","endVar","incVar","ORDER_RELATIONAL","xfix","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","loop","Constants","Loops","CONTROL_FLOW_IN_LOOP_CHECK_MIXIN","getSurroundLoop","suppressPrefixSuffix","Error"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,sBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EAGAC,OAAO,CAACC,MAAR,qBAAwC,SAASC,CAAT,CAAgB,CAEtD,GAAIA,CAAK,CAACC,QAAN,CAAe,OAAf,CAAJ,CAA6B,CAE3B,GAAIC,CAAAA,CAAO,CAAUC,QAAQ,CAACH,CAAK,CAACI,aAAN,CAAoB,OAApB,CAAD,CAA+B,EAA/B,CAAlB,GACZ,CAHD,IAGO,CAEL,GAAIF,CAAAA,CAAO,CAAGJ,OAAO,CAACC,MAAR,CAAeM,WAAf,CAA2BL,CAA3B,CAAkC,OAAlC,CACVF,OAAO,CAACC,MAAR,CAAeO,UADL,GACoB,GACnC,CACD,GAAIR,OAAO,CAACS,QAAR,CAAiBL,CAAjB,CAAJ,CAA+B,CAC7BA,CAAO,CAAGC,QAAQ,CAACD,CAAD,CAAU,EAAV,CACnB,CAFD,IAEO,CACLA,CAAO,CAAG,OAASA,CAAT,CAAmB,GAC9B,CACD,GAAIM,CAAAA,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeU,eAAf,CAA+BT,CAA/B,CAAsC,IAAtC,CAAb,CACAQ,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeW,WAAf,CAA2BF,CAA3B,CAAmCR,CAAnC,GAA6CF,OAAO,CAACC,MAAR,CAAeY,IAArE,CAhBsD,GAiBlDC,CAAAA,CAAO,CAAGd,OAAO,CAACC,MAAR,CAAec,WAAf,CAA2BC,eAA3B,CACV,OADU,CACDhB,OAAO,CAACiB,sBADP,CAjBwC,CAmBlDC,CAAI,CAAG,OAASJ,CAAT,CAAmB,YAAnB,CAAkCV,CAAlC,CAA4C,MAA5C,CAAqDM,CAnBV,CAoBtD,MAAOQ,CAAAA,CACR,CArBD,CAuBAlB,OAAO,CAACC,MAAR,iBAAoCD,OAAO,CAACC,MAAR,oBAApC,CAEAD,OAAO,CAACC,MAAR,qBAAwC,SAASC,CAAT,CAAgB,IAElDiB,CAAAA,CAAK,CAAkC,OAA/B,EAAAjB,CAAK,CAACI,aAAN,CAAoB,MAApB,CAF0C,CAGlDc,CAAS,CAAGpB,OAAO,CAACC,MAAR,CAAeM,WAAf,CAA2BL,CAA3B,CAAkC,MAAlC,CACZiB,CAAK,CAAGnB,OAAO,CAACC,MAAR,CAAeoB,iBAAlB,CACLrB,OAAO,CAACC,MAAR,CAAeO,UAFH,GAEkB,OALoB,CAMlDE,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeU,eAAf,CAA+BT,CAA/B,CAAsC,IAAtC,CANyC,CAOtDQ,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeW,WAAf,CAA2BF,CAA3B,CAAmCR,CAAnC,GAA6CF,OAAO,CAACC,MAAR,CAAeY,IAArE,CACA,GAAIM,CAAJ,CAAW,CACTC,CAAS,CAAG,OAASA,CACtB,CACD,MAAO,SAAWA,CAAX,CAAuB,KAAvB,CAA+BV,CACvC,CAZD,CAcAV,OAAO,CAACC,MAAR,cAAiC,SAASC,CAAT,CAAgB,IAE3CoB,CAAAA,CAAS,CAAGtB,OAAO,CAACC,MAAR,CAAec,WAAf,CAA2BQ,OAA3B,CACZrB,CAAK,CAACI,aAAN,CAAoB,KAApB,CADY,CACgBN,OAAO,CAACiB,sBADxB,CAF+B,CAI3CG,CAAS,CAAGpB,OAAO,CAACC,MAAR,CAAeM,WAAf,CAA2BL,CAA3B,CAAkC,MAAlC,CACZF,OAAO,CAACC,MAAR,CAAeO,UADH,GACkB,GALa,CAM3CgB,CAAS,CAAGxB,OAAO,CAACC,MAAR,CAAeM,WAAf,CAA2BL,CAA3B,CAAkC,IAAlC,CACZF,OAAO,CAACC,MAAR,CAAeO,UADH,GACkB,GAPa,CAQ3CiB,CAAS,CAAGzB,OAAO,CAACC,MAAR,CAAeM,WAAf,CAA2BL,CAA3B,CAAkC,IAAlC,CACZF,OAAO,CAACC,MAAR,CAAeO,UADH,GACkB,GATa,CAU3CE,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeU,eAAf,CAA+BT,CAA/B,CAAsC,IAAtC,CAVkC,CAW/CQ,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeW,WAAf,CAA2BF,CAA3B,CAAmCR,CAAnC,GAA6CF,OAAO,CAACC,MAAR,CAAeY,IAArE,CAX+C,GAa3CK,CAAAA,CAAI,CAAG,EAboC,CAc3CQ,CAd2C,CAiB3CC,CAAa,CAAG,UAAW,CAC7B,MAAO3B,CAAAA,OAAO,CAACC,MAAR,CAAe2B,gBAAf,CACH,SADG,CAEH,CAAC,OAAS5B,OAAO,CAACC,MAAR,CAAe4B,0BAAxB,CACG,sBADJ,CAEC,wBAFD,CAGC,iBAHD,CAIC,wBAJD,CAFG,CAOR,CAzB8C,CA0B3CC,CAAe,CAAG,UAAW,CAC/B,MAAO9B,CAAAA,OAAO,CAACC,MAAR,CAAe2B,gBAAf,CACH,WADG,CAEH,CAAC,OAAS5B,OAAO,CAACC,MAAR,CAAe4B,0BAAxB,CACG,sBADJ,CAEC,wBAFD,CAGC,iBAHD,CAIC,wBAJD,CAFG,CAOR,CAlC8C,CAoC3CE,CAAmB,CAAG,SAASC,CAAT,CAAgBC,CAAhB,CAAqBC,CAArB,CAA0B,CAClD,MAAO,IAAMF,CAAN,CAAc,MAAd,CAAuBC,CAAvB,CAA6B,QAA7B,CACHN,CAAa,EADV,CACe,GADf,CACqBK,CADrB,CAC6B,IAD7B,CACoCC,CADpC,CAC0C,IAD1C,CACiDC,CADjD,CACuD,OADvD,CAEHJ,CAAe,EAFZ,CAEiB,GAFjB,CAEuBE,CAFvB,CAE+B,IAF/B,CAEsCC,CAFtC,CAE4C,IAF5C,CAEmDC,CAFnD,CAEyD,GACjE,CAxC8C,CA0C/C,GAAIlC,OAAO,CAACS,QAAR,CAAiBW,CAAjB,GAA+BpB,OAAO,CAACS,QAAR,CAAiBe,CAAjB,CAA/B,EACAxB,OAAO,CAACS,QAAR,CAAiBgB,CAAjB,CADJ,CACiC,CAE/BL,CAAS,EAAUA,CAAnB,CACAI,CAAS,EAAUA,CAAnB,CACAC,CAAS,CAAGU,IAAI,CAACC,GAAL,EAAgBX,CAAhB,CAAZ,CACA,GAAsB,CAAlB,EAAAL,CAAS,CAAG,CAAZ,EAAyC,CAAlB,EAAAI,CAAS,CAAG,CAAnC,EAAgE,CAAlB,EAAAC,CAAS,CAAG,CAA9D,CAAuE,CAErE,GAAIL,CAAS,EAAII,CAAjB,CAA4B,CAE1BA,CAAS,GACT,GAAiB,CAAb,EAAAJ,CAAS,EAAsB,CAAb,EAAAK,CAAtB,CAAsC,CAEpCC,CAAK,CAAGF,CACT,CAHD,IAGO,CACLE,CAAK,CAAGN,CAAS,CAAG,IAAZ,CAAmBI,CAC5B,CAED,GAAiB,CAAb,EAAAC,CAAJ,CAAoB,CAClBC,CAAK,EAAI,KAAOD,CACjB,CACF,CAbD,IAaO,CAELD,CAAS,GACTE,CAAK,CAAGN,CAAS,CAAG,IAAZ,CAAmBI,CAAnB,CAA+B,KAA/B,CAAuCC,CAChD,CACDC,CAAK,CAAG,SAAWA,CAAX,CAAmB,GAC5B,CArBD,IAqBO,CAEL,GAAIN,CAAS,CAAGI,CAAhB,CAA2B,CACzBE,CAAK,CAAGC,CAAa,EACtB,CAFD,IAEO,CACLD,CAAK,CAAGI,CAAe,EACxB,CACDJ,CAAK,EAAI,IAAMN,CAAN,CAAkB,IAAlB,CAAyBI,CAAzB,CAAqC,IAArC,CAA4CC,CAA5C,CAAwD,GAClE,CACF,CApCD,IAoCO,IAEDY,CAAAA,CAAK,CAAG,SAASC,CAAT,CAAcC,CAAd,CAAsB,CAChC,GAAIvC,OAAO,CAACS,QAAR,CAAiB6B,CAAjB,CAAJ,CAA2B,CAEzBA,CAAG,EAAUA,CACd,CAHD,IAGO,IAAIA,CAAG,CAACE,KAAJ,CAAU,OAAV,CAAJ,CAAwB,CAE7BF,CAAG,CAAG,SAAWA,CAAX,CAAiB,GACxB,CAHM,IAGA,CAEL,GAAIG,CAAAA,CAAO,CAAGzC,OAAO,CAACC,MAAR,CAAec,WAAf,CAA2BC,eAA3B,CACVM,CAAS,CAAGiB,CADF,CACUvC,OAAO,CAACiB,sBADlB,CAAd,CAEAC,CAAI,EAAIuB,CAAO,CAAG,WAAV,CAAwBH,CAAxB,CAA8B,KAAtC,CACAA,CAAG,CAAGG,CACP,CACD,MAAOH,CAAAA,CACR,CAjBI,CAkBDI,CAAQ,CAAGL,CAAK,CAACjB,CAAD,CAAY,QAAZ,CAlBf,CAmBDuB,CAAM,CAAGN,CAAK,CAACb,CAAD,CAAY,MAAZ,CAnBb,CAoBDoB,CAAM,CAAGP,CAAK,CAACZ,CAAD,CAAY,MAAZ,CApBb,CAsBL,GAAuB,QAAnB,QAAOiB,CAAAA,CAAP,EAAgD,QAAjB,QAAOC,CAAAA,CAA1C,CAA8D,CAC5D,GAAID,CAAQ,CAAGC,CAAf,CAAuB,CACrBjB,CAAK,CAAGC,CAAa,CAACe,CAAD,CAAWC,CAAX,CAAmBlB,CAAnB,CACtB,CAFD,IAEO,CACLC,CAAK,CAAGI,CAAe,CAACY,CAAD,CAAWC,CAAX,CAAmBlB,CAAnB,CACxB,CACF,CAND,IAMO,CAELC,CAAK,CAAGK,CAAmB,CAACW,CAAD,CAAWC,CAAX,CAAmBlB,CAAnB,CAC5B,CACF,CACDP,CAAI,EAAI,OAASI,CAAT,CAAqB,MAArB,CAA8BI,CAA9B,CAAsC,KAAtC,CAA8ChB,CAAtD,CACA,MAAOQ,CAAAA,CACR,CAjHD,CAmHAlB,OAAO,CAACC,MAAR,kBAAqC,SAASC,CAAT,CAAgB,IAE/CoB,CAAAA,CAAS,CAAGtB,OAAO,CAACC,MAAR,CAAec,WAAf,CAA2BQ,OAA3B,CACZrB,CAAK,CAACI,aAAN,CAAoB,KAApB,CADY,CACgBN,OAAO,CAACiB,sBADxB,CAFmC,CAI/CG,CAAS,CAAGpB,OAAO,CAACC,MAAR,CAAeM,WAAf,CAA2BL,CAA3B,CAAkC,MAAlC,CACZF,OAAO,CAACC,MAAR,CAAe4C,gBADH,GACwB,IALW,CAM/CnC,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeU,eAAf,CAA+BT,CAA/B,CAAsC,IAAtC,CANsC,CAOnDQ,CAAM,CAAGV,OAAO,CAACC,MAAR,CAAeW,WAAf,CAA2BF,CAA3B,CAAmCR,CAAnC,GAA6CF,OAAO,CAACC,MAAR,CAAeY,IAArE,CACA,GAAIK,CAAAA,CAAI,CAAG,OAASI,CAAT,CAAqB,MAArB,CAA8BF,CAA9B,CAA0C,KAA1C,CAAkDV,CAA7D,CACA,MAAOQ,CAAAA,CACR,CAVD,CAYAlB,OAAO,CAACC,MAAR,0BAA6C,SAASC,CAAT,CAAgB,CAE3D,GAAI4C,CAAAA,CAAI,CAAG,EAAX,CACA,GAAI9C,OAAO,CAACC,MAAR,CAAe8C,gBAAnB,CAAqC,CAEnCD,CAAI,EAAI9C,OAAO,CAACC,MAAR,CAAe+C,QAAf,CAAwBhD,OAAO,CAACC,MAAR,CAAe8C,gBAAvC,CAAyD7C,CAAzD,CACT,CACD,GAAIF,OAAO,CAACC,MAAR,CAAegD,gBAAnB,CAAqC,CAGnCH,CAAI,EAAI9C,OAAO,CAACC,MAAR,CAAe+C,QAAf,CAAwBhD,OAAO,CAACC,MAAR,CAAegD,gBAAvC,CAAyD/C,CAAzD,CACT,CACD,GAAIF,OAAO,CAACC,MAAR,CAAe8C,gBAAnB,CAAqC,CACnC,GAAIG,CAAAA,CAAI,CAAGlD,OAAO,CAACmD,SAAR,CAAkBC,KAAlB,CACNC,gCADM,CAC2BC,eAD3B,CAC2CpD,CAD3C,CAAX,CAEA,GAAIgD,CAAI,EAAI,CAACA,CAAI,CAACK,oBAAlB,CAAwC,CAItCT,CAAI,EAAI9C,OAAO,CAACC,MAAR,CAAe+C,QAAf,CAAwBhD,OAAO,CAACC,MAAR,CAAe8C,gBAAvC,CAAyDG,CAAzD,CACT,CACF,CACD,OAAQhD,CAAK,CAACI,aAAN,CAAoB,MAApB,CAAR,EACE,IAAK,OAAL,CACE,MAAOwC,CAAAA,CAAI,CAAG,SAAd,CACF,IAAK,UAAL,CACE,MAAOA,CAAAA,CAAI,CAAG,YAAd,CAJJ,CAMA,KAAMU,CAAAA,KAAK,CAAC,yBAAD,CACZ,CA7BD","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for loop blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Python.loops');\n\ngoog.require('Blockly.Python');\n\n\nBlockly.Python['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    var repeats = Blockly.Python.valueToCode(block, 'TIMES',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block) || Blockly.Python.PASS;\n  var loopVar = Blockly.Python.variableDB_.getDistinctName(\n      'count', Blockly.VARIABLE_CATEGORY_NAME);\n  var code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_repeat'] = Blockly.Python['controls_repeat_ext'];\n\nBlockly.Python['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  var until = block.getFieldValue('MODE') == 'UNTIL';\n  var argument0 = Blockly.Python.valueToCode(block, 'BOOL',\n      until ? Blockly.Python.ORDER_LOGICAL_NOT :\n      Blockly.Python.ORDER_NONE) || 'False';\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block) || Blockly.Python.PASS;\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ':\\n' + branch;\n};\n\nBlockly.Python['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.Python.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.Python.valueToCode(block, 'FROM',\n      Blockly.Python.ORDER_NONE) || '0';\n  var argument1 = Blockly.Python.valueToCode(block, 'TO',\n      Blockly.Python.ORDER_NONE) || '0';\n  var increment = Blockly.Python.valueToCode(block, 'BY',\n      Blockly.Python.ORDER_NONE) || '1';\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block) || Blockly.Python.PASS;\n\n  var code = '';\n  var range;\n\n  // Helper functions.\n  var defineUpRange = function() {\n    return Blockly.Python.provideFunction_(\n        'upRange',\n        ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ +\n            '(start, stop, step):',\n         '  while start <= stop:',\n         '    yield start',\n         '    start += abs(step)']);\n  };\n  var defineDownRange = function() {\n    return Blockly.Python.provideFunction_(\n        'downRange',\n        ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ +\n            '(start, stop, step):',\n         '  while start >= stop:',\n         '    yield start',\n         '    start -= abs(step)']);\n  };\n  // Arguments are legal Python code (numbers or strings returned by scrub()).\n  var generateUpDownRange = function(start, end, inc) {\n    return '(' + start + ' <= ' + end + ') and ' +\n        defineUpRange() + '(' + start + ', ' + end + ', ' + inc + ') or ' +\n        defineDownRange() + '(' + start + ', ' + end + ', ' + inc + ')';\n  };\n\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All parameters are simple numbers.\n    argument0 = Number(argument0);\n    argument1 = Number(argument1);\n    increment = Math.abs(Number(increment));\n    if (argument0 % 1 === 0 && argument1 % 1 === 0 && increment % 1 === 0) {\n      // All parameters are integers.\n      if (argument0 <= argument1) {\n        // Count up.\n        argument1++;\n        if (argument0 == 0 && increment == 1) {\n          // If starting index is 0, omit it.\n          range = argument1;\n        } else {\n          range = argument0 + ', ' + argument1;\n        }\n        // If increment isn't 1, it must be explicit.\n        if (increment != 1) {\n          range += ', ' + increment;\n        }\n      } else {\n        // Count down.\n        argument1--;\n        range = argument0 + ', ' + argument1 + ', -' + increment;\n      }\n      range = 'range(' + range + ')';\n    } else {\n      // At least one of the parameters is not an integer.\n      if (argument0 < argument1) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + argument0 + ', ' + argument1 + ', ' + increment + ')';\n    }\n  } else {\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var scrub = function(arg, suffix) {\n      if (Blockly.isNumber(arg)) {\n        // Simple number.\n        arg = Number(arg);\n      } else if (arg.match(/^\\w+$/)) {\n        // Variable.\n        arg = 'float(' + arg + ')';\n      } else {\n        // It's complicated.\n        var varName = Blockly.Python.variableDB_.getDistinctName(\n            variable0 + suffix, Blockly.VARIABLE_CATEGORY_NAME);\n        code += varName + ' = float(' + arg + ')\\n';\n        arg = varName;\n      }\n      return arg;\n    };\n    var startVar = scrub(argument0, '_start');\n    var endVar = scrub(argument1, '_end');\n    var incVar = scrub(increment, '_inc');\n\n    if (typeof startVar == 'number' && typeof endVar == 'number') {\n      if (startVar < endVar) {\n        range = defineUpRange(startVar, endVar, increment);\n      } else {\n        range = defineDownRange(startVar, endVar, increment);\n      }\n    } else {\n      // We cannot determine direction statically.\n      range = generateUpDownRange(startVar, endVar, increment);\n    }\n  }\n  code += 'for ' + variable0 + ' in ' + range + ':\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.Python.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_RELATIONAL) || '[]';\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block) || Blockly.Python.PASS;\n  var code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\n  return code;\n};\n\nBlockly.Python['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  var xfix = '';\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, block);\n  }\n  if (Blockly.Python.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, block);\n  }\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    var loop = Blockly.Constants.Loops\n        .CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(block);\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + 'continue\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n"],"file":"loops.min.js"}