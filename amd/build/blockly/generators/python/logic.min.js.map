{"version":3,"sources":["../../../../src/blockly/generators/python/logic.js"],"names":["goog","provide","require","Blockly","Python","block","n","code","branchCode","conditionCode","STATEMENT_PREFIX","injectId","valueToCode","ORDER_NONE","statementToCode","PASS","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","operator","getFieldValue","order","ORDER_RELATIONAL","argument0","argument1","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","defaultArgument","ORDER_LOGICAL_NOT","ORDER_ATOMIC","value_if","ORDER_CONDITIONAL","value_then","value_else"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for logic blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Python.logic');\n\ngoog.require('Blockly.Python');\n\n\nBlockly.Python['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode = Blockly.Python.valueToCode(block, 'IF' + n,\n        Blockly.Python.ORDER_NONE) || 'False';\n    branchCode = Blockly.Python.statementToCode(block, 'DO' + n) ||\n        Blockly.Python.PASS;\n    if (Blockly.Python.STATEMENT_SUFFIX) {\n      branchCode = Blockly.Python.prefixLines(\n          Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, block),\n          Blockly.Python.INDENT) + branchCode;\n    }\n    code += (n == 0 ? 'if ' : 'elif ' ) + conditionCode + ':\\n' + branchCode;\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || Blockly.Python.STATEMENT_SUFFIX) {\n    branchCode = Blockly.Python.statementToCode(block, 'ELSE') ||\n        Blockly.Python.PASS;\n    if (Blockly.Python.STATEMENT_SUFFIX) {\n      branchCode = Blockly.Python.prefixLines(\n          Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, block),\n          Blockly.Python.INDENT) + branchCode;\n    }\n    code += 'else:\\n' + branchCode;\n  }\n  return code;\n};\n\nBlockly.Python['controls_ifelse'] = Blockly.Python['controls_if'];\n\nBlockly.Python['logic_compare'] = function(block) {\n  // Comparison operator.\n  var OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>='\n  };\n  var operator = OPERATORS[block.getFieldValue('OP')];\n  var order = Blockly.Python.ORDER_RELATIONAL;\n  var argument0 = Blockly.Python.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.Python.valueToCode(block, 'B', order) || '0';\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nBlockly.Python['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  var operator = (block.getFieldValue('OP') == 'AND') ? 'and' : 'or';\n  var order = (operator == 'and') ? Blockly.Python.ORDER_LOGICAL_AND :\n      Blockly.Python.ORDER_LOGICAL_OR;\n  var argument0 = Blockly.Python.valueToCode(block, 'A', order);\n  var argument1 = Blockly.Python.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'False';\n    argument1 = 'False';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    var defaultArgument = (operator == 'and') ? 'True' : 'False';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nBlockly.Python['logic_negate'] = function(block) {\n  // Negation.\n  var argument0 = Blockly.Python.valueToCode(block, 'BOOL',\n      Blockly.Python.ORDER_LOGICAL_NOT) || 'True';\n  var code = 'not ' + argument0;\n  return [code, Blockly.Python.ORDER_LOGICAL_NOT];\n};\n\nBlockly.Python['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'True' : 'False';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['logic_null'] = function(block) {\n  // Null data type.\n  return ['None', Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['logic_ternary'] = function(block) {\n  // Ternary operator.\n  var value_if = Blockly.Python.valueToCode(block, 'IF',\n      Blockly.Python.ORDER_CONDITIONAL) || 'False';\n  var value_then = Blockly.Python.valueToCode(block, 'THEN',\n      Blockly.Python.ORDER_CONDITIONAL) || 'None';\n  var value_else = Blockly.Python.valueToCode(block, 'ELSE',\n      Blockly.Python.ORDER_CONDITIONAL) || 'None';\n  var code = value_then + ' if ' + value_if + ' else ' + value_else;\n  return [code, Blockly.Python.ORDER_CONDITIONAL];\n};\n"],"file":"logic.min.js"}