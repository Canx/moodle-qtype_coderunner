'use strict';goog.provide("Blockly.Python.math");goog.require("Blockly.Python");Blockly.Python.addReservedWords("math,random,Number");Blockly.Python.math_number=function(a){var b=+a.getFieldValue("NUM"),c;if(b==1/0){b="float(\"inf\")";c=Blockly.Python.ORDER_FUNCTION_CALL}else if(b==-Infinity){b="-float(\"inf\")";c=Blockly.Python.ORDER_UNARY_SIGN}else{c=0>b?Blockly.Python.ORDER_UNARY_SIGN:Blockly.Python.ORDER_ATOMIC}return[b,c]};Blockly.Python.math_arithmetic=function(a){var b={ADD:[" + ",Blockly.Python.ORDER_ADDITIVE],MINUS:[" - ",Blockly.Python.ORDER_ADDITIVE],MULTIPLY:[" * ",Blockly.Python.ORDER_MULTIPLICATIVE],DIVIDE:[" / ",Blockly.Python.ORDER_MULTIPLICATIVE],POWER:[" ** ",Blockly.Python.ORDER_EXPONENTIATION]},c=b[a.getFieldValue("OP")],d=c[0],e=c[1],f=Blockly.Python.valueToCode(a,"A",e)||"0",g=Blockly.Python.valueToCode(a,"B",e)||"0";return[f+d+g,e]};Blockly.Python.math_single=function(a){var b=a.getFieldValue("OP"),c,d;if("NEG"==b){c=Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_UNARY_SIGN)||"0";return["-"+c,Blockly.Python.ORDER_UNARY_SIGN]}Blockly.Python.definitions_.import_math="import math";if("SIN"==b||"COS"==b||"TAN"==b){d=Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_MULTIPLICATIVE)||"0"}else{d=Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_NONE)||"0"}switch(b){case"ABS":c="math.fabs("+d+")";break;case"ROOT":c="math.sqrt("+d+")";break;case"LN":c="math.log("+d+")";break;case"LOG10":c="math.log10("+d+")";break;case"EXP":c="math.exp("+d+")";break;case"POW10":c="math.pow(10,"+d+")";break;case"ROUND":c="round("+d+")";break;case"ROUNDUP":c="math.ceil("+d+")";break;case"ROUNDDOWN":c="math.floor("+d+")";break;case"SIN":c="math.sin("+d+" / 180.0 * math.pi)";break;case"COS":c="math.cos("+d+" / 180.0 * math.pi)";break;case"TAN":c="math.tan("+d+" / 180.0 * math.pi)";break;}if(c){return[c,Blockly.Python.ORDER_FUNCTION_CALL]}switch(b){case"ASIN":c="math.asin("+d+") / math.pi * 180";break;case"ACOS":c="math.acos("+d+") / math.pi * 180";break;case"ATAN":c="math.atan("+d+") / math.pi * 180";break;default:throw Error("Unknown math operator: "+b);}return[c,Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.math_constant=function(a){var b={PI:["math.pi",Blockly.Python.ORDER_MEMBER],E:["math.e",Blockly.Python.ORDER_MEMBER],GOLDEN_RATIO:["(1 + math.sqrt(5)) / 2",Blockly.Python.ORDER_MULTIPLICATIVE],SQRT2:["math.sqrt(2)",Blockly.Python.ORDER_MEMBER],SQRT1_2:["math.sqrt(1.0 / 2)",Blockly.Python.ORDER_MEMBER],INFINITY:["float('inf')",Blockly.Python.ORDER_ATOMIC]},c=a.getFieldValue("CONSTANT");if("INFINITY"!=c){Blockly.Python.definitions_.import_math="import math"}return b[c]};Blockly.Python.math_number_property=function(a){var b=Blockly.Python.valueToCode(a,"NUMBER_TO_CHECK",Blockly.Python.ORDER_MULTIPLICATIVE)||"0",c=a.getFieldValue("PROPERTY"),d;if("PRIME"==c){Blockly.Python.definitions_.import_math="import math";Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number";var e=Blockly.Python.provideFunction_("math_isPrime",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(n):","  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods","  # If n is not a number but a string, try parsing it.","  if not isinstance(n, Number):","    try:","      n = float(n)","    except:","      return False","  if n == 2 or n == 3:","    return True","  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.","  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:","    return False","  # Check all the numbers of form 6k +/- 1, up to sqrt(n).","  for x in range(6, int(math.sqrt(n)) + 2, 6):","    if n % (x - 1) == 0 or n % (x + 1) == 0:","      return False","  return True"]);d=e+"("+b+")";return[d,Blockly.Python.ORDER_FUNCTION_CALL]}switch(c){case"EVEN":d=b+" % 2 == 0";break;case"ODD":d=b+" % 2 == 1";break;case"WHOLE":d=b+" % 1 == 0";break;case"POSITIVE":d=b+" > 0";break;case"NEGATIVE":d=b+" < 0";break;case"DIVISIBLE_BY":var f=Blockly.Python.valueToCode(a,"DIVISOR",Blockly.Python.ORDER_MULTIPLICATIVE);if(!f||"0"==f){return["False",Blockly.Python.ORDER_ATOMIC]}d=b+" % "+f+" == 0";break;}return[d,Blockly.Python.ORDER_RELATIONAL]};Blockly.Python.math_change=function(a){Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number";var b=Blockly.Python.valueToCode(a,"DELTA",Blockly.Python.ORDER_ADDITIVE)||"0",c=Blockly.Python.variableDB_.getName(a.getFieldValue("VAR"),Blockly.VARIABLE_CATEGORY_NAME);return c+" = ("+c+" if isinstance("+c+", Number) else 0) + "+b+"\n"};Blockly.Python.math_round=Blockly.Python.math_single;Blockly.Python.math_trig=Blockly.Python.math_single;Blockly.Python.math_on_list=function(a){var b=a.getFieldValue("OP"),c=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_NONE)||"[]",d;switch(b){case"SUM":d="sum("+c+")";break;case"MIN":d="min("+c+")";break;case"MAX":d="max("+c+")";break;case"AVERAGE":Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number";var e=Blockly.Python.provideFunction_("math_mean",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  localList = [e for e in myList if isinstance(e, Number)]","  if not localList: return","  return float(sum(localList)) / len(localList)"]);d=e+"("+c+")";break;case"MEDIAN":Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number";var e=Blockly.Python.provideFunction_("math_median",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  localList = sorted([e for e in myList if isinstance(e, Number)])","  if not localList: return","  if len(localList) % 2 == 0:","    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0","  else:","    return localList[(len(localList) - 1) // 2]"]);d=e+"("+c+")";break;case"MODE":var e=Blockly.Python.provideFunction_("math_modes",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(some_list):","  modes = []","  # Using a lists of [item, count] to keep count rather than dict","  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.","  counts = []","  maxCount = 1","  for item in some_list:","    found = False","    for count in counts:","      if count[0] == item:","        count[1] += 1","        maxCount = max(maxCount, count[1])","        found = True","    if not found:","      counts.append([item, 1])","  for counted_item, item_count in counts:","    if item_count == maxCount:","      modes.append(counted_item)","  return modes"]);d=e+"("+c+")";break;case"STD_DEV":Blockly.Python.definitions_.import_math="import math";var e=Blockly.Python.provideFunction_("math_standard_deviation",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(numbers):","  n = len(numbers)","  if n == 0: return","  mean = float(sum(numbers)) / n","  variance = sum((x - mean) ** 2 for x in numbers) / n","  return math.sqrt(variance)"]);d=e+"("+c+")";break;case"RANDOM":Blockly.Python.definitions_.import_random="import random";d="random.choice("+c+")";break;default:throw Error("Unknown operator: "+b);}return[d,Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_modulo=function(a){var b=Blockly.Python.valueToCode(a,"DIVIDEND",Blockly.Python.ORDER_MULTIPLICATIVE)||"0",c=Blockly.Python.valueToCode(a,"DIVISOR",Blockly.Python.ORDER_MULTIPLICATIVE)||"0";return[b+" % "+c,Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.math_constrain=function(a){var b=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"0",c=Blockly.Python.valueToCode(a,"LOW",Blockly.Python.ORDER_NONE)||"0",d=Blockly.Python.valueToCode(a,"HIGH",Blockly.Python.ORDER_NONE)||"float('inf')";return["min(max("+b+", "+c+"), "+d+")",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_random_int=function(a){Blockly.Python.definitions_.import_random="import random";var b=Blockly.Python.valueToCode(a,"FROM",Blockly.Python.ORDER_NONE)||"0",c=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"0";return["random.randint("+b+", "+c+")",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_random_float=function(){Blockly.Python.definitions_.import_random="import random";return["random.random()",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_atan2=function(a){Blockly.Python.definitions_.import_math="import math";var b=Blockly.Python.valueToCode(a,"X",Blockly.Python.ORDER_NONE)||"0",c=Blockly.Python.valueToCode(a,"Y",Blockly.Python.ORDER_NONE)||"0";return["math.atan2("+c+", "+b+") / math.pi * 180",Blockly.Python.ORDER_MULTIPLICATIVE]};
//# sourceMappingURL=math.min.js.map
