{"version":3,"sources":["../../../../src/blockly/generators/python/math.js"],"names":["goog","provide","require","Blockly","Python","addReservedWords","block","code","getFieldValue","order","ORDER_FUNCTION_CALL","Infinity","ORDER_UNARY_SIGN","ORDER_ATOMIC","OPERATORS","ORDER_ADDITIVE","ORDER_MULTIPLICATIVE","ORDER_EXPONENTIATION","tuple","operator","argument0","valueToCode","argument1","arg","definitions_","ORDER_NONE","Error","CONSTANTS","ORDER_MEMBER","constant","number_to_check","dropdown_property","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","divisor","ORDER_RELATIONAL","varName","variableDB_","getName","VARIABLE_CATEGORY_NAME","func","list","argument2"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for math blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Python.math');\n\ngoog.require('Blockly.Python');\n\n\n// If any new block imports any library, add that library name here.\nBlockly.Python.addReservedWords('math,random,Number');\n\nBlockly.Python['math_number'] = function(block) {\n  // Numeric value.\n  var code = Number(block.getFieldValue('NUM'));\n  var order;\n  if (code == Infinity) {\n    code = 'float(\"inf\")';\n    order = Blockly.Python.ORDER_FUNCTION_CALL;\n  } else if (code == -Infinity) {\n    code = '-float(\"inf\")';\n    order = Blockly.Python.ORDER_UNARY_SIGN;\n  } else {\n    order = code < 0 ? Blockly.Python.ORDER_UNARY_SIGN :\n            Blockly.Python.ORDER_ATOMIC;\n  }\n  return [code, order];\n};\n\nBlockly.Python['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  var OPERATORS = {\n    'ADD': [' + ', Blockly.Python.ORDER_ADDITIVE],\n    'MINUS': [' - ', Blockly.Python.ORDER_ADDITIVE],\n    'MULTIPLY': [' * ', Blockly.Python.ORDER_MULTIPLICATIVE],\n    'DIVIDE': [' / ', Blockly.Python.ORDER_MULTIPLICATIVE],\n    'POWER': [' ** ', Blockly.Python.ORDER_EXPONENTIATION]\n  };\n  var tuple = OPERATORS[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Blockly.Python.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.Python.valueToCode(block, 'B', order) || '0';\n  var code = argument0 + operator + argument1;\n  return [code, order];\n  // In case of 'DIVIDE', division between integers returns different results\n  // in Python 2 and 3. However, is not an issue since Blockly does not\n  // guarantee identical results in all languages.  To do otherwise would\n  // require every operator to be wrapped in a function call.  This would kill\n  // legibility of the generated code.\n};\n\nBlockly.Python['math_single'] = function(block) {\n  // Math operators with single operand.\n  var operator = block.getFieldValue('OP');\n  var code;\n  var arg;\n  if (operator == 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    code = Blockly.Python.valueToCode(block, 'NUM',\n        Blockly.Python.ORDER_UNARY_SIGN) || '0';\n    return ['-' + code, Blockly.Python.ORDER_UNARY_SIGN];\n  }\n  Blockly.Python.definitions_['import_math'] = 'import math';\n  if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\n    arg = Blockly.Python.valueToCode(block, 'NUM',\n        Blockly.Python.ORDER_MULTIPLICATIVE) || '0';\n  } else {\n    arg = Blockly.Python.valueToCode(block, 'NUM',\n        Blockly.Python.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'math.fabs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log10(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'COS':\n      code = 'math.cos(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'TAN':\n      code = 'math.tan(' + arg + ' / 180.0 * math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ASIN':\n      code = 'math.asin(' + arg + ') / math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'math.acos(' + arg + ') / math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'math.atan(' + arg + ') / math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Blockly.Python.ORDER_MULTIPLICATIVE];\n};\n\nBlockly.Python['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  var CONSTANTS = {\n    'PI': ['math.pi', Blockly.Python.ORDER_MEMBER],\n    'E': ['math.e', Blockly.Python.ORDER_MEMBER],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2',\n                     Blockly.Python.ORDER_MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Blockly.Python.ORDER_MEMBER],\n    'SQRT1_2': ['math.sqrt(1.0 / 2)', Blockly.Python.ORDER_MEMBER],\n    'INFINITY': ['float(\\'inf\\')', Blockly.Python.ORDER_ATOMIC]\n  };\n  var constant = block.getFieldValue('CONSTANT');\n  if (constant != 'INFINITY') {\n    Blockly.Python.definitions_['import_math'] = 'import math';\n  }\n  return CONSTANTS[constant];\n};\n\nBlockly.Python['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  var number_to_check = Blockly.Python.valueToCode(block, 'NUMBER_TO_CHECK',\n      Blockly.Python.ORDER_MULTIPLICATIVE) || '0';\n  var dropdown_property = block.getFieldValue('PROPERTY');\n  var code;\n  if (dropdown_property == 'PRIME') {\n    Blockly.Python.definitions_['import_math'] = 'import math';\n    Blockly.Python.definitions_['from_numbers_import_Number'] =\n        'from numbers import Number';\n    var functionName = Blockly.Python.provideFunction_(\n        'math_isPrime',\n        ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(n):',\n         '  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n         '  # If n is not a number but a string, try parsing it.',\n         '  if not isinstance(n, Number):',\n         '    try:',\n         '      n = float(n)',\n         '    except:',\n         '      return False',\n         '  if n == 2 or n == 3:',\n         '    return True',\n         '  # False if n is negative, is 1, or not whole,' +\n             ' or if n is divisible by 2 or 3.',\n         '  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:',\n         '    return False',\n         '  # Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n         '  for x in range(6, int(math.sqrt(n)) + 2, 6):',\n         '    if n % (x - 1) == 0 or n % (x + 1) == 0:',\n         '      return False',\n         '  return True']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n  }\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = number_to_check + ' % 2 == 0';\n      break;\n    case 'ODD':\n      code = number_to_check + ' % 2 == 1';\n      break;\n    case 'WHOLE':\n      code = number_to_check + ' % 1 == 0';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY':\n      var divisor = Blockly.Python.valueToCode(block, 'DIVISOR',\n          Blockly.Python.ORDER_MULTIPLICATIVE);\n      // If 'divisor' is some code that evals to 0, Python will raise an error.\n      if (!divisor || divisor == '0') {\n        return ['False', Blockly.Python.ORDER_ATOMIC];\n      }\n      code = number_to_check + ' % ' + divisor + ' == 0';\n      break;\n  }\n  return [code, Blockly.Python.ORDER_RELATIONAL];\n};\n\nBlockly.Python['math_change'] = function(block) {\n  // Add to a variable in place.\n  Blockly.Python.definitions_['from_numbers_import_Number'] =\n      'from numbers import Number';\n  var argument0 = Blockly.Python.valueToCode(block, 'DELTA',\n      Blockly.Python.ORDER_ADDITIVE) || '0';\n  var varName = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'),\n      Blockly.VARIABLE_CATEGORY_NAME);\n  return varName + ' = (' + varName + ' if isinstance(' + varName +\n      ', Number) else 0) + ' + argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\nBlockly.Python['math_round'] = Blockly.Python['math_single'];\n// Trigonometry functions have a single operand.\nBlockly.Python['math_trig'] = Blockly.Python['math_single'];\n\nBlockly.Python['math_on_list'] = function(block) {\n  // Math functions for lists.\n  var func = block.getFieldValue('OP');\n  var list = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_NONE) || '[]';\n  var code;\n  switch (func) {\n    case 'SUM':\n      code = 'sum(' + list + ')';\n      break;\n    case 'MIN':\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE':\n      Blockly.Python.definitions_['from_numbers_import_Number'] =\n          'from numbers import Number';\n      var functionName = Blockly.Python.provideFunction_(\n          'math_mean',\n          // This operation excludes null and values that aren't int or float:',\n          // math_mean([null, null, \"aString\", 1, 9]) == 5.0.',\n          ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(myList):',\n           '  localList = [e for e in myList if isinstance(e, Number)]',\n           '  if not localList: return',\n           '  return float(sum(localList)) / len(localList)']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MEDIAN':\n      Blockly.Python.definitions_['from_numbers_import_Number'] =\n          'from numbers import Number';\n      var functionName = Blockly.Python.provideFunction_(\n          'math_median',\n          // This operation excludes null values:\n          // math_median([null, null, 1, 3]) == 2.0.\n          ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(myList):',\n           '  localList = sorted([e for e in myList if isinstance(e, Number)])',\n           '  if not localList: return',\n           '  if len(localList) % 2 == 0:',\n           '    return (localList[len(localList) // 2 - 1] + ' +\n               'localList[len(localList) // 2]) / 2.0',\n           '  else:',\n           '    return localList[(len(localList) - 1) // 2]']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MODE':\n      var functionName = Blockly.Python.provideFunction_(\n          'math_modes',\n          // As a list of numbers can contain more than one mode,\n          // the returned result is provided as an array.\n          // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n          ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(some_list):',\n           '  modes = []',\n           '  # Using a lists of [item, count] to keep count rather than dict',\n           '  # to avoid \"unhashable\" errors when the counted item is ' +\n               'itself a list or dict.',\n           '  counts = []',\n           '  maxCount = 1',\n           '  for item in some_list:',\n           '    found = False',\n           '    for count in counts:',\n           '      if count[0] == item:',\n           '        count[1] += 1',\n           '        maxCount = max(maxCount, count[1])',\n           '        found = True',\n           '    if not found:',\n           '      counts.append([item, 1])',\n           '  for counted_item, item_count in counts:',\n           '    if item_count == maxCount:',\n           '      modes.append(counted_item)',\n           '  return modes']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'STD_DEV':\n      Blockly.Python.definitions_['import_math'] = 'import math';\n      var functionName = Blockly.Python.provideFunction_(\n          'math_standard_deviation',\n          ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(numbers):',\n           '  n = len(numbers)',\n           '  if n == 0: return',\n           '  mean = float(sum(numbers)) / n',\n           '  variance = sum((x - mean) ** 2 for x in numbers) / n',\n           '  return math.sqrt(variance)']);\n      code = functionName + '(' + list + ')';\n      break;\n    case 'RANDOM':\n      Blockly.Python.definitions_['import_random'] = 'import random';\n      code = 'random.choice(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['math_modulo'] = function(block) {\n  // Remainder computation.\n  var argument0 = Blockly.Python.valueToCode(block, 'DIVIDEND',\n      Blockly.Python.ORDER_MULTIPLICATIVE) || '0';\n  var argument1 = Blockly.Python.valueToCode(block, 'DIVISOR',\n      Blockly.Python.ORDER_MULTIPLICATIVE) || '0';\n  var code = argument0 + ' % ' + argument1;\n  return [code, Blockly.Python.ORDER_MULTIPLICATIVE];\n};\n\nBlockly.Python['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  var argument0 = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_NONE) || '0';\n  var argument1 = Blockly.Python.valueToCode(block, 'LOW',\n      Blockly.Python.ORDER_NONE) || '0';\n  var argument2 = Blockly.Python.valueToCode(block, 'HIGH',\n      Blockly.Python.ORDER_NONE) || 'float(\\'inf\\')';\n  var code = 'min(max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  Blockly.Python.definitions_['import_random'] = 'import random';\n  var argument0 = Blockly.Python.valueToCode(block, 'FROM',\n      Blockly.Python.ORDER_NONE) || '0';\n  var argument1 = Blockly.Python.valueToCode(block, 'TO',\n      Blockly.Python.ORDER_NONE) || '0';\n  var code = 'random.randint(' + argument0 + ', ' + argument1 + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  Blockly.Python.definitions_['import_random'] = 'import random';\n  return ['random.random()', Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  Blockly.Python.definitions_['import_math'] = 'import math';\n  var argument0 = Blockly.Python.valueToCode(block, 'X',\n      Blockly.Python.ORDER_NONE) || '0';\n  var argument1 = Blockly.Python.valueToCode(block, 'Y',\n      Blockly.Python.ORDER_NONE) || '0';\n  return ['math.atan2(' + argument1 + ', ' + argument0 + ') / math.pi * 180',\n      Blockly.Python.ORDER_MULTIPLICATIVE];\n};\n"],"file":"math.min.js"}