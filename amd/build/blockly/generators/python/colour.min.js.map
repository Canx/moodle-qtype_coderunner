{"version":3,"sources":["../../../../src/blockly/generators/python/colour.js"],"names":["goog","provide","require","Blockly","Python","block","code","quote_","getFieldValue","ORDER_ATOMIC","definitions_","ORDER_FUNCTION_CALL","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","r","valueToCode","ORDER_NONE","g","b","colour1","colour2","ratio"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,uBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EAGAC,OAAO,CAACC,MAAR,eAAkC,SAASC,CAAT,CAAgB,CAEhD,GAAIC,CAAAA,CAAI,CAAGH,OAAO,CAACC,MAAR,CAAeG,MAAf,CAAsBF,CAAK,CAACG,aAAN,CAAoB,QAApB,CAAtB,CAAX,CACA,MAAO,CAACF,CAAD,CAAOH,OAAO,CAACC,MAAR,CAAeK,YAAtB,CACR,CAJD,CAMAN,OAAO,CAACC,MAAR,eAAkC,UAAgB,CAEhDD,OAAO,CAACC,MAAR,CAAeM,YAAf,eAA+C,eAA/C,CAEA,MAAO,0CAAOP,OAAO,CAACC,MAAR,CAAeO,mBAAtB,CACR,CALD,CAOAR,OAAO,CAACC,MAAR,YAA+B,SAASC,CAAT,CAAgB,IAEzCO,CAAAA,CAAY,CAAGT,OAAO,CAACC,MAAR,CAAeS,gBAAf,CACf,YADe,CAEf,CAAC,OAASV,OAAO,CAACC,MAAR,CAAeU,0BAAxB,CAAqD,YAAtD,CACC,yCADD,CAEC,yCAFD,CAGC,yCAHD,CAIC,sCAJD,CAFe,CAF0B,CASzCC,CAAC,CAAGZ,OAAO,CAACC,MAAR,CAAeY,WAAf,CAA2BX,CAA3B,CAAkC,KAAlC,CAC2BF,OAAO,CAACC,MAAR,CAAea,UAD1C,GACyD,CAVpB,CAWzCC,CAAC,CAAGf,OAAO,CAACC,MAAR,CAAeY,WAAf,CAA2BX,CAA3B,CAAkC,OAAlC,CAC2BF,OAAO,CAACC,MAAR,CAAea,UAD1C,GACyD,CAZpB,CAazCE,CAAC,CAAGhB,OAAO,CAACC,MAAR,CAAeY,WAAf,CAA2BX,CAA3B,CAAkC,MAAlC,CAC2BF,OAAO,CAACC,MAAR,CAAea,UAD1C,GACyD,CAdpB,CAgB7C,MAAO,CADIL,CAAY,CAAG,GAAf,CAAqBG,CAArB,CAAyB,IAAzB,CAAgCG,CAAhC,CAAoC,IAApC,CAA2CC,CAA3C,CAA+C,GACnD,CAAOhB,OAAO,CAACC,MAAR,CAAeO,mBAAtB,CACR,CAjBD,CAmBAR,OAAO,CAACC,MAAR,cAAiC,SAASC,CAAT,CAAgB,IAE3CO,CAAAA,CAAY,CAAGT,OAAO,CAACC,MAAR,CAAeS,gBAAf,CACf,cADe,CAEf,CAAC,OAASV,OAAO,CAACC,MAAR,CAAeU,0BAAxB,CACG,4BADJ,CAEC,yDAFD,CAGC,yDAHD,CAIC,yDAJD,CAKC,iCALD,CAMC,4CAND,CAOC,4CAPD,CAQC,4CARD,CASC,sCATD,CAFe,CAF4B,CAc3CM,CAAO,CAAGjB,OAAO,CAACC,MAAR,CAAeY,WAAf,CAA2BX,CAA3B,CAAkC,SAAlC,CACVF,OAAO,CAACC,MAAR,CAAea,UADL,GACoB,WAfa,CAgB3CI,CAAO,CAAGlB,OAAO,CAACC,MAAR,CAAeY,WAAf,CAA2BX,CAA3B,CAAkC,SAAlC,CACVF,OAAO,CAACC,MAAR,CAAea,UADL,GACoB,WAjBa,CAkB3CK,CAAK,CAAGnB,OAAO,CAACC,MAAR,CAAeY,WAAf,CAA2BX,CAA3B,CAAkC,OAAlC,CACRF,OAAO,CAACC,MAAR,CAAea,UADP,GACsB,CAnBa,CAqB/C,MAAO,CADIL,CAAY,CAAG,GAAf,CAAqBQ,CAArB,CAA+B,IAA/B,CAAsCC,CAAtC,CAAgD,IAAhD,CAAuDC,CAAvD,CAA+D,GACnE,CAAOnB,OAAO,CAACC,MAAR,CAAeO,mBAAtB,CACR,CAtBD","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for colour blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Python.colour');\n\ngoog.require('Blockly.Python');\n\n\nBlockly.Python['colour_picker'] = function(block) {\n  // Colour picker.\n  var code = Blockly.Python.quote_(block.getFieldValue('COLOUR'));\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['colour_random'] = function(block) {\n  // Generate a random colour.\n  Blockly.Python.definitions_['import_random'] = 'import random';\n  var code = '\\'#%06x\\' % random.randint(0, 2**24 - 1)';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['colour_rgb'] = function(block) {\n  // Compose a colour from RGB components expressed as percentages.\n  var functionName = Blockly.Python.provideFunction_(\n      'colour_rgb',\n      ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(r, g, b):',\n       '  r = round(min(100, max(0, r)) * 2.55)',\n       '  g = round(min(100, max(0, g)) * 2.55)',\n       '  b = round(min(100, max(0, b)) * 2.55)',\n       '  return \\'#%02x%02x%02x\\' % (r, g, b)']);\n  var r = Blockly.Python.valueToCode(block, 'RED',\n                                     Blockly.Python.ORDER_NONE) || 0;\n  var g = Blockly.Python.valueToCode(block, 'GREEN',\n                                     Blockly.Python.ORDER_NONE) || 0;\n  var b = Blockly.Python.valueToCode(block, 'BLUE',\n                                     Blockly.Python.ORDER_NONE) || 0;\n  var code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['colour_blend'] = function(block) {\n  // Blend two colours together.\n  var functionName = Blockly.Python.provideFunction_(\n      'colour_blend',\n      ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ +\n          '(colour1, colour2, ratio):',\n       '  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)',\n       '  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)',\n       '  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)',\n       '  ratio = min(1, max(0, ratio))',\n       '  r = round(r1 * (1 - ratio) + r2 * ratio)',\n       '  g = round(g1 * (1 - ratio) + g2 * ratio)',\n       '  b = round(b1 * (1 - ratio) + b2 * ratio)',\n       '  return \\'#%02x%02x%02x\\' % (r, g, b)']);\n  var colour1 = Blockly.Python.valueToCode(block, 'COLOUR1',\n      Blockly.Python.ORDER_NONE) || '\\'#000000\\'';\n  var colour2 = Blockly.Python.valueToCode(block, 'COLOUR2',\n      Blockly.Python.ORDER_NONE) || '\\'#000000\\'';\n  var ratio = Blockly.Python.valueToCode(block, 'RATIO',\n      Blockly.Python.ORDER_NONE) || 0;\n  var code = functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n"],"file":"colour.min.js"}