{"version":3,"sources":["../../../../src/blockly/generators/python/lists.js"],"names":["goog","provide","require","Blockly","Python","ORDER_ATOMIC","block","elements","Array","itemCount_","i","valueToCode","ORDER_NONE","code","join","item","times","ORDER_MULTIPLICATIVE","list","ORDER_FUNCTION_CALL","ORDER_LOGICAL_NOT","workspace","options","oneBasedIndex","errorIndex","firstIndexAdjustment","lastIndexAdjustment","getFieldValue","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","mode","where","listOrder","ORDER_MEMBER","at","getAdjustedInt","definitions_","Error","value","cacheList","match","listVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","xVar","where1","where2","at1","at2","isNumber","type","reverse","sortFunctionName","value_input","value_delim"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for list blocks.\n * @author q.neutron@gmail.com (Quynh Neutron)\n */\n'use strict';\n\ngoog.provide('Blockly.Python.lists');\n\ngoog.require('Blockly.Python');\n\n\nBlockly.Python['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['[]', Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Blockly.Python.valueToCode(block, 'ADD' + i,\n        Blockly.Python.ORDER_NONE) || 'None';\n  }\n  var code = '[' + elements.join(', ') + ']';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nBlockly.Python['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  var item = Blockly.Python.valueToCode(block, 'ITEM',\n      Blockly.Python.ORDER_NONE) || 'None';\n  var times = Blockly.Python.valueToCode(block, 'NUM',\n      Blockly.Python.ORDER_MULTIPLICATIVE) || '0';\n  var code = '[' + item + '] * ' + times;\n  return [code, Blockly.Python.ORDER_MULTIPLICATIVE];\n};\n\nBlockly.Python['lists_length'] = function(block) {\n  // String or array length.\n  var list = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_NONE) || '[]';\n  return ['len(' + list + ')', Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var list = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_NONE) || '[]';\n  var code = 'not len(' + list + ')';\n  return [code, Blockly.Python.ORDER_LOGICAL_NOT];\n};\n\nBlockly.Python['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  var item = Blockly.Python.valueToCode(block, 'FIND',\n      Blockly.Python.ORDER_NONE) || '[]';\n  var list = Blockly.Python.valueToCode(block, 'VALUE',\n      Blockly.Python.ORDER_NONE) || '\\'\\'';\n  if (block.workspace.options.oneBasedIndex) {\n    var errorIndex = ' 0';\n    var firstIndexAdjustment = ' + 1';\n    var lastIndexAdjustment = '';\n  } else {\n    var errorIndex = ' -1';\n    var firstIndexAdjustment = '';\n    var lastIndexAdjustment = ' - 1';\n  }\n  if (block.getFieldValue('END') == 'FIRST') {\n    var functionName = Blockly.Python.provideFunction_(\n        'first_index',\n        ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ +\n            '(my_list, elem):',\n         '  try: index = my_list.index(elem)' + firstIndexAdjustment,\n         '  except: index =' + errorIndex,\n         '  return index']);\n    var code = functionName + '(' + list + ', ' + item + ')';\n    return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n  }\n  var functionName = Blockly.Python.provideFunction_(\n      'last_index',\n      ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(my_list, elem):',\n       '  try: index = len(my_list) - my_list[::-1].index(elem)' +\n         lastIndexAdjustment,\n       '  except: index =' + errorIndex,\n       '  return index']);\n  var code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var listOrder = (where == 'RANDOM') ? Blockly.Python.ORDER_NONE :\n      Blockly.Python.ORDER_MEMBER;\n  var list = Blockly.Python.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case 'FIRST':\n      if (mode == 'GET') {\n        var code = list + '[0]';\n        return [code, Blockly.Python.ORDER_MEMBER];\n      } else if (mode == 'GET_REMOVE') {\n        var code = list + '.pop(0)';\n        return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        return list + '.pop(0)\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode == 'GET') {\n        var code = list + '[-1]';\n        return [code, Blockly.Python.ORDER_MEMBER];\n      } else if (mode == 'GET_REMOVE') {\n        var code = list + '.pop()';\n        return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        return list + '.pop()\\n';\n      }\n      break;\n    case 'FROM_START':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT');\n      if (mode == 'GET') {\n        var code = list + '[' + at + ']';\n        return [code, Blockly.Python.ORDER_MEMBER];\n      } else if (mode == 'GET_REMOVE') {\n        var code = list + '.pop(' + at + ')';\n        return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    case'FROM_END':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT', 1, true);\n      if (mode == 'GET') {\n        var code = list + '[' + at + ']';\n        return [code, Blockly.Python.ORDER_MEMBER];\n      } else if (mode == 'GET_REMOVE') {\n        var code = list + '.pop(' + at + ')';\n        return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    case 'RANDOM':\n      Blockly.Python.definitions_['import_random'] = 'import random';\n      if (mode == 'GET') {\n        code = 'random.choice(' + list + ')';\n        return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n      } else {\n        var functionName = Blockly.Python.provideFunction_(\n            'lists_remove_random_item',\n            ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ + '(myList):',\n              '  x = int(random.random() * len(myList))',\n              '  return myList.pop(x)']);\n        code = functionName + '(' + list + ')';\n        if (mode == 'GET_REMOVE') {\n          return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n        } else if (mode == 'REMOVE') {\n          return code + '\\n';\n        }\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nBlockly.Python['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  var list = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_MEMBER) || '[]';\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var value = Blockly.Python.valueToCode(block, 'TO',\n      Blockly.Python.ORDER_NONE) || 'None';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    var listVar = Blockly.Python.variableDB_.getDistinctName(\n        'tmp_list', Blockly.VARIABLE_CATEGORY_NAME);\n    var code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n    return code;\n  }\n\n  switch (where) {\n    case 'FIRST':\n      if (mode == 'SET') {\n        return list + '[0] = ' + value + '\\n';\n      } else if (mode == 'INSERT') {\n        return list + '.insert(0, ' + value + ')\\n';\n      }\n      break;\n    case 'LAST':\n        if (mode == 'SET') {\n          return list + '[-1] = ' + value + '\\n';\n        } else if (mode == 'INSERT') {\n          return list + '.append(' + value + ')\\n';\n        }\n      break;\n    case 'FROM_START':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT');\n        if (mode == 'SET') {\n          return list + '[' + at + '] = ' + value + '\\n';\n        } else if (mode == 'INSERT') {\n          return list + '.insert(' + at + ', ' + value + ')\\n';\n        }\n      break;\n    case 'FROM_END':\n      var at = Blockly.Python.getAdjustedInt(block, 'AT', 1, true);\n        if (mode == 'SET') {\n          return list + '[' + at + '] = ' + value + '\\n';\n        } else if (mode == 'INSERT') {\n          return list + '.insert(' + at + ', ' + value + ')\\n';\n        }\n      break;\n    case 'RANDOM':\n        Blockly.Python.definitions_['import_random'] = 'import random';\n        var code = cacheList();\n        var xVar = Blockly.Python.variableDB_.getDistinctName(\n            'tmp_x', Blockly.VARIABLE_CATEGORY_NAME);\n        code += xVar + ' = int(random.random() * len(' + list + '))\\n';\n        if (mode == 'SET') {\n          code += list + '[' + xVar + '] = ' + value + '\\n';\n          return code;\n        } else if (mode == 'INSERT') {\n          code += list + '.insert(' + xVar + ', ' + value + ')\\n';\n          return code;\n        }\n      break;\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\nBlockly.Python['lists_getSublist'] = function(block) {\n  // Get sublist.\n  var list = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_MEMBER) || '[]';\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  switch (where1) {\n    case 'FROM_START':\n      var at1 = Blockly.Python.getAdjustedInt(block, 'AT1');\n      if (at1 == '0') {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      var at1 = Blockly.Python.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      var at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n  switch (where2) {\n    case 'FROM_START':\n      var at2 = Blockly.Python.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      var at2 = Blockly.Python.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!Blockly.isNumber(String(at2))) {\n        Blockly.Python.definitions_['import_sys'] = 'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 == '0') {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      var at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n  var code = list + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Blockly.Python.ORDER_MEMBER];\n};\n\nBlockly.Python['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  var list = (Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_NONE) || '[]');\n  var type = block.getFieldValue('TYPE');\n  var reverse = block.getFieldValue('DIRECTION') === '1' ? 'False' : 'True';\n  var sortFunctionName = Blockly.Python.provideFunction_('lists_sort',\n  ['def ' + Blockly.Python.FUNCTION_NAME_PLACEHOLDER_ +\n      '(my_list, type, reverse):',\n    '  def try_float(s):',\n    '    try:',\n    '      return float(s)',\n    '    except:',\n    '      return 0',\n    '  key_funcs = {',\n    '    \"NUMERIC\": try_float,',\n    '    \"TEXT\": str,',\n    '    \"IGNORE_CASE\": lambda s: str(s).lower()',\n    '  }',\n    '  key_func = key_funcs[type]',\n    '  list_cpy = list(my_list)', // Clone the list.\n    '  return sorted(list_cpy, key=key_func, reverse=reverse)'\n  ]);\n\n  var code = sortFunctionName +\n      '(' + list + ', \"' + type + '\", ' + reverse + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  var mode = block.getFieldValue('MODE');\n  if (mode == 'SPLIT') {\n    var value_input = Blockly.Python.valueToCode(block, 'INPUT',\n        Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n    var value_delim = Blockly.Python.valueToCode(block, 'DELIM',\n        Blockly.Python.ORDER_NONE);\n    var code = value_input + '.split(' + value_delim + ')';\n  } else if (mode == 'JOIN') {\n    var value_input = Blockly.Python.valueToCode(block, 'INPUT',\n        Blockly.Python.ORDER_NONE) || '[]';\n    var value_delim = Blockly.Python.valueToCode(block, 'DELIM',\n        Blockly.Python.ORDER_MEMBER) || '\\'\\'';\n    var code = value_delim + '.join(' + value_input + ')';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  var list = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_NONE) || '[]';\n  var code = 'list(reversed(' + list + '))';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n"],"file":"lists.min.js"}