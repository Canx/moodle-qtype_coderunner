{"version":3,"sources":["../../../../src/blockly/generators/python/procedures.js"],"names":["goog","provide","require","Blockly","Python","block","globals","varName","workspace","variables","Variables","allUsedVarModels","i","variable","name","getVars","indexOf","push","variableDB_","getName","VARIABLE_CATEGORY_NAME","devVarList","allDeveloperVariables","length","Names","DEVELOPER_VARIABLE_TYPE","INDENT","join","funcName","getFieldValue","PROCEDURE_CATEGORY_NAME","xfix1","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","prefixLines","loopTrap","INFINITE_LOOP_TRAP","branch","statementToCode","returnValue","valueToCode","ORDER_NONE","xfix2","PASS","args","code","scrub_","definitions_","ORDER_FUNCTION_CALL","tuple","condition","hasReturnValue_","value"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Python for procedure blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Python.procedures');\n\ngoog.require('Blockly.Python');\n\n\nBlockly.Python['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  var globals = [];\n  var varName;\n  var workspace = block.workspace;\n  var variables = Blockly.Variables.allUsedVarModels(workspace) || [];\n  for (var i = 0, variable; variable = variables[i]; i++) {\n    varName = variable.name;\n    if (block.getVars().indexOf(varName) == -1) {\n      globals.push(Blockly.Python.variableDB_.getName(varName,\n          Blockly.VARIABLE_CATEGORY_NAME));\n    }\n  }\n  // Add developer variables.\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (var i = 0; i < devVarList.length; i++) {\n    globals.push(Blockly.Python.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n  }\n\n  globals = globals.length ?\n      Blockly.Python.INDENT + 'global ' + globals.join(', ') + '\\n' : '';\n  var funcName = Blockly.Python.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var xfix1 = '';\n  if (Blockly.Python.STATEMENT_PREFIX) {\n    xfix1 += Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX, block);\n  }\n  if (Blockly.Python.STATEMENT_SUFFIX) {\n    xfix1 += Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = Blockly.Python.prefixLines(xfix1, Blockly.Python.INDENT);\n  }\n  var loopTrap = '';\n  if (Blockly.Python.INFINITE_LOOP_TRAP) {\n    loopTrap = Blockly.Python.prefixLines(\n        Blockly.Python.injectId(Blockly.Python.INFINITE_LOOP_TRAP, block),\n        Blockly.Python.INDENT);\n  }\n  var branch = Blockly.Python.statementToCode(block, 'STACK');\n  var returnValue = Blockly.Python.valueToCode(block, 'RETURN',\n      Blockly.Python.ORDER_NONE) || '';\n  var xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Blockly.Python.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = Blockly.Python.PASS;\n  }\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.Python.variableDB_.getName(variables[i],\n        Blockly.VARIABLE_CATEGORY_NAME);\n  }\n  var code = 'def ' + funcName + '(' + args.join(', ') + '):\\n' +\n      globals + xfix1 + loopTrap + branch + xfix2 + returnValue;\n  code = Blockly.Python.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Blockly.Python.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Python['procedures_defnoreturn'] =\n    Blockly.Python['procedures_defreturn'];\n\nBlockly.Python['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'),\n      Blockly.PROCEDURE_CATEGORY_NAME);\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.Python.valueToCode(block, 'ARG' + i,\n        Blockly.Python.ORDER_NONE) || 'None';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Python.ORDER_FUNCTION_CALL];\n};\n\nBlockly.Python['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  var tuple = Blockly.Python['procedures_callreturn'](block);\n  return tuple[0] + '\\n';\n};\n\nBlockly.Python['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Python.valueToCode(block, 'CONDITION',\n      Blockly.Python.ORDER_NONE) || 'False';\n  var code = 'if ' + condition + ':\\n';\n  if (Blockly.Python.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += Blockly.Python.prefixLines(\n        Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX, block),\n        Blockly.Python.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    var value = Blockly.Python.valueToCode(block, 'VALUE',\n        Blockly.Python.ORDER_NONE) || 'None';\n    code += Blockly.Python.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += Blockly.Python.INDENT + 'return\\n';\n  }\n  return code;\n};\n"],"file":"procedures.min.js"}