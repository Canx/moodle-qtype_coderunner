{"version":3,"sources":["../../../src/blockly/generators/dart.js"],"names":["goog","provide","require","Blockly","Dart","Generator","addReservedWords","ORDER_ATOMIC","ORDER_UNARY_POSTFIX","ORDER_UNARY_PREFIX","ORDER_MULTIPLICATIVE","ORDER_ADDITIVE","ORDER_SHIFT","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_RELATIONAL","ORDER_EQUALITY","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_IF_NULL","ORDER_CONDITIONAL","ORDER_CASCADE","ORDER_ASSIGNMENT","ORDER_NONE","init","workspace","definitions_","Object","create","functionNames_","variableDB_","Names","RESERVED_WORDS_","reset","setVariableMap","getVariableMap","defvars","devVarList","Variables","allDeveloperVariables","i","length","push","getName","DEVELOPER_VARIABLE_TYPE","variables","allUsedVarModels","getId","VARIABLE_CATEGORY_NAME","join","finish","code","prefixLines","INDENT","imports","definitions","name","def","match","allDefs","replace","scrubNakedValue","line","quote_","string","multiline_quote_","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","utils","wrap","COMMENT_WRAP","getProcedureDef","inputList","type","INPUT_VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjusted","atId","opt_delta","opt_negate","opt_order","delta","order","options","oneBasedIndex","defaultAtIndex","at","valueToCode","isNumber","parseInt","innerOrder","Math","floor"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2014 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Dart for blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Dart');\n\ngoog.require('Blockly.Generator');\ngoog.require('Blockly.utils.string');\n\n\n/**\n * Dart code generator.\n * @type {!Blockly.Generator}\n */\nBlockly.Dart = new Blockly.Generator('Dart');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * @private\n */\nBlockly.Dart.addReservedWords(\n    // https://www.dartlang.org/docs/spec/latest/dart-language-specification.pdf\n    // Section 16.1.1\n    'assert,break,case,catch,class,const,continue,default,do,else,enum,' +\n    'extends,false,final,finally,for,if,in,is,new,null,rethrow,return,super,' +\n    'switch,this,throw,true,try,var,void,while,with,' +\n    // https://api.dartlang.org/dart_core.html\n    'print,identityHashCode,identical,BidirectionalIterator,Comparable,' +\n    'double,Function,int,Invocation,Iterable,Iterator,List,Map,Match,num,' +\n    'Pattern,RegExp,Set,StackTrace,String,StringSink,Type,bool,DateTime,' +\n    'Deprecated,Duration,Expando,Null,Object,RuneIterator,Runes,Stopwatch,' +\n    'StringBuffer,Symbol,Uri,Comparator,AbstractClassInstantiationError,' +\n    'ArgumentError,AssertionError,CastError,ConcurrentModificationError,' +\n    'CyclicInitializationError,Error,Exception,FallThroughError,' +\n    'FormatException,IntegerDivisionByZeroException,NoSuchMethodError,' +\n    'NullThrownError,OutOfMemoryError,RangeError,StackOverflowError,' +\n    'StateError,TypeError,UnimplementedError,UnsupportedError'\n);\n\n/**\n * Order of operation ENUMs.\n * https://www.dartlang.org/docs/dart-up-and-running/ch02.html#operator_table\n */\nBlockly.Dart.ORDER_ATOMIC = 0;         // 0 \"\" ...\nBlockly.Dart.ORDER_UNARY_POSTFIX = 1;  // expr++ expr-- () [] . ?.\nBlockly.Dart.ORDER_UNARY_PREFIX = 2;   // -expr !expr ~expr ++expr --expr\nBlockly.Dart.ORDER_MULTIPLICATIVE = 3; // * / % ~/\nBlockly.Dart.ORDER_ADDITIVE = 4;       // + -\nBlockly.Dart.ORDER_SHIFT = 5;          // << >>\nBlockly.Dart.ORDER_BITWISE_AND = 6;    // &\nBlockly.Dart.ORDER_BITWISE_XOR = 7;    // ^\nBlockly.Dart.ORDER_BITWISE_OR = 8;     // |\nBlockly.Dart.ORDER_RELATIONAL = 9;     // >= > <= < as is is!\nBlockly.Dart.ORDER_EQUALITY = 10;      // == !=\nBlockly.Dart.ORDER_LOGICAL_AND = 11;   // &&\nBlockly.Dart.ORDER_LOGICAL_OR = 12;    // ||\nBlockly.Dart.ORDER_IF_NULL = 13;       // ??\nBlockly.Dart.ORDER_CONDITIONAL = 14;   // expr ? expr : expr\nBlockly.Dart.ORDER_CASCADE = 15;       // ..\nBlockly.Dart.ORDER_ASSIGNMENT = 16;    // = *= /= ~/= %= += -= <<= >>= &= ^= |=\nBlockly.Dart.ORDER_NONE = 99;          // (...)\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.Dart.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Dart.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Dart.functionNames_ = Object.create(null);\n\n  if (!Blockly.Dart.variableDB_) {\n    Blockly.Dart.variableDB_ =\n        new Blockly.Names(Blockly.Dart.RESERVED_WORDS_);\n  } else {\n    Blockly.Dart.variableDB_.reset();\n  }\n\n  Blockly.Dart.variableDB_.setVariableMap(workspace.getVariableMap());\n\n  var defvars = [];\n  // Add developer variables (not created or named by the user).\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (var i = 0; i < devVarList.length; i++) {\n    defvars.push(Blockly.Dart.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  var variables = Blockly.Variables.allUsedVarModels(workspace);\n  for (var i = 0; i < variables.length; i++) {\n    defvars.push(Blockly.Dart.variableDB_.getName(variables[i].getId(),\n        Blockly.VARIABLE_CATEGORY_NAME));\n  }\n\n  // Declare all of the variables.\n  if (defvars.length) {\n    Blockly.Dart.definitions_['variables'] =\n        'var ' + defvars.join(', ') + ';';\n  }\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.Dart.finish = function(code) {\n  // Indent every line.\n  if (code) {\n    code = Blockly.Dart.prefixLines(code, Blockly.Dart.INDENT);\n  }\n  code = 'main() {\\n' + code + '}';\n\n  // Convert the definitions dictionary into a list.\n  var imports = [];\n  var definitions = [];\n  for (var name in Blockly.Dart.definitions_) {\n    var def = Blockly.Dart.definitions_[name];\n    if (def.match(/^import\\s/)) {\n      imports.push(def);\n    } else {\n      definitions.push(def);\n    }\n  }\n  // Clean up temporary data.\n  delete Blockly.Dart.definitions_;\n  delete Blockly.Dart.functionNames_;\n  Blockly.Dart.variableDB_.reset();\n  var allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n  return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.Dart.scrubNakedValue = function(line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped Dart string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Dart string.\n * @private\n */\nBlockly.Dart.quote_ = function(string) {\n  // Can't use goog.string.quote since $ must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/\\$/g, '\\\\$')\n                 .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline Dart string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} Dart string.\n * @private\n */\nBlockly.Dart.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since $ must also be escaped.\n  string = string.replace(/'''/g, '\\\\\\'\\\\\\'\\\\\\'');\n  return '\\'\\'\\'' + string + '\\'\\'\\'';\n};\n\n\n/**\n * Common tasks for generating Dart from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The Dart code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} Dart code with comments and subsequent blocks added.\n * @private\n */\nBlockly.Dart.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      comment = Blockly.utils.string.wrap(comment,\n          Blockly.Dart.COMMENT_WRAP - 3);\n      if (block.getProcedureDef) {\n        // Use documentation comment for function comments.\n        commentCode += Blockly.Dart.prefixLines(comment + '\\n', '/// ');\n      } else {\n        commentCode += Blockly.Dart.prefixLines(comment + '\\n', '// ');\n      }\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type == Blockly.INPUT_VALUE) {\n        var childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = Blockly.Dart.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += Blockly.Dart.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Blockly.Dart.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Blockly.Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nBlockly.Dart.getAdjusted = function(block, atId, opt_delta, opt_negate,\n    opt_order) {\n  var delta = opt_delta || 0;\n  var order = opt_order || Blockly.Dart.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  var defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n  if (delta) {\n    var at = Blockly.Dart.valueToCode(block, atId,\n        Blockly.Dart.ORDER_ADDITIVE) || defaultAtIndex;\n  } else if (opt_negate) {\n    var at = Blockly.Dart.valueToCode(block, atId,\n        Blockly.Dart.ORDER_UNARY_PREFIX) || defaultAtIndex;\n  } else {\n    var at = Blockly.Dart.valueToCode(block, atId, order) ||\n        defaultAtIndex;\n  }\n\n  if (Blockly.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = parseInt(at, 10) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n      var innerOrder = Blockly.Dart.ORDER_ADDITIVE;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n      var innerOrder = Blockly.Dart.ORDER_ADDITIVE;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n      var innerOrder = Blockly.Dart.ORDER_UNARY_PREFIX;\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n"],"file":"dart.min.js"}