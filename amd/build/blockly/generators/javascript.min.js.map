{"version":3,"sources":["../../../src/blockly/generators/javascript.js"],"names":["goog","provide","require","Blockly","JavaScript","Generator","addReservedWords","Object","getOwnPropertyNames","utils","global","join","ORDER_ATOMIC","ORDER_NEW","ORDER_MEMBER","ORDER_FUNCTION_CALL","ORDER_INCREMENT","ORDER_DECREMENT","ORDER_BITWISE_NOT","ORDER_UNARY_PLUS","ORDER_UNARY_NEGATION","ORDER_LOGICAL_NOT","ORDER_TYPEOF","ORDER_VOID","ORDER_DELETE","ORDER_AWAIT","ORDER_EXPONENTIATION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_MODULUS","ORDER_SUBTRACTION","ORDER_ADDITION","ORDER_BITWISE_SHIFT","ORDER_RELATIONAL","ORDER_IN","ORDER_INSTANCEOF","ORDER_EQUALITY","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_CONDITIONAL","ORDER_ASSIGNMENT","ORDER_YIELD","ORDER_COMMA","ORDER_NONE","ORDER_OVERRIDES","init","workspace","definitions_","create","functionNames_","variableDB_","Names","RESERVED_WORDS_","reset","setVariableMap","getVariableMap","defvars","devVarList","Variables","allDeveloperVariables","i","length","push","getName","DEVELOPER_VARIABLE_TYPE","variables","allUsedVarModels","getId","VARIABLE_CATEGORY_NAME","finish","code","definitions","name","scrubNakedValue","line","quote_","string","replace","multiline_quote_","lines","split","map","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","prefixLines","inputList","type","INPUT_VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjusted","atId","opt_delta","opt_negate","opt_order","delta","order","options","oneBasedIndex","defaultAtIndex","at","valueToCode","isNumber","innerOrder","Math","floor"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.JavaScript');\n\ngoog.require('Blockly.Generator');\ngoog.require('Blockly.utils.global');\ngoog.require('Blockly.utils.string');\n\n\n/**\n * JavaScript code generator.\n * @type {!Blockly.Generator}\n */\nBlockly.JavaScript = new Blockly.Generator('JavaScript');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * @private\n */\nBlockly.JavaScript.addReservedWords(\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n    'break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,' +\n    'enum,' +\n    'implements,interface,let,package,private,protected,public,static,' +\n    'await,' +\n    'null,true,false,' +\n    // Magic variable.\n    'arguments,' +\n    // Everything in the current environment (835 items in Chrome, 104 in Node).\n    Object.getOwnPropertyNames(Blockly.utils.global).join(','));\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n */\nBlockly.JavaScript.ORDER_ATOMIC = 0;           // 0 \"\" ...\nBlockly.JavaScript.ORDER_NEW = 1.1;            // new\nBlockly.JavaScript.ORDER_MEMBER = 1.2;         // . []\nBlockly.JavaScript.ORDER_FUNCTION_CALL = 2;    // ()\nBlockly.JavaScript.ORDER_INCREMENT = 3;        // ++\nBlockly.JavaScript.ORDER_DECREMENT = 3;        // --\nBlockly.JavaScript.ORDER_BITWISE_NOT = 4.1;    // ~\nBlockly.JavaScript.ORDER_UNARY_PLUS = 4.2;     // +\nBlockly.JavaScript.ORDER_UNARY_NEGATION = 4.3; // -\nBlockly.JavaScript.ORDER_LOGICAL_NOT = 4.4;    // !\nBlockly.JavaScript.ORDER_TYPEOF = 4.5;         // typeof\nBlockly.JavaScript.ORDER_VOID = 4.6;           // void\nBlockly.JavaScript.ORDER_DELETE = 4.7;         // delete\nBlockly.JavaScript.ORDER_AWAIT = 4.8;          // await\nBlockly.JavaScript.ORDER_EXPONENTIATION = 5.0; // **\nBlockly.JavaScript.ORDER_MULTIPLICATION = 5.1; // *\nBlockly.JavaScript.ORDER_DIVISION = 5.2;       // /\nBlockly.JavaScript.ORDER_MODULUS = 5.3;        // %\nBlockly.JavaScript.ORDER_SUBTRACTION = 6.1;    // -\nBlockly.JavaScript.ORDER_ADDITION = 6.2;       // +\nBlockly.JavaScript.ORDER_BITWISE_SHIFT = 7;    // << >> >>>\nBlockly.JavaScript.ORDER_RELATIONAL = 8;       // < <= > >=\nBlockly.JavaScript.ORDER_IN = 8;               // in\nBlockly.JavaScript.ORDER_INSTANCEOF = 8;       // instanceof\nBlockly.JavaScript.ORDER_EQUALITY = 9;         // == != === !==\nBlockly.JavaScript.ORDER_BITWISE_AND = 10;     // &\nBlockly.JavaScript.ORDER_BITWISE_XOR = 11;     // ^\nBlockly.JavaScript.ORDER_BITWISE_OR = 12;      // |\nBlockly.JavaScript.ORDER_LOGICAL_AND = 13;     // &&\nBlockly.JavaScript.ORDER_LOGICAL_OR = 14;      // ||\nBlockly.JavaScript.ORDER_CONDITIONAL = 15;     // ?:\nBlockly.JavaScript.ORDER_ASSIGNMENT = 16;      // = += -= **= *= /= %= <<= >>= ...\nBlockly.JavaScript.ORDER_YIELD = 17;           // yield\nBlockly.JavaScript.ORDER_COMMA = 18;           // ,\nBlockly.JavaScript.ORDER_NONE = 99;            // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array.<!Array.<number>>}\n */\nBlockly.JavaScript.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_FUNCTION_CALL],\n\n  // !(!foo) -> !!foo\n  [Blockly.JavaScript.ORDER_LOGICAL_NOT, Blockly.JavaScript.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [Blockly.JavaScript.ORDER_MULTIPLICATION, Blockly.JavaScript.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [Blockly.JavaScript.ORDER_ADDITION, Blockly.JavaScript.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [Blockly.JavaScript.ORDER_LOGICAL_AND, Blockly.JavaScript.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [Blockly.JavaScript.ORDER_LOGICAL_OR, Blockly.JavaScript.ORDER_LOGICAL_OR]\n];\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n\n  Blockly.JavaScript.variableDB_.setVariableMap(workspace.getVariableMap());\n\n  var defvars = [];\n  // Add developer variables (not created or named by the user).\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (var i = 0; i < devVarList.length; i++) {\n    defvars.push(Blockly.JavaScript.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  var variables = Blockly.Variables.allUsedVarModels(workspace);\n  for (var i = 0; i < variables.length; i++) {\n    defvars.push(Blockly.JavaScript.variableDB_.getName(variables[i].getId(),\n        Blockly.VARIABLE_CATEGORY_NAME));\n  }\n\n  // Declare all of the variables.\n  if (defvars.length) {\n    Blockly.JavaScript.definitions_['variables'] =\n        'var ' + defvars.join(', ') + ';';\n  }\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.JavaScript.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  var definitions = [];\n  for (var name in Blockly.JavaScript.definitions_) {\n    definitions.push(Blockly.JavaScript.definitions_[name]);\n  }\n  // Clean up temporary data.\n  delete Blockly.JavaScript.definitions_;\n  delete Blockly.JavaScript.functionNames_;\n  Blockly.JavaScript.variableDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.JavaScript.scrubNakedValue = function(line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline JavaScript string, complete\n * with quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  var lines = string.split(/\\n/g).map(Blockly.JavaScript.quote_);\n  return lines.join(' + \\'\\\\n\\' +\\n');\n};\n\n/**\n * Common tasks for generating JavaScript from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The JavaScript code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} JavaScript code with comments and subsequent blocks added.\n * @private\n */\nBlockly.JavaScript.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      comment = Blockly.utils.string.wrap(comment,\n          Blockly.JavaScript.COMMENT_WRAP - 3);\n      commentCode += Blockly.JavaScript.prefixLines(comment + '\\n', '// ');\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type == Blockly.INPUT_VALUE) {\n        var childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = Blockly.JavaScript.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += Blockly.JavaScript.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Blockly.JavaScript.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Blockly.Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nBlockly.JavaScript.getAdjusted = function(block, atId, opt_delta, opt_negate,\n    opt_order) {\n  var delta = opt_delta || 0;\n  var order = opt_order || Blockly.JavaScript.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  var defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n  if (delta > 0) {\n    var at = Blockly.JavaScript.valueToCode(block, atId,\n        Blockly.JavaScript.ORDER_ADDITION) || defaultAtIndex;\n  } else if (delta < 0) {\n    var at = Blockly.JavaScript.valueToCode(block, atId,\n        Blockly.JavaScript.ORDER_SUBTRACTION) || defaultAtIndex;\n  } else if (opt_negate) {\n    var at = Blockly.JavaScript.valueToCode(block, atId,\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || defaultAtIndex;\n  } else {\n    var at = Blockly.JavaScript.valueToCode(block, atId, order) ||\n        defaultAtIndex;\n  }\n\n  if (Blockly.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = Number(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n      var innerOrder = Blockly.JavaScript.ORDER_ADDITION;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n      var innerOrder = Blockly.JavaScript.ORDER_SUBTRACTION;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n      var innerOrder = Blockly.JavaScript.ORDER_UNARY_NEGATION;\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n"],"file":"javascript.min.js"}