{"version":3,"sources":["../../../src/blockly/generators/php.js"],"names":["goog","provide","require","Blockly","PHP","Generator","addReservedWords","ORDER_ATOMIC","ORDER_CLONE","ORDER_NEW","ORDER_MEMBER","ORDER_FUNCTION_CALL","ORDER_POWER","ORDER_INCREMENT","ORDER_DECREMENT","ORDER_BITWISE_NOT","ORDER_CAST","ORDER_SUPPRESS_ERROR","ORDER_INSTANCEOF","ORDER_LOGICAL_NOT","ORDER_UNARY_PLUS","ORDER_UNARY_NEGATION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_MODULUS","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_STRING_CONCAT","ORDER_BITWISE_SHIFT","ORDER_RELATIONAL","ORDER_EQUALITY","ORDER_REFERENCE","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_IF_NULL","ORDER_CONDITIONAL","ORDER_ASSIGNMENT","ORDER_LOGICAL_AND_WEAK","ORDER_LOGICAL_XOR","ORDER_LOGICAL_OR_WEAK","ORDER_COMMA","ORDER_NONE","ORDER_OVERRIDES","init","workspace","definitions_","Object","create","functionNames_","variableDB_","Names","RESERVED_WORDS_","reset","setVariableMap","getVariableMap","defvars","devVarList","Variables","allDeveloperVariables","i","length","push","getName","DEVELOPER_VARIABLE_TYPE","variables","allUsedVarModels","variable","getId","VARIABLE_CATEGORY_NAME","join","finish","code","definitions","name","scrubNakedValue","line","quote_","string","replace","multiline_quote_","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","utils","wrap","COMMENT_WRAP","prefixLines","inputList","type","INPUT_VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjusted","atId","opt_delta","opt_negate","opt_order","delta","order","options","oneBasedIndex","defaultAtIndex","at","valueToCode","isNumber","innerOrder","Math","floor"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating PHP for blocks.\n * @author daarond@gmail.com (Daaron Dwyer)\n */\n'use strict';\n\ngoog.provide('Blockly.PHP');\n\ngoog.require('Blockly.Generator');\ngoog.require('Blockly.utils.string');\n\n\n/**\n * PHP code generator.\n * @type {!Blockly.Generator}\n */\nBlockly.PHP = new Blockly.Generator('PHP');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * @private\n */\nBlockly.PHP.addReservedWords(\n        // http://php.net/manual/en/reserved.keywords.php\n    '__halt_compiler,abstract,and,array,as,break,callable,case,catch,class,' +\n    'clone,const,continue,declare,default,die,do,echo,else,elseif,empty,' +\n    'enddeclare,endfor,endforeach,endif,endswitch,endwhile,eval,exit,extends,' +\n    'final,for,foreach,function,global,goto,if,implements,include,' +\n    'include_once,instanceof,insteadof,interface,isset,list,namespace,new,or,' +\n    'print,private,protected,public,require,require_once,return,static,' +\n    'switch,throw,trait,try,unset,use,var,while,xor,' +\n        // http://php.net/manual/en/reserved.constants.php\n    'PHP_VERSION,PHP_MAJOR_VERSION,PHP_MINOR_VERSION,PHP_RELEASE_VERSION,' +\n    'PHP_VERSION_ID,PHP_EXTRA_VERSION,PHP_ZTS,PHP_DEBUG,PHP_MAXPATHLEN,' +\n    'PHP_OS,PHP_SAPI,PHP_EOL,PHP_INT_MAX,PHP_INT_SIZE,DEFAULT_INCLUDE_PATH,' +\n    'PEAR_INSTALL_DIR,PEAR_EXTENSION_DIR,PHP_EXTENSION_DIR,PHP_PREFIX,' +\n    'PHP_BINDIR,PHP_BINARY,PHP_MANDIR,PHP_LIBDIR,PHP_DATADIR,PHP_SYSCONFDIR,' +\n    'PHP_LOCALSTATEDIR,PHP_CONFIG_FILE_PATH,PHP_CONFIG_FILE_SCAN_DIR,' +\n    'PHP_SHLIB_SUFFIX,E_ERROR,E_WARNING,E_PARSE,E_NOTICE,E_CORE_ERROR,' +\n    'E_CORE_WARNING,E_COMPILE_ERROR,E_COMPILE_WARNING,E_USER_ERROR,' +\n    'E_USER_WARNING,E_USER_NOTICE,E_DEPRECATED,E_USER_DEPRECATED,E_ALL,' +\n    'E_STRICT,__COMPILER_HALT_OFFSET__,TRUE,FALSE,NULL,__CLASS__,__DIR__,' +\n    '__FILE__,__FUNCTION__,__LINE__,__METHOD__,__NAMESPACE__,__TRAIT__'\n);\n\n/**\n * Order of operation ENUMs.\n * http://php.net/manual/en/language.operators.precedence.php\n */\nBlockly.PHP.ORDER_ATOMIC = 0;             // 0 \"\" ...\nBlockly.PHP.ORDER_CLONE = 1;              // clone\nBlockly.PHP.ORDER_NEW = 1;                // new\nBlockly.PHP.ORDER_MEMBER = 2.1;           // []\nBlockly.PHP.ORDER_FUNCTION_CALL = 2.2;    // ()\nBlockly.PHP.ORDER_POWER = 3;              // **\nBlockly.PHP.ORDER_INCREMENT = 4;          // ++\nBlockly.PHP.ORDER_DECREMENT = 4;          // --\nBlockly.PHP.ORDER_BITWISE_NOT = 4;        // ~\nBlockly.PHP.ORDER_CAST = 4;               // (int) (float) (string) (array) ...\nBlockly.PHP.ORDER_SUPPRESS_ERROR = 4;     // @\nBlockly.PHP.ORDER_INSTANCEOF = 5;         // instanceof\nBlockly.PHP.ORDER_LOGICAL_NOT = 6;        // !\nBlockly.PHP.ORDER_UNARY_PLUS = 7.1;       // +\nBlockly.PHP.ORDER_UNARY_NEGATION = 7.2;   // -\nBlockly.PHP.ORDER_MULTIPLICATION = 8.1;   // *\nBlockly.PHP.ORDER_DIVISION = 8.2;         // /\nBlockly.PHP.ORDER_MODULUS = 8.3;          // %\nBlockly.PHP.ORDER_ADDITION = 9.1;         // +\nBlockly.PHP.ORDER_SUBTRACTION = 9.2;      // -\nBlockly.PHP.ORDER_STRING_CONCAT = 9.3;    // .\nBlockly.PHP.ORDER_BITWISE_SHIFT = 10;     // << >>\nBlockly.PHP.ORDER_RELATIONAL = 11;        // < <= > >=\nBlockly.PHP.ORDER_EQUALITY = 12;          // == != === !== <> <=>\nBlockly.PHP.ORDER_REFERENCE = 13;         // &\nBlockly.PHP.ORDER_BITWISE_AND = 13;       // &\nBlockly.PHP.ORDER_BITWISE_XOR = 14;       // ^\nBlockly.PHP.ORDER_BITWISE_OR = 15;        // |\nBlockly.PHP.ORDER_LOGICAL_AND = 16;       // &&\nBlockly.PHP.ORDER_LOGICAL_OR = 17;        // ||\nBlockly.PHP.ORDER_IF_NULL = 18;           // ??\nBlockly.PHP.ORDER_CONDITIONAL = 19;       // ?:\nBlockly.PHP.ORDER_ASSIGNMENT = 20;        // = += -= *= /= %= <<= >>= ...\nBlockly.PHP.ORDER_LOGICAL_AND_WEAK = 21;  // and\nBlockly.PHP.ORDER_LOGICAL_XOR = 22;       // xor\nBlockly.PHP.ORDER_LOGICAL_OR_WEAK = 23;   // or\nBlockly.PHP.ORDER_COMMA = 24;             // ,\nBlockly.PHP.ORDER_NONE = 99;              // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array.<!Array.<number>>}\n */\nBlockly.PHP.ORDER_OVERRIDES = [\n  // (foo()).bar() -> foo().bar()\n  // (foo())[0] -> foo()[0]\n  [Blockly.PHP.ORDER_MEMBER, Blockly.PHP.ORDER_FUNCTION_CALL],\n  // (foo[0])[1] -> foo[0][1]\n  // (foo.bar).baz -> foo.bar.baz\n  [Blockly.PHP.ORDER_MEMBER, Blockly.PHP.ORDER_MEMBER],\n  // !(!foo) -> !!foo\n  [Blockly.PHP.ORDER_LOGICAL_NOT, Blockly.PHP.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [Blockly.PHP.ORDER_MULTIPLICATION, Blockly.PHP.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [Blockly.PHP.ORDER_ADDITION, Blockly.PHP.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [Blockly.PHP.ORDER_LOGICAL_AND, Blockly.PHP.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [Blockly.PHP.ORDER_LOGICAL_OR, Blockly.PHP.ORDER_LOGICAL_OR]\n];\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.PHP.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.PHP.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.PHP.functionNames_ = Object.create(null);\n\n  if (!Blockly.PHP.variableDB_) {\n    Blockly.PHP.variableDB_ =\n        new Blockly.Names(Blockly.PHP.RESERVED_WORDS_, '$');\n  } else {\n    Blockly.PHP.variableDB_.reset();\n  }\n\n  Blockly.PHP.variableDB_.setVariableMap(workspace.getVariableMap());\n\n  var defvars = [];\n  // Add developer variables (not created or named by the user).\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (var i = 0; i < devVarList.length; i++) {\n    defvars.push(Blockly.PHP.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE) + ';');\n  }\n\n  // Add user variables, but only ones that are being used.\n  var variables = Blockly.Variables.allUsedVarModels(workspace);\n  for (var i = 0, variable; variable = variables[i]; i++) {\n    defvars.push(Blockly.PHP.variableDB_.getName(variable.getId(),\n        Blockly.VARIABLE_CATEGORY_NAME) + ';');\n  }\n\n  // Declare all of the variables.\n  Blockly.PHP.definitions_['variables'] = defvars.join('\\n');\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.PHP.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  var definitions = [];\n  for (var name in Blockly.PHP.definitions_) {\n    definitions.push(Blockly.PHP.definitions_[name]);\n  }\n  // Clean up temporary data.\n  delete Blockly.PHP.definitions_;\n  delete Blockly.PHP.functionNames_;\n  Blockly.PHP.variableDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.PHP.scrubNakedValue = function(line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped PHP string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} PHP string.\n * @private\n */\nBlockly.PHP.quote_ = function(string) {\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Encode a string as a properly escaped multiline PHP string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} PHP string.\n * @private\n */\nBlockly.PHP.multiline_quote_ = function(string) {\n  return '<<<EOT\\n' + string + '\\nEOT';\n};\n\n/**\n * Common tasks for generating PHP from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The PHP code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} PHP code with comments and subsequent blocks added.\n * @private\n */\nBlockly.PHP.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      comment = Blockly.utils.string.wrap(comment,\n          Blockly.PHP.COMMENT_WRAP - 3);\n      commentCode += Blockly.PHP.prefixLines(comment, '// ') + '\\n';\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type == Blockly.INPUT_VALUE) {\n        var childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = Blockly.PHP.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += Blockly.PHP.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Blockly.PHP.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Blockly.Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nBlockly.PHP.getAdjusted = function(block, atId, opt_delta, opt_negate,\n    opt_order) {\n  var delta = opt_delta || 0;\n  var order = opt_order || Blockly.PHP.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  var defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n  if (delta > 0) {\n    var at = Blockly.PHP.valueToCode(block, atId,\n            Blockly.PHP.ORDER_ADDITION) || defaultAtIndex;\n  } else if (delta < 0) {\n    var at = Blockly.PHP.valueToCode(block, atId,\n            Blockly.PHP.ORDER_SUBTRACTION) || defaultAtIndex;\n  } else if (opt_negate) {\n    var at = Blockly.PHP.valueToCode(block, atId,\n            Blockly.PHP.ORDER_UNARY_NEGATION) || defaultAtIndex;\n  } else {\n    var at = Blockly.PHP.valueToCode(block, atId, order) ||\n        defaultAtIndex;\n  }\n\n  if (Blockly.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = Number(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n      var innerOrder = Blockly.PHP.ORDER_ADDITION;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n      var innerOrder = Blockly.PHP.ORDER_SUBTRACTION;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n      var innerOrder = Blockly.PHP.ORDER_UNARY_NEGATION;\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n"],"file":"php.min.js"}