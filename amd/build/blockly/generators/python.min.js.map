{"version":3,"sources":["../../../src/blockly/generators/python.js"],"names":["goog","provide","require","Blockly","Python","Generator","addReservedWords","ORDER_ATOMIC","ORDER_COLLECTION","ORDER_STRING_CONVERSION","ORDER_MEMBER","ORDER_FUNCTION_CALL","ORDER_EXPONENTIATION","ORDER_UNARY_SIGN","ORDER_BITWISE_NOT","ORDER_MULTIPLICATIVE","ORDER_ADDITIVE","ORDER_BITWISE_SHIFT","ORDER_BITWISE_AND","ORDER_BITWISE_XOR","ORDER_BITWISE_OR","ORDER_RELATIONAL","ORDER_LOGICAL_NOT","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","ORDER_CONDITIONAL","ORDER_LAMBDA","ORDER_NONE","ORDER_OVERRIDES","init","workspace","PASS","INDENT","definitions_","Object","create","functionNames_","variableDB_","Names","RESERVED_WORDS_","reset","setVariableMap","getVariableMap","defvars","devVarList","Variables","allDeveloperVariables","i","length","push","getName","DEVELOPER_VARIABLE_TYPE","variables","allUsedVarModels","getId","VARIABLE_CATEGORY_NAME","join","finish","code","imports","definitions","name","def","match","allDefs","replace","scrubNakedValue","line","quote_","string","quote","indexOf","multiline_quote_","scrub_","block","opt_thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","utils","wrap","COMMENT_WRAP","prefixLines","inputList","type","INPUT_VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","getAdjustedInt","atId","opt_delta","opt_negate","delta","options","oneBasedIndex","defaultAtIndex","atOrder","at","valueToCode","isNumber","parseInt"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Helper functions for generating Python for blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Python');\n\ngoog.require('Blockly.Generator');\ngoog.require('Blockly.utils.string');\n\n\n/**\n * Python code generator.\n * @type {!Blockly.Generator}\n */\nBlockly.Python = new Blockly.Generator('Python');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * @private\n */\nBlockly.Python.addReservedWords(\n    // import keyword\n    // print(','.join(sorted(keyword.kwlist)))\n    // https://docs.python.org/3/reference/lexical_analysis.html#keywords\n    // https://docs.python.org/2/reference/lexical_analysis.html#keywords\n    'False,None,True,and,as,assert,break,class,continue,def,del,elif,else,' +\n    'except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,' +\n    'or,pass,print,raise,return,try,while,with,yield,' +\n    // https://docs.python.org/3/library/constants.html\n    // https://docs.python.org/2/library/constants.html\n    'NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,' +\n    // >>> print(','.join(sorted(dir(__builtins__))))\n    // https://docs.python.org/3/library/functions.html\n    // https://docs.python.org/2/library/functions.html\n    'ArithmeticError,AssertionError,AttributeError,BaseException,' +\n    'BlockingIOError,BrokenPipeError,BufferError,BytesWarning,' +\n    'ChildProcessError,ConnectionAbortedError,ConnectionError,' +\n    'ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,' +\n    'Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,' +\n    'FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,' +\n    'ImportWarning,IndentationError,IndexError,InterruptedError,' +\n    'IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,' +\n    'ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,' +\n    'NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,' +\n    'PermissionError,ProcessLookupError,RecursionError,ReferenceError,' +\n    'ResourceWarning,RuntimeError,RuntimeWarning,StandardError,' +\n    'StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,' +\n    'SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,' +\n    'UnicodeDecodeError,UnicodeEncodeError,UnicodeError,' +\n    'UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,' +\n    'ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,' +\n    '__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,' +\n    'basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,' +\n    'coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,' +\n    'enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,' +\n    'getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,' +\n    'issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,' +\n    'next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,' +\n    'reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,' +\n    'sum,super,tuple,type,unichr,unicode,vars,xrange,zip'\n);\n\n/**\n * Order of operation ENUMs.\n * http://docs.python.org/reference/expressions.html#summary\n */\nBlockly.Python.ORDER_ATOMIC = 0;            // 0 \"\" ...\nBlockly.Python.ORDER_COLLECTION = 1;        // tuples, lists, dictionaries\nBlockly.Python.ORDER_STRING_CONVERSION = 1; // `expression...`\nBlockly.Python.ORDER_MEMBER = 2.1;          // . []\nBlockly.Python.ORDER_FUNCTION_CALL = 2.2;   // ()\nBlockly.Python.ORDER_EXPONENTIATION = 3;    // **\nBlockly.Python.ORDER_UNARY_SIGN = 4;        // + -\nBlockly.Python.ORDER_BITWISE_NOT = 4;       // ~\nBlockly.Python.ORDER_MULTIPLICATIVE = 5;    // * / // %\nBlockly.Python.ORDER_ADDITIVE = 6;          // + -\nBlockly.Python.ORDER_BITWISE_SHIFT = 7;     // << >>\nBlockly.Python.ORDER_BITWISE_AND = 8;       // &\nBlockly.Python.ORDER_BITWISE_XOR = 9;       // ^\nBlockly.Python.ORDER_BITWISE_OR = 10;       // |\nBlockly.Python.ORDER_RELATIONAL = 11;       // in, not in, is, is not,\n                                            //     <, <=, >, >=, <>, !=, ==\nBlockly.Python.ORDER_LOGICAL_NOT = 12;      // not\nBlockly.Python.ORDER_LOGICAL_AND = 13;      // and\nBlockly.Python.ORDER_LOGICAL_OR = 14;       // or\nBlockly.Python.ORDER_CONDITIONAL = 15;      // if else\nBlockly.Python.ORDER_LAMBDA = 16;           // lambda\nBlockly.Python.ORDER_NONE = 99;             // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array.<!Array.<number>>}\n */\nBlockly.Python.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [Blockly.Python.ORDER_FUNCTION_CALL, Blockly.Python.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [Blockly.Python.ORDER_MEMBER, Blockly.Python.ORDER_FUNCTION_CALL],\n\n  // not (not foo) -> not not foo\n  [Blockly.Python.ORDER_LOGICAL_NOT, Blockly.Python.ORDER_LOGICAL_NOT],\n  // a and (b and c) -> a and b and c\n  [Blockly.Python.ORDER_LOGICAL_AND, Blockly.Python.ORDER_LOGICAL_AND],\n  // a or (b or c) -> a or b or c\n  [Blockly.Python.ORDER_LOGICAL_OR, Blockly.Python.ORDER_LOGICAL_OR]\n];\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n * @this {Blockly.Generator}\n */\nBlockly.Python.init = function(workspace) {\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  Blockly.Python.PASS = this.INDENT + 'pass\\n';\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.Python.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.Python.functionNames_ = Object.create(null);\n\n  if (!Blockly.Python.variableDB_) {\n    Blockly.Python.variableDB_ =\n        new Blockly.Names(Blockly.Python.RESERVED_WORDS_);\n  } else {\n    Blockly.Python.variableDB_.reset();\n  }\n\n  Blockly.Python.variableDB_.setVariableMap(workspace.getVariableMap());\n\n  var defvars = [];\n  // Add developer variables (not created or named by the user).\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (var i = 0; i < devVarList.length; i++) {\n    defvars.push(Blockly.Python.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE) + ' = None');\n  }\n\n  // Add user variables, but only ones that are being used.\n  var variables = Blockly.Variables.allUsedVarModels(workspace);\n  for (var i = 0; i < variables.length; i++) {\n    defvars.push(Blockly.Python.variableDB_.getName(variables[i].getId(),\n        Blockly.VARIABLE_CATEGORY_NAME) + ' = None');\n  }\n\n  Blockly.Python.definitions_['variables'] = defvars.join('\\n');\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.Python.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  var imports = [];\n  var definitions = [];\n  for (var name in Blockly.Python.definitions_) {\n    var def = Blockly.Python.definitions_[name];\n    if (def.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)) {\n      imports.push(def);\n    } else {\n      definitions.push(def);\n    }\n  }\n  // Clean up temporary data.\n  delete Blockly.Python.definitions_;\n  delete Blockly.Python.functionNames_;\n  Blockly.Python.variableDB_.reset();\n  var allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n  return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.Python.scrubNakedValue = function(line) {\n  return line + '\\n';\n};\n\n/**\n * Encode a string as a properly escaped Python string, complete with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n');\n\n  // Follow the CPython behaviour of repr() for a non-byte string.\n  var quote = '\\'';\n  if (string.indexOf('\\'') !== -1) {\n    if (string.indexOf('\"') === -1) {\n      quote = '\"';\n    } else {\n      string = string.replace(/'/g, '\\\\\\'');\n    }\n  };\n  return quote + string + quote;\n};\n\n/**\n * Encode a string as a properly escaped multiline Python string, complete\n * with quotes.\n * @param {string} string Text to encode.\n * @return {string} Python string.\n * @private\n */\nBlockly.Python.multiline_quote_ = function(string) {\n  // Can't use goog.string.quote since % must also be escaped.\n  string = string.replace(/'''/g, '\\\\\\'\\\\\\'\\\\\\'');\n  return '\\'\\'\\'' + string + '\\'\\'\\'';\n};\n\n/**\n * Common tasks for generating Python from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The Python code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} Python code with comments and subsequent blocks added.\n * @private\n */\nBlockly.Python.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    if (comment) {\n      comment = Blockly.utils.string.wrap(comment,\n          Blockly.Python.COMMENT_WRAP - 3);\n      commentCode += Blockly.Python.prefixLines(comment + '\\n', '# ');\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type == Blockly.INPUT_VALUE) {\n        var childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          comment = Blockly.Python.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += Blockly.Python.prefixLines(comment, '# ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Blockly.Python.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value, taking into account indexing, and\n * casts to an integer.\n * @param {!Blockly.Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @return {string|number}\n */\nBlockly.Python.getAdjustedInt = function(block, atId, opt_delta, opt_negate) {\n  var delta = opt_delta || 0;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  var defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n  var atOrder = delta ? Blockly.Python.ORDER_ADDITIVE :\n      Blockly.Python.ORDER_NONE;\n  var at = Blockly.Python.valueToCode(block, atId, atOrder) || defaultAtIndex;\n\n  if (Blockly.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = parseInt(at, 10) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = 'int(' + at + ' + ' + delta + ')';\n    } else if (delta < 0) {\n      at = 'int(' + at + ' - ' + -delta + ')';\n    } else {\n      at = 'int(' + at + ')';\n    }\n    if (opt_negate) {\n      at = '-' + at;\n    }\n  }\n  return at;\n};\n"],"file":"python.min.js"}