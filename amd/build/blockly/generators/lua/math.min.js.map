{"version":3,"sources":["../../../../src/blockly/generators/lua/math.js"],"names":["goog","provide","require","Blockly","Lua","block","code","getFieldValue","order","ORDER_UNARY","ORDER_ATOMIC","OPERATORS","ADD","ORDER_ADDITIVE","MINUS","MULTIPLY","ORDER_MULTIPLICATIVE","DIVIDE","POWER","ORDER_EXPONENTIATION","tuple","operator","argument0","valueToCode","argument1","arg","ORDER_NONE","Error","ORDER_HIGH","CONSTANTS","PI","E","GOLDEN_RATIO","SQRT2","SQRT1_2","INFINITY","number_to_check","dropdown_property","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","divisor","ORDER_RELATIONAL","varName","variableDB_","getName","VARIABLE_CATEGORY_NAME","func","list","provideSum","argument2"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for math blocks.\n * @author rodrigoq@google.com (Rodrigo Queiro)\n */\n'use strict';\n\ngoog.provide('Blockly.Lua.math');\n\ngoog.require('Blockly.Lua');\n\n\nBlockly.Lua['math_number'] = function(block) {\n  // Numeric value.\n  var code = Number(block.getFieldValue('NUM'));\n  var order = code < 0 ? Blockly.Lua.ORDER_UNARY :\n              Blockly.Lua.ORDER_ATOMIC;\n  return [code, order];\n};\n\nBlockly.Lua['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  var OPERATORS = {\n    ADD: [' + ', Blockly.Lua.ORDER_ADDITIVE],\n    MINUS: [' - ', Blockly.Lua.ORDER_ADDITIVE],\n    MULTIPLY: [' * ', Blockly.Lua.ORDER_MULTIPLICATIVE],\n    DIVIDE: [' / ', Blockly.Lua.ORDER_MULTIPLICATIVE],\n    POWER: [' ^ ', Blockly.Lua.ORDER_EXPONENTIATION]\n  };\n  var tuple = OPERATORS[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Blockly.Lua.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.Lua.valueToCode(block, 'B', order) || '0';\n  var code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nBlockly.Lua['math_single'] = function(block) {\n  // Math operators with single operand.\n  var operator = block.getFieldValue('OP');\n  var code;\n  var arg;\n  if (operator == 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Blockly.Lua.valueToCode(block, 'NUM',\n        Blockly.Lua.ORDER_UNARY) || '0';\n    return ['-' + arg, Blockly.Lua.ORDER_UNARY];\n  }\n  if (operator == 'POW10') {\n    arg = Blockly.Lua.valueToCode(block, 'NUM',\n        Blockly.Lua.ORDER_EXPONENTIATION) || '0';\n    return ['10 ^ ' + arg, Blockly.Lua.ORDER_EXPONENTIATION];\n  }\n  if (operator == 'ROUND') {\n    arg = Blockly.Lua.valueToCode(block, 'NUM',\n        Blockly.Lua.ORDER_ADDITIVE) || '0';\n  } else {\n    arg = Blockly.Lua.valueToCode(block, 'NUM',\n        Blockly.Lua.ORDER_NONE) || '0';\n  }\n  switch (operator) {\n    case 'ABS':\n      code = 'math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log(' + arg + ', 10)';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'ROUND':\n      // This rounds up.  Blockly does not specify rounding direction.\n      code = 'math.floor(' + arg + ' + .5)';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(math.rad(' + arg + '))';\n      break;\n    case 'COS':\n      code = 'math.cos(math.rad(' + arg + '))';\n      break;\n    case 'TAN':\n      code = 'math.tan(math.rad(' + arg + '))';\n      break;\n    case 'ASIN':\n      code = 'math.deg(math.asin(' + arg + '))';\n      break;\n    case 'ACOS':\n      code = 'math.deg(math.acos(' + arg + '))';\n      break;\n    case 'ATAN':\n      code = 'math.deg(math.atan(' + arg + '))';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  var CONSTANTS = {\n    PI: ['math.pi', Blockly.Lua.ORDER_HIGH],\n    E: ['math.exp(1)', Blockly.Lua.ORDER_HIGH],\n    GOLDEN_RATIO: ['(1 + math.sqrt(5)) / 2', Blockly.Lua.ORDER_MULTIPLICATIVE],\n    SQRT2: ['math.sqrt(2)', Blockly.Lua.ORDER_HIGH],\n    SQRT1_2: ['math.sqrt(1 / 2)', Blockly.Lua.ORDER_HIGH],\n    INFINITY: ['math.huge', Blockly.Lua.ORDER_HIGH]\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nBlockly.Lua['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  var number_to_check = Blockly.Lua.valueToCode(block, 'NUMBER_TO_CHECK',\n      Blockly.Lua.ORDER_MULTIPLICATIVE) || '0';\n  var dropdown_property = block.getFieldValue('PROPERTY');\n  var code;\n  if (dropdown_property == 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    var functionName = Blockly.Lua.provideFunction_(\n        'math_isPrime',\n        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(n)',\n         '  -- https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n         '  if n == 2 or n == 3 then',\n         '    return true',\n         '  end',\n         '  -- False if n is NaN, negative, is 1, or not whole.',\n         '  -- And false if n is divisible by 2 or 3.',\n         '  if not(n > 1) or n % 1 ~= 0 or n % 2 == 0 or n % 3 == 0 then',\n         '    return false',\n         '  end',\n         '  -- Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n         '  for x = 6, math.sqrt(n) + 1.5, 6 do',\n         '    if n % (x - 1) == 0 or n % (x + 1) == 0 then',\n         '      return false',\n         '    end',\n         '  end',\n         '  return true',\n         'end']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, Blockly.Lua.ORDER_HIGH];\n  }\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = number_to_check + ' % 2 == 0';\n      break;\n    case 'ODD':\n      code = number_to_check + ' % 2 == 1';\n      break;\n    case 'WHOLE':\n      code = number_to_check + ' % 1 == 0';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY':\n      var divisor = Blockly.Lua.valueToCode(block, 'DIVISOR',\n          Blockly.Lua.ORDER_MULTIPLICATIVE);\n      // If 'divisor' is some code that evals to 0, Lua will produce a nan.\n      // Let's produce nil if we can determine this at compile-time.\n      if (!divisor || divisor == '0') {\n        return ['nil', Blockly.Lua.ORDER_ATOMIC];\n      }\n      // The normal trick to implement ?: with and/or doesn't work here:\n      //   divisor == 0 and nil or number_to_check % divisor == 0\n      // because nil is false, so allow a runtime failure. :-(\n      code = number_to_check + ' % ' + divisor + ' == 0';\n      break;\n  }\n  return [code, Blockly.Lua.ORDER_RELATIONAL];\n};\n\nBlockly.Lua['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.Lua.valueToCode(block, 'DELTA',\n      Blockly.Lua.ORDER_ADDITIVE) || '0';\n  var varName = Blockly.Lua.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  return varName + ' = ' + varName + ' + ' + argument0 + '\\n';\n};\n\n// Rounding functions have a single operand.\nBlockly.Lua['math_round'] = Blockly.Lua['math_single'];\n// Trigonometry functions have a single operand.\nBlockly.Lua['math_trig'] = Blockly.Lua['math_single'];\n\nBlockly.Lua['math_on_list'] = function(block) {\n  // Math functions for lists.\n  var func = block.getFieldValue('OP');\n  var list = Blockly.Lua.valueToCode(block, 'LIST',\n      Blockly.Lua.ORDER_NONE) || '{}';\n  var functionName;\n\n  // Functions needed in more than one case.\n  function provideSum() {\n    return Blockly.Lua.provideFunction_(\n        'math_sum',\n        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n         '  local result = 0',\n         '  for _, v in ipairs(t) do',\n         '    result = result + v',\n         '  end',\n         '  return result',\n         'end']);\n  }\n\n  switch (func) {\n    case 'SUM':\n      functionName = provideSum();\n      break;\n\n    case 'MIN':\n      // Returns 0 for the empty list.\n      functionName = Blockly.Lua.provideFunction_(\n          'math_min',\n          ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n           '  if #t == 0 then',\n           '    return 0',\n           '  end',\n           '  local result = math.huge',\n           '  for _, v in ipairs(t) do',\n           '    if v < result then',\n           '      result = v',\n           '    end',\n           '  end',\n           '  return result',\n           'end']);\n      break;\n\n    case 'AVERAGE':\n      // Returns 0 for the empty list.\n      functionName = Blockly.Lua.provideFunction_(\n          'math_average',\n          ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n           '  if #t == 0 then',\n           '    return 0',\n           '  end',\n           '  return ' + provideSum() + '(t) / #t',\n           'end']);\n      break;\n\n    case 'MAX':\n      // Returns 0 for the empty list.\n      functionName = Blockly.Lua.provideFunction_(\n          'math_max',\n          ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n           '  if #t == 0 then',\n           '    return 0',\n           '  end',\n           '  local result = -math.huge',\n           '  for _, v in ipairs(t) do',\n           '    if v > result then',\n           '      result = v',\n           '    end',\n           '  end',\n           '  return result',\n           'end']);\n      break;\n\n    case 'MEDIAN':\n      functionName = Blockly.Lua.provideFunction_(\n          'math_median',\n          // This operation excludes non-numbers.\n          ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n           '  -- Source: http://lua-users.org/wiki/SimpleStats',\n           '  if #t == 0 then',\n           '    return 0',\n           '  end',\n           '  local temp={}',\n           '  for _, v in ipairs(t) do',\n           '    if type(v) == \"number\" then',\n           '      table.insert(temp, v)',\n           '    end',\n           '  end',\n           '  table.sort(temp)',\n           '  if #temp % 2 == 0 then',\n           '    return (temp[#temp/2] + temp[(#temp/2)+1]) / 2',\n           '  else',\n           '    return temp[math.ceil(#temp/2)]',\n           '  end',\n           'end']);\n      break;\n\n    case 'MODE':\n      functionName = Blockly.Lua.provideFunction_(\n          'math_modes',\n          // As a list of numbers can contain more than one mode,\n          // the returned result is provided as an array.\n          // The Lua version includes non-numbers.\n          ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n           '  -- Source: http://lua-users.org/wiki/SimpleStats',\n           '  local counts={}',\n           '  for _, v in ipairs(t) do',\n           '    if counts[v] == nil then',\n           '      counts[v] = 1',\n           '    else',\n           '      counts[v] = counts[v] + 1',\n           '    end',\n           '  end',\n           '  local biggestCount = 0',\n           '  for _, v  in pairs(counts) do',\n           '    if v > biggestCount then',\n           '      biggestCount = v',\n           '    end',\n           '  end',\n           '  local temp={}',\n           '  for k, v in pairs(counts) do',\n           '    if v == biggestCount then',\n           '      table.insert(temp, k)',\n           '    end',\n           '  end',\n           '  return temp',\n           'end']);\n      break;\n\n    case 'STD_DEV':\n      functionName = Blockly.Lua.provideFunction_(\n          'math_standard_deviation',\n          ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n           '  local m',\n           '  local vm',\n           '  local total = 0',\n           '  local count = 0',\n           '  local result',\n           '  m = #t == 0 and 0 or ' + provideSum() + '(t) / #t',\n           '  for _, v in ipairs(t) do',\n           \"    if type(v) == 'number' then\",\n           '      vm = v - m',\n           '      total = total + (vm * vm)',\n           '      count = count + 1',\n           '    end',\n           '  end',\n           '  result = math.sqrt(total / (count-1))',\n           '  return result',\n           'end']);\n      break;\n\n    case 'RANDOM':\n      functionName = Blockly.Lua.provideFunction_(\n          'math_random_list',\n          ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t)',\n           '  if #t == 0 then',\n           '    return nil',\n           '  end',\n           '  return t[math.random(#t)]',\n           'end']);\n      break;\n\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [functionName + '(' + list + ')', Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['math_modulo'] = function(block) {\n  // Remainder computation.\n  var argument0 = Blockly.Lua.valueToCode(block, 'DIVIDEND',\n      Blockly.Lua.ORDER_MULTIPLICATIVE) || '0';\n  var argument1 = Blockly.Lua.valueToCode(block, 'DIVISOR',\n      Blockly.Lua.ORDER_MULTIPLICATIVE) || '0';\n  var code = argument0 + ' % ' + argument1;\n  return [code, Blockly.Lua.ORDER_MULTIPLICATIVE];\n};\n\nBlockly.Lua['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  var argument0 = Blockly.Lua.valueToCode(block, 'VALUE',\n      Blockly.Lua.ORDER_NONE) || '0';\n  var argument1 = Blockly.Lua.valueToCode(block, 'LOW',\n      Blockly.Lua.ORDER_NONE) || '-math.huge';\n  var argument2 = Blockly.Lua.valueToCode(block, 'HIGH',\n      Blockly.Lua.ORDER_NONE) || 'math.huge';\n  var code = 'math.min(math.max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  var argument0 = Blockly.Lua.valueToCode(block, 'FROM',\n      Blockly.Lua.ORDER_NONE) || '0';\n  var argument1 = Blockly.Lua.valueToCode(block, 'TO',\n      Blockly.Lua.ORDER_NONE) || '0';\n  var code = 'math.random(' + argument0 + ', ' + argument1 + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['math.random()', Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  var argument0 = Blockly.Lua.valueToCode(block, 'X',\n      Blockly.Lua.ORDER_NONE) || '0';\n  var argument1 = Blockly.Lua.valueToCode(block, 'Y',\n      Blockly.Lua.ORDER_NONE) || '0';\n  return ['math.deg(math.atan2(' + argument1 + ', ' + argument0 + '))',\n      Blockly.Lua.ORDER_HIGH];\n};\n"],"file":"math.min.js"}