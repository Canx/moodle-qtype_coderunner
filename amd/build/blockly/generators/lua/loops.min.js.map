{"version":3,"sources":["../../../../src/blockly/generators/lua/loops.js"],"names":["goog","provide","require","Blockly","Lua","CONTINUE_STATEMENT","addContinueLabel_","branch","indexOf","INDENT","block","getField","repeats","getFieldValue","valueToCode","ORDER_NONE","isNumber","parseInt","statementToCode","addLoopTrap","loopVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","code","until","argument0","ORDER_UNARY","variable0","getName","startVar","endVar","increment","incValue","step","Math","abs","xfix","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","loop","Constants","Loops","CONTROL_FLOW_IN_LOOP_CHECK_MIXIN","getSurroundLoop","suppressPrefixSuffix","Error"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for loop blocks.\n * @author rodrigoq@google.com (Rodrigo Queiro)\n */\n'use strict';\n\ngoog.provide('Blockly.Lua.loops');\n\ngoog.require('Blockly.Lua');\n\n\n/**\n * This is the text used to implement a <pre>continue</pre>.\n * It is also used to recognise <pre>continue</pre>s in generated code so that\n * the appropriate label can be put at the end of the loop body.\n * @const {string}\n */\nBlockly.Lua.CONTINUE_STATEMENT = 'goto continue\\n';\n\n/**\n * If the loop body contains a \"goto continue\" statement, add a continue label\n * to the loop body. Slightly inefficient, as continue labels will be generated\n * in all outer loops, but this is safer than duplicating the logic of\n * blockToCode.\n *\n * @param {string} branch Generated code of the loop body\n * @return {string} Generated label or '' if unnecessary\n * @private\n */\nBlockly.Lua.addContinueLabel_ = function(branch) {\n  if (branch.indexOf(Blockly.Lua.CONTINUE_STATEMENT) != -1) {\n    // False positives are possible (e.g. a string literal), but are harmless.\n    return branch + Blockly.Lua.INDENT + '::continue::\\n';\n  } else {\n    return branch;\n  }\n};\n\nBlockly.Lua['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    var repeats = Blockly.Lua.valueToCode(block, 'TIMES',\n        Blockly.Lua.ORDER_NONE) || '0';\n  }\n  if (Blockly.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'math.floor(' + repeats + ')';\n  }\n  var branch = Blockly.Lua.statementToCode(block, 'DO');\n  branch = Blockly.Lua.addLoopTrap(branch, block);\n  branch = Blockly.Lua.addContinueLabel_(branch);\n  var loopVar = Blockly.Lua.variableDB_.getDistinctName(\n      'count', Blockly.VARIABLE_CATEGORY_NAME);\n  var code = 'for ' + loopVar + ' = 1, ' + repeats + ' do\\n' +\n      branch + 'end\\n';\n  return code;\n};\n\nBlockly.Lua['controls_repeat'] = Blockly.Lua['controls_repeat_ext'];\n\nBlockly.Lua['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  var until = block.getFieldValue('MODE') == 'UNTIL';\n  var argument0 = Blockly.Lua.valueToCode(block, 'BOOL',\n      until ? Blockly.Lua.ORDER_UNARY :\n      Blockly.Lua.ORDER_NONE) || 'false';\n  var branch = Blockly.Lua.statementToCode(block, 'DO');\n  branch = Blockly.Lua.addLoopTrap(branch, block);\n  branch = Blockly.Lua.addContinueLabel_(branch);\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ' do\\n' + branch + 'end\\n';\n};\n\nBlockly.Lua['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.Lua.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var startVar = Blockly.Lua.valueToCode(block, 'FROM',\n      Blockly.Lua.ORDER_NONE) || '0';\n  var endVar = Blockly.Lua.valueToCode(block, 'TO',\n      Blockly.Lua.ORDER_NONE) || '0';\n  var increment = Blockly.Lua.valueToCode(block, 'BY',\n      Blockly.Lua.ORDER_NONE) || '1';\n  var branch = Blockly.Lua.statementToCode(block, 'DO');\n  branch = Blockly.Lua.addLoopTrap(branch, block);\n  branch = Blockly.Lua.addContinueLabel_(branch);\n  var code = '';\n  var incValue;\n  if (Blockly.isNumber(startVar) && Blockly.isNumber(endVar) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = Number(startVar) <= Number(endVar);\n    var step = Math.abs(Number(increment));\n    incValue = (up ? '' : '-') + step;\n  } else {\n    code = '';\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    incValue = Blockly.Lua.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.VARIABLE_CATEGORY_NAME);\n    code += incValue + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + '\\n';\n    } else {\n      code += 'math.abs(' + increment + ')\\n';\n    }\n    code += 'if (' + startVar + ') > (' + endVar + ') then\\n';\n    code += Blockly.Lua.INDENT + incValue + ' = -' + incValue + '\\n';\n    code += 'end\\n';\n  }\n  code += 'for ' + variable0 + ' = ' + startVar + ', ' + endVar +\n      ', ' + incValue;\n  code += ' do\\n' + branch + 'end\\n';\n  return code;\n};\n\nBlockly.Lua['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.Lua.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.Lua.valueToCode(block, 'LIST',\n      Blockly.Lua.ORDER_NONE) || '{}';\n  var branch = Blockly.Lua.statementToCode(block, 'DO');\n  branch = Blockly.Lua.addLoopTrap(branch, block);\n  branch = Blockly.Lua.addContinueLabel_(branch);\n  var code = 'for _, ' + variable0 + ' in ipairs(' + argument0 + ') do \\n' +\n      branch + 'end\\n';\n  return code;\n};\n\nBlockly.Lua['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  var xfix = '';\n  if (Blockly.Lua.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, block);\n  }\n  if (Blockly.Lua.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, block);\n  }\n  if (Blockly.Lua.STATEMENT_PREFIX) {\n    var loop = Blockly.Constants.Loops\n        .CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(block);\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + Blockly.Lua.CONTINUE_STATEMENT;\n  }\n  throw Error('Unknown flow statement.');\n};\n"],"file":"loops.min.js"}