{"version":3,"sources":["../../../../src/blockly/generators/lua/procedures.js"],"names":["goog","provide","require","Blockly","Lua","block","funcName","variableDB_","getName","getFieldValue","PROCEDURE_CATEGORY_NAME","xfix1","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","prefixLines","INDENT","loopTrap","INFINITE_LOOP_TRAP","branch","statementToCode","returnValue","valueToCode","ORDER_NONE","xfix2","args","variables","getVars","i","length","VARIABLE_CATEGORY_NAME","code","join","scrub_","definitions_","ORDER_HIGH","tuple","condition","hasReturnValue_","value"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for procedure blocks.\n * @author rodrigoq@google.com (Rodrigo Queiro)\n */\n'use strict';\n\ngoog.provide('Blockly.Lua.procedures');\n\ngoog.require('Blockly.Lua');\n\n\nBlockly.Lua['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  var funcName = Blockly.Lua.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var xfix1 = '';\n  if (Blockly.Lua.STATEMENT_PREFIX) {\n    xfix1 += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, block);\n  }\n  if (Blockly.Lua.STATEMENT_SUFFIX) {\n    xfix1 += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = Blockly.Lua.prefixLines(xfix1, Blockly.Lua.INDENT);\n  }\n  var loopTrap = '';\n  if (Blockly.Lua.INFINITE_LOOP_TRAP) {\n    loopTrap = Blockly.Lua.prefixLines(\n        Blockly.Lua.injectId(Blockly.Lua.INFINITE_LOOP_TRAP, block),\n        Blockly.Lua.INDENT);\n  }\n  var branch = Blockly.Lua.statementToCode(block, 'STACK');\n  var returnValue = Blockly.Lua.valueToCode(block, 'RETURN',\n      Blockly.Lua.ORDER_NONE) || '';\n  var xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Blockly.Lua.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = '';\n  }\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.Lua.variableDB_.getName(variables[i],\n        Blockly.VARIABLE_CATEGORY_NAME);\n  }\n  var code = 'function ' + funcName + '(' + args.join(', ') + ')\\n' +\n      xfix1 + loopTrap + branch + xfix2 + returnValue + 'end\\n';\n  code = Blockly.Lua.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Blockly.Lua.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.Lua['procedures_defnoreturn'] =\n    Blockly.Lua['procedures_defreturn'];\n\nBlockly.Lua['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.Lua.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.Lua.valueToCode(block, 'ARG' + i,\n        Blockly.Lua.ORDER_NONE) || 'nil';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  var tuple = Blockly.Lua['procedures_callreturn'](block);\n  return tuple[0] + '\\n';\n};\n\nBlockly.Lua['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.Lua.valueToCode(block, 'CONDITION',\n      Blockly.Lua.ORDER_NONE) || 'false';\n  var code = 'if ' + condition + ' then\\n';\n  if (Blockly.Lua.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += Blockly.Lua.prefixLines(\n        Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, block),\n        Blockly.Lua.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    var value = Blockly.Lua.valueToCode(block, 'VALUE',\n        Blockly.Lua.ORDER_NONE) || 'nil';\n    code += Blockly.Lua.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += Blockly.Lua.INDENT + 'return\\n';\n  }\n  code += 'end\\n';\n  return code;\n};\n"],"file":"procedures.min.js"}