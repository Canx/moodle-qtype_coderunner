{"version":3,"sources":["../../../../src/blockly/generators/lua/logic.js"],"names":["goog","provide","require","Blockly","Lua","block","n","code","branchCode","conditionCode","STATEMENT_PREFIX","injectId","valueToCode","ORDER_NONE","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","operator","getFieldValue","argument0","ORDER_RELATIONAL","argument1","order","ORDER_AND","ORDER_OR","defaultArgument","ORDER_UNARY","ORDER_ATOMIC","value_if","value_then","value_else"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for logic blocks.\n * @author rodrigoq@google.com (Rodrigo Queiro)\n */\n'use strict';\n\ngoog.provide('Blockly.Lua.logic');\n\ngoog.require('Blockly.Lua');\n\n\nBlockly.Lua['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  if (Blockly.Lua.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += Blockly.Lua.injectId(Blockly.Lua.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode = Blockly.Lua.valueToCode(block, 'IF' + n,\n        Blockly.Lua.ORDER_NONE) || 'false';\n    branchCode = Blockly.Lua.statementToCode(block, 'DO' + n);\n    if (Blockly.Lua.STATEMENT_SUFFIX) {\n      branchCode = Blockly.Lua.prefixLines(\n          Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, block),\n          Blockly.Lua.INDENT) + branchCode;\n    }\n    code += (n > 0 ? 'else' : '') +\n        'if ' + conditionCode + ' then\\n' + branchCode;\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || Blockly.Lua.STATEMENT_SUFFIX) {\n    branchCode = Blockly.Lua.statementToCode(block, 'ELSE');\n    if (Blockly.Lua.STATEMENT_SUFFIX) {\n      branchCode = Blockly.Lua.prefixLines(\n          Blockly.Lua.injectId(Blockly.Lua.STATEMENT_SUFFIX, block),\n          Blockly.Lua.INDENT) + branchCode;\n    }\n    code += 'else\\n' + branchCode;\n  }\n  return code + 'end\\n';\n};\n\nBlockly.Lua['controls_ifelse'] = Blockly.Lua['controls_if'];\n\nBlockly.Lua['logic_compare'] = function(block) {\n  // Comparison operator.\n  var OPERATORS = {\n    'EQ': '==',\n    'NEQ': '~=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>='\n  };\n  var operator = OPERATORS[block.getFieldValue('OP')];\n  var argument0 = Blockly.Lua.valueToCode(block, 'A',\n      Blockly.Lua.ORDER_RELATIONAL) || '0';\n  var argument1 = Blockly.Lua.valueToCode(block, 'B',\n      Blockly.Lua.ORDER_RELATIONAL) || '0';\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, Blockly.Lua.ORDER_RELATIONAL];\n};\n\nBlockly.Lua['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  var operator = (block.getFieldValue('OP') == 'AND') ? 'and' : 'or';\n  var order = (operator == 'and') ? Blockly.Lua.ORDER_AND :\n      Blockly.Lua.ORDER_OR;\n  var argument0 = Blockly.Lua.valueToCode(block, 'A', order);\n  var argument1 = Blockly.Lua.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    var defaultArgument = (operator == 'and') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nBlockly.Lua['logic_negate'] = function(block) {\n  // Negation.\n  var argument0 = Blockly.Lua.valueToCode(block, 'BOOL',\n      Blockly.Lua.ORDER_UNARY) || 'true';\n  var code = 'not ' + argument0;\n  return [code, Blockly.Lua.ORDER_UNARY];\n};\n\nBlockly.Lua['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\n  return [code, Blockly.Lua.ORDER_ATOMIC];\n};\n\nBlockly.Lua['logic_null'] = function(block) {\n  // Null data type.\n  return ['nil', Blockly.Lua.ORDER_ATOMIC];\n};\n\nBlockly.Lua['logic_ternary'] = function(block) {\n  // Ternary operator.\n  var value_if = Blockly.Lua.valueToCode(block, 'IF',\n      Blockly.Lua.ORDER_AND) || 'false';\n  var value_then = Blockly.Lua.valueToCode(block, 'THEN',\n      Blockly.Lua.ORDER_AND) || 'nil';\n  var value_else = Blockly.Lua.valueToCode(block, 'ELSE',\n      Blockly.Lua.ORDER_OR) || 'nil';\n  var code = value_if + ' and ' + value_then + ' or ' + value_else;\n  return [code, Blockly.Lua.ORDER_OR];\n};\n"],"file":"logic.min.js"}