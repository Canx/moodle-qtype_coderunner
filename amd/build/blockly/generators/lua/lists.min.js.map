{"version":3,"sources":["../../../../src/blockly/generators/lua/lists.js"],"names":["goog","provide","require","Blockly","Lua","ORDER_HIGH","block","elements","Array","itemCount_","i","valueToCode","ORDER_NONE","code","join","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","element","repeatCount","list","ORDER_UNARY","ORDER_RELATIONAL","item","getFieldValue","lists","getIndex_","listName","where","opt_at","mode","match","atOrder","ORDER_ADDITIVE","at","listVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","toLowerCase","value","where1","where2","at1","at2","direction","type","input","delimiter","Error"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating Lua for list blocks.\n * @author rodrigoq@google.com (Rodrigo Queiro)\n */\n'use strict';\n\ngoog.provide('Blockly.Lua.lists');\n\ngoog.require('Blockly.Lua');\n\n\nBlockly.Lua['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['{}', Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Blockly.Lua.valueToCode(block, 'ADD' + i,\n        Blockly.Lua.ORDER_NONE) || 'None';\n  }\n  var code = '{' + elements.join(', ') + '}';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  var functionName = Blockly.Lua.provideFunction_(\n      'create_list_repeated',\n      ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(item, count)',\n       '  local t = {}',\n       '  for i = 1, count do',\n       '    table.insert(t, item)',\n       '  end',\n       '  return t',\n       'end']);\n  var element = Blockly.Lua.valueToCode(block, 'ITEM',\n      Blockly.Lua.ORDER_NONE) || 'None';\n  var repeatCount = Blockly.Lua.valueToCode(block, 'NUM',\n      Blockly.Lua.ORDER_NONE) || '0';\n  var code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['lists_length'] = function(block) {\n  // String or array length.\n  var list = Blockly.Lua.valueToCode(block, 'VALUE',\n      Blockly.Lua.ORDER_UNARY) || '{}';\n  return ['#' + list, Blockly.Lua.ORDER_UNARY];\n};\n\nBlockly.Lua['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var list = Blockly.Lua.valueToCode(block, 'VALUE',\n      Blockly.Lua.ORDER_UNARY) || '{}';\n  var code = '#' + list + ' == 0';\n  return [code, Blockly.Lua.ORDER_RELATIONAL];\n};\n\nBlockly.Lua['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  var item = Blockly.Lua.valueToCode(block, 'FIND',\n      Blockly.Lua.ORDER_NONE) || '\\'\\'';\n  var list = Blockly.Lua.valueToCode(block, 'VALUE',\n      Blockly.Lua.ORDER_NONE) || '{}';\n  if (block.getFieldValue('END') == 'FIRST') {\n    var functionName = Blockly.Lua.provideFunction_(\n        'first_index',\n        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t, elem)',\n         '  for k, v in ipairs(t) do',\n         '    if v == elem then',\n         '      return k',\n         '    end',\n         '  end',\n         '  return 0',\n         'end']);\n  } else {\n    var functionName = Blockly.Lua.provideFunction_(\n        'last_index',\n        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t, elem)',\n         '  for i = #t, 1, -1 do',\n         '    if t[i] == elem then',\n         '      return i',\n         '    end',\n         '  end',\n         '  return 0',\n         'end']);\n  }\n  var code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\n/**\n * Returns an expression calculating the index into a list.\n * @param {string} listName Name of the list, used to calculate length.\n * @param {string} where The method of indexing, selected by dropdown in Blockly\n * @param {string=} opt_at The optional offset when indexing from start/end.\n * @return {string|undefined} Index expression.\n * @private\n */\nBlockly.Lua.lists.getIndex_ = function(listName, where, opt_at) {\n  if (where == 'FIRST') {\n    return '1';\n  } else if (where == 'FROM_END') {\n    return '#' + listName + ' + 1 - ' + opt_at;\n  } else if (where == 'LAST') {\n    return '#' + listName;\n  } else if (where == 'RANDOM') {\n    return 'math.random(#' + listName + ')';\n  } else {\n    return opt_at;\n  }\n};\n\nBlockly.Lua['lists_getIndex'] = function(block) {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var list = Blockly.Lua.valueToCode(block, 'VALUE', Blockly.Lua.ORDER_HIGH) ||\n      '({})';\n  var getIndex_ = Blockly.Lua.lists.getIndex_;\n\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where == 'LAST' || where == 'FROM_END' || where == 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (mode == 'REMOVE') {\n      // We can use multiple statements.\n      var atOrder = (where == 'FROM_END') ? Blockly.Lua.ORDER_ADDITIVE :\n          Blockly.Lua.ORDER_NONE;\n      var at = Blockly.Lua.valueToCode(block, 'AT', atOrder) || '1';\n      var listVar = Blockly.Lua.variableDB_.getDistinctName(\n          'tmp_list', Blockly.VARIABLE_CATEGORY_NAME);\n      at = getIndex_(listVar, where, at);\n      var code = listVar + ' = ' + list + '\\n' +\n          'table.remove(' + listVar + ', ' + at + ')\\n';\n      return code;\n    } else {\n      // We need to create a procedure to avoid reevaluating values.\n      var at = Blockly.Lua.valueToCode(block, 'AT', Blockly.Lua.ORDER_NONE) ||\n          '1';\n      if (mode == 'GET') {\n        var functionName = Blockly.Lua.provideFunction_(\n            'list_get_' + where.toLowerCase(),\n            ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n                // The value for 'FROM_END' and'FROM_START' depends on `at` so\n                // we add it as a parameter.\n                ((where == 'FROM_END' || where == 'FROM_START') ?\n                    ', at)' : ')'),\n             '  return t[' + getIndex_('t', where, 'at') + ']',\n             'end']);\n      } else {  //  mode == 'GET_REMOVE'\n        var functionName = Blockly.Lua.provideFunction_(\n            'list_remove_' + where.toLowerCase(),\n            ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(t' +\n                // The value for 'FROM_END' and'FROM_START' depends on `at` so\n                // we add it as a parameter.\n                ((where == 'FROM_END' || where == 'FROM_START') ?\n                    ', at)' : ')'),\n             '  return table.remove(t, ' + getIndex_('t', where, 'at') + ')',\n             'end']);\n      }\n      var code = functionName + '(' + list +\n          // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n          // pass it.\n          ((where == 'FROM_END' || where == 'FROM_START') ? ', ' + at : '') +\n          ')';\n      return [code, Blockly.Lua.ORDER_HIGH];\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    var atOrder = (mode == 'GET' && where == 'FROM_END') ?\n        Blockly.Lua.ORDER_ADDITIVE : Blockly.Lua.ORDER_NONE;\n    var at = Blockly.Lua.valueToCode(block, 'AT', atOrder) || '1';\n    at = getIndex_(list, where, at);\n    if (mode == 'GET') {\n      var code = list + '[' + at + ']';\n      return [code, Blockly.Lua.ORDER_HIGH];\n    } else {\n      var code = 'table.remove(' + list + ', ' + at + ')';\n      if (mode == 'GET_REMOVE') {\n        return [code, Blockly.Lua.ORDER_HIGH];\n      } else {  // `mode` == 'REMOVE'\n        return code + '\\n';\n      }\n    }\n  }\n};\n\nBlockly.Lua['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  var list = Blockly.Lua.valueToCode(block, 'LIST',\n      Blockly.Lua.ORDER_HIGH) || '{}';\n  var mode = block.getFieldValue('MODE') || 'SET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var at = Blockly.Lua.valueToCode(block, 'AT',\n      Blockly.Lua.ORDER_ADDITIVE) || '1';\n  var value = Blockly.Lua.valueToCode(block, 'TO',\n      Blockly.Lua.ORDER_NONE) || 'None';\n  var getIndex_ = Blockly.Lua.lists.getIndex_;\n\n  var code = '';\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if ((where == 'LAST' || where == 'FROM_END' || where == 'RANDOM') &&\n      !list.match(/^\\w+$/)) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    // We can use multiple statements.\n    var listVar = Blockly.Lua.variableDB_.getDistinctName(\n        'tmp_list', Blockly.VARIABLE_CATEGORY_NAME);\n    code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n  }\n  if (mode == 'SET') {\n    code += list + '[' + getIndex_(list, where, at) + '] = ' + value;\n  } else {  // `mode` == 'INSERT'\n    // LAST is a special case, because we want to insert\n    // *after* not *before*, the existing last element.\n    code += 'table.insert(' + list + ', ' +\n        (getIndex_(list, where, at) + (where == 'LAST' ? ' + 1' : '')) +\n        ', ' + value + ')';\n  }\n  return code + '\\n';\n};\n\nBlockly.Lua['lists_getSublist'] = function(block) {\n  // Get sublist.\n  var list = Blockly.Lua.valueToCode(block, 'LIST',\n      Blockly.Lua.ORDER_NONE) || '{}';\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  var at1 = Blockly.Lua.valueToCode(block, 'AT1',\n      Blockly.Lua.ORDER_NONE) || '1';\n  var at2 = Blockly.Lua.valueToCode(block, 'AT2',\n      Blockly.Lua.ORDER_NONE) || '1';\n  var getIndex_ = Blockly.Lua.lists.getIndex_;\n\n  var functionName = Blockly.Lua.provideFunction_(\n      'list_sublist_' + where1.toLowerCase() + '_' + where2.toLowerCase(),\n      ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(source' +\n          // The value for 'FROM_END' and'FROM_START' depends on `at` so\n          // we add it as a parameter.\n          ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', at1' : '') +\n          ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', at2' : '') +\n          ')',\n       '  local t = {}',\n       '  local start = ' + getIndex_('source', where1, 'at1'),\n       '  local finish = ' + getIndex_('source', where2, 'at2'),\n       '  for i = start, finish do',\n       '    table.insert(t, source[i])',\n       '  end',\n       '  return t',\n       'end']);\n  var code = functionName + '(' + list +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      ((where1 == 'FROM_END' || where1 == 'FROM_START') ? ', ' + at1 : '') +\n      ((where2 == 'FROM_END' || where2 == 'FROM_START') ? ', ' + at2 : '') +\n      ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  var list = Blockly.Lua.valueToCode(\n      block, 'LIST', Blockly.Lua.ORDER_NONE) || '{}';\n  var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  var type = block.getFieldValue('TYPE');\n\n  var functionName = Blockly.Lua.provideFunction_(\n      'list_sort',\n      ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ +\n          '(list, typev, direction)',\n       '  local t = {}',\n       '  for n,v in pairs(list) do table.insert(t, v) end', // Shallow-copy.\n       '  local compareFuncs = {',\n       '    NUMERIC = function(a, b)',\n       '      return (tonumber(tostring(a)) or 0)',\n       '          < (tonumber(tostring(b)) or 0) end,',\n       '    TEXT = function(a, b)',\n       '      return tostring(a) < tostring(b) end,',\n       '    IGNORE_CASE = function(a, b)',\n       '      return string.lower(tostring(a)) < string.lower(tostring(b)) end',\n       '  }',\n       '  local compareTemp = compareFuncs[typev]',\n       '  local compare = compareTemp',\n       '  if direction == -1',\n       '  then compare = function(a, b) return compareTemp(b, a) end',\n       '  end',\n       '  table.sort(t, compare)',\n       '  return t',\n       'end']);\n\n  var code = functionName +\n      '(' + list + ',\"' + type + '\", ' + direction + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  var input = Blockly.Lua.valueToCode(block, 'INPUT',\n      Blockly.Lua.ORDER_NONE);\n  var delimiter = Blockly.Lua.valueToCode(block, 'DELIM',\n      Blockly.Lua.ORDER_NONE) || '\\'\\'';\n  var mode = block.getFieldValue('MODE');\n  var functionName;\n  if (mode == 'SPLIT') {\n    if (!input) {\n      input = '\\'\\'';\n    }\n    functionName = Blockly.Lua.provideFunction_(\n        'list_string_split',\n        ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ +\n            '(input, delim)',\n         '  local t = {}',\n         '  local pos = 1',\n         '  while true do',\n         '    next_delim = string.find(input, delim, pos)',\n         '    if next_delim == nil then',\n         '      table.insert(t, string.sub(input, pos))',\n         '      break',\n         '    else',\n         '      table.insert(t, string.sub(input, pos, next_delim-1))',\n         '      pos = next_delim + #delim',\n         '    end',\n         '  end',\n         '  return t',\n         'end']);\n  } else if (mode == 'JOIN') {\n    if (!input) {\n      input = '{}';\n    }\n    functionName = 'table.concat';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  var code = functionName + '(' + input + ', ' + delimiter + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n\nBlockly.Lua['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  var list = Blockly.Lua.valueToCode(block, 'LIST',\n      Blockly.Lua.ORDER_NONE) || '{}';\n  var functionName = Blockly.Lua.provideFunction_(\n      'list_reverse',\n      ['function ' + Blockly.Lua.FUNCTION_NAME_PLACEHOLDER_ + '(input)',\n       '  local reversed = {}',\n       '  for i = #input, 1, -1 do',\n       '    table.insert(reversed, input[i])',\n       '  end',\n       '  return reversed',\n       'end']);\n  var code = functionName + '(' + list + ')';\n  return [code, Blockly.Lua.ORDER_HIGH];\n};\n"],"file":"lists.min.js"}