{"version":3,"sources":["../../../../src/blockly/generators/php/procedures.js"],"names":["goog","provide","require","Blockly","PHP","block","globals","varName","workspace","variables","Variables","allUsedVarModels","i","variable","name","getVars","indexOf","push","variableDB_","getName","VARIABLE_CATEGORY_NAME","devVarList","allDeveloperVariables","length","Names","DEVELOPER_VARIABLE_TYPE","INDENT","join","funcName","getFieldValue","PROCEDURE_CATEGORY_NAME","xfix1","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","prefixLines","loopTrap","INFINITE_LOOP_TRAP","branch","statementToCode","returnValue","valueToCode","ORDER_NONE","xfix2","args","code","scrub_","definitions_","ORDER_COMMA","ORDER_FUNCTION_CALL","tuple","condition","hasReturnValue_","value"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for procedure blocks.\n * @author daarond@gmail.com (Daaron Dwyer)\n */\n'use strict';\n\ngoog.provide('Blockly.PHP.procedures');\n\ngoog.require('Blockly.PHP');\n\nBlockly.PHP['procedures_defreturn'] = function(block) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  var globals = [];\n  var varName;\n  var workspace = block.workspace;\n  var variables = Blockly.Variables.allUsedVarModels(workspace) || [];\n  for (var i = 0, variable; variable = variables[i]; i++) {\n    varName = variable.name;\n    if (block.getVars().indexOf(varName) == -1) {\n      globals.push(Blockly.PHP.variableDB_.getName(varName,\n          Blockly.VARIABLE_CATEGORY_NAME));\n    }\n  }\n  // Add developer variables.\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (var i = 0; i < devVarList.length; i++) {\n    globals.push(Blockly.PHP.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n  }\n  globals = globals.length ?\n      Blockly.PHP.INDENT + 'global ' + globals.join(', ') + ';\\n' : '';\n\n  var funcName = Blockly.PHP.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var xfix1 = '';\n  if (Blockly.PHP.STATEMENT_PREFIX) {\n    xfix1 += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, block);\n  }\n  if (Blockly.PHP.STATEMENT_SUFFIX) {\n    xfix1 += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = Blockly.PHP.prefixLines(xfix1, Blockly.PHP.INDENT);\n  }\n  var loopTrap = '';\n  if (Blockly.PHP.INFINITE_LOOP_TRAP) {\n    loopTrap = Blockly.PHP.prefixLines(\n        Blockly.PHP.injectId(Blockly.PHP.INFINITE_LOOP_TRAP, block),\n        Blockly.PHP.INDENT);\n  }\n  var branch = Blockly.PHP.statementToCode(block, 'STACK');\n  var returnValue = Blockly.PHP.valueToCode(block, 'RETURN',\n      Blockly.PHP.ORDER_NONE) || '';\n  var xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = Blockly.PHP.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.PHP.variableDB_.getName(variables[i],\n        Blockly.VARIABLE_CATEGORY_NAME);\n  }\n  var code = 'function ' + funcName + '(' + args.join(', ') + ') {\\n' +\n      globals + xfix1 + loopTrap + branch + xfix2 + returnValue + '}';\n  code = Blockly.PHP.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  Blockly.PHP.definitions_['%' + funcName] = code;\n  return null;\n};\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nBlockly.PHP['procedures_defnoreturn'] =\n    Blockly.PHP['procedures_defreturn'];\n\nBlockly.PHP['procedures_callreturn'] = function(block) {\n  // Call a procedure with a return value.\n  var funcName = Blockly.PHP.variableDB_.getName(\n      block.getFieldValue('NAME'), Blockly.PROCEDURE_CATEGORY_NAME);\n  var args = [];\n  var variables = block.getVars();\n  for (var i = 0; i < variables.length; i++) {\n    args[i] = Blockly.PHP.valueToCode(block, 'ARG' + i,\n        Blockly.PHP.ORDER_COMMA) || 'null';\n  }\n  var code = funcName + '(' + args.join(', ') + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['procedures_callnoreturn'] = function(block) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  var tuple = Blockly.PHP['procedures_callreturn'](block);\n  return tuple[0] + ';\\n';\n};\n\nBlockly.PHP['procedures_ifreturn'] = function(block) {\n  // Conditionally return value from a procedure.\n  var condition = Blockly.PHP.valueToCode(block, 'CONDITION',\n      Blockly.PHP.ORDER_NONE) || 'false';\n  var code = 'if (' + condition + ') {\\n';\n  if (Blockly.PHP.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += Blockly.PHP.prefixLines(\n        Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, block),\n        Blockly.PHP.INDENT);\n  }\n  if (block.hasReturnValue_) {\n    var value = Blockly.PHP.valueToCode(block, 'VALUE',\n        Blockly.PHP.ORDER_NONE) || 'null';\n    code += Blockly.PHP.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += Blockly.PHP.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n};\n"],"file":"procedures.min.js"}