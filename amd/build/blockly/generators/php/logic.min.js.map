{"version":3,"sources":["../../../../src/blockly/generators/php/logic.js"],"names":["goog","provide","require","Blockly","PHP","block","n","code","branchCode","conditionCode","STATEMENT_PREFIX","injectId","valueToCode","ORDER_NONE","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","operator","getFieldValue","order","ORDER_EQUALITY","ORDER_RELATIONAL","argument0","argument1","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","defaultArgument","ORDER_LOGICAL_NOT","ORDER_ATOMIC","value_if","ORDER_CONDITIONAL","value_then","value_else"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for logic blocks.\n * @author daarond@gmail.com (Daaron Dwyer)\n */\n'use strict';\n\ngoog.provide('Blockly.PHP.logic');\n\ngoog.require('Blockly.PHP');\n\n\nBlockly.PHP['controls_if'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  if (Blockly.PHP.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode = Blockly.PHP.valueToCode(block, 'IF' + n,\n        Blockly.PHP.ORDER_NONE) || 'false';\n    branchCode = Blockly.PHP.statementToCode(block, 'DO' + n);\n    if (Blockly.PHP.STATEMENT_SUFFIX) {\n      branchCode = Blockly.PHP.prefixLines(\n          Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, block),\n          Blockly.PHP.INDENT) + branchCode;\n    }\n    code += (n > 0 ? ' else ' : '') +\n        'if (' + conditionCode + ') {\\n' + branchCode + '}';\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || Blockly.PHP.STATEMENT_SUFFIX) {\n    branchCode = Blockly.PHP.statementToCode(block, 'ELSE');\n    if (Blockly.PHP.STATEMENT_SUFFIX) {\n      branchCode = Blockly.PHP.prefixLines(\n          Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, block),\n          Blockly.PHP.INDENT) + branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n};\n\nBlockly.PHP['controls_ifelse'] = Blockly.PHP['controls_if'];\n\nBlockly.PHP['logic_compare'] = function(block) {\n  // Comparison operator.\n  var OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>='\n  };\n  var operator = OPERATORS[block.getFieldValue('OP')];\n  var order = (operator == '==' || operator == '!=') ?\n      Blockly.PHP.ORDER_EQUALITY : Blockly.PHP.ORDER_RELATIONAL;\n  var argument0 = Blockly.PHP.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.PHP.valueToCode(block, 'B', order) || '0';\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nBlockly.PHP['logic_operation'] = function(block) {\n  // Operations 'and', 'or'.\n  var operator = (block.getFieldValue('OP') == 'AND') ? '&&' : '||';\n  var order = (operator == '&&') ? Blockly.PHP.ORDER_LOGICAL_AND :\n      Blockly.PHP.ORDER_LOGICAL_OR;\n  var argument0 = Blockly.PHP.valueToCode(block, 'A', order);\n  var argument1 = Blockly.PHP.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    var defaultArgument = (operator == '&&') ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  var code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n};\n\nBlockly.PHP['logic_negate'] = function(block) {\n  // Negation.\n  var order = Blockly.PHP.ORDER_LOGICAL_NOT;\n  var argument0 = Blockly.PHP.valueToCode(block, 'BOOL', order) ||\n      'true';\n  var code = '!' + argument0;\n  return [code, order];\n};\n\nBlockly.PHP['logic_boolean'] = function(block) {\n  // Boolean values true and false.\n  var code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';\n  return [code, Blockly.PHP.ORDER_ATOMIC];\n};\n\nBlockly.PHP['logic_null'] = function(block) {\n  // Null data type.\n  return ['null', Blockly.PHP.ORDER_ATOMIC];\n};\n\nBlockly.PHP['logic_ternary'] = function(block) {\n  // Ternary operator.\n  var value_if = Blockly.PHP.valueToCode(block, 'IF',\n      Blockly.PHP.ORDER_CONDITIONAL) || 'false';\n  var value_then = Blockly.PHP.valueToCode(block, 'THEN',\n      Blockly.PHP.ORDER_CONDITIONAL) || 'null';\n  var value_else = Blockly.PHP.valueToCode(block, 'ELSE',\n      Blockly.PHP.ORDER_CONDITIONAL) || 'null';\n  var code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Blockly.PHP.ORDER_CONDITIONAL];\n};\n"],"file":"logic.min.js"}