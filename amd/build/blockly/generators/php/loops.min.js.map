{"version":3,"sources":["../../../../src/blockly/generators/php/loops.js"],"names":["goog","provide","require","Blockly","PHP","block","getField","repeats","getFieldValue","valueToCode","ORDER_ASSIGNMENT","branch","statementToCode","addLoopTrap","code","loopVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","endVar","match","isNumber","until","argument0","ORDER_LOGICAL_NOT","ORDER_NONE","variable0","getName","argument1","increment","up","step","Math","abs","startVar","incVar","INDENT","xfix","STATEMENT_PREFIX","injectId","STATEMENT_SUFFIX","loop","Constants","Loops","CONTROL_FLOW_IN_LOOP_CHECK_MIXIN","getSurroundLoop","suppressPrefixSuffix","Error"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for loop blocks.\n * @author daarond@gmail.com (Daaron Dwyer)\n */\n'use strict';\n\ngoog.provide('Blockly.PHP.loops');\n\ngoog.require('Blockly.PHP');\n\n\nBlockly.PHP['controls_repeat_ext'] = function(block) {\n  // Repeat n times.\n  if (block.getField('TIMES')) {\n    // Internal number.\n    var repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    var repeats = Blockly.PHP.valueToCode(block, 'TIMES',\n        Blockly.PHP.ORDER_ASSIGNMENT) || '0';\n  }\n  var branch = Blockly.PHP.statementToCode(block, 'DO');\n  branch = Blockly.PHP.addLoopTrap(branch, block);\n  var code = '';\n  var loopVar = Blockly.PHP.variableDB_.getDistinctName(\n      'count', Blockly.VARIABLE_CATEGORY_NAME);\n  var endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\n    endVar = Blockly.PHP.variableDB_.getDistinctName(\n        'repeat_end', Blockly.VARIABLE_CATEGORY_NAME);\n    code += endVar + ' = ' + repeats + ';\\n';\n  }\n  code += 'for (' + loopVar + ' = 0; ' +\n      loopVar + ' < ' + endVar + '; ' +\n      loopVar + '++) {\\n' +\n      branch + '}\\n';\n  return code;\n};\n\nBlockly.PHP['controls_repeat'] = Blockly.PHP['controls_repeat_ext'];\n\nBlockly.PHP['controls_whileUntil'] = function(block) {\n  // Do while/until loop.\n  var until = block.getFieldValue('MODE') == 'UNTIL';\n  var argument0 = Blockly.PHP.valueToCode(block, 'BOOL',\n      until ? Blockly.PHP.ORDER_LOGICAL_NOT :\n      Blockly.PHP.ORDER_NONE) || 'false';\n  var branch = Blockly.PHP.statementToCode(block, 'DO');\n  branch = Blockly.PHP.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n};\n\nBlockly.PHP['controls_for'] = function(block) {\n  // For loop.\n  var variable0 = Blockly.PHP.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.PHP.valueToCode(block, 'FROM',\n      Blockly.PHP.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.PHP.valueToCode(block, 'TO',\n      Blockly.PHP.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.PHP.valueToCode(block, 'BY',\n      Blockly.PHP.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.PHP.statementToCode(block, 'DO');\n  branch = Blockly.PHP.addLoopTrap(branch, block);\n  var code;\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) &&\n      Blockly.isNumber(increment)) {\n    // All arguments are simple numbers.\n    var up = Number(argument0) <= Number(argument1);\n    code = 'for (' + variable0 + ' = ' + argument0 + '; ' +\n        variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' +\n        variable0;\n    var step = Math.abs(Number(increment));\n    if (step == 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      startVar = Blockly.PHP.variableDB_.getDistinctName(\n          variable0 + '_start', Blockly.VARIABLE_CATEGORY_NAME);\n      code += startVar + ' = ' + argument0 + ';\\n';\n    }\n    var endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      endVar = Blockly.PHP.variableDB_.getDistinctName(\n          variable0 + '_end', Blockly.VARIABLE_CATEGORY_NAME);\n      code += endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    var incVar = Blockly.PHP.variableDB_.getDistinctName(\n        variable0 + '_inc', Blockly.VARIABLE_CATEGORY_NAME);\n    code += incVar + ' = ';\n    if (Blockly.isNumber(increment)) {\n      code += Math.abs(increment) + ';\\n';\n    } else {\n      code += 'abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += Blockly.PHP.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code += 'for (' + variable0 + ' = ' + startVar + '; ' +\n        incVar + ' >= 0 ? ' +\n        variable0 + ' <= ' + endVar + ' : ' +\n        variable0 + ' >= ' + endVar + '; ' +\n        variable0 + ' += ' + incVar + ') {\\n' +\n        branch + '}\\n';\n  }\n  return code;\n};\n\nBlockly.PHP['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.PHP.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  var argument0 = Blockly.PHP.valueToCode(block, 'LIST',\n      Blockly.PHP.ORDER_ASSIGNMENT) || '[]';\n  var branch = Blockly.PHP.statementToCode(block, 'DO');\n  branch = Blockly.PHP.addLoopTrap(branch, block);\n  var code = '';\n  code += 'foreach (' + argument0 + ' as ' + variable0 +\n      ') {\\n' + branch + '}\\n';\n  return code;\n};\n\nBlockly.PHP['controls_flow_statements'] = function(block) {\n  // Flow statements: continue, break.\n  var xfix = '';\n  if (Blockly.PHP.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, block);\n  }\n  if (Blockly.PHP.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_SUFFIX, block);\n  }\n  if (Blockly.PHP.STATEMENT_PREFIX) {\n    var loop = Blockly.Constants.Loops\n        .CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(block);\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += Blockly.PHP.injectId(Blockly.PHP.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n};\n"],"file":"loops.min.js"}