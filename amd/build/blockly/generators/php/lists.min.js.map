{"version":3,"sources":["../../../../src/blockly/generators/php/lists.js"],"names":["goog","provide","require","Blockly","PHP","ORDER_FUNCTION_CALL","block","code","Array","itemCount_","i","valueToCode","ORDER_COMMA","join","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","element","repeatCount","list","ORDER_NONE","argument0","argument1","ORDER_MEMBER","workspace","options","oneBasedIndex","errorIndex","indexAdjustment","getFieldValue","mode","where","at","getAdjusted","ORDER_SUBTRACTION","Error","value","ORDER_ASSIGNMENT","cacheList","match","listVar","variableDB_","getDistinctName","VARIABLE_CATEGORY_NAME","ORDER_REFERENCE","xVar","where1","where2","at1","at2","length","isNumber","listCode","direction","type","value_input","value_delim"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for list blocks.\n * @author daarond@gmail.com (Daaron Dwyer)\n */\n\n/**\n * Lists in PHP are known to break when non-variables are passed into blocks\n * that require a list. PHP, unlike other languages, passes arrays as reference\n * value instead of value so we are unable to support it to the extent we can\n * for the other languages.\n * For example, a ternary operator with two arrays will return the array by\n * value and that cannot be passed into any of the built-in array functions for\n * PHP (because only variables can be passed by reference).\n * ex:  end(true ? list1 : list2)\n */\n'use strict';\n\ngoog.provide('Blockly.PHP.lists');\n\ngoog.require('Blockly.PHP');\n\n\nBlockly.PHP['lists_create_empty'] = function(block) {\n  // Create an empty list.\n  return ['array()', Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_create_with'] = function(block) {\n  // Create a list with any number of elements of any type.\n  var code = new Array(block.itemCount_);\n  for (var i = 0; i < block.itemCount_; i++) {\n    code[i] = Blockly.PHP.valueToCode(block, 'ADD' + i,\n        Blockly.PHP.ORDER_COMMA) || 'null';\n  }\n  code = 'array(' + code.join(', ') + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_repeat'] = function(block) {\n  // Create a list with one element repeated.\n  var functionName = Blockly.PHP.provideFunction_(\n      'lists_repeat',\n      ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n          '($value, $count) {',\n       '  $array = array();',\n       '  for ($index = 0; $index < $count; $index++) {',\n       '    $array[] = $value;',\n       '  }',\n       '  return $array;',\n       '}']);\n  var element = Blockly.PHP.valueToCode(block, 'ITEM',\n      Blockly.PHP.ORDER_COMMA) || 'null';\n  var repeatCount = Blockly.PHP.valueToCode(block, 'NUM',\n      Blockly.PHP.ORDER_COMMA) || '0';\n  var code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_length'] = function(block) {\n  // String or array length.\n  var functionName = Blockly.PHP.provideFunction_(\n      'length',\n      ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + '($value) {',\n       '  if (is_string($value)) {',\n       '    return strlen($value);',\n       '  } else {',\n       '    return count($value);',\n       '  }',\n       '}']);\n  var list = Blockly.PHP.valueToCode(block, 'VALUE',\n      Blockly.PHP.ORDER_NONE) || '\\'\\'';\n  return [functionName + '(' + list + ')', Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_isEmpty'] = function(block) {\n  // Is the string null or array empty?\n  var argument0 = Blockly.PHP.valueToCode(block, 'VALUE',\n      Blockly.PHP.ORDER_FUNCTION_CALL) || 'array()';\n  return ['empty(' + argument0 + ')', Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_indexOf'] = function(block) {\n  // Find an item in the list.\n  var argument0 = Blockly.PHP.valueToCode(block, 'FIND',\n      Blockly.PHP.ORDER_NONE) || '\\'\\'';\n  var argument1 = Blockly.PHP.valueToCode(block, 'VALUE',\n      Blockly.PHP.ORDER_MEMBER) || '[]';\n  if (block.workspace.options.oneBasedIndex) {\n    var errorIndex = ' 0';\n    var indexAdjustment = ' + 1';\n  } else {\n    var errorIndex = ' -1';\n    var indexAdjustment = '';\n  }\n  if (block.getFieldValue('END') == 'FIRST') {\n    // indexOf\n    var functionName = Blockly.PHP.provideFunction_(\n        'indexOf',\n        ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n            '($haystack, $needle) {',\n         '  for ($index = 0; $index < count($haystack); $index++) {',\n         '    if ($haystack[$index] == $needle) return $index' +\n            indexAdjustment + ';',\n         '  }',\n         '  return ' + errorIndex + ';',\n         '}']);\n  } else {\n    // lastIndexOf\n    var functionName = Blockly.PHP.provideFunction_(\n        'lastIndexOf',\n        ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n            '($haystack, $needle) {',\n         '  $last = ' + errorIndex + ';',\n         '  for ($index = 0; $index < count($haystack); $index++) {',\n         '    if ($haystack[$index] == $needle) $last = $index' +\n            indexAdjustment + ';',\n         '  }',\n         '  return $last;',\n         '}']);\n  }\n\n  var code = functionName + '(' + argument1 + ', ' + argument0 + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_getIndex'] = function(block) {\n  // Get element at index.\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  switch (where) {\n    case 'FIRST':\n      if (mode == 'GET') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_MEMBER) || 'array()';\n        var code = list + '[0]';\n        return [code, Blockly.PHP.ORDER_MEMBER];\n      } else if (mode == 'GET_REMOVE') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_NONE) || 'array()';\n        var code = 'array_shift(' + list + ')';\n        return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_NONE) || 'array()';\n        return 'array_shift(' + list + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode == 'GET') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_NONE) || 'array()';\n        var code = 'end(' + list + ')';\n        return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n      } else if (mode == 'GET_REMOVE') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_NONE) || 'array()';\n        var code = 'array_pop(' + list + ')';\n        return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_NONE) || 'array()';\n        return 'array_pop(' + list + ');\\n';\n      }\n      break;\n    case 'FROM_START':\n      var at = Blockly.PHP.getAdjusted(block, 'AT');\n      if (mode == 'GET') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_MEMBER) || 'array()';\n        var code = list + '[' + at + ']';\n        return [code, Blockly.PHP.ORDER_MEMBER];\n      } else if (mode == 'GET_REMOVE') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_COMMA) || 'array()';\n        var code = 'array_splice(' + list + ', ' + at + ', 1)[0]';\n        return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_COMMA) || 'array()';\n        return 'array_splice(' + list + ', ' + at + ', 1);\\n';\n      }\n      break;\n    case 'FROM_END':\n      if (mode == 'GET') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_COMMA) || 'array()';\n        var at = Blockly.PHP.getAdjusted(block, 'AT', 1, true);\n        var code = 'array_slice(' + list + ', ' + at + ', 1)[0]';\n        return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n      } else if (mode == 'GET_REMOVE' || mode == 'REMOVE') {\n        var list = Blockly.PHP.valueToCode(block, 'VALUE',\n                Blockly.PHP.ORDER_NONE) || 'array()';\n        var at = Blockly.PHP.getAdjusted(block, 'AT', 1, false,\n            Blockly.PHP.ORDER_SUBTRACTION);\n        code = 'array_splice(' + list +\n            ', count(' + list + ') - ' + at + ', 1)[0]';\n        if (mode == 'GET_REMOVE') {\n          return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n        } else if (mode == 'REMOVE') {\n          return code + ';\\n';\n        }\n      }\n      break;\n    case 'RANDOM':\n      var list = Blockly.PHP.valueToCode(block, 'VALUE',\n              Blockly.PHP.ORDER_NONE) || 'array()';\n      if (mode == 'GET') {\n        var functionName = Blockly.PHP.provideFunction_(\n            'lists_get_random_item',\n            ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n                '($list) {',\n             '  return $list[rand(0,count($list)-1)];',\n             '}']);\n        code = functionName + '(' + list + ')';\n        return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n      } else if (mode == 'GET_REMOVE') {\n        var functionName = Blockly.PHP.provideFunction_(\n            'lists_get_remove_random_item',\n            ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n                '(&$list) {',\n             '  $x = rand(0,count($list)-1);',\n             '  unset($list[$x]);',\n             '  return array_values($list);',\n             '}']);\n        code = functionName + '(' + list + ')';\n        return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n      } else if (mode == 'REMOVE') {\n        var functionName = Blockly.PHP.provideFunction_(\n            'lists_remove_random_item',\n            ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n                '(&$list) {',\n             '  unset($list[rand(0,count($list)-1)]);',\n             '}']);\n        return functionName + '(' + list + ');\\n';\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n};\n\nBlockly.PHP['lists_setIndex'] = function(block) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var value = Blockly.PHP.valueToCode(block, 'TO',\n      Blockly.PHP.ORDER_ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\$\\w+$/)) {\n      return '';\n    }\n    var listVar = Blockly.PHP.variableDB_.getDistinctName(\n        'tmp_list', Blockly.VARIABLE_CATEGORY_NAME);\n    var code = listVar + ' = &' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode == 'SET') {\n        var list = Blockly.PHP.valueToCode(block, 'LIST',\n                Blockly.PHP.ORDER_MEMBER) || 'array()';\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode == 'INSERT') {\n        var list = Blockly.PHP.valueToCode(block, 'LIST',\n                Blockly.PHP.ORDER_COMMA) || 'array()';\n        return 'array_unshift(' + list + ', ' + value + ');\\n';\n      }\n      break;\n    case 'LAST':\n      var list = Blockly.PHP.valueToCode(block, 'LIST',\n              Blockly.PHP.ORDER_COMMA) || 'array()';\n      if (mode == 'SET') {\n        var functionName = Blockly.PHP.provideFunction_(\n            'lists_set_last_item',\n            ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n                '(&$list, $value) {',\n             '  $list[count($list) - 1] = $value;',\n             '}']);\n        return functionName + '(' + list + ', ' + value + ');\\n';\n      } else if (mode == 'INSERT') {\n        return 'array_push(' + list + ', ' + value + ');\\n';\n      }\n      break;\n    case 'FROM_START':\n      var at = Blockly.PHP.getAdjusted(block, 'AT');\n      if (mode == 'SET') {\n        var list = Blockly.PHP.valueToCode(block, 'LIST',\n                Blockly.PHP.ORDER_MEMBER) || 'array()';\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode == 'INSERT') {\n        var list = Blockly.PHP.valueToCode(block, 'LIST',\n                Blockly.PHP.ORDER_COMMA) || 'array()';\n        return 'array_splice(' + list + ', ' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    case 'FROM_END':\n      var list = Blockly.PHP.valueToCode(block, 'LIST',\n              Blockly.PHP.ORDER_COMMA) || 'array()';\n      var at = Blockly.PHP.getAdjusted(block, 'AT', 1);\n      if (mode == 'SET') {\n        var functionName = Blockly.PHP.provideFunction_(\n            'lists_set_from_end',\n            ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n                '(&$list, $at, $value) {',\n             '  $list[count($list) - $at] = $value;',\n             '}']);\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\n      } else if (mode == 'INSERT') {\n        var functionName = Blockly.PHP.provideFunction_(\n            'lists_insert_from_end',\n            ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n                '(&$list, $at, $value) {',\n             '  return array_splice($list, count($list) - $at, 0, $value);',\n             '}']);\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\n      }\n      break;\n    case 'RANDOM':\n      var list = Blockly.PHP.valueToCode(block, 'LIST',\n              Blockly.PHP.ORDER_REFERENCE) || 'array()';\n      var code = cacheList();\n      var xVar = Blockly.PHP.variableDB_.getDistinctName(\n          'tmp_x', Blockly.VARIABLE_CATEGORY_NAME);\n      code += xVar + ' = rand(0, count(' + list + ')-1);\\n';\n      if (mode == 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode == 'INSERT') {\n        code += 'array_splice(' + list + ', ' + xVar + ', 0, ' + value +\n            ');\\n';\n        return code;\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n};\n\nBlockly.PHP['lists_getSublist'] = function(block) {\n  // Get sublist.\n  var list = Blockly.PHP.valueToCode(block, 'LIST',\n      Blockly.PHP.ORDER_COMMA) || 'array()';\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  if (where1 == 'FIRST' && where2 == 'LAST') {\n    var code = list;\n  } else if (list.match(/^\\$\\w+$/) ||\n      (where1 != 'FROM_END' && where2 == 'FROM_START')) {\n    // If the list is a simple value or doesn't require a call for length, don't\n    // generate a helper function.\n    switch (where1) {\n      case 'FROM_START':\n        var at1 = Blockly.PHP.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        var at1 = Blockly.PHP.getAdjusted(block, 'AT1', 1, false,\n            Blockly.PHP.ORDER_SUBTRACTION);\n        at1 = 'count(' + list + ') - ' + at1;\n        break;\n      case 'FIRST':\n        var at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    switch (where2) {\n      case 'FROM_START':\n        var at2 = Blockly.PHP.getAdjusted(block, 'AT2', 0, false,\n            Blockly.PHP.ORDER_SUBTRACTION);\n        var length = at2 + ' - ';\n        if (Blockly.isNumber(String(at1)) || String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        length += ' + 1';\n        break;\n      case 'FROM_END':\n        var at2 = Blockly.PHP.getAdjusted(block, 'AT2', 0, false,\n            Blockly.PHP.ORDER_SUBTRACTION);\n        var length = 'count(' + list + ') - ' + at2 + ' - ';\n        if (Blockly.isNumber(String(at1)) || String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        break;\n      case 'LAST':\n        var length = 'count(' + list + ') - ';\n        if (Blockly.isNumber(String(at1)) || String(at1).match(/^\\(.+\\)$/)) {\n          length += at1;\n        } else {\n          length += '(' + at1 + ')';\n        }\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = 'array_slice(' + list + ', ' + at1 + ', ' + length + ')';\n  } else {\n    var at1 = Blockly.PHP.getAdjusted(block, 'AT1');\n    var at2 = Blockly.PHP.getAdjusted(block, 'AT2');\n    var functionName = Blockly.PHP.provideFunction_(\n        'lists_get_sublist',\n        ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n            '($list, $where1, $at1, $where2, $at2) {',\n         '  if ($where1 == \\'FROM_END\\') {',\n         '    $at1 = count($list) - 1 - $at1;',\n         '  } else if ($where1 == \\'FIRST\\') {',\n         '    $at1 = 0;',\n         '  } else if ($where1 != \\'FROM_START\\') {',\n         '    throw new Exception(\\'Unhandled option (lists_get_sublist).\\');',\n         '  }',\n         '  $length = 0;',\n         '  if ($where2 == \\'FROM_START\\') {',\n         '    $length = $at2 - $at1 + 1;',\n         '  } else if ($where2 == \\'FROM_END\\') {',\n         '    $length = count($list) - $at1 - $at2;',\n         '  } else if ($where2 == \\'LAST\\') {',\n         '    $length = count($list) - $at1;',\n         '  } else {',\n         '    throw new Exception(\\'Unhandled option (lists_get_sublist).\\');',\n         '  }',\n         '  return array_slice($list, $at1, $length);',\n         '}']);\n    var code = functionName + '(' + list + ', \\'' +\n        where1 + '\\', ' + at1 + ', \\'' + where2 + '\\', ' + at2 + ')';\n  }\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_sort'] = function(block) {\n  // Block for sorting a list.\n  var listCode = Blockly.PHP.valueToCode(block, 'LIST',\n      Blockly.PHP.ORDER_COMMA) || 'array()';\n  var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  var type = block.getFieldValue('TYPE');\n  var functionName = Blockly.PHP.provideFunction_(\n      'lists_sort',\n      ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n          '($list, $type, $direction) {',\n       '  $sortCmpFuncs = array(',\n       '    \"NUMERIC\" => \"strnatcasecmp\",',\n       '    \"TEXT\" => \"strcmp\",',\n       '    \"IGNORE_CASE\" => \"strcasecmp\"',\n       '  );',\n       '  $sortCmp = $sortCmpFuncs[$type];',\n       '  $list2 = $list;', // Clone list.\n       '  usort($list2, $sortCmp);',\n       '  if ($direction == -1) {',\n       '    $list2 = array_reverse($list2);',\n       '  }',\n       '  return $list2;',\n       '}']);\n  var sortCode = functionName +\n      '(' + listCode + ', \"' + type + '\", ' + direction + ')';\n  return [sortCode, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_split'] = function(block) {\n  // Block for splitting text into a list, or joining a list into text.\n  var value_input = Blockly.PHP.valueToCode(block, 'INPUT',\n      Blockly.PHP.ORDER_COMMA);\n  var value_delim = Blockly.PHP.valueToCode(block, 'DELIM',\n      Blockly.PHP.ORDER_COMMA) || '\\'\\'';\n  var mode = block.getFieldValue('MODE');\n  if (mode == 'SPLIT') {\n    if (!value_input) {\n      value_input = '\\'\\'';\n    }\n    var functionName = 'explode';\n  } else if (mode == 'JOIN') {\n    if (!value_input) {\n      value_input = 'array()';\n    }\n    var functionName = 'implode';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  var code = functionName + '(' + value_delim + ', ' + value_input + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['lists_reverse'] = function(block) {\n  // Block for reversing a list.\n  var list = Blockly.PHP.valueToCode(block, 'LIST',\n      Blockly.PHP.ORDER_COMMA) || '[]';\n  var code = 'array_reverse(' + list + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n"],"file":"lists.min.js"}