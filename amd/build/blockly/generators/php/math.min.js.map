{"version":3,"sources":["../../../../src/blockly/generators/php/math.js"],"names":["goog","provide","require","Blockly","PHP","block","code","getFieldValue","order","ORDER_ATOMIC","ORDER_UNARY_NEGATION","Infinity","OPERATORS","ORDER_ADDITION","ORDER_SUBTRACTION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_POWER","tuple","operator","argument0","valueToCode","argument1","arg","ORDER_NONE","ORDER_FUNCTION_CALL","Error","CONSTANTS","number_to_check","ORDER_MODULUS","dropdown_property","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","divisor","ORDER_EQUALITY","varName","variableDB_","getName","VARIABLE_CATEGORY_NAME","func","list","ORDER_COMMA","argument2"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2015 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generating PHP for math blocks.\n * @author daarond@gmail.com (Daaron Dwyer)\n */\n'use strict';\n\ngoog.provide('Blockly.PHP.math');\n\ngoog.require('Blockly.PHP');\n\n\nBlockly.PHP['math_number'] = function(block) {\n  // Numeric value.\n  var code = Number(block.getFieldValue('NUM'));\n  var order = code >= 0 ? Blockly.PHP.ORDER_ATOMIC :\n              Blockly.PHP.ORDER_UNARY_NEGATION;\n  if (code == Infinity) {\n    code = 'INF';\n  } else if (code == -Infinity) {\n    code = '-INF';\n  }\n  return [code, order];\n};\n\nBlockly.PHP['math_arithmetic'] = function(block) {\n  // Basic arithmetic operators, and power.\n  var OPERATORS = {\n    'ADD': [' + ', Blockly.PHP.ORDER_ADDITION],\n    'MINUS': [' - ', Blockly.PHP.ORDER_SUBTRACTION],\n    'MULTIPLY': [' * ', Blockly.PHP.ORDER_MULTIPLICATION],\n    'DIVIDE': [' / ', Blockly.PHP.ORDER_DIVISION],\n    'POWER': [' ** ', Blockly.PHP.ORDER_POWER]\n  };\n  var tuple = OPERATORS[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Blockly.PHP.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.PHP.valueToCode(block, 'B', order) || '0';\n  var code = argument0 + operator + argument1;\n  return [code, order];\n};\n\nBlockly.PHP['math_single'] = function(block) {\n  // Math operators with single operand.\n  var operator = block.getFieldValue('OP');\n  var code;\n  var arg;\n  if (operator == 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Blockly.PHP.valueToCode(block, 'NUM',\n        Blockly.PHP.ORDER_UNARY_NEGATION) || '0';\n    if (arg[0] == '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Blockly.PHP.ORDER_UNARY_NEGATION];\n  }\n  if (operator == 'SIN' || operator == 'COS' || operator == 'TAN') {\n    arg = Blockly.PHP.valueToCode(block, 'NUM',\n        Blockly.PHP.ORDER_DIVISION) || '0';\n  } else {\n    arg = Blockly.PHP.valueToCode(block, 'NUM',\n        Blockly.PHP.ORDER_NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'sin(' + arg + ' / 180 * pi())';\n      break;\n    case 'COS':\n      code = 'cos(' + arg + ' / 180 * pi())';\n      break;\n    case 'TAN':\n      code = 'tan(' + arg + ' / 180 * pi())';\n      break;\n  }\n  if (code) {\n    return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'log(' + arg + ') / log(10)';\n      break;\n    case 'ASIN':\n      code = 'asin(' + arg + ') / pi() * 180';\n      break;\n    case 'ACOS':\n      code = 'acos(' + arg + ') / pi() * 180';\n      break;\n    case 'ATAN':\n      code = 'atan(' + arg + ') / pi() * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Blockly.PHP.ORDER_DIVISION];\n};\n\nBlockly.PHP['math_constant'] = function(block) {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  var CONSTANTS = {\n    'PI': ['M_PI', Blockly.PHP.ORDER_ATOMIC],\n    'E': ['M_E', Blockly.PHP.ORDER_ATOMIC],\n    'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Blockly.PHP.ORDER_DIVISION],\n    'SQRT2': ['M_SQRT2', Blockly.PHP.ORDER_ATOMIC],\n    'SQRT1_2': ['M_SQRT1_2', Blockly.PHP.ORDER_ATOMIC],\n    'INFINITY': ['INF', Blockly.PHP.ORDER_ATOMIC]\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n};\n\nBlockly.PHP['math_number_property'] = function(block) {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  var number_to_check = Blockly.PHP.valueToCode(block, 'NUMBER_TO_CHECK',\n      Blockly.PHP.ORDER_MODULUS) || '0';\n  var dropdown_property = block.getFieldValue('PROPERTY');\n  var code;\n  if (dropdown_property == 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    var functionName = Blockly.PHP.provideFunction_(\n        'math_isPrime',\n        ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ + '($n) {',\n         '  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods',\n         '  if ($n == 2 || $n == 3) {',\n         '    return true;',\n         '  }',\n         '  // False if n is NaN, negative, is 1, or not whole.',\n         '  // And false if n is divisible by 2 or 3.',\n         '  if (!is_numeric($n) || $n <= 1 || $n % 1 != 0 || $n % 2 == 0 ||' +\n            ' $n % 3 == 0) {',\n         '    return false;',\n         '  }',\n         '  // Check all the numbers of form 6k +/- 1, up to sqrt(n).',\n         '  for ($x = 6; $x <= sqrt($n) + 1; $x += 6) {',\n         '    if ($n % ($x - 1) == 0 || $n % ($x + 1) == 0) {',\n         '      return false;',\n         '    }',\n         '  }',\n         '  return true;',\n         '}']);\n    code = functionName + '(' + number_to_check + ')';\n    return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n  }\n  switch (dropdown_property) {\n    case 'EVEN':\n      code = number_to_check + ' % 2 == 0';\n      break;\n    case 'ODD':\n      code = number_to_check + ' % 2 == 1';\n      break;\n    case 'WHOLE':\n      code = 'is_int(' + number_to_check + ')';\n      break;\n    case 'POSITIVE':\n      code = number_to_check + ' > 0';\n      break;\n    case 'NEGATIVE':\n      code = number_to_check + ' < 0';\n      break;\n    case 'DIVISIBLE_BY':\n      var divisor = Blockly.PHP.valueToCode(block, 'DIVISOR',\n          Blockly.PHP.ORDER_MODULUS) || '0';\n      code = number_to_check + ' % ' + divisor + ' == 0';\n      break;\n  }\n  return [code, Blockly.PHP.ORDER_EQUALITY];\n};\n\nBlockly.PHP['math_change'] = function(block) {\n  // Add to a variable in place.\n  var argument0 = Blockly.PHP.valueToCode(block, 'DELTA',\n      Blockly.PHP.ORDER_ADDITION) || '0';\n  var varName = Blockly.PHP.variableDB_.getName(\n      block.getFieldValue('VAR'), Blockly.VARIABLE_CATEGORY_NAME);\n  return varName + ' += ' + argument0 + ';\\n';\n};\n\n// Rounding functions have a single operand.\nBlockly.PHP['math_round'] = Blockly.PHP['math_single'];\n// Trigonometry functions have a single operand.\nBlockly.PHP['math_trig'] = Blockly.PHP['math_single'];\n\nBlockly.PHP['math_on_list'] = function(block) {\n  // Math functions for lists.\n  var func = block.getFieldValue('OP');\n  var list, code;\n  switch (func) {\n    case 'SUM':\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n          Blockly.PHP.ORDER_FUNCTION_CALL) || 'array()';\n      code = 'array_sum(' + list + ')';\n      break;\n    case 'MIN':\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n          Blockly.PHP.ORDER_FUNCTION_CALL) || 'array()';\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n          Blockly.PHP.ORDER_FUNCTION_CALL) || 'array()';\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE':\n      var functionName = Blockly.PHP.provideFunction_(\n          'math_mean',\n          ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n              '($myList) {',\n           '  return array_sum($myList) / count($myList);',\n           '}']);\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n          Blockly.PHP.ORDER_NONE) || 'array()';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MEDIAN':\n      var functionName = Blockly.PHP.provideFunction_(\n          'math_median',\n          ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n              '($arr) {',\n           '  sort($arr,SORT_NUMERIC);',\n           '  return (count($arr) % 2) ? $arr[floor(count($arr)/2)] : ',\n           '      ($arr[floor(count($arr)/2)] + $arr[floor(count($arr)/2)' +\n              ' - 1]) / 2;',\n           '}']);\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n          Blockly.PHP.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      var functionName = Blockly.PHP.provideFunction_(\n          'math_modes',\n          ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n              '($values) {',\n           '  if (empty($values)) return array();',\n           '  $counts = array_count_values($values);',\n           '  arsort($counts); // Sort counts in descending order',\n           '  $modes = array_keys($counts, current($counts), true);',\n           '  return $modes;',\n           '}']);\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n          Blockly.PHP.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'STD_DEV':\n      var functionName = Blockly.PHP.provideFunction_(\n          'math_standard_deviation',\n          ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n              '($numbers) {',\n           '  $n = count($numbers);',\n           '  if (!$n) return null;',\n           '  $mean = array_sum($numbers) / count($numbers);',\n           '  foreach($numbers as $key => $num) $devs[$key] = ' +\n              'pow($num - $mean, 2);',\n           '  return sqrt(array_sum($devs) / (count($devs) - 1));',\n           '}']);\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n              Blockly.PHP.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    case 'RANDOM':\n      var functionName = Blockly.PHP.provideFunction_(\n          'math_random_list',\n          ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n              '($list) {',\n           '  $x = rand(0, count($list)-1);',\n           '  return $list[$x];',\n           '}']);\n      list = Blockly.PHP.valueToCode(block, 'LIST',\n          Blockly.PHP.ORDER_NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['math_modulo'] = function(block) {\n  // Remainder computation.\n  var argument0 = Blockly.PHP.valueToCode(block, 'DIVIDEND',\n      Blockly.PHP.ORDER_MODULUS) || '0';\n  var argument1 = Blockly.PHP.valueToCode(block, 'DIVISOR',\n      Blockly.PHP.ORDER_MODULUS) || '0';\n  var code = argument0 + ' % ' + argument1;\n  return [code, Blockly.PHP.ORDER_MODULUS];\n};\n\nBlockly.PHP['math_constrain'] = function(block) {\n  // Constrain a number between two limits.\n  var argument0 = Blockly.PHP.valueToCode(block, 'VALUE',\n      Blockly.PHP.ORDER_COMMA) || '0';\n  var argument1 = Blockly.PHP.valueToCode(block, 'LOW',\n      Blockly.PHP.ORDER_COMMA) || '0';\n  var argument2 = Blockly.PHP.valueToCode(block, 'HIGH',\n      Blockly.PHP.ORDER_COMMA) || 'Infinity';\n  var code = 'min(max(' + argument0 + ', ' + argument1 + '), ' +\n      argument2 + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['math_random_int'] = function(block) {\n  // Random integer between [X] and [Y].\n  var argument0 = Blockly.PHP.valueToCode(block, 'FROM',\n      Blockly.PHP.ORDER_COMMA) || '0';\n  var argument1 = Blockly.PHP.valueToCode(block, 'TO',\n      Blockly.PHP.ORDER_COMMA) || '0';\n  var functionName = Blockly.PHP.provideFunction_(\n      'math_random_int',\n      ['function ' + Blockly.PHP.FUNCTION_NAME_PLACEHOLDER_ +\n          '($a, $b) {',\n       '  if ($a > $b) {',\n       '    return rand($b, $a);',\n       '  }',\n       '  return rand($a, $b);',\n       '}']);\n  var code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['math_random_float'] = function(block) {\n  // Random fraction between 0 and 1.\n  return ['(float)rand()/(float)getrandmax()', Blockly.PHP.ORDER_FUNCTION_CALL];\n};\n\nBlockly.PHP['math_atan2'] = function(block) {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  var argument0 = Blockly.PHP.valueToCode(block, 'X',\n      Blockly.PHP.ORDER_COMMA) || '0';\n  var argument1 = Blockly.PHP.valueToCode(block, 'Y',\n      Blockly.PHP.ORDER_COMMA) || '0';\n  return ['atan2(' + argument1 + ', ' + argument0 + ') / pi() * 180',\n      Blockly.PHP.ORDER_DIVISION];\n};\n"],"file":"math.min.js"}