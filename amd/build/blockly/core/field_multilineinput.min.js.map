{"version":3,"sources":["../../../src/blockly/core/field_multilineinput.js"],"names":["goog","provide","require","Blockly","FieldMultilineInput","opt_value","opt_validator","opt_config","superClass_","constructor","call","textGroup_","utils","object","inherits","FieldTextInput","fromJson","options","text","replaceMessageReferences","prototype","initView","createBorderRect_","dom","createSvgElement","fieldGroup_","getDisplayText_","value","value_","Field","NBSP","lines","split","i","length","maxDisplayLength","substring","replace","sourceBlock_","RTL","render_","currentChild","firstChild","removeChild","y","lineHeight","getConstants","FIELD_TEXT_HEIGHT","FIELD_BORDER_RECT_Y_PADDING","span","x","FIELD_BORDER_RECT_X_PADDING","dy","FIELD_TEXT_BASELINE","appendChild","document","createTextNode","updateSize_","isBeingEdited_","setTimeout","resizeEditor_","bind","htmlInput","htmlInput_","isTextValid_","addClass","aria","setState","State","INVALID","removeClass","nodes","childNodes","totalWidth","totalHeight","tspan","textWidth","getTextWidth","borderRect_","setAttribute","size_","width","height","positionBorderRect_","widgetCreate_","div","WidgetDiv","DIV","scale","workspace_","getScale","createElement","className","spellcheck_","fontSize","FIELD_TEXT_FONTSIZE","style","borderRadius","BORDERRADIUS","paddingX","paddingY","padding","defaultValue","getEditorText_","untypedDefaultValue_","oldValue_","userAgent","GECKO","bindInputEvents_","onHtmlInputKeyDown_","e","keyCode","KeyCodes","ENTER","Css","register","fieldRegistry"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Text Area field.\n * @author fraser@google.com (Neil Fraser)\n * @author Andrew Mee\n * @author acbart@udel.edu (Austin Cory Bart)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldMultilineInput');\n\ngoog.require('Blockly.Css');\ngoog.require('Blockly.DropDownDiv');\ngoog.require('Blockly.FieldTextInput');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.aria');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.KeyCodes');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.userAgent');\n\n\n/**\n * Class for an editable text area field.\n * @param {string=} opt_value The initial content of the field. Should cast to a\n *    string. Defaults to an empty string if null or undefined.\n * @param {Function=} opt_validator An optional function that is called\n *     to validate any constraints on what the user entered.  Takes the new\n *     text as an argument and returns either the accepted text, a replacement\n *     text, or null to abort the change.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/text-input#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.FieldTextInput}\n * @constructor\n */\nBlockly.FieldMultilineInput = function(opt_value, opt_validator, opt_config) {\n  // TODO: Once this field is documented the opt_config link should point to its\n  //  creation documentation, rather than the text input field's.\n  Blockly.FieldMultilineInput.superClass_.constructor.call(this,\n      opt_value, opt_validator, opt_config);\n\n  /**\n   * The SVG group element that will contain a text element for each text row\n   *     when initialized.\n   * @type {SVGGElement}\n   */\n  this.textGroup_ = null;\n};\nBlockly.utils.object.inherits(Blockly.FieldMultilineInput,\n    Blockly.FieldTextInput);\n\n/**\n * Construct a FieldMultilineInput from a JSON arg object,\n * dereferencing any string table references.\n * @param {!Object} options A JSON object with options (text, and spellcheck).\n * @return {!Blockly.FieldMultilineInput} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldMultilineInput.fromJson = function(options) {\n  var text = Blockly.utils.replaceMessageReferences(options['text']);\n  return new Blockly.FieldMultilineInput(text, undefined, options);\n};\n\n/**\n * Create the block UI for this field.\n * @package\n */\nBlockly.FieldMultilineInput.prototype.initView = function() {\n  this.createBorderRect_();\n  this.textGroup_ = /** @type {!SVGGElement} **/\n      (Blockly.utils.dom.createSvgElement('g',\n          {\n            'class': 'blocklyEditableText',\n          }, this.fieldGroup_));\n};\n\n/**\n * Get the text from this field as displayed on screen.  May differ from getText\n * due to ellipsis, and other formatting.\n * @return {string} Currently displayed text.\n * @private\n */\nBlockly.FieldMultilineInput.prototype.getDisplayText_ = function() {\n  var value = this.value_;\n  if (!value) {\n    // Prevent the field from disappearing if empty.\n    return Blockly.Field.NBSP;\n  }\n  var lines = value.split('\\n');\n  value = '';\n  for (var i = 0; i < lines.length; i++) {\n    var text = lines[i];\n    if (text.length > this.maxDisplayLength) {\n      // Truncate displayed string and add an ellipsis ('...').\n      text = text.substring(0, this.maxDisplayLength - 4) + '...';\n    }\n    // Replace whitespace with non-breaking spaces so the text doesn't collapse.\n    text = text.replace(/\\s/g, Blockly.Field.NBSP);\n\n    value += text;\n    if (i !== lines.length - 1) {\n      value += '\\n';\n    }\n  }\n  if (this.sourceBlock_.RTL) {\n    // The SVG is LTR, force value to be RTL.\n    value += '\\u200F';\n  }\n  return value;\n};\n\n/**\n * Updates the text of the textElement.\n * @protected\n */\nBlockly.FieldMultilineInput.prototype.render_ = function() {\n  // Remove all text group children.\n  var currentChild;\n  while ((currentChild = this.textGroup_.firstChild)) {\n    this.textGroup_.removeChild(currentChild);\n  }\n\n  // Add in text elements into the group.\n  var lines = this.getDisplayText_().split('\\n');\n  var y = 0;\n  for (var i = 0; i < lines.length; i++) {\n    var lineHeight = this.getConstants().FIELD_TEXT_HEIGHT +\n        this.getConstants().FIELD_BORDER_RECT_Y_PADDING;\n    var span = Blockly.utils.dom.createSvgElement('text', {\n      'class': 'blocklyText blocklyMultilineText',\n      x: this.getConstants().FIELD_BORDER_RECT_X_PADDING,\n      y: y + this.getConstants().FIELD_BORDER_RECT_Y_PADDING,\n      dy: this.getConstants().FIELD_TEXT_BASELINE\n    }, this.textGroup_);\n    span.appendChild(document.createTextNode(lines[i]));\n    y += lineHeight;\n  }\n\n  this.updateSize_();\n\n  if (this.isBeingEdited_) {\n    if (this.sourceBlock_.RTL) {\n      // in RTL, we need to let the browser reflow before resizing\n      // in order to get the correct bounding box of the borderRect\n      // avoiding issue #2777.\n      setTimeout(this.resizeEditor_.bind(this), 0);\n    } else {\n      this.resizeEditor_();\n    }\n    var htmlInput = /** @type {!HTMLElement} */(this.htmlInput_);\n    if (!this.isTextValid_) {\n      Blockly.utils.dom.addClass(htmlInput, 'blocklyInvalidInput');\n      Blockly.utils.aria.setState(htmlInput,\n          Blockly.utils.aria.State.INVALID, true);\n    } else {\n      Blockly.utils.dom.removeClass(htmlInput, 'blocklyInvalidInput');\n      Blockly.utils.aria.setState(htmlInput,\n          Blockly.utils.aria.State.INVALID, false);\n    }\n  }\n};\n\n/**\n * Updates the size of the field based on the text.\n * @protected\n */\nBlockly.FieldMultilineInput.prototype.updateSize_ = function() {\n  var nodes = this.textGroup_.childNodes;\n  var totalWidth = 0;\n  var totalHeight = 0;\n  for (var i = 0; i < nodes.length; i++) {\n    var tspan = /** @type {!Element} */ (nodes[i]);\n    var textWidth = Blockly.utils.dom.getTextWidth(tspan);\n    if (textWidth > totalWidth) {\n      totalWidth = textWidth;\n    }\n    totalHeight += this.getConstants().FIELD_TEXT_HEIGHT +\n        (i > 0 ? this.getConstants().FIELD_BORDER_RECT_Y_PADDING : 0);\n  }\n  if (this.borderRect_) {\n    totalHeight += this.getConstants().FIELD_BORDER_RECT_Y_PADDING * 2;\n    totalWidth += this.getConstants().FIELD_BORDER_RECT_X_PADDING * 2;\n    this.borderRect_.setAttribute('width', totalWidth);\n    this.borderRect_.setAttribute('height', totalHeight);\n  }\n  this.size_.width = totalWidth;\n  this.size_.height = totalHeight;\n\n  this.positionBorderRect_();\n};\n\n/**\n * Create the text input editor widget.\n * @return {!HTMLTextAreaElement} The newly created text input editor.\n * @protected\n */\nBlockly.FieldMultilineInput.prototype.widgetCreate_ = function() {\n  var div = Blockly.WidgetDiv.DIV;\n  var scale = this.workspace_.getScale();\n\n  var htmlInput =\n    /** @type {HTMLTextAreaElement} */ (document.createElement('textarea'));\n  htmlInput.className = 'blocklyHtmlInput blocklyHtmlTextAreaInput';\n  htmlInput.setAttribute('spellcheck', this.spellcheck_);\n  var fontSize = (this.getConstants().FIELD_TEXT_FONTSIZE * scale) + 'pt';\n  div.style.fontSize = fontSize;\n  htmlInput.style.fontSize = fontSize;\n  var borderRadius = (Blockly.FieldTextInput.BORDERRADIUS * scale) + 'px';\n  htmlInput.style.borderRadius = borderRadius;\n  var paddingX = this.getConstants().FIELD_BORDER_RECT_X_PADDING * scale;\n  var paddingY = this.getConstants().FIELD_BORDER_RECT_Y_PADDING * scale / 2;\n  htmlInput.style.padding = paddingY + 'px ' + paddingX + 'px ' + paddingY +\n      'px ' + paddingX + 'px';\n  var lineHeight = this.getConstants().FIELD_TEXT_HEIGHT +\n      this.getConstants().FIELD_BORDER_RECT_Y_PADDING;\n  htmlInput.style.lineHeight = (lineHeight * scale) + 'px';\n\n  div.appendChild(htmlInput);\n\n  htmlInput.value = htmlInput.defaultValue = this.getEditorText_(this.value_);\n  htmlInput.untypedDefaultValue_ = this.value_;\n  htmlInput.oldValue_ = null;\n  if (Blockly.utils.userAgent.GECKO) {\n    // In FF, ensure the browser reflows before resizing to avoid issue #2777.\n    setTimeout(this.resizeEditor_.bind(this), 0);\n  } else {\n    this.resizeEditor_();\n  }\n\n  this.bindInputEvents_(htmlInput);\n\n  return htmlInput;\n};\n\n/**\n * Handle key down to the editor. Override the text input definition of this\n * so as to not close the editor when enter is typed in.\n * @param {!Event} e Keyboard event.\n * @protected\n */\nBlockly.FieldMultilineInput.prototype.onHtmlInputKeyDown_ = function(e) {\n  if (e.keyCode !== Blockly.utils.KeyCodes.ENTER) {\n    Blockly.FieldMultilineInput.superClass_.onHtmlInputKeyDown_.call(this, e);\n  }\n};\n\n/**\n * CSS for multiline field.  See css.js for use.\n */\nBlockly.Css.register([\n  /* eslint-disable indent */\n  '.blocklyHtmlTextAreaInput {',\n    'font-family: monospace;',\n    'resize: none;',\n    'overflow: hidden;',\n    'height: 100%;',\n    'text-align: left;',\n  '}'\n  /* eslint-enable indent */\n]);\n\n\nBlockly.fieldRegistry.register('field_multilinetext', Blockly.FieldMultilineInput);\n"],"file":"field_multilineinput.min.js"}