{"version":3,"sources":["../../../src/blockly/core/rendered_connection.js"],"names":["goog","provide","require","Blockly","RenderedConnection","source","type","superClass_","constructor","call","db_","workspace","connectionDBList","dbOpposite_","OPPOSITE_TYPE","offsetInBlock_","utils","Coordinate","trackedState_","TrackedState","WILL_TRACK","targetConnection","object","inherits","Connection","UNTRACKED","TRACKED","prototype","dispose","removeConnection","y","getSourceBlock","targetBlock","distanceFrom","otherConnection","xDiff","x","yDiff","Math","sqrt","bumpAwayFrom","staticConnection","sourceBlock_","isDragging","rootBlock","getRootBlock","isInFlyout","reverse","isMovable","selected","addSelect","dx","SNAP_RADIUS","floor","random","BUMP_RANDOMNESS","dy","RTL","moveBy","removeSelect","moveTo","addConnection","moveToOffset","blockTL","setOffsetInBlock","getOffsetInBlock","tighten","block","svgRoot","getSvgRoot","Error","xy","getRelativeXY","setAttribute","moveConnections","closest","maxLimit","dxy","searchForClosest","highlight","steps","sourceBlockSvg","renderConstants","getRenderer","getConstants","shape","shapeFor","INPUT_VALUE","OUTPUT_VALUE","yLen","TAB_OFFSET_FROM_TOP","svgPaths","lineOnAxis","pathDown","xLen","NOTCH_OFFSET_LEFT","CORNER_RADIUS","pathLeft","getRelativeToSurfaceXY","highlightedPath_","dom","createSvgElement","transform","unhighlight","removeNode","setTracking","doTracking","stopTrackingAll","blocks","getDescendants","i","length","connections","getConnections_","j","icons","getIcons","setVisible","startTrackingAll","renderList","NEXT_STATEMENT","isCollapsed","outputConnection","push","nextConnection","previousConnection","apply","isConnectionAllowed","candidate","maxRadius","onFailedConnect","disconnectInternal_","parentBlock","childBlock","rendered","render","updateDisabled","style","display","respawnShadow_","shadow","getShadowDom","Events","recordUndo","blockShadow","initSvg","neighbours","getNeighbours","connect_","childConnection","parentConnection","parentRendered","childRendered","PREVIOUS_STATEMENT","parentInput","getInputWithBlock","visible","isVisible","onCheckChanged_","isConnected","checkType","child","isSuperior","unplug","bumpNeighbours"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Components for creating connections between blocks.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.RenderedConnection');\n\ngoog.require('Blockly.Connection');\ngoog.require('Blockly.Events');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for a connection between blocks that may be rendered on screen.\n * @param {!Blockly.BlockSvg} source The block establishing this connection.\n * @param {number} type The type of the connection.\n * @extends {Blockly.Connection}\n * @constructor\n */\nBlockly.RenderedConnection = function(source, type) {\n  Blockly.RenderedConnection.superClass_.constructor.call(this, source, type);\n\n  /**\n   * Connection database for connections of this type on the current workspace.\n   * @const {!Blockly.ConnectionDB}\n   * @private\n   */\n  this.db_ = source.workspace.connectionDBList[type];\n\n  /**\n   * Connection database for connections compatible with this type on the\n   * current workspace.\n   * @const {!Blockly.ConnectionDB}\n   * @private\n   */\n  this.dbOpposite_ = source.workspace\n      .connectionDBList[Blockly.OPPOSITE_TYPE[type]];\n\n  /**\n   * Workspace units, (0, 0) is top left of block.\n   * @type {!Blockly.utils.Coordinate}\n   * @private\n   */\n  this.offsetInBlock_ = new Blockly.utils.Coordinate(0, 0);\n\n  /**\n   * Describes the state of this connection's tracked-ness.\n   * @type {Blockly.RenderedConnection.TrackedState}\n   * @private\n   */\n  this.trackedState_ = Blockly.RenderedConnection.TrackedState.WILL_TRACK;\n\n  /**\n   * Connection this connection connects to.  Null if not connected.\n   * @type {Blockly.RenderedConnection}\n   */\n  this.targetConnection = null;\n};\nBlockly.utils.object.inherits(Blockly.RenderedConnection, Blockly.Connection);\n\n/**\n * Enum for different kinds of tracked states.\n *\n * WILL_TRACK means that this connection will add itself to\n * the db on the next moveTo call it receives.\n *\n * UNTRACKED means that this connection will not add\n * itself to the database until setTracking(true) is explicitly called.\n *\n * TRACKED means that this connection is currently being tracked.\n * @enum {number}\n */\nBlockly.RenderedConnection.TrackedState = {\n  WILL_TRACK: -1,\n  UNTRACKED: 0,\n  TRACKED: 1\n};\n\n/**\n * Dispose of this connection. Remove it from the database (if it is\n * tracked) and call the super-function to deal with connected blocks.\n * @override\n * @package\n */\nBlockly.RenderedConnection.prototype.dispose = function() {\n  Blockly.RenderedConnection.superClass_.dispose.call(this);\n  if (this.trackedState_ == Blockly.RenderedConnection.TrackedState.TRACKED) {\n    this.db_.removeConnection(this, this.y);\n  }\n};\n\n/**\n * Get the source block for this connection.\n * @return {!Blockly.BlockSvg} The source block.\n * @override\n */\nBlockly.RenderedConnection.prototype.getSourceBlock = function() {\n  return /** @type {!Blockly.BlockSvg} */ (\n    Blockly.RenderedConnection.superClass_.getSourceBlock.call(this));\n};\n\n/**\n * Returns the block that this connection connects to.\n * @return {Blockly.BlockSvg} The connected block or null if none is connected.\n * @override\n */\nBlockly.RenderedConnection.prototype.targetBlock = function() {\n  return /** @type {Blockly.BlockSvg} */ (\n    Blockly.RenderedConnection.superClass_.targetBlock.call(this));\n};\n\n/**\n * Returns the distance between this connection and another connection in\n * workspace units.\n * @param {!Blockly.Connection} otherConnection The other connection to measure\n *     the distance to.\n * @return {number} The distance between connections, in workspace units.\n */\nBlockly.RenderedConnection.prototype.distanceFrom = function(otherConnection) {\n  var xDiff = this.x - otherConnection.x;\n  var yDiff = this.y - otherConnection.y;\n  return Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n};\n\n/**\n * Move the block(s) belonging to the connection to a point where they don't\n * visually interfere with the specified connection.\n * @param {!Blockly.Connection} staticConnection The connection to move away\n *     from.\n * @package\n */\nBlockly.RenderedConnection.prototype.bumpAwayFrom = function(staticConnection) {\n  if (this.sourceBlock_.workspace.isDragging()) {\n    // Don't move blocks around while the user is doing the same.\n    return;\n  }\n  // Move the root block.\n  var rootBlock = this.sourceBlock_.getRootBlock();\n  if (rootBlock.isInFlyout) {\n    // Don't move blocks around in a flyout.\n    return;\n  }\n  var reverse = false;\n  if (!rootBlock.isMovable()) {\n    // Can't bump an uneditable block away.\n    // Check to see if the other block is movable.\n    rootBlock = staticConnection.getSourceBlock().getRootBlock();\n    if (!rootBlock.isMovable()) {\n      return;\n    }\n    // Swap the connections and move the 'static' connection instead.\n    staticConnection = this;\n    reverse = true;\n  }\n  // Raise it to the top for extra visibility.\n  var selected = Blockly.selected == rootBlock;\n  selected || rootBlock.addSelect();\n  var dx = (staticConnection.x + Blockly.SNAP_RADIUS +\n      Math.floor(Math.random() * Blockly.BUMP_RANDOMNESS)) - this.x;\n  var dy = (staticConnection.y + Blockly.SNAP_RADIUS +\n      Math.floor(Math.random() * Blockly.BUMP_RANDOMNESS)) - this.y;\n  if (reverse) {\n    // When reversing a bump due to an uneditable block, bump up.\n    dy = -dy;\n  }\n  if (rootBlock.RTL) {\n    dx = (staticConnection.x - Blockly.SNAP_RADIUS -\n      Math.floor(Math.random() * Blockly.BUMP_RANDOMNESS)) - this.x;\n  }\n  rootBlock.moveBy(dx, dy);\n  selected || rootBlock.removeSelect();\n};\n\n/**\n * Change the connection's coordinates.\n * @param {number} x New absolute x coordinate, in workspace coordinates.\n * @param {number} y New absolute y coordinate, in workspace coordinates.\n */\nBlockly.RenderedConnection.prototype.moveTo = function(x, y) {\n  if (this.trackedState_ == Blockly.RenderedConnection.TrackedState.WILL_TRACK) {\n    this.db_.addConnection(this, y);\n    this.trackedState_ = Blockly.RenderedConnection.TrackedState.TRACKED;\n  } else if (this.trackedState_ == Blockly.RenderedConnection\n      .TrackedState.TRACKED) {\n    this.db_.removeConnection(this, this.y);\n    this.db_.addConnection(this, y);\n  }\n  this.x = x;\n  this.y = y;\n};\n\n/**\n * Change the connection's coordinates.\n * @param {number} dx Change to x coordinate, in workspace units.\n * @param {number} dy Change to y coordinate, in workspace units.\n */\nBlockly.RenderedConnection.prototype.moveBy = function(dx, dy) {\n  this.moveTo(this.x + dx, this.y + dy);\n};\n\n/**\n * Move this connection to the location given by its offset within the block and\n * the location of the block's top left corner.\n * @param {!Blockly.utils.Coordinate} blockTL The location of the top left\n *     corner of the block, in workspace coordinates.\n */\nBlockly.RenderedConnection.prototype.moveToOffset = function(blockTL) {\n  this.moveTo(blockTL.x + this.offsetInBlock_.x,\n      blockTL.y + this.offsetInBlock_.y);\n};\n\n/**\n * Set the offset of this connection relative to the top left of its block.\n * @param {number} x The new relative x, in workspace units.\n * @param {number} y The new relative y, in workspace units.\n */\nBlockly.RenderedConnection.prototype.setOffsetInBlock = function(x, y) {\n  this.offsetInBlock_.x = x;\n  this.offsetInBlock_.y = y;\n};\n\n/**\n * Get the offset of this connection relative to the top left of its block.\n * @return {!Blockly.utils.Coordinate} The offset of the connection.\n * @package\n */\nBlockly.RenderedConnection.prototype.getOffsetInBlock = function() {\n  return this.offsetInBlock_;\n};\n\n/**\n * Move the blocks on either side of this connection right next to each other.\n * @package\n */\nBlockly.RenderedConnection.prototype.tighten = function() {\n  var dx = this.targetConnection.x - this.x;\n  var dy = this.targetConnection.y - this.y;\n  if (dx != 0 || dy != 0) {\n    var block = this.targetBlock();\n    var svgRoot = block.getSvgRoot();\n    if (!svgRoot) {\n      throw Error('block is not rendered.');\n    }\n    // Workspace coordinates.\n    var xy = Blockly.utils.getRelativeXY(svgRoot);\n    block.getSvgRoot().setAttribute('transform',\n        'translate(' + (xy.x - dx) + ',' + (xy.y - dy) + ')');\n    block.moveConnections(-dx, -dy);\n  }\n};\n\n/**\n * Find the closest compatible connection to this connection.\n * All parameters are in workspace units.\n * @param {number} maxLimit The maximum radius to another connection.\n * @param {!Blockly.utils.Coordinate} dxy Offset between this connection's location\n *     in the database and the current location (as a result of dragging).\n * @return {!{connection: ?Blockly.Connection, radius: number}} Contains two\n *     properties: 'connection' which is either another connection or null,\n *     and 'radius' which is the distance.\n */\nBlockly.RenderedConnection.prototype.closest = function(maxLimit, dxy) {\n  return this.dbOpposite_.searchForClosest(this, maxLimit, dxy);\n};\n\n/**\n * Add highlighting around this connection.\n */\nBlockly.RenderedConnection.prototype.highlight = function() {\n  var steps;\n  var sourceBlockSvg = /** @type {!Blockly.BlockSvg} */ (this.sourceBlock_);\n  var renderConstants = sourceBlockSvg.workspace.getRenderer().getConstants();\n  var shape = renderConstants.shapeFor(this);\n  if (this.type == Blockly.INPUT_VALUE || this.type == Blockly.OUTPUT_VALUE) {\n    // Vertical line, puzzle tab, vertical line.\n    var yLen = renderConstants.TAB_OFFSET_FROM_TOP;\n    steps = Blockly.utils.svgPaths.moveBy(0, -yLen) +\n        Blockly.utils.svgPaths.lineOnAxis('v', yLen) +\n        shape.pathDown +\n        Blockly.utils.svgPaths.lineOnAxis('v', yLen);\n  } else {\n    var xLen =\n        renderConstants.NOTCH_OFFSET_LEFT - renderConstants.CORNER_RADIUS;\n    // Horizontal line, notch, horizontal line.\n    steps = Blockly.utils.svgPaths.moveBy(-xLen, 0) +\n        Blockly.utils.svgPaths.lineOnAxis('h', xLen) +\n        shape.pathLeft +\n        Blockly.utils.svgPaths.lineOnAxis('h', xLen);\n  }\n  var xy = this.sourceBlock_.getRelativeToSurfaceXY();\n  var x = this.x - xy.x;\n  var y = this.y - xy.y;\n  Blockly.Connection.highlightedPath_ = Blockly.utils.dom.createSvgElement(\n      'path',\n      {\n        'class': 'blocklyHighlightedConnectionPath',\n        'd': steps,\n        transform: 'translate(' + x + ',' + y + ')' +\n            (this.sourceBlock_.RTL ? ' scale(-1 1)' : '')\n      },\n      this.sourceBlock_.getSvgRoot());\n};\n\n/**\n * Remove the highlighting around this connection.\n */\nBlockly.RenderedConnection.prototype.unhighlight = function() {\n  Blockly.utils.dom.removeNode(Blockly.Connection.highlightedPath_);\n  delete Blockly.Connection.highlightedPath_;\n};\n\n/**\n * Set whether this connections is tracked in the database or not.\n * @param {boolean} doTracking If true, start tracking. If false, stop tracking.\n * @package\n */\nBlockly.RenderedConnection.prototype.setTracking = function(doTracking) {\n  if ((doTracking && this.trackedState_ ==\n      Blockly.RenderedConnection.TrackedState.TRACKED) ||\n      (!doTracking && this.trackedState_ ==\n      Blockly.RenderedConnection.TrackedState.UNTRACKED)) {\n    return;\n  }\n  if (this.sourceBlock_.isInFlyout) {\n    // Don't bother maintaining a database of connections in a flyout.\n    return;\n  }\n  if (doTracking) {\n    this.db_.addConnection(this, this.y);\n    this.trackedState_ = Blockly.RenderedConnection.TrackedState.TRACKED;\n    return;\n  }\n  if (this.trackedState_ == Blockly.RenderedConnection.TrackedState.TRACKED) {\n    this.db_.removeConnection(this, this.y);\n  }\n  this.trackedState_ = Blockly.RenderedConnection.TrackedState.UNTRACKED;\n};\n\n/**\n * Stop tracking this connection, as well as all down-stream connections on\n * any block attached to this connection. This happens when a block is\n * collapsed.\n *\n * Also closes down-stream icons/bubbles.\n * @package\n */\nBlockly.RenderedConnection.prototype.stopTrackingAll = function() {\n  this.setTracking(false);\n  if (this.targetConnection) {\n    var blocks = this.targetBlock().getDescendants(false);\n    for (var i = 0; i < blocks.length; i++) {\n      var block = blocks[i];\n      // Stop tracking connections of all children.\n      var connections = block.getConnections_(true);\n      for (var j = 0; j < connections.length; j++) {\n        connections[j].setTracking(false);\n      }\n      // Close all bubbles of all children.\n      var icons = block.getIcons();\n      for (var j = 0; j < icons.length; j++) {\n        icons[j].setVisible(false);\n      }\n    }\n  }\n};\n\n/**\n * Start tracking this connection, as well as all down-stream connections on\n * any block attached to this connection. This happens when a block is expanded.\n * @return {!Array.<!Blockly.Block>} List of blocks to render.\n */\nBlockly.RenderedConnection.prototype.startTrackingAll = function() {\n  this.setTracking(true);\n  // All blocks that are not tracked must start tracking before any\n  // rendering takes place, since rendering requires knowing the dimensions\n  // of lower blocks. Also, since rendering a block renders all its parents,\n  // we only need to render the leaf nodes.\n  var renderList = [];\n  if (this.type != Blockly.INPUT_VALUE && this.type != Blockly.NEXT_STATEMENT) {\n    // Only spider down.\n    return renderList;\n  }\n  var block = this.targetBlock();\n  if (block) {\n    var connections;\n    if (block.isCollapsed()) {\n      // This block should only be partially revealed since it is collapsed.\n      connections = [];\n      block.outputConnection && connections.push(block.outputConnection);\n      block.nextConnection && connections.push(block.nextConnection);\n      block.previousConnection && connections.push(block.previousConnection);\n    } else {\n      // Show all connections of this block.\n      connections = block.getConnections_(true);\n    }\n    for (var i = 0; i < connections.length; i++) {\n      renderList.push.apply(renderList, connections[i].startTrackingAll());\n    }\n    if (!renderList.length) {\n      // Leaf block.\n      renderList[0] = block;\n    }\n  }\n  return renderList;\n};\n\n/**\n * Check if the two connections can be dragged to connect to each other.\n * @param {!Blockly.Connection} candidate A nearby connection to check.\n * @param {number=} maxRadius The maximum radius allowed for connections, in\n *     workspace units.\n * @return {boolean} True if the connection is allowed, false otherwise.\n */\nBlockly.RenderedConnection.prototype.isConnectionAllowed = function(candidate,\n    maxRadius) {\n  if (this.distanceFrom(candidate) > maxRadius) {\n    return false;\n  }\n\n  return Blockly.RenderedConnection.superClass_.isConnectionAllowed.call(this,\n      candidate);\n};\n\n/**\n * Behavior after a connection attempt fails.\n * @param {!Blockly.Connection} otherConnection Connection that this connection\n *     failed to connect to.\n * @package\n */\nBlockly.RenderedConnection.prototype.onFailedConnect = function(\n    otherConnection) {\n  this.bumpAwayFrom(otherConnection);\n};\n\n\n/**\n * Disconnect two blocks that are connected by this connection.\n * @param {!Blockly.Block} parentBlock The superior block.\n * @param {!Blockly.Block} childBlock The inferior block.\n * @private\n */\nBlockly.RenderedConnection.prototype.disconnectInternal_ = function(parentBlock,\n    childBlock) {\n  Blockly.RenderedConnection.superClass_.disconnectInternal_.call(this,\n      parentBlock, childBlock);\n  // Rerender the parent so that it may reflow.\n  if (parentBlock.rendered) {\n    parentBlock.render();\n  }\n  if (childBlock.rendered) {\n    childBlock.updateDisabled();\n    childBlock.render();\n    // Reset visibility, since the child is now a top block.\n    childBlock.getSvgRoot().style.display = 'block';\n  }\n};\n\n/**\n * Respawn the shadow block if there was one connected to the this connection.\n * Render/rerender blocks as needed.\n * @private\n */\nBlockly.RenderedConnection.prototype.respawnShadow_ = function() {\n  var parentBlock = this.getSourceBlock();\n  // Respawn the shadow block if there is one.\n  var shadow = this.getShadowDom();\n  if (parentBlock.workspace && shadow && Blockly.Events.recordUndo) {\n    Blockly.RenderedConnection.superClass_.respawnShadow_.call(this);\n    var blockShadow = this.targetBlock();\n    if (!blockShadow) {\n      throw Error('Couldn\\'t respawn the shadow block that should exist here.');\n    }\n    blockShadow.initSvg();\n    blockShadow.render(false);\n    if (parentBlock.rendered) {\n      parentBlock.render();\n    }\n  }\n};\n\n/**\n * Find all nearby compatible connections to this connection.\n * Type checking does not apply, since this function is used for bumping.\n * @param {number} maxLimit The maximum radius to another connection, in\n *     workspace units.\n * @return {!Array.<!Blockly.Connection>} List of connections.\n * @package\n */\nBlockly.RenderedConnection.prototype.neighbours = function(maxLimit) {\n  return this.dbOpposite_.getNeighbours(this, maxLimit);\n};\n\n/**\n * Connect two connections together.  This is the connection on the superior\n * block.  Rerender blocks as needed.\n * @param {!Blockly.Connection} childConnection Connection on inferior block.\n * @protected\n */\nBlockly.RenderedConnection.prototype.connect_ = function(childConnection) {\n  Blockly.RenderedConnection.superClass_.connect_.call(this, childConnection);\n\n  var parentConnection = this;\n  var parentBlock = parentConnection.getSourceBlock();\n  var childBlock = childConnection.getSourceBlock();\n  var parentRendered = parentBlock.rendered;\n  var childRendered = childBlock.rendered;\n\n  if (parentRendered) {\n    parentBlock.updateDisabled();\n  }\n  if (childRendered) {\n    childBlock.updateDisabled();\n  }\n  if (parentRendered && childRendered) {\n    if (parentConnection.type == Blockly.NEXT_STATEMENT ||\n        parentConnection.type == Blockly.PREVIOUS_STATEMENT) {\n      // Child block may need to square off its corners if it is in a stack.\n      // Rendering a child will render its parent.\n      childBlock.render();\n    } else {\n      // Child block does not change shape.  Rendering the parent node will\n      // move its connected children into position.\n      parentBlock.render();\n    }\n  }\n\n  // The input the child block is connected to (if any).\n  var parentInput = parentBlock.getInputWithBlock(childBlock);\n  if (parentInput) {\n    var visible = parentInput.isVisible();\n    childBlock.getSvgRoot().style.display = visible ? 'block' : 'none';\n  }\n};\n\n/**\n * Function to be called when this connection's compatible types have changed.\n * @protected\n */\nBlockly.RenderedConnection.prototype.onCheckChanged_ = function() {\n  // The new value type may not be compatible with the existing connection.\n  if (this.isConnected() && (!this.targetConnection ||\n      !this.checkType(this.targetConnection))) {\n    var child = this.isSuperior() ? this.targetBlock() : this.sourceBlock_;\n    child.unplug();\n    // Bump away.\n    this.sourceBlock_.bumpNeighbours();\n  }\n};\n"],"file":"rendered_connection.min.js"}