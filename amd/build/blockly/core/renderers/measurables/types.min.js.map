{"version":3,"sources":["../../../../../src/blockly/core/renderers/measurables/types.js"],"names":["goog","provide","Blockly","blockRendering","Types","NONE","FIELD","HAT","ICON","SPACER","BETWEEN_ROW_SPACER","IN_ROW_SPACER","EXTERNAL_VALUE_INPUT","INPUT","INLINE_INPUT","STATEMENT_INPUT","CONNECTION","PREVIOUS_CONNECTION","NEXT_CONNECTION","OUTPUT_CONNECTION","CORNER","LEFT_SQUARE_CORNER","LEFT_ROUND_CORNER","RIGHT_SQUARE_CORNER","RIGHT_ROUND_CORNER","JAGGED_EDGE","ROW","TOP_ROW","BOTTOM_ROW","INPUT_ROW","LEFT_CORNER","RIGHT_CORNER","nextTypeValue_","getType","type","hasOwnProperty","isField","elem","isHat","isIcon","isSpacer","isInRowSpacer","isInput","isExternalInput","isInlineInput","isStatementInput","isPreviousConnection","isNextConnection","isPreviousOrNextConnection","isLeftRoundedCorner","isRightRoundedCorner","isLeftSquareCorner","isRightSquareCorner","isCorner","isJaggedEdge","isRow","row","isBetweenRowSpacer","isTopRow","isBottomRow","isTopOrBottomRow","isInputRow"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Measurable types.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n'use strict';\n\ngoog.provide('Blockly.blockRendering.Types');\n\n\n/**\n * Types of rendering elements.\n * @enum {number}\n */\nBlockly.blockRendering.Types = {\n  NONE: 0,                      // None\n  FIELD: 1 << 0,                // Field.\n  HAT: 1 << 1,                  // Hat.\n  ICON: 1 << 2,                 // Icon.\n  SPACER: 1 << 3,               // Spacer.\n  BETWEEN_ROW_SPACER: 1 << 4,   // Between Row Spacer.\n  IN_ROW_SPACER: 1 << 5,        // In Row Spacer.\n  EXTERNAL_VALUE_INPUT: 1 << 6, // External Value Input.\n  INPUT: 1 << 7,                // Input.\n  INLINE_INPUT: 1 << 8,         // Inline Input.\n  STATEMENT_INPUT: 1 << 9,      // Statement Input.\n  CONNECTION: 1 << 10,          // Connection.\n  PREVIOUS_CONNECTION: 1 << 11, // Previous Connection.\n  NEXT_CONNECTION: 1 << 12,     // Next Connection.\n  OUTPUT_CONNECTION: 1 << 13,   // Output Connection.\n  CORNER: 1 << 14,              // Corner.\n  LEFT_SQUARE_CORNER: 1 << 15,  // Square Corner.\n  LEFT_ROUND_CORNER: 1 << 16,   // Round Corner.\n  RIGHT_SQUARE_CORNER: 1 << 17, // Right Square Corner.\n  RIGHT_ROUND_CORNER: 1 << 18,  // Right Round Corner.\n  JAGGED_EDGE: 1 << 19,         // Jagged Edge.\n  ROW: 1 << 20,                 // Row.\n  TOP_ROW: 1 << 21,             // Top Row.\n  BOTTOM_ROW: 1 << 22,          // Bottom Row.\n  INPUT_ROW: 1 << 23            // Input Row.\n};\n\n/**\n * A Left Corner Union Type.\n * @type {number}\n * @const\n * @package\n */\nBlockly.blockRendering.Types.LEFT_CORNER =\n    Blockly.blockRendering.Types.LEFT_SQUARE_CORNER |\n    Blockly.blockRendering.Types.LEFT_ROUND_CORNER;\n\n/**\n * A Right Corner Union Type.\n * @type {number}\n * @const\n * @package\n */\nBlockly.blockRendering.Types.RIGHT_CORNER =\n    Blockly.blockRendering.Types.RIGHT_SQUARE_CORNER |\n    Blockly.blockRendering.Types.RIGHT_ROUND_CORNER;\n\n/**\n * Next flag value to use for custom rendering element types.\n * This must be updated to reflect the next enum flag value\n * to use if additional elements are added to\n * `Blockly.blockRendering.Types`.\n * @type {number}\n * @private\n */\nBlockly.blockRendering.Types.nextTypeValue_ = 1 << 24;\n\n/**\n * Get the enum flag value of an existing type or register a new type.\n * @param {!string} type The name of the type.\n * @return {!number} The enum flag value associated with that type.\n * @package\n */\nBlockly.blockRendering.Types.getType = function(type) {\n  if (!Blockly.blockRendering.Types.hasOwnProperty(type)) {\n    Blockly.blockRendering.Types[type] =\n      Blockly.blockRendering.Types.nextTypeValue_;\n    Blockly.blockRendering.Types.nextTypeValue_ <<= 1;\n  }\n  return Blockly.blockRendering.Types[type];\n};\n\n/**\n * Whether a measurable stores information about a field.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a field.\n * @package\n */\nBlockly.blockRendering.Types.isField = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.FIELD;\n};\n\n/**\n * Whether a measurable stores information about a hat.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a hat.\n * @package\n */\nBlockly.blockRendering.Types.isHat = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.HAT;\n};\n\n/**\n * Whether a measurable stores information about an icon.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about an icon.\n * @package\n */\nBlockly.blockRendering.Types.isIcon = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.ICON;\n};\n\n/**\n * Whether a measurable stores information about a spacer.\n * @param {!Blockly.blockRendering.Measurable|!Blockly.blockRendering.Row} elem\n *     The element to check.\n * @return {number} 1 if the object stores information about a spacer.\n * @package\n */\nBlockly.blockRendering.Types.isSpacer = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.SPACER;\n};\n\n/**\n * Whether a measurable stores information about an in-row spacer.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about an\n *   in-row spacer.\n * @package\n */\nBlockly.blockRendering.Types.isInRowSpacer = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.IN_ROW_SPACER;\n};\n\n/**\n * Whether a measurable stores information about an input.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about an input.\n * @package\n */\nBlockly.blockRendering.Types.isInput = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.INPUT;\n};\n\n/**\n * Whether a measurable stores information about an external input.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about an\n *   external input.\n * @package\n */\nBlockly.blockRendering.Types.isExternalInput = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.EXTERNAL_VALUE_INPUT;\n};\n\n/**\n * Whether a measurable stores information about an inline input.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about an\n *   inline input.\n * @package\n */\nBlockly.blockRendering.Types.isInlineInput = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.INLINE_INPUT;\n};\n\n/**\n * Whether a measurable stores information about a statement input.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   statement input.\n * @package\n */\nBlockly.blockRendering.Types.isStatementInput = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.STATEMENT_INPUT;\n};\n\n/**\n * Whether a measurable stores information about a previous connection.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   previous connection.\n * @package\n */\nBlockly.blockRendering.Types.isPreviousConnection = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.PREVIOUS_CONNECTION;\n};\n\n/**\n * Whether a measurable stores information about a next connection.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   next connection.\n * @package\n */\nBlockly.blockRendering.Types.isNextConnection = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.NEXT_CONNECTION;\n};\n\n/**\n * Whether a measurable stores information about a previous or next connection.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a previous or\n *   next connection.\n * @package\n */\nBlockly.blockRendering.Types.isPreviousOrNextConnection = function(elem) {\n  return elem.type & (Blockly.blockRendering.Types.PREVIOUS_CONNECTION |\n      Blockly.blockRendering.Types.NEXT_CONNECTION);\n};\n\n/**\n * Whether a measurable stores information about a left round corner.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   left round corner.\n * @package\n */\nBlockly.blockRendering.Types.isLeftRoundedCorner = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.LEFT_ROUND_CORNER;\n};\n\n/**\n * Whether a measurable stores information about a right round corner.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   right round corner.\n * @package\n */\nBlockly.blockRendering.Types.isRightRoundedCorner = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.RIGHT_ROUND_CORNER;\n};\n\n/**\n * Whether a measurable stores information about a left square corner.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   left square corner.\n * @package\n */\nBlockly.blockRendering.Types.isLeftSquareCorner = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.LEFT_SQUARE_CORNER;\n};\n\n/**\n * Whether a measurable stores information about a right square corner.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   right square corner.\n * @package\n */\nBlockly.blockRendering.Types.isRightSquareCorner = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.RIGHT_SQUARE_CORNER;\n};\n\n/**\n * Whether a measurable stores information about a corner.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a\n *   corner.\n * @package\n */\nBlockly.blockRendering.Types.isCorner = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.CORNER;\n};\n\n/**\n * Whether a measurable stores information about a jagged edge.\n * @param {!Blockly.blockRendering.Measurable} elem The element to check.\n * @return {number} 1 if the object stores information about a jagged edge.\n * @package\n */\nBlockly.blockRendering.Types.isJaggedEdge = function(elem) {\n  return elem.type & Blockly.blockRendering.Types.JAGGED_EDGE;\n};\n\n/**\n * Whether a measurable stores information about a row.\n * @param {!Blockly.blockRendering.Row} row The row to check.\n * @return {number} 1 if the object stores information about a row.\n * @package\n */\nBlockly.blockRendering.Types.isRow = function(row) {\n  return row.type & Blockly.blockRendering.Types.ROW;\n};\n\n/**\n * Whether a measurable stores information about a between-row spacer.\n * @param {!Blockly.blockRendering.Row} row The row to check.\n * @return {number} 1 if the object stores information about a\n *   between-row spacer.\n * @package\n */\nBlockly.blockRendering.Types.isBetweenRowSpacer = function(row) {\n  return row.type & Blockly.blockRendering.Types.BETWEEN_ROW_SPACER;\n};\n\n/**\n * Whether a measurable stores information about a top row.\n * @param {!Blockly.blockRendering.Row} row The row to check.\n * @return {number} 1 if the object stores information about a top row.\n * @package\n */\nBlockly.blockRendering.Types.isTopRow = function(row) {\n  return row.type & Blockly.blockRendering.Types.TOP_ROW;\n};\n\n/**\n * Whether a measurable stores information about a bottom row.\n * @param {!Blockly.blockRendering.Row} row The row to check.\n * @return {number} 1 if the object stores information about a bottom row.\n * @package\n */\nBlockly.blockRendering.Types.isBottomRow = function(row) {\n  return row.type & Blockly.blockRendering.Types.BOTTOM_ROW;\n};\n\n/**\n * Whether a measurable stores information about a top or bottom row.\n * @param {!Blockly.blockRendering.Row} row The row to check.\n * @return {number} 1 if the object stores information about a top or\n *   bottom row.\n * @package\n */\nBlockly.blockRendering.Types.isTopOrBottomRow = function(row) {\n  return row.type & (Blockly.blockRendering.Types.TOP_ROW |\n      Blockly.blockRendering.Types.BOTTOM_ROW);\n};\n\n/**\n * Whether a measurable stores information about an input row.\n * @param {!Blockly.blockRendering.Row} row The row to check.\n * @return {number} 1 if the object stores information about an input row.\n * @package\n */\nBlockly.blockRendering.Types.isInputRow = function(row) {\n  return row.type & Blockly.blockRendering.Types.INPUT_ROW;\n};\n"],"file":"types.min.js"}