{"version":3,"sources":["../../../../../src/blockly/core/renderers/measurables/inputs.js"],"names":["goog","provide","require","Blockly","blockRendering","InputConnection","constants","input","superClass_","constructor","call","connection","type","Types","INPUT","align","connectedBlock","targetBlock","bBox","getHeightWidth","connectedBlockWidth","width","connectedBlockHeight","height","connectionOffsetX","connectionOffsetY","utils","object","inherits","Connection","InlineInput","INLINE_INPUT","constants_","EMPTY_INLINE_INPUT_HEIGHT","EMPTY_INLINE_INPUT_PADDING","connectionHeight","isDynamicShape","shape","connectionWidth","TAB_OFFSET_FROM_TOP","StatementInput","STATEMENT_INPUT","EMPTY_STATEMENT_INPUT_HEIGHT","STATEMENT_BOTTOM_SPACER","STATEMENT_INPUT_NOTCH_OFFSET","ExternalValueInput","EXTERNAL_VALUE_INPUT","MEDIUM_PADDING","EXTERNAL_VALUE_INPUT_PADDING"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Objects representing inputs with connections on a rendered\n * block.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n\ngoog.provide('Blockly.blockRendering.ExternalValueInput');\ngoog.provide('Blockly.blockRendering.InlineInput');\ngoog.provide('Blockly.blockRendering.InputConnection');\ngoog.provide('Blockly.blockRendering.StatementInput');\n\ngoog.require('Blockly.blockRendering.Connection');\ngoog.require('Blockly.blockRendering.Measurable');\ngoog.require('Blockly.blockRendering.Types');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * The base class to represent an input that takes up space on a block\n * during rendering\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.Input} input The input to measure and store information for.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.Connection}\n */\nBlockly.blockRendering.InputConnection = function(constants, input) {\n  Blockly.blockRendering.InputConnection.superClass_.constructor.call(this,\n      constants, input.connection);\n\n  this.type |= Blockly.blockRendering.Types.INPUT;\n  this.input = input;\n  this.align = input.align;\n  this.connectedBlock = input.connection && input.connection.targetBlock() ?\n      input.connection.targetBlock() : null;\n\n  if (this.connectedBlock) {\n    var bBox = this.connectedBlock.getHeightWidth();\n    this.connectedBlockWidth = bBox.width;\n    this.connectedBlockHeight = bBox.height;\n  } else {\n    this.connectedBlockWidth = 0;\n    this.connectedBlockHeight = 0;\n  }\n\n  this.connectionOffsetX = 0;\n  this.connectionOffsetY = 0;\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.InputConnection,\n    Blockly.blockRendering.Connection);\n\n/**\n * An object containing information about the space an inline input takes up\n * during rendering\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.Input} input The inline input to measure and store\n *     information for.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.InputConnection}\n */\nBlockly.blockRendering.InlineInput = function(constants, input) {\n  Blockly.blockRendering.InlineInput.superClass_.constructor.call(this,\n      constants, input);\n  this.type |= Blockly.blockRendering.Types.INLINE_INPUT;\n\n  if (!this.connectedBlock) {\n    this.height = this.constants_.EMPTY_INLINE_INPUT_HEIGHT;\n    this.width = this.constants_.EMPTY_INLINE_INPUT_PADDING;\n  } else {\n    // We allow the dark path to show on the parent block so that the child\n    // block looks embossed.  This takes up an extra pixel in both x and y.\n    this.width = this.connectedBlockWidth;\n    this.height = this.connectedBlockHeight;\n  }\n\n  this.connectionHeight = !this.isDynamicShape ? this.shape.height :\n      this.shape.height(this.height);\n  this.connectionWidth = !this.isDynamicShape ? this.shape.width :\n      this.shape.width(this.height);\n  if (!this.connectedBlock) {\n    this.width += this.connectionWidth * (this.isDynamicShape ? 2 : 1);\n  }\n  this.connectionOffsetY = this.isDynamicShape ?\n      this.shape.connectionOffsetY(this.connectionHeight) :\n      this.constants_.TAB_OFFSET_FROM_TOP;\n  this.connectionOffsetX = this.isDynamicShape ?\n      this.shape.connectionOffsetX(this.connectionWidth) : 0;\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.InlineInput,\n    Blockly.blockRendering.InputConnection);\n\n/**\n * An object containing information about the space a statement input takes up\n * during rendering\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.Input} input The statement input to measure and store\n *     information for.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.InputConnection}\n */\nBlockly.blockRendering.StatementInput = function(constants, input) {\n  Blockly.blockRendering.StatementInput.superClass_.constructor.call(this,\n      constants, input);\n  this.type |= Blockly.blockRendering.Types.STATEMENT_INPUT;\n\n  if (!this.connectedBlock) {\n    this.height = this.constants_.EMPTY_STATEMENT_INPUT_HEIGHT;\n  } else {\n    // We allow the dark path to show on the parent block so that the child\n    // block looks embossed.  This takes up an extra pixel in both x and y.\n    this.height =\n        this.connectedBlockHeight + this.constants_.STATEMENT_BOTTOM_SPACER;\n  }\n  this.width = this.constants_.STATEMENT_INPUT_NOTCH_OFFSET + this.shape.width;\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.StatementInput,\n    Blockly.blockRendering.InputConnection);\n\n/**\n * An object containing information about the space an external value input\n * takes up during rendering\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.Input} input The external value input to measure and store\n *     information for.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.InputConnection}\n */\nBlockly.blockRendering.ExternalValueInput = function(constants, input) {\n  Blockly.blockRendering.ExternalValueInput.superClass_.constructor.call(this,\n      constants, input);\n  this.type |= Blockly.blockRendering.Types.EXTERNAL_VALUE_INPUT;\n  if (!this.connectedBlock) {\n    this.height = this.shape.height;\n  } else {\n    this.height =\n        this.connectedBlockHeight - this.constants_.TAB_OFFSET_FROM_TOP -\n        this.constants_.MEDIUM_PADDING;\n  }\n  this.width = this.shape.width +\n      this.constants_.EXTERNAL_VALUE_INPUT_PADDING;\n\n  this.connectionOffsetY = this.constants_.TAB_OFFSET_FROM_TOP;\n  this.connectionHeight = this.shape.height;\n  this.connectionWidth = this.shape.width;\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.ExternalValueInput,\n    Blockly.blockRendering.InputConnection);\n"],"file":"inputs.min.js"}