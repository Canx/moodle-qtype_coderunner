{"version":3,"sources":["../../../../../src/blockly/core/renderers/measurables/connections.js"],"names":["goog","provide","require","Blockly","blockRendering","Connection","constants","connectionModel","superClass_","constructor","call","shape","constants_","shapeFor","isDynamicShape","type","Types","CONNECTION","utils","object","inherits","Measurable","OutputConnection","OUTPUT_CONNECTION","height","width","startX","connectionOffsetY","TAB_OFFSET_FROM_TOP","connectionOffsetX","PreviousConnection","PREVIOUS_CONNECTION","NextConnection","NEXT_CONNECTION"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Objects representing connections on rendered blocks.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n\ngoog.provide('Blockly.blockRendering.Connection');\ngoog.provide('Blockly.blockRendering.NextConnection');\ngoog.provide('Blockly.blockRendering.OutputConnection');\ngoog.provide('Blockly.blockRendering.PreviousConnection');\n\ngoog.require('Blockly.blockRendering.Measurable');\ngoog.require('Blockly.blockRendering.Types');\ngoog.require('Blockly.utils.object');\n\n\n\n/**\n * The base class to represent a connection and the space that it takes up on\n * the block.\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.RenderedConnection} connectionModel The connection object on\n *     the block that this represents.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.Measurable}\n */\nBlockly.blockRendering.Connection = function(constants, connectionModel) {\n  Blockly.blockRendering.Connection.superClass_.constructor.call(this,\n      constants);\n  this.connectionModel = connectionModel;\n  this.shape = this.constants_.shapeFor(connectionModel);\n  this.isDynamicShape = !!this.shape['isDynamic'];\n  this.type |= Blockly.blockRendering.Types.CONNECTION;\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.Connection,\n    Blockly.blockRendering.Measurable);\n\n/**\n * An object containing information about the space an output connection takes\n * up during rendering.\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {Blockly.RenderedConnection} connectionModel The connection object on\n *     the block that this represents.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.Connection}\n */\nBlockly.blockRendering.OutputConnection = function(constants, connectionModel) {\n  Blockly.blockRendering.OutputConnection.superClass_.constructor.call(this,\n      constants, connectionModel);\n  this.type |= Blockly.blockRendering.Types.OUTPUT_CONNECTION;\n\n  this.height = !this.isDynamicShape ? this.shape.height : 0;\n  this.width = !this.isDynamicShape ? this.shape.width : 0;\n  this.startX = this.width;\n\n  this.connectionOffsetY = this.constants_.TAB_OFFSET_FROM_TOP;\n  this.connectionOffsetX = 0;\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.OutputConnection,\n    Blockly.blockRendering.Connection);\n\n\n/**\n * An object containing information about the space a previous connection takes\n * up during rendering.\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {Blockly.RenderedConnection} connectionModel The connection object on\n *     the block that this represents.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.Connection}\n */\nBlockly.blockRendering.PreviousConnection = function(\n    constants, connectionModel) {\n  Blockly.blockRendering.PreviousConnection.superClass_.constructor.call(this,\n      constants, connectionModel);\n  this.type |= Blockly.blockRendering.Types.PREVIOUS_CONNECTION;\n  this.height = this.shape.height;\n  this.width = this.shape.width;\n\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.PreviousConnection,\n    Blockly.blockRendering.Connection);\n\n/**\n * An object containing information about the space a next connection takes\n * up during rendering.\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {Blockly.RenderedConnection} connectionModel The connection object on\n *     the block that this represents.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.Connection}\n */\nBlockly.blockRendering.NextConnection = function(constants, connectionModel) {\n  Blockly.blockRendering.NextConnection.superClass_.constructor.call(this,\n      constants, connectionModel);\n  this.type |= Blockly.blockRendering.Types.NEXT_CONNECTION;\n  this.height = this.shape.height;\n  this.width = this.shape.width;\n};\nBlockly.utils.object.inherits(Blockly.blockRendering.NextConnection,\n    Blockly.blockRendering.Connection);\n"],"file":"connections.min.js"}