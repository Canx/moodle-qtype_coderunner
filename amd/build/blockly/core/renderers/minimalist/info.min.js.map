{"version":3,"sources":["../../../../../src/blockly/core/renderers/minimalist/info.js"],"names":["goog","provide","require","Blockly","minimalist","RenderInfo","renderer","block","superClass_","constructor","call","utils","object","inherits","blockRendering","prototype","getRenderer","renderer_"],"mappings":"AASA,aAEAA,IAAI,CAACC,OAAL,CAAa,oBAAb,EACAD,IAAI,CAACC,OAAL,CAAa,+BAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,sBAAb,EAgBAC,OAAO,CAACC,UAAR,CAAmBC,UAAnB,CAAgC,SAASC,CAAT,CAAmBC,CAAnB,CAA0B,CACxDJ,OAAO,CAACC,UAAR,CAAmBC,UAAnB,CAA8BG,WAA9B,CAA0CC,WAA1C,CAAsDC,IAAtD,CAA2D,IAA3D,CAAiEJ,CAAjE,CAA2EC,CAA3E,CAED,CAHD,CAIAJ,OAAO,CAACQ,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BV,OAAO,CAACC,UAAR,CAAmBC,UAAjD,CACIF,OAAO,CAACW,cAAR,CAAuBT,UAD3B,EAQAF,OAAO,CAACC,UAAR,CAAmBC,UAAnB,CAA8BU,SAA9B,CAAwCC,WAAxC,CAAsD,UAAW,CAC/D,MAAoD,MAAKC,SAC1D,CAFD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Minimalist render info object.\n */\n'use strict';\n\ngoog.provide('Blockly.minimalist');\ngoog.provide('Blockly.minimalist.RenderInfo');\n\ngoog.require('Blockly.utils.object');\n\n\n/**\n * An object containing all sizing information needed to draw this block.\n *\n * This measure pass does not propagate changes to the block (although fields\n * may choose to rerender when getSize() is called).  However, calling it\n * repeatedly may be expensive.\n *\n * @param {!Blockly.minimalist.Renderer} renderer The renderer in use.\n * @param {!Blockly.BlockSvg} block The block to measure.\n * @constructor\n * @package\n * @extends {Blockly.blockRendering.RenderInfo}\n */\nBlockly.minimalist.RenderInfo = function(renderer, block) {\n  Blockly.minimalist.RenderInfo.superClass_.constructor.call(this, renderer, block);\n\n};\nBlockly.utils.object.inherits(Blockly.minimalist.RenderInfo,\n    Blockly.blockRendering.RenderInfo);\n\n/**\n * Get the block renderer in use.\n * @return {!Blockly.minimalist.Renderer} The block renderer in use.\n * @package\n */\nBlockly.minimalist.RenderInfo.prototype.getRenderer = function() {\n  return /** @type {!Blockly.minimalist.Renderer} */ (this.renderer_);\n};\n"],"file":"info.min.js"}