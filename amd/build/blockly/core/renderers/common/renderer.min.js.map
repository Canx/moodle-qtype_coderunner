{"version":3,"sources":["../../../../../src/blockly/core/renderers/common/renderer.js"],"names":["goog","provide","require","requireType","Blockly","blockRendering","Renderer","name","constants_","overrides","prototype","getClassName","init","theme","opt_rendererOverrides","makeConstants_","utils","object","mixin","setTheme","createDom","svg","refreshDom","previousConstants","getConstants","dispose","randomIdentifier","ConstantProvider","makeRenderInfo_","block","RenderInfo","makeDrawer_","info","Drawer","makeDebugger_","Debug","Error","makeMarkerDrawer","workspace","marker","MarkerSvg","makePathObject","root","style","PathObject","shouldHighlightConnection","orphanCanConnectAtEnd","topBlock","orphanBlock","localType","orphanConnection","lastConnection","OUTPUT_VALUE","outputConnection","Connection","lastConnectionInRow","previousConnection","lastConnectionInStack","checkType","getConnectionPreviewMethod","closest","local","type","PREVIOUS_STATEMENT","isConnected","targetBlock","InsertionMarkerManager","PREVIEW_TYPE","INSERTION_MARKER","REPLACEMENT_FADE","render","useDebugger","renderingDebugger","measure","draw"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,iCAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,yCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,kCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,+BAAb,EACAF,IAAI,CAACE,OAAL,CAAa,oCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,mCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,mCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,gCAAb,EAEAF,IAAI,CAACG,WAAL,CAAiB,8BAAjB,EACAH,IAAI,CAACG,WAAL,CAAiB,sBAAjB,EAUAC,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAkC,SAASC,CAAT,CAAe,CAO/C,KAAKA,IAAL,CAAYA,CAAZ,CAOA,KAAKC,UAAL,CAAkB,IAAlB,CAOA,KAAKC,SAAL,CAAiB,IAClB,CAtBD,CA6BAL,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CC,YAA1C,CAAyD,UAAW,CAClE,MAAO,MAAKJ,IAAL,CAAY,WACpB,CAFD,CAUAH,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CE,IAA1C,CAAiD,SAASC,CAAT,CAC7CC,CAD6C,CACtB,CACzB,KAAKN,UAAL,CAAkB,KAAKO,cAAL,EAAlB,CACA,GAAID,CAAJ,CAA2B,CACzB,KAAKL,SAAL,CAAiBK,CAAjB,CACAV,OAAO,CAACY,KAAR,CAAcC,MAAd,CAAqBC,KAArB,CAA2B,KAAKV,UAAhC,CAA4CM,CAA5C,CACD,CACD,KAAKN,UAAL,CAAgBW,QAAhB,CAAyBN,CAAzB,EACA,KAAKL,UAAL,CAAgBI,IAAhB,EACD,CATD,CAiBAR,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CU,SAA1C,CAAsD,SAASC,CAAT,CAAcR,CAAd,CAAqB,CACzE,KAAKL,UAAL,CAAgBY,SAAhB,CAA0BC,CAA1B,CAA+B,KAAKd,IAAL,CAAY,GAAZ,CAAkBM,CAAK,CAACN,IAAvD,CACI,IAAM,KAAKI,YAAL,EAAN,CAA4B,GAA5B,CAAkCE,CAAK,CAACF,YAAN,EADtC,CAED,CAHD,CAWAP,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CY,UAA1C,CAAuD,SAASD,CAAT,CAAcR,CAAd,CAAqB,CAC1E,GAAIU,CAAAA,CAAiB,CAAG,KAAKC,YAAL,EAAxB,CACAD,CAAiB,CAACE,OAAlB,GACA,KAAKjB,UAAL,CAAkB,KAAKO,cAAL,EAAlB,CACA,GAAI,KAAKN,SAAT,CAAoB,CAClBL,OAAO,CAACY,KAAR,CAAcC,MAAd,CAAqBC,KAArB,CAA2B,KAAKV,UAAhC,CAA4C,KAAKC,SAAjD,CACD,CAED,KAAKD,UAAL,CAAgBkB,gBAAhB,CAAmCH,CAAiB,CAACG,gBAArD,CACA,KAAKlB,UAAL,CAAgBW,QAAhB,CAAyBN,CAAzB,EACA,KAAKL,UAAL,CAAgBI,IAAhB,GACA,KAAKQ,SAAL,CAAeC,CAAf,CAAoBR,CAApB,CACD,CAZD,CAmBAT,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0Ce,OAA1C,CAAoD,UAAW,CAC7D,GAAI,KAAKjB,UAAT,CAAqB,CACnB,KAAKA,UAAL,CAAgBiB,OAAhB,EACD,CACF,CAJD,CAWArB,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CK,cAA1C,CAA2D,UAAW,CACpE,MAAO,IAAIX,CAAAA,OAAO,CAACC,cAAR,CAAuBsB,gBACnC,CAFD,CAUAvB,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CkB,eAA1C,CAA4D,SAASC,CAAT,CAAgB,CAC1E,MAAO,IAAIzB,CAAAA,OAAO,CAACC,cAAR,CAAuByB,UAA3B,CAAsC,IAAtC,CAA4CD,CAA5C,CACR,CAFD,CAYAzB,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CqB,WAA1C,CAAwD,SAASF,CAAT,CAAgBG,CAAhB,CAAsB,CAC5E,MAAO,IAAI5B,CAAAA,OAAO,CAACC,cAAR,CAAuB4B,MAA3B,CAAkCJ,CAAlC,CAAyCG,CAAzC,CACR,CAFD,CAUA5B,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CwB,aAA1C,CAA0D,UAAW,CACnE,GAAI,CAAC9B,OAAO,CAACC,cAAR,CAAuB8B,KAA5B,CAAmC,CACjC,KAAMC,CAAAA,KAAK,CAAC,kDAAD,CACZ,CACD,MAAO,IAAIhC,CAAAA,OAAO,CAACC,cAAR,CAAuB8B,KAA3B,CAAiC,KAAKX,YAAL,EAAjC,CACR,CALD,CAeApB,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0C2B,gBAA1C,CAA6D,SACzDC,CADyD,CAC9CC,CAD8C,CACtC,CACrB,MAAO,IAAInC,CAAAA,OAAO,CAACC,cAAR,CAAuBmC,SAA3B,CAAqCF,CAArC,CAAgD,KAAKd,YAAL,EAAhD,CAAqEe,CAArE,CACR,CAHD,CAaAnC,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0C+B,cAA1C,CAA2D,SAASC,CAAT,CACvDC,CADuD,CAChD,CACT,MAAO,IAAIvC,CAAAA,OAAO,CAACC,cAAR,CAAuBuC,UAA3B,CAAsCF,CAAtC,CAA4CC,CAA5C,CACsD,KAAKnC,UAD3D,CAGR,CALD,CAaAJ,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0Cc,YAA1C,CAAyD,UAAW,CAClE,MAEG,MAAKhB,UACT,CAJD,CAaAJ,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CmC,yBAA1C,CACI,UAAgB,CAElB,QACD,CAJD,CAmBAzC,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CoC,qBAA1C,CACI,SAASC,CAAT,CAAmBC,CAAnB,CAAgCC,CAAhC,CAA2C,IACrCC,CAAAA,CAAgB,CAAG,IADkB,CAErCC,CAAc,CAAG,IAFoB,CAGzC,GAAIF,CAAS,EAAI7C,OAAO,CAACgD,YAAzB,CAAuC,CACrCF,CAAgB,CAAGF,CAAW,CAACK,gBAA/B,CAGAF,CAAc,CAAG/C,OAAO,CAACkD,UAAR,CACZC,mBADY,CAEuBR,CAFvB,CAEkCC,CAFlC,CAGlB,CAPD,IAOO,CACLE,CAAgB,CAAGF,CAAW,CAACQ,kBAA/B,CAGAL,CAAc,CAAGJ,CAAQ,CAACU,qBAAT,EAClB,CAED,GAAI,CAACN,CAAL,CAAqB,CACnB,QACD,CACD,MAAOD,CAAAA,CAAgB,CAACQ,SAAjB,CAA2BP,CAA3B,CACR,CAtBL,CAmCA/C,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0CiD,0BAA1C,CACI,SAASC,CAAT,CAAkBC,CAAlB,CAAyBd,CAAzB,CAAmC,CACjC,GAAIc,CAAK,CAACC,IAAN,EAAc1D,OAAO,CAACgD,YAAtB,EACAS,CAAK,CAACC,IAAN,EAAc1D,OAAO,CAAC2D,kBAD1B,CAC8C,CAC5C,GAAI,CAACH,CAAO,CAACI,WAAR,EAAD,EACA,KAAKlB,qBAAL,CACIC,CADJ,CAEsCa,CAAO,CAACK,WAAR,EAFtC,CAGIJ,CAAK,CAACC,IAHV,CADJ,CAIqB,CACnB,MAAO1D,CAAAA,OAAO,CAAC8D,sBAAR,CAA+BC,YAA/B,CAA4CC,gBACpD,CACD,MAAOhE,CAAAA,OAAO,CAAC8D,sBAAR,CAA+BC,YAA/B,CAA4CE,gBACpD,CAED,MAAOjE,CAAAA,OAAO,CAAC8D,sBAAR,CAA+BC,YAA/B,CAA4CC,gBACpD,CAfL,CAsBAhE,OAAO,CAACC,cAAR,CAAuBC,QAAvB,CAAgCI,SAAhC,CAA0C4D,MAA1C,CAAmD,SAASzC,CAAT,CAAgB,CACjE,GAAIzB,OAAO,CAACC,cAAR,CAAuBkE,WAAvB,EAAsC,CAAC1C,CAAK,CAAC2C,iBAAjD,CAAoE,CAClE3C,CAAK,CAAC2C,iBAAN,CAA0B,KAAKtC,aAAL,EAC3B,CACD,GAAIF,CAAAA,CAAI,CAAG,KAAKJ,eAAL,CAAqBC,CAArB,CAAX,CACAG,CAAI,CAACyC,OAAL,GACA,KAAK1C,WAAL,CAAiBF,CAAjB,CAAwBG,CAAxB,EAA8B0C,IAA9B,EACD,CAPD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Base renderer.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.blockRendering.Renderer');\n\ngoog.require('Blockly.blockRendering.ConstantProvider');\ngoog.require('Blockly.blockRendering.MarkerSvg');\ngoog.require('Blockly.blockRendering.Drawer');\ngoog.require('Blockly.blockRendering.IPathObject');\ngoog.require('Blockly.blockRendering.PathObject');\ngoog.require('Blockly.blockRendering.RenderInfo');\ngoog.require('Blockly.InsertionMarkerManager');\n\ngoog.requireType('Blockly.blockRendering.Debug');\ngoog.requireType('Blockly.IRegistrable');\n\n\n/**\n * The base class for a block renderer.\n * @param {string} name The renderer name.\n * @package\n * @constructor\n * @implements {Blockly.IRegistrable}\n */\nBlockly.blockRendering.Renderer = function(name) {\n\n  /**\n   * The renderer name.\n   * @type {string}\n   * @package\n   */\n  this.name = name;\n\n  /**\n   * The renderer's constant provider.\n   * @type {Blockly.blockRendering.ConstantProvider}\n   * @private\n   */\n  this.constants_ = null;\n\n  /**\n   * Rendering constant overrides, passed in through options.\n   * @type {?Object}\n   * @package\n   */\n  this.overrides = null;\n};\n\n/**\n * Gets the class name that identifies this renderer.\n * @return {string} The CSS class name.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.getClassName = function() {\n  return this.name + '-renderer';\n};\n\n/**\n * Initialize the renderer.\n * @param {!Blockly.Theme} theme The workspace theme object.\n * @param {Object=} opt_rendererOverrides Rendering constant overrides.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.init = function(theme,\n    opt_rendererOverrides) {\n  this.constants_ = this.makeConstants_();\n  if (opt_rendererOverrides) {\n    this.overrides = opt_rendererOverrides;\n    Blockly.utils.object.mixin(this.constants_, opt_rendererOverrides);\n  }\n  this.constants_.setTheme(theme);\n  this.constants_.init();\n};\n\n/**\n * Create any DOM elements that this renderer needs.\n * @param {!SVGElement} svg The root of the workspace's SVG.\n * @param {!Blockly.Theme} theme The workspace theme object.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.createDom = function(svg, theme) {\n  this.constants_.createDom(svg, this.name + '-' + theme.name,\n      '.' + this.getClassName() + '.' + theme.getClassName());\n};\n\n/**\n * Refresh the renderer after a theme change.\n * @param {!SVGElement} svg The root of the workspace's SVG.\n * @param {!Blockly.Theme} theme The workspace theme object.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.refreshDom = function(svg, theme) {\n  var previousConstants = this.getConstants();\n  previousConstants.dispose();\n  this.constants_ = this.makeConstants_();\n  if (this.overrides) {\n    Blockly.utils.object.mixin(this.constants_, this.overrides);\n  }\n  // Ensure the constant provider's random identifier does not change.\n  this.constants_.randomIdentifier = previousConstants.randomIdentifier;\n  this.constants_.setTheme(theme);\n  this.constants_.init();\n  this.createDom(svg, theme);\n};\n\n/**\n * Dispose of this renderer.\n * Delete all DOM elements that this renderer and its constants created.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.dispose = function() {\n  if (this.constants_) {\n    this.constants_.dispose();\n  }\n};\n\n/**\n * Create a new instance of the renderer's constant provider.\n * @return {!Blockly.blockRendering.ConstantProvider} The constant provider.\n * @protected\n */\nBlockly.blockRendering.Renderer.prototype.makeConstants_ = function() {\n  return new Blockly.blockRendering.ConstantProvider();\n};\n\n/**\n * Create a new instance of the renderer's render info object.\n * @param {!Blockly.BlockSvg} block The block to measure.\n * @return {!Blockly.blockRendering.RenderInfo} The render info object.\n * @protected\n */\nBlockly.blockRendering.Renderer.prototype.makeRenderInfo_ = function(block) {\n  return new Blockly.blockRendering.RenderInfo(this, block);\n};\n\n/**\n * Create a new instance of the renderer's drawer.\n * @param {!Blockly.BlockSvg} block The block to render.\n * @param {!Blockly.blockRendering.RenderInfo} info An object containing all\n *   information needed to render this block.\n * @return {!Blockly.blockRendering.Drawer} The drawer.\n * @protected\n */\nBlockly.blockRendering.Renderer.prototype.makeDrawer_ = function(block, info) {\n  return new Blockly.blockRendering.Drawer(block, info);\n};\n\n/**\n * Create a new instance of the renderer's debugger.\n * @return {!Blockly.blockRendering.Debug} The renderer debugger.\n * @suppress {strictModuleDepCheck} Debug renderer only included in playground.\n * @protected\n */\nBlockly.blockRendering.Renderer.prototype.makeDebugger_ = function() {\n  if (!Blockly.blockRendering.Debug) {\n    throw Error('Missing require for Blockly.blockRendering.Debug');\n  }\n  return new Blockly.blockRendering.Debug(this.getConstants());\n};\n\n/**\n * Create a new instance of the renderer's marker drawer.\n * @param {!Blockly.WorkspaceSvg} workspace The workspace the marker belongs to.\n * @param {!Blockly.Marker} marker The marker.\n * @return {!Blockly.blockRendering.MarkerSvg} The object in charge of drawing\n *     the marker.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.makeMarkerDrawer = function(\n    workspace, marker) {\n  return new Blockly.blockRendering.MarkerSvg(workspace, this.getConstants(), marker);\n};\n\n/**\n * Create a new instance of a renderer path object.\n * @param {!SVGElement} root The root SVG element.\n * @param {!Blockly.Theme.BlockStyle} style The style object to use for\n *     colouring.\n * @return {!Blockly.blockRendering.IPathObject} The renderer path object.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.makePathObject = function(root,\n    style) {\n  return new Blockly.blockRendering.PathObject(root, style,\n      /** @type {!Blockly.blockRendering.ConstantProvider} */ (this.constants_));\n\n};\n\n/**\n * Get the current renderer's constant provider.  We assume that when this is\n * called, the renderer has already been initialized.\n * @return {!Blockly.blockRendering.ConstantProvider} The constant provider.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.getConstants = function() {\n  return (\n    /** @type {!Blockly.blockRendering.ConstantProvider} */\n    (this.constants_));\n};\n\n/**\n * Determine whether or not to highlight a connection.\n * @param {Blockly.Connection} _conn The connection to determine whether or not\n *     to highlight.\n * @return {boolean} True if we should highlight the connection.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.shouldHighlightConnection =\n    function(_conn) {\n    /* eslint-disable indent */\n  return true;\n}; /* eslint-enable indent */\n\n/**\n * Checks if an orphaned block can connect to the \"end\" of the topBlock's\n * block-clump. If the clump is a row the end is the last input. If the clump\n * is a stack, the end is the last next connection. If the clump is neither,\n * then this returns false.\n * @param {!Blockly.BlockSvg} topBlock The top block of the block clump we want to try and\n *     connect to.\n * @param {!Blockly.BlockSvg} orphanBlock The orphan block that wants to find\n *     a home.\n * @param {number} localType The type of the connection being dragged.\n * @return {boolean} Whether there is a home for the orphan or not.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.orphanCanConnectAtEnd =\n    function(topBlock, orphanBlock, localType) {\n      var orphanConnection = null;\n      var lastConnection = null;\n      if (localType == Blockly.OUTPUT_VALUE) {  // We are replacing an output.\n        orphanConnection = orphanBlock.outputConnection;\n        // TODO:  I don't think this function necessarily has the correct logic,\n        //  but for now it is being kept for behavioral backwards-compat.\n        lastConnection = Blockly.Connection\n            .lastConnectionInRow(\n                /** @type {!Blockly.Block} **/ (topBlock), orphanBlock);\n      } else {  // We are replacing a previous.\n        orphanConnection = orphanBlock.previousConnection;\n        // TODO: This lives on the block while lastConnectionInRow lives on\n        //  on the connection. Something is fishy.\n        lastConnection = topBlock.lastConnectionInStack();\n      }\n\n      if (!lastConnection) {\n        return false;\n      }\n      return orphanConnection.checkType(lastConnection);\n    };\n\n/**\n * Chooses a connection preview method based on the available connection, the\n * current dragged connection, and the block being dragged.\n * @param {!Blockly.RenderedConnection} closest The available connection.\n * @param {!Blockly.RenderedConnection} local The connection currently being\n *     dragged.\n * @param {!Blockly.BlockSvg} topBlock The block currently being dragged.\n * @return {!Blockly.InsertionMarkerManager.PREVIEW_TYPE} The preview type\n *     to display.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.getConnectionPreviewMethod =\n    function(closest, local, topBlock) {\n      if (local.type == Blockly.OUTPUT_VALUE ||\n          local.type == Blockly.PREVIOUS_STATEMENT) {\n        if (!closest.isConnected() ||\n            this.orphanCanConnectAtEnd(\n                topBlock,\n                /** @type {!Blockly.BlockSvg} */ (closest.targetBlock()),\n                local.type)) {\n          return Blockly.InsertionMarkerManager.PREVIEW_TYPE.INSERTION_MARKER;\n        }\n        return Blockly.InsertionMarkerManager.PREVIEW_TYPE.REPLACEMENT_FADE;\n      }\n\n      return Blockly.InsertionMarkerManager.PREVIEW_TYPE.INSERTION_MARKER;\n    };\n\n/**\n * Render the block.\n * @param {!Blockly.BlockSvg} block The block to render.\n * @package\n */\nBlockly.blockRendering.Renderer.prototype.render = function(block) {\n  if (Blockly.blockRendering.useDebugger && !block.renderingDebugger) {\n    block.renderingDebugger = this.makeDebugger_();\n  }\n  var info = this.makeRenderInfo_(block);\n  info.measure();\n  this.makeDrawer_(block, info).draw();\n};\n"],"file":"renderer.min.js"}