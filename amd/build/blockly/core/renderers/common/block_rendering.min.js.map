{"version":3,"sources":["../../../../../src/blockly/core/renderers/common/block_rendering.js"],"names":["goog","provide","require","Blockly","blockRendering","useDebugger","register","name","rendererClass","registry","Type","RENDERER","unregister","startDebugger","stopDebugger","init","theme","opt_rendererOverrides","getClass","renderer"],"mappings":"AAUA,aAMAA,IAAI,CAACC,OAAL,CAAa,wBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,kBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EAQAC,OAAO,CAACC,cAAR,CAAuBC,WAAvB,IASAF,OAAO,CAACC,cAAR,CAAuBE,QAAvB,CAAkC,SAASC,CAAT,CAAeC,CAAf,CAA8B,CAC9DL,OAAO,CAACM,QAAR,CAAiBH,QAAjB,CAA0BH,OAAO,CAACM,QAAR,CAAiBC,IAAjB,CAAsBC,QAAhD,CAA0DJ,CAA1D,CACIC,CADJ,CAED,CAHD,CASAL,OAAO,CAACC,cAAR,CAAuBQ,UAAvB,CAAoC,SAASL,CAAT,CAAe,CACjDJ,OAAO,CAACM,QAAR,CAAiBG,UAAjB,CAA4BT,OAAO,CAACM,QAAR,CAAiBC,IAAjB,CAAsBC,QAAlD,CAA4DJ,CAA5D,CACD,CAFD,CAOAJ,OAAO,CAACC,cAAR,CAAuBS,aAAvB,CAAuC,UAAW,CAChDV,OAAO,CAACC,cAAR,CAAuBC,WAAvB,GACD,CAFD,CAQAF,OAAO,CAACC,cAAR,CAAuBU,YAAvB,CAAsC,UAAW,CAC/CX,OAAO,CAACC,cAAR,CAAuBC,WAAvB,GACD,CAFD,CAcAF,OAAO,CAACC,cAAR,CAAuBW,IAAvB,CAA8B,SAASR,CAAT,CAAeS,CAAf,CAAsBC,CAAtB,CAA6C,IACrET,CAAAA,CAAa,CAAGL,OAAO,CAACM,QAAR,CAAiBS,QAAjB,CAChBf,OAAO,CAACM,QAAR,CAAiBC,IAAjB,CAAsBC,QADN,CACgBJ,CADhB,CADqD,CAGrEY,CAAQ,CAAG,GAAIX,CAAAA,CAAJ,CAAkBD,CAAlB,CAH0D,CAIzEY,CAAQ,CAACJ,IAAT,CAAcC,CAAd,CAAqBC,CAArB,EACA,MAAOE,CAAAA,CACR,CAND","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Namespace for block rendering functionality.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\n/**\n * The top level namespace for block rendering.\n * @namespace Blockly.blockRendering\n */\ngoog.provide('Blockly.blockRendering');\n\ngoog.require('Blockly.registry');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Whether or not the debugger is turned on.\n * @type {boolean}\n * @package\n */\nBlockly.blockRendering.useDebugger = false;\n\n/**\n * Registers a new renderer.\n * @param {string} name The name of the renderer.\n * @param {!Function} rendererClass The new renderer class\n *     to register.\n * @throws {Error} if a renderer with the same name has already been registered.\n */\nBlockly.blockRendering.register = function(name, rendererClass) {\n  Blockly.registry.register(Blockly.registry.Type.RENDERER, name,\n      rendererClass);\n};\n\n/**\n * Unregisters the renderer registered with the given name.\n * @param {string} name The name of the renderer.\n */\nBlockly.blockRendering.unregister = function(name) {\n  Blockly.registry.unregister(Blockly.registry.Type.RENDERER, name);\n};\n/**\n * Turn on the blocks debugger.\n * @package\n */\nBlockly.blockRendering.startDebugger = function() {\n  Blockly.blockRendering.useDebugger = true;\n};\n\n/**\n * Turn off the blocks debugger.\n * @package\n */\nBlockly.blockRendering.stopDebugger = function() {\n  Blockly.blockRendering.useDebugger = false;\n};\n\n/**\n * Initialize anything needed for rendering (constants, etc).\n * @param {!string} name Name of the renderer to initialize.\n * @param {!Blockly.Theme} theme The workspace theme object.\n * @param {Object=} opt_rendererOverrides Rendering constant overrides.\n * @return {!Blockly.blockRendering.Renderer} The new instance of a renderer.\n *     Already initialized.\n * @package\n */\n\nBlockly.blockRendering.init = function(name, theme, opt_rendererOverrides) {\n  var rendererClass = Blockly.registry.getClass(\n      Blockly.registry.Type.RENDERER, name);\n  var renderer = new rendererClass(name);\n  renderer.init(theme, opt_rendererOverrides);\n  return renderer;\n};\n"],"file":"block_rendering.min.js"}