{"version":3,"sources":["../../../../../src/blockly/core/renderers/common/info.js"],"names":["goog","provide","require","Blockly","blockRendering","RenderInfo","renderer","block","block_","renderer_","constants_","getConstants","outputConnection","OutputConnection","isInline","getInputsInline","isCollapsed","isInsertionMarker","RTL","height","widthWithChildren","width","statementEdge","rows","inputRows","hiddenIcons","topRow","TopRow","bottomRow","BottomRow","startX","startY","prototype","getRenderer","measure","createRows_","addElemSpacing_","addRowSpacing_","computeBounds_","alignRowElements_","finalize_","populateTopRow_","push","activeRow","InputRow","icons","getIcons","length","i","icon","iconInfo","Icon","collapseHidden","elements","lastInput","input","inputList","isVisible","shouldStartNewRow_","j","field","fieldRow","Field","addInput_","hasJaggedEdge","JaggedEdge","hasDummyInput","populateBottomRow_","hasPrevious","previousConnection","hasHat","hat","ADD_START_HATS","leftSquareCorner","hasLeftSquareCorner","SquareCorner","RoundCorner","Hat","capline","ascenderHeight","hasPreviousConnection","connection","PreviousConnection","precedesStatement","type","NEXT_STATEMENT","minHeight","TOP_ROW_PRECEDES_STATEMENT_MIN_HEIGHT","TOP_ROW_MIN_HEIGHT","rightSquareCorner","hasRightSquareCorner","hasNextConnection","nextConnection","followsStatement","BOTTOM_ROW_AFTER_STATEMENT_MIN_HEIGHT","BOTTOM_ROW_MIN_HEIGHT","NextConnection","INPUT_VALUE","InlineInput","hasInlineInput","StatementInput","hasStatement","ExternalValueInput","hasExternalInput","DUMMY_INPUT","Math","max","getSourceBlock","isShadow","DUMMY_INPUT_SHADOW_MIN_HEIGHT","DUMMY_INPUT_MIN_HEIGHT","align","row","oldElems","startsWithElemSpacer","InRowSpacer","getInRowSpacing_","e","spacing","endsWithElemSpacer","prev","next","Types","isStatementInput","STATEMENT_INPUT_PADDING_LEFT","isInput","isExternalInput","NO_PADDING","isInlineInput","LARGE_PADDING","isLeftSquareCorner","isPreviousConnection","isNextConnection","notchOffset","isLeftRoundedCorner","CORNER_RADIUS","MEDIUM_PADDING","widestStatementRowFields","blockWidth","widestRowWithConnectedBlocks","statementInput","getLastInput","innerWidth","widthWithConnectedBlocks","alignStatementRow_","currentWidth","desiredWidth","getDesiredRowWidth_","missingSpace","addAlignmentPadding_","isTopOrBottomRow","firstSpacer","getFirstSpacer","lastSpacer","getLastSpacer","ALIGN_LEFT","ALIGN_CENTRE","ALIGN_RIGHT","connectedBlockWidths","oldRows","r","makeSpacerRow_","getSpacerRowHeight_","getSpacerRowWidth_","spacer","SpacerRow","getElemCenterline_","elem","isSpacer","yPos","isBottomRow","baseline","descenderHeight","isTopRow","isHat","recordElemPositions_","xCursor","xPos","centerline","yCursor","isConnected","targetBlock","getHeightWidth"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Methods for graphically rendering a block as SVG.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.blockRendering.RenderInfo');\n\ngoog.require('Blockly.blockRendering.BottomRow');\ngoog.require('Blockly.blockRendering.ExternalValueInput');\ngoog.require('Blockly.blockRendering.Hat');\ngoog.require('Blockly.blockRendering.InlineInput');\ngoog.require('Blockly.blockRendering.InRowSpacer');\ngoog.require('Blockly.blockRendering.InputRow');\ngoog.require('Blockly.blockRendering.Measurable');\ngoog.require('Blockly.blockRendering.NextConnection');\ngoog.require('Blockly.blockRendering.OutputConnection');\ngoog.require('Blockly.blockRendering.PreviousConnection');\ngoog.require('Blockly.blockRendering.RoundCorner');\ngoog.require('Blockly.blockRendering.Row');\ngoog.require('Blockly.blockRendering.SpacerRow');\ngoog.require('Blockly.blockRendering.StatementInput');\ngoog.require('Blockly.blockRendering.SquareCorner');\ngoog.require('Blockly.blockRendering.TopRow');\ngoog.require('Blockly.blockRendering.Types');\n\n\n/**\n * An object containing all sizing information needed to draw this block.\n *\n * This measure pass does not propagate changes to the block (although fields\n * may choose to rerender when getSize() is called).  However, calling it\n * repeatedly may be expensive.\n *\n * @param {!Blockly.blockRendering.Renderer} renderer The renderer in use.\n * @param {!Blockly.BlockSvg} block The block to measure.\n * @constructor\n * @package\n */\nBlockly.blockRendering.RenderInfo = function(renderer, block) {\n  this.block_ = block;\n\n  /**\n   * The block renderer in use.\n   * @type {!Blockly.blockRendering.Renderer}\n   * @protected\n   */\n  this.renderer_ = renderer;\n\n  /**\n   * The renderer's constant provider.\n   * @type {!Blockly.blockRendering.ConstantProvider}\n   * @protected\n   */\n  this.constants_ = this.renderer_.getConstants();\n\n  /**\n   * A measurable representing the output connection if the block has one.\n   * Otherwise null.\n   * @type {Blockly.blockRendering.OutputConnection}\n   */\n  this.outputConnection = !block.outputConnection ? null :\n      new Blockly.blockRendering.OutputConnection(\n          this.constants_,\n          /** @type {Blockly.RenderedConnection} */(block.outputConnection));\n\n  /**\n   * Whether the block should be rendered as a single line, either because it's\n   * inline or because it has been collapsed.\n   * @type {boolean}\n   */\n  this.isInline = block.getInputsInline() && !block.isCollapsed();\n\n  /**\n   * Whether the block is collapsed.\n   * @type {boolean}\n   */\n  this.isCollapsed = block.isCollapsed();\n\n  /**\n   * Whether the block is an insertion marker.  Insertion markers are the same\n   * shape as normal blocks, but don't show fields.\n   * @type {boolean}\n   */\n  this.isInsertionMarker = block.isInsertionMarker();\n\n  /**\n   * True if the block should be rendered right-to-left.\n   * @type {boolean}\n   */\n  this.RTL = block.RTL;\n\n  /**\n   * The height of the rendered block, including child blocks.\n   * @type {number}\n   */\n  this.height = 0;\n\n  /**\n   * The width of the rendered block, including child blocks.\n   * @type {number}\n   */\n  this.widthWithChildren = 0;\n\n  /**\n   * The width of the rendered block, excluding child blocks.  This is the right\n   * edge of the block when rendered LTR.\n   * @type {number}\n   */\n  this.width = 0;\n\n  /**\n   *\n   * @type {number}\n   */\n  this.statementEdge = 0;\n\n  /**\n   * An array of Row objects containing sizing information.\n   * @type {!Array.<!Blockly.blockRendering.Row>}\n   */\n  this.rows = [];\n\n  /**\n   * An array of input rows on the block.\n   * @type {!Array.<!Blockly.blockRendering.InputRow>}\n   */\n  this.inputRows = [];\n\n  /**\n   * An array of measurable objects containing hidden icons.\n   * @type {!Array.<!Blockly.blockRendering.Icon>}\n   */\n  this.hiddenIcons = [];\n\n  /**\n   * An object with rendering information about the top row of the block.\n   * @type {!Blockly.blockRendering.TopRow}\n   */\n  this.topRow = new Blockly.blockRendering.TopRow(this.constants_);\n\n  /**\n   * An object with rendering information about the bottom row of the block.\n   * @type {!Blockly.blockRendering.BottomRow}\n   */\n  this.bottomRow = new Blockly.blockRendering.BottomRow(this.constants_);\n\n  // The position of the start point for drawing, relative to the block's\n  // location.\n  this.startX = 0;\n  this.startY = 0;\n};\n\n/**\n * Get the block renderer in use.\n * @return {!Blockly.blockRendering.Renderer} The block renderer in use.\n * @package\n */\nBlockly.blockRendering.RenderInfo.prototype.getRenderer = function() {\n  return this.renderer_;\n};\n\n/**\n * Populate and return an object containing all sizing information needed to\n * draw this block.\n *\n * This measure pass does not propagate changes to the block (although fields\n * may choose to rerender when getSize() is called).  However, calling it\n * repeatedly may be expensive.\n *\n * @package\n */\nBlockly.blockRendering.RenderInfo.prototype.measure = function() {\n  this.createRows_();\n  this.addElemSpacing_();\n  this.addRowSpacing_();\n  this.computeBounds_();\n  this.alignRowElements_();\n  this.finalize_();\n};\n\n/**\n * Create rows of Measurable objects representing all renderable parts of the\n * block.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.createRows_ = function() {\n  this.populateTopRow_();\n  this.rows.push(this.topRow);\n  var activeRow = new Blockly.blockRendering.InputRow(this.constants_);\n  this.inputRows.push(activeRow);\n\n  // Icons always go on the first row, before anything else.\n  var icons = this.block_.getIcons();\n  if (icons.length) {\n    for (var i = 0, icon; (icon = icons[i]); i++) {\n      var iconInfo = new Blockly.blockRendering.Icon(this.constants_, icon);\n      if (this.isCollapsed && icon.collapseHidden) {\n        this.hiddenIcons.push(iconInfo);\n      } else {\n        activeRow.elements.push(iconInfo);\n      }\n    }\n  }\n\n  var lastInput = null;\n  // Loop across all of the inputs on the block, creating objects for anything\n  // that needs to be rendered and breaking the block up into visual rows.\n  for (var i = 0, input; (input = this.block_.inputList[i]); i++) {\n    if (!input.isVisible()) {\n      continue;\n    }\n    if (this.shouldStartNewRow_(input, lastInput)) {\n      // Finish this row and create a new one.\n      this.rows.push(activeRow);\n      activeRow = new Blockly.blockRendering.InputRow(this.constants_);\n      this.inputRows.push(activeRow);\n    }\n\n    // All of the fields in an input go on the same row.\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      activeRow.elements.push(\n          new Blockly.blockRendering.Field(this.constants_, field, input));\n    }\n    this.addInput_(input, activeRow);\n    lastInput = input;\n  }\n\n  if (this.isCollapsed) {\n    activeRow.hasJaggedEdge = true;\n    activeRow.elements.push(\n        new Blockly.blockRendering.JaggedEdge(this.constants_));\n  }\n\n  if (activeRow.elements.length || activeRow.hasDummyInput) {\n    this.rows.push(activeRow);\n  }\n  this.populateBottomRow_();\n  this.rows.push(this.bottomRow);\n};\n\n/**\n * Create all non-spacer elements that belong on the top row.\n * @package\n */\nBlockly.blockRendering.RenderInfo.prototype.populateTopRow_ = function() {\n  var hasPrevious = !!this.block_.previousConnection;\n  var hasHat = (this.block_.hat ?\n    this.block_.hat === 'cap' : this.constants_.ADD_START_HATS) &&\n    !this.outputConnection && !hasPrevious;\n  var leftSquareCorner = this.topRow.hasLeftSquareCorner(this.block_);\n\n  if (leftSquareCorner) {\n    this.topRow.elements.push(\n        new Blockly.blockRendering.SquareCorner(this.constants_));\n  } else {\n    this.topRow.elements.push(\n        new Blockly.blockRendering.RoundCorner(this.constants_));\n  }\n\n  if (hasHat) {\n    var hat = new Blockly.blockRendering.Hat(this.constants_);\n    this.topRow.elements.push(hat);\n    this.topRow.capline = hat.ascenderHeight;\n  } else if (hasPrevious) {\n    this.topRow.hasPreviousConnection = true;\n    this.topRow.connection = new Blockly.blockRendering.PreviousConnection(\n        this.constants_,\n        /** @type {Blockly.RenderedConnection} */\n        (this.block_.previousConnection));\n    this.topRow.elements.push(this.topRow.connection);\n  }\n\n  var precedesStatement = this.block_.inputList.length &&\n      this.block_.inputList[0].type == Blockly.NEXT_STATEMENT;\n\n  // This is the minimum height for the row. If one of its elements has a\n  // greater height it will be overwritten in the compute pass.\n  if (precedesStatement && !this.block_.isCollapsed()) {\n    this.topRow.minHeight =\n        this.constants_.TOP_ROW_PRECEDES_STATEMENT_MIN_HEIGHT;\n  } else {\n    this.topRow.minHeight = this.constants_.TOP_ROW_MIN_HEIGHT;\n  }\n\n  var rightSquareCorner = this.topRow.hasRightSquareCorner(this.block_);\n\n  if (rightSquareCorner) {\n    this.topRow.elements.push(\n        new Blockly.blockRendering.SquareCorner(this.constants_, 'right'));\n  } else {\n    this.topRow.elements.push(\n        new Blockly.blockRendering.RoundCorner(this.constants_, 'right'));\n  }\n};\n\n/**\n * Create all non-spacer elements that belong on the bottom row.\n * @package\n */\nBlockly.blockRendering.RenderInfo.prototype.populateBottomRow_ = function() {\n  this.bottomRow.hasNextConnection = !!this.block_.nextConnection;\n\n  var followsStatement =\n      this.block_.inputList.length &&\n      this.block_.inputList[this.block_.inputList.length - 1]\n          .type == Blockly.NEXT_STATEMENT;\n\n  // This is the minimum height for the row. If one of its elements has a\n  // greater height it will be overwritten in the compute pass.\n  if (followsStatement) {\n    this.bottomRow.minHeight =\n      this.constants_.BOTTOM_ROW_AFTER_STATEMENT_MIN_HEIGHT;\n  } else {\n    this.bottomRow.minHeight = this.constants_.BOTTOM_ROW_MIN_HEIGHT;\n  }\n\n  var leftSquareCorner = this.bottomRow.hasLeftSquareCorner(this.block_);\n\n  if (leftSquareCorner) {\n    this.bottomRow.elements.push(\n        new Blockly.blockRendering.SquareCorner(this.constants_));\n  } else {\n    this.bottomRow.elements.push(\n        new Blockly.blockRendering.RoundCorner(this.constants_));\n  }\n\n  if (this.bottomRow.hasNextConnection) {\n    this.bottomRow.connection = new Blockly.blockRendering.NextConnection(\n        this.constants_,\n        /** @type {Blockly.RenderedConnection} */ (this.block_.nextConnection));\n    this.bottomRow.elements.push(this.bottomRow.connection);\n  }\n\n  var rightSquareCorner = this.bottomRow.hasRightSquareCorner(this.block_);\n\n  if (rightSquareCorner) {\n    this.bottomRow.elements.push(\n        new Blockly.blockRendering.SquareCorner(this.constants_, 'right'));\n  } else {\n    this.bottomRow.elements.push(\n        new Blockly.blockRendering.RoundCorner(this.constants_, 'right'));\n  }\n};\n\n/**\n * Add an input element to the active row, if needed, and record the type of the\n * input on the row.\n * @param {!Blockly.Input} input The input to record information about.\n * @param {!Blockly.blockRendering.Row} activeRow The row that is currently being\n *     populated.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.addInput_ = function(input, activeRow) {\n  // Non-dummy inputs have visual representations onscreen.\n  if (this.isInline && input.type == Blockly.INPUT_VALUE) {\n    activeRow.elements.push(\n        new Blockly.blockRendering.InlineInput(this.constants_, input));\n    activeRow.hasInlineInput = true;\n  } else if (input.type == Blockly.NEXT_STATEMENT) {\n    activeRow.elements.push(\n        new Blockly.blockRendering.StatementInput(this.constants_, input));\n    activeRow.hasStatement = true;\n  } else if (input.type == Blockly.INPUT_VALUE) {\n    activeRow.elements.push(\n        new Blockly.blockRendering.ExternalValueInput(this.constants_, input));\n    activeRow.hasExternalInput = true;\n  } else if (input.type == Blockly.DUMMY_INPUT) {\n    // Dummy inputs have no visual representation, but the information is still\n    // important.\n    activeRow.minHeight = Math.max(activeRow.minHeight,\n        input.getSourceBlock() && input.getSourceBlock().isShadow() ?\n        this.constants_.DUMMY_INPUT_SHADOW_MIN_HEIGHT :\n        this.constants_.DUMMY_INPUT_MIN_HEIGHT);\n    activeRow.hasDummyInput = true;\n  }\n  if (activeRow.align == null) {\n    activeRow.align = input.align;\n  }\n};\n\n/**\n * Decide whether to start a new row between the two Blockly.Inputs.\n * @param {!Blockly.Input} input The first input to consider\n * @param {Blockly.Input} lastInput The input that follows.\n * @return {boolean} True if the next input should be rendered on a new row.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.shouldStartNewRow_ = function(input, lastInput) {\n  // If this is the first input, just add to the existing row.\n  // That row is either empty or has some icons in it.\n  if (!lastInput) {\n    return false;\n  }\n  // A statement input or an input following one always gets a new row.\n  if (input.type == Blockly.NEXT_STATEMENT ||\n      lastInput.type == Blockly.NEXT_STATEMENT) {\n    return true;\n  }\n  // Value and dummy inputs get new row if inputs are not inlined.\n  if (input.type == Blockly.INPUT_VALUE || input.type == Blockly.DUMMY_INPUT) {\n    return !this.isInline;\n  }\n  return false;\n};\n\n/**\n * Add horizontal spacing between and around elements within each row.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.addElemSpacing_ = function() {\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    var oldElems = row.elements;\n    row.elements = [];\n    // No spacing needed before the corner on the top row or the bottom row.\n    if (row.startsWithElemSpacer()) {\n      // There's a spacer before the first element in the row.\n      row.elements.push(new Blockly.blockRendering.InRowSpacer(\n          this.constants_, this.getInRowSpacing_(null, oldElems[0])));\n    }\n    if (!oldElems.length) {\n      continue;\n    }\n    for (var e = 0; e < oldElems.length - 1; e++) {\n      row.elements.push(oldElems[e]);\n      var spacing = this.getInRowSpacing_(oldElems[e], oldElems[e + 1]);\n      row.elements.push(\n          new Blockly.blockRendering.InRowSpacer(this.constants_, spacing));\n    }\n    row.elements.push(oldElems[oldElems.length - 1]);\n    if (row.endsWithElemSpacer()) {\n      // There's a spacer after the last element in the row.\n      row.elements.push(new Blockly.blockRendering.InRowSpacer(\n          this.constants_,\n          this.getInRowSpacing_(oldElems[oldElems.length - 1], null)));\n    }\n  }\n};\n\n/**\n * Calculate the width of a spacer element in a row based on the previous and\n * next elements in that row.  For instance, extra padding is added between two\n * editable fields.\n * @param {Blockly.blockRendering.Measurable} prev The element before the\n *     spacer.\n * @param {Blockly.blockRendering.Measurable} next The element after the spacer.\n * @return {number} The size of the spacing between the two elements.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.getInRowSpacing_ = function(prev, next) {\n  if (!prev) {\n    // Statement input padding.\n    if (next && Blockly.blockRendering.Types.isStatementInput(next)) {\n      return this.constants_.STATEMENT_INPUT_PADDING_LEFT;\n    }\n  }\n  // Between inputs and the end of the row.\n  if (prev && Blockly.blockRendering.Types.isInput(prev) && !next) {\n    if (Blockly.blockRendering.Types.isExternalInput(prev)) {\n      return this.constants_.NO_PADDING;\n    } else if (Blockly.blockRendering.Types.isInlineInput(prev)) {\n      return this.constants_.LARGE_PADDING;\n    } else if (Blockly.blockRendering.Types.isStatementInput(prev)) {\n      return this.constants_.NO_PADDING;\n    }\n  }\n\n  // Spacing between a square corner and a previous or next connection\n  if (prev && Blockly.blockRendering.Types.isLeftSquareCorner(prev) && next) {\n    if (Blockly.blockRendering.Types.isPreviousConnection(next) ||\n        Blockly.blockRendering.Types.isNextConnection(next)) {\n      return next.notchOffset;\n    }\n  }\n\n  // Spacing between a rounded corner and a previous or next connection.\n  if (prev && Blockly.blockRendering.Types.isLeftRoundedCorner(prev) && next) {\n    if (Blockly.blockRendering.Types.isPreviousConnection(next) ||\n      Blockly.blockRendering.Types.isNextConnection(next)) {\n      return next.notchOffset - this.constants_.CORNER_RADIUS;\n    }\n  }\n\n  return this.constants_.MEDIUM_PADDING;\n};\n\n/**\n * Figure out where the right edge of the block and right edge of statement inputs\n * should be placed.\n * @protected\n */\n// TODO: More cleanup.\nBlockly.blockRendering.RenderInfo.prototype.computeBounds_ = function() {\n  var widestStatementRowFields = 0;\n  var blockWidth = 0;\n  var widestRowWithConnectedBlocks = 0;\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    row.measure();\n    blockWidth = Math.max(blockWidth, row.width);\n    if (row.hasStatement) {\n      var statementInput = row.getLastInput();\n      var innerWidth = row.width - statementInput.width;\n      widestStatementRowFields = Math.max(widestStatementRowFields, innerWidth);\n    }\n    widestRowWithConnectedBlocks =\n        Math.max(widestRowWithConnectedBlocks, row.widthWithConnectedBlocks);\n  }\n\n  this.statementEdge = widestStatementRowFields;\n  this.width = blockWidth;\n\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    if (row.hasStatement) {\n      row.statementEdge = this.statementEdge;\n    }\n  }\n\n  this.widthWithChildren = Math.max(blockWidth, widestRowWithConnectedBlocks);\n\n  if (this.outputConnection) {\n    this.startX = this.outputConnection.width;\n    this.width += this.outputConnection.width;\n    this.widthWithChildren += this.outputConnection.width;\n  }\n};\n\n/**\n * Extra spacing may be necessary to make sure that the right sides of all\n * rows line up.  This can only be calculated after a first pass to calculate\n * the sizes of all rows.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.alignRowElements_ = function() {\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    if (row.hasStatement) {\n      this.alignStatementRow_(\n          /** @type {!Blockly.blockRendering.InputRow} */ (row));\n    } else {\n      var currentWidth = row.width;\n      var desiredWidth = this.getDesiredRowWidth_(row);\n      var missingSpace = desiredWidth - currentWidth;\n      if (missingSpace > 0) {\n        this.addAlignmentPadding_(row, missingSpace);\n      }\n      if (Blockly.blockRendering.Types.isTopOrBottomRow(row)) {\n        row.widthWithConnectedBlocks = row.width;\n      }\n    }\n  }\n};\n\n/**\n * Calculate the desired width of an input row.\n * @param {!Blockly.blockRendering.Row} _row The input row.\n * @return {number} The desired width of the input row.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.getDesiredRowWidth_ = function(\n    _row) {\n  return this.width - this.startX;\n};\n\n/**\n * Modify the given row to add the given amount of padding around its fields.\n * The exact location of the padding is based on the alignment property of the\n * last input in the field.\n * @param {Blockly.blockRendering.Row} row The row to add padding to.\n * @param {number} missingSpace How much padding to add.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.addAlignmentPadding_ = function(row,\n    missingSpace) {\n  var firstSpacer = row.getFirstSpacer();\n  var lastSpacer = row.getLastSpacer();\n  if (row.hasExternalInput || row.hasStatement) {\n    row.widthWithConnectedBlocks += missingSpace;\n  }\n\n  // Decide where the extra padding goes.\n  if (row.align == Blockly.ALIGN_LEFT) {\n    // Add padding to the end of the row.\n    lastSpacer.width += missingSpace;\n  } else if (row.align == Blockly.ALIGN_CENTRE) {\n    // Split the padding between the beginning and end of the row.\n    firstSpacer.width += missingSpace / 2;\n    lastSpacer.width += missingSpace / 2;\n  } else if (row.align == Blockly.ALIGN_RIGHT) {\n    // Add padding at the beginning of the row.\n    firstSpacer.width += missingSpace;\n  } else {\n    // Default to left-aligning.\n    lastSpacer.width += missingSpace;\n  }\n  row.width += missingSpace;\n};\n\n/**\n * Align the elements of a statement row based on computed bounds.\n * Unlike other types of rows, statement rows add space in multiple places.\n * @param {!Blockly.blockRendering.InputRow} row The statement row to resize.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.alignStatementRow_ = function(row) {\n  var statementInput = row.getLastInput();\n  var currentWidth = row.width - statementInput.width;\n  var desiredWidth = this.statementEdge;\n  // Add padding before the statement input.\n  var missingSpace = desiredWidth - currentWidth;\n  if (missingSpace > 0) {\n    this.addAlignmentPadding_(row, missingSpace);\n  }\n  // Also widen the statement input to reach to the right side of the\n  // block. Note that this does not add padding.\n  currentWidth = row.width;\n  desiredWidth = this.getDesiredRowWidth_(row);\n  statementInput.width += (desiredWidth - currentWidth);\n  statementInput.height = Math.max(statementInput.height, row.height);\n  row.width += (desiredWidth - currentWidth);\n  row.widthWithConnectedBlocks = Math.max(row.width,\n      this.statementEdge + row.connectedBlockWidths);\n};\n\n/**\n * Add spacers between rows and set their sizes.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.addRowSpacing_ = function() {\n  var oldRows = this.rows;\n  this.rows = [];\n\n  for (var r = 0; r < oldRows.length; r++) {\n    this.rows.push(oldRows[r]);\n    if (r != oldRows.length - 1) {\n      this.rows.push(this.makeSpacerRow_(oldRows[r], oldRows[r + 1]));\n    }\n  }\n};\n\n/**\n * Create a spacer row to go between prev and next, and set its size.\n * @param {!Blockly.blockRendering.Row} prev The previous row.\n * @param {!Blockly.blockRendering.Row} next The next row.\n * @return {!Blockly.blockRendering.SpacerRow} The newly created spacer row.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.makeSpacerRow_ = function(prev, next) {\n  var height = this.getSpacerRowHeight_(prev, next);\n  var width = this.getSpacerRowWidth_(prev, next);\n  var spacer = new Blockly.blockRendering.SpacerRow(\n      this.constants_, height, width);\n  if (prev.hasStatement) {\n    spacer.followsStatement = true;\n  }\n  if (next.hasStatement) {\n    spacer.precedesStatement = true;\n  }\n  return spacer;\n};\n\n/**\n * Calculate the width of a spacer row.\n * @param {!Blockly.blockRendering.Row} _prev The row before the spacer.\n * @param {!Blockly.blockRendering.Row} _next The row after the spacer.\n * @return {number} The desired width of the spacer row between these two rows.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.getSpacerRowWidth_ = function(\n    _prev, _next) {\n  return this.width - this.startX;\n};\n\n/**\n * Calculate the height of a spacer row.\n * @param {!Blockly.blockRendering.Row} _prev The row before the spacer.\n * @param {!Blockly.blockRendering.Row} _next The row after the spacer.\n * @return {number} The desired height of the spacer row between these two rows.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.getSpacerRowHeight_ = function(\n    _prev, _next) {\n  return this.constants_.MEDIUM_PADDING;\n};\n\n/**\n * Calculate the centerline of an element in a rendered row.\n * This base implementation puts the centerline at the middle of the row\n * vertically, with no special cases.  You will likely need extra logic to\n * handle (at minimum) top and bottom rows.\n * @param {!Blockly.blockRendering.Row} row The row containing the element.\n * @param {!Blockly.blockRendering.Measurable} elem The element to place.\n * @return {number} The desired centerline of the given element, as an offset\n *     from the top left of the block.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.getElemCenterline_ = function(row,\n    elem) {\n  if (Blockly.blockRendering.Types.isSpacer(elem)) {\n    return row.yPos + elem.height / 2;\n  }\n  if (Blockly.blockRendering.Types.isBottomRow(row)) {\n    var baseline = row.yPos + row.height - row.descenderHeight;\n    if (Blockly.blockRendering.Types.isNextConnection(elem)) {\n      return baseline + elem.height / 2;\n    }\n    return baseline - elem.height / 2;\n  }\n  if (Blockly.blockRendering.Types.isTopRow(row)) {\n    if (Blockly.blockRendering.Types.isHat(elem)) {\n      return row.capline - elem.height / 2;\n    }\n    return row.capline + elem.height / 2;\n  }\n  return row.yPos + row.height / 2;\n};\n\n/**\n * Record final position information on elements on the given row, for use in\n * drawing.  At minimum this records xPos and centerline on each element.\n * @param {!Blockly.blockRendering.Row} row The row containing the elements.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.recordElemPositions_ = function(\n    row) {\n  var xCursor = row.xPos;\n  for (var j = 0, elem; (elem = row.elements[j]); j++) {\n    // Now that row heights are finalized, make spacers use the row height.\n    if (Blockly.blockRendering.Types.isSpacer(elem)) {\n      elem.height = row.height;\n    }\n    elem.xPos = xCursor;\n    elem.centerline = this.getElemCenterline_(row, elem);\n    xCursor += elem.width;\n  }\n};\n\n/**\n * Make any final changes to the rendering information object.  In particular,\n * store the y position of each row, and record the height of the full block.\n * @protected\n */\nBlockly.blockRendering.RenderInfo.prototype.finalize_ = function() {\n  // Performance note: this could be combined with the draw pass, if the time\n  // that this takes is excessive.  But it shouldn't be, because it only\n  // accesses and sets properties that already exist on the objects.\n  var widestRowWithConnectedBlocks = 0;\n  var yCursor = 0;\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    row.yPos = yCursor;\n    row.xPos = this.startX;\n    yCursor += row.height;\n\n    widestRowWithConnectedBlocks =\n        Math.max(widestRowWithConnectedBlocks, row.widthWithConnectedBlocks);\n    this.recordElemPositions_(row);\n  }\n  if (this.outputConnection && this.block_.nextConnection &&\n      this.block_.nextConnection.isConnected()) {\n    // Include width of connected block in value to stack width measurement.\n    widestRowWithConnectedBlocks =\n        Math.max(widestRowWithConnectedBlocks,\n            this.block_.nextConnection.targetBlock().getHeightWidth().width);\n  }\n\n  this.widthWithChildren = widestRowWithConnectedBlocks + this.startX;\n\n  this.height = yCursor;\n  this.startY = this.topRow.capline;\n  this.bottomRow.baseline = yCursor - this.bottomRow.descenderHeight;\n};\n"],"file":"info.min.js"}