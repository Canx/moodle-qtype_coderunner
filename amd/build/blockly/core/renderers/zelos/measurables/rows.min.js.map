{"version":3,"sources":["../../../../../../src/blockly/core/renderers/zelos/measurables/rows.js"],"names":["goog","provide","require","Blockly","zelos","TopRow","constants","superClass_","constructor","call","utils","object","inherits","blockRendering","prototype","endsWithElemSpacer","hasLeftSquareCorner","block","hasHat","hat","constants_","ADD_START_HATS","outputConnection","previousConnection","hasRightSquareCorner","statementInputCount","nextConnection","BottomRow"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,yBAAb,EACAD,IAAI,CAACC,OAAL,CAAa,sBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,kCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,+BAAb,EACAF,IAAI,CAACE,OAAL,CAAa,kCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EAgBAC,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAuB,SAASC,CAAT,CAAoB,CACzCH,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqBE,WAArB,CAAiCC,WAAjC,CAA6CC,IAA7C,CAAkD,IAAlD,CAAwDH,CAAxD,CACD,CAFD,CAGAH,OAAO,CAACO,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BT,OAAO,CAACC,KAAR,CAAcC,MAA5C,CACIF,OAAO,CAACU,cAAR,CAAuBR,MAD3B,EAMAF,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqBS,SAArB,CAA+BC,kBAA/B,CAAoD,UAAW,CAC7D,QACD,CAFD,CAQAZ,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqBS,SAArB,CAA+BE,mBAA/B,CAAqD,SAASC,CAAT,CAAgB,CACnE,GAAIC,CAAAA,CAAM,CAAG,CAACD,CAAK,CAACE,GAAN,CACI,KAAd,GAAAF,CAAK,CAACE,GADI,CACY,KAAKC,UAAL,CAAgBC,cAD7B,GAET,CAACJ,CAAK,CAACK,gBAFE,EAEkB,CAACL,CAAK,CAACM,kBAFtC,CAGA,MAAO,CAAC,CAACN,CAAK,CAACK,gBAAR,EAA4BJ,CACpC,CALD,CAWAf,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqBS,SAArB,CAA+BU,oBAA/B,CAAsD,SAASP,CAAT,CAAgB,CACpE,MAAO,CAAC,CAACA,CAAK,CAACK,gBAAR,EAA4B,CAACL,CAAK,CAACQ,mBAAnC,EACL,CAACR,CAAK,CAACS,cACV,CAHD,CAgBAvB,OAAO,CAACC,KAAR,CAAcuB,SAAd,CAA0B,SAASrB,CAAT,CAAoB,CAC5CH,OAAO,CAACC,KAAR,CAAcuB,SAAd,CAAwBpB,WAAxB,CAAoCC,WAApC,CAAgDC,IAAhD,CAAqD,IAArD,CAA2DH,CAA3D,CACD,CAFD,CAGAH,OAAO,CAACO,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BT,OAAO,CAACC,KAAR,CAAcuB,SAA5C,CACIxB,OAAO,CAACU,cAAR,CAAuBc,SAD3B,EAMAxB,OAAO,CAACC,KAAR,CAAcuB,SAAd,CAAwBb,SAAxB,CAAkCC,kBAAlC,CAAuD,UAAW,CAChE,QACD,CAFD,CAQAZ,OAAO,CAACC,KAAR,CAAcuB,SAAd,CAAwBb,SAAxB,CAAkCE,mBAAlC,CAAwD,SAASC,CAAT,CAAgB,CACtE,MAAO,CAAC,CAACA,CAAK,CAACK,gBAChB,CAFD,CAQAnB,OAAO,CAACC,KAAR,CAAcuB,SAAd,CAAwBb,SAAxB,CAAkCU,oBAAlC,CAAyD,SAASP,CAAT,CAAgB,CACvE,MAAO,CAAC,CAACA,CAAK,CAACK,gBAAR,EAA4B,CAACL,CAAK,CAACQ,mBAAnC,EACL,CAACR,CAAK,CAACS,cACV,CAHD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview An object representing a single row on a rendered block and all\n * of its subcomponents.\n * @author samelh@google.com (Sam El-Husseini)\n */\n'use strict';\n\ngoog.provide('Blockly.zelos.BottomRow');\ngoog.provide('Blockly.zelos.TopRow');\n\ngoog.require('Blockly.blockRendering.BottomRow');\ngoog.require('Blockly.blockRendering.TopRow');\ngoog.require('Blockly.blockRendering.SpacerRow');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * An object containing information about what elements are in the top row of a\n * block as well as sizing information for the top row.\n * Elements in a top row can consist of corners, hats, spacers, and previous\n * connections.\n * After this constructor is called, the row will contain all non-spacer\n * elements it needs.\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.TopRow}\n */\nBlockly.zelos.TopRow = function(constants) {\n  Blockly.zelos.TopRow.superClass_.constructor.call(this, constants);\n};\nBlockly.utils.object.inherits(Blockly.zelos.TopRow,\n    Blockly.blockRendering.TopRow);\n\n/**\n * @override\n */\nBlockly.zelos.TopRow.prototype.endsWithElemSpacer = function() {\n  return false;\n};\n\n/**\n * Render a round corner unless the block has an output connection.\n * @override\n */\nBlockly.zelos.TopRow.prototype.hasLeftSquareCorner = function(block) {\n  var hasHat = (block.hat ?\n      block.hat === 'cap' : this.constants_.ADD_START_HATS) &&\n      !block.outputConnection && !block.previousConnection;\n  return !!block.outputConnection || hasHat;\n};\n\n/**\n * Render a round corner unless the block has an output connection.\n * @override\n */\nBlockly.zelos.TopRow.prototype.hasRightSquareCorner = function(block) {\n  return !!block.outputConnection && !block.statementInputCount &&\n    !block.nextConnection;\n};\n\n/**\n * An object containing information about what elements are in the bottom row of\n * a block as well as spacing information for the top row.\n * Elements in a bottom row can consist of corners, spacers and next\n * connections.\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.BottomRow}\n */\nBlockly.zelos.BottomRow = function(constants) {\n  Blockly.zelos.BottomRow.superClass_.constructor.call(this, constants);\n};\nBlockly.utils.object.inherits(Blockly.zelos.BottomRow,\n    Blockly.blockRendering.BottomRow);\n\n/**\n * @override\n */\nBlockly.zelos.BottomRow.prototype.endsWithElemSpacer = function() {\n  return false;\n};\n\n/**\n * Render a round corner unless the block has an output connection.\n * @override\n */\nBlockly.zelos.BottomRow.prototype.hasLeftSquareCorner = function(block) {\n  return !!block.outputConnection;\n};\n\n/**\n * Render a round corner unless the block has an output connection.\n * @override\n */\nBlockly.zelos.BottomRow.prototype.hasRightSquareCorner = function(block) {\n  return !!block.outputConnection && !block.statementInputCount &&\n    !block.nextConnection;\n};\n"],"file":"rows.min.js"}