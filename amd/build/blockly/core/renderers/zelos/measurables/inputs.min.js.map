{"version":3,"sources":["../../../../../../src/blockly/core/renderers/zelos/measurables/inputs.js"],"names":["goog","provide","require","Blockly","zelos","StatementInput","constants","input","superClass_","constructor","call","connectedBlock","block","getNextBlock","nextConnection","height","connectedBlockHeight","connectedBottomNextConnection","utils","object","inherits","blockRendering"],"mappings":"AAYAA,IAAI,CAACC,OAAL,CAAa,8BAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,uCAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EAcAC,OAAO,CAACC,KAAR,CAAcC,cAAd,CAA+B,SAASC,CAAT,CAAoBC,CAApB,CAA2B,CACxDJ,OAAO,CAACC,KAAR,CAAcC,cAAd,CAA6BG,WAA7B,CAAyCC,WAAzC,CAAqDC,IAArD,CAA0D,IAA1D,CACIJ,CADJ,CACeC,CADf,EAGA,GAAI,KAAKI,cAAT,CAAyB,CAEvB,GAAIC,CAAAA,CAAK,CAAG,KAAKD,cAAjB,CACA,MAAOC,CAAK,CAACC,YAAN,EAAP,CAA6B,CAC3BD,CAAK,CAAGA,CAAK,CAACC,YAAN,EACT,CACD,GAAI,CAACD,CAAK,CAACE,cAAX,CAA2B,CACzB,KAAKC,MAAL,CAAc,KAAKC,oBAAnB,CACA,KAAKC,6BAAL,GACD,CACF,CACF,CAfD,CAgBAd,OAAO,CAACe,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BjB,OAAO,CAACC,KAAR,CAAcC,cAA5C,CACIF,OAAO,CAACkB,cAAR,CAAuBhB,cAD3B","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Zelos specific objects representing inputs with connections on\n * a rendered block.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\ngoog.provide('Blockly.zelos.StatementInput');\n\ngoog.require('Blockly.blockRendering.StatementInput');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * An object containing information about the space a statement input takes up\n * during rendering\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.Input} input The statement input to measure and store\n *     information for.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.StatementInput}\n */\nBlockly.zelos.StatementInput = function(constants, input) {\n  Blockly.zelos.StatementInput.superClass_.constructor.call(this,\n      constants, input);\n\n  if (this.connectedBlock) {\n    // Find the bottom-most connected block in the stack.\n    var block = this.connectedBlock;\n    while (block.getNextBlock()) {\n      block = block.getNextBlock();\n    }\n    if (!block.nextConnection) {\n      this.height = this.connectedBlockHeight;\n      this.connectedBottomNextConnection = true;\n    }\n  }\n};\nBlockly.utils.object.inherits(Blockly.zelos.StatementInput,\n    Blockly.blockRendering.StatementInput);\n"],"file":"inputs.min.js"}