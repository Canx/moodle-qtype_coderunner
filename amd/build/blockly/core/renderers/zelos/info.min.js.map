{"version":3,"sources":["../../../../../src/blockly/core/renderers/zelos/info.js"],"names":["goog","provide","require","Blockly","zelos","RenderInfo","renderer","block","superClass_","constructor","call","topRow","TopRow","constants_","bottomRow","BottomRow","isInline","isMultiRow","getInputsInline","isCollapsed","hasStatementInput","statementInputCount","rightSide","outputConnection","RightConnectionShape","utils","object","inherits","blockRendering","prototype","getRenderer","renderer_","measure","createRows_","addElemSpacing_","addRowSpacing_","adjustXPosition_","computeBounds_","alignRowElements_","finalize_","shouldStartNewRow_","input","lastInput","type","NEXT_STATEMENT","INPUT_VALUE","DUMMY_INPUT","getDesiredRowWidth_","row","hasStatement","rightCornerWidth","INSIDE_CORNERS","rightWidth","width","startX","getInRowSpacing_","prev","next","isDynamicShape","hasNextConnection","NO_PADDING","Types","isStatementInput","STATEMENT_INPUT_PADDING_LEFT","isLeftRoundedCorner","isPreviousConnection","isNextConnection","notchOffset","CORNER_RADIUS","isLeftSquareCorner","isHat","MEDIUM_PADDING","getSpacerRowHeight_","isTopRow","isBottomRow","EMPTY_BLOCK_SPACER_HEIGHT","followsStatement","isInputRow","precedesStatement","cornerHeight","rightHeight","height","Math","max","NOTCH_HEIGHT","DUMMY_INPUT_MIN_HEIGHT","hasPreviousConnection","abs","topHeight","minHeight","getSpacerRowWidth_","STATEMENT_INPUT_SPACER_MIN_WIDTH","getElemCenterline_","elem","isSpacer","yPos","EMPTY_STATEMENT_INPUT_HEIGHT","isInlineInput","connectedBlock","nextConnection","addInput_","activeRow","hasDummyInput","align","ALIGN_LEFT","ALIGN_RIGHT","rightAlignedDummyInput","addAlignmentPadding_","missingSpace","alignmentDivider","i","elements","isField","parentInput","notchTotalWidth","NOTCH_OFFSET_LEFT","NOTCH_WIDTH","minXPos","rows","length","prevSpacer","nextSpacer","hasPrevNotch","hasNextNotch","getLastInput","xCursor","xPos","prevInRowSpacer","j","isInput","field","FieldLabel","FieldImage","difference","finalizeOutputConnection_","yCursor","blockHeight","descenderHeight","connectionHeight","shape","connectionWidth","connectionOffsetY","connectionOffsetX","rightConnectionWidth","centerline","widthWithChildren","finalizeHorizontalAlignment_","totalNegativeSpacing","firstElem","lastElem","leftNegPadding","getNegativeSpacing_","rightNegPadding","minBlockWidth","MIN_BLOCK_WIDTH","unshift","InRowSpacer","push","isTopOrBottomRow","widthWithConnectedBlocks","outerShape","constants","inputRows","SHAPES","ROUND","maxWidth","MAX_DYNAMIC_CONNECTION_SHAPE_WIDTH","topPadding","SMALL_PADDING","roundPadding","sin","acos","innerShape","pathObject","outputShapeType","HEXAGONAL","SHAPE_IN_SHAPE_PADDING","FieldTextInput","GRID_UNIT","isIcon","finalizeVerticalAlignment_","firstRow","hasSingleTextOrImageField","hasNonShadowConnectedBlocks","isShadow","getHeightWidth"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Makecode/scratch-style renderer.\n * Zelos: spirit of eager rivalry, emulation, envy, jealousy, and zeal.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.zelos');\ngoog.provide('Blockly.zelos.RenderInfo');\n\ngoog.require('Blockly.blockRendering.BottomRow');\ngoog.require('Blockly.blockRendering.ExternalValueInput');\ngoog.require('Blockly.blockRendering.InlineInput');\ngoog.require('Blockly.blockRendering.InputRow');\ngoog.require('Blockly.blockRendering.Measurable');\ngoog.require('Blockly.blockRendering.NextConnection');\ngoog.require('Blockly.blockRendering.OutputConnection');\ngoog.require('Blockly.blockRendering.PreviousConnection');\ngoog.require('Blockly.blockRendering.RenderInfo');\ngoog.require('Blockly.blockRendering.RoundCorner');\ngoog.require('Blockly.blockRendering.Row');\ngoog.require('Blockly.blockRendering.SquareCorner');\ngoog.require('Blockly.blockRendering.SpacerRow');\ngoog.require('Blockly.blockRendering.TopRow');\ngoog.require('Blockly.blockRendering.Types');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.zelos.BottomRow');\ngoog.require('Blockly.zelos.RightConnectionShape');\ngoog.require('Blockly.zelos.StatementInput');\ngoog.require('Blockly.zelos.TopRow');\n\n\n/**\n * An object containing all sizing information needed to draw this block.\n *\n * This measure pass does not propagate changes to the block (although fields\n * may choose to rerender when getSize() is called).  However, calling it\n * repeatedly may be expensive.\n *\n * @param {!Blockly.zelos.Renderer} renderer The renderer in use.\n * @param {!Blockly.BlockSvg} block The block to measure.\n * @constructor\n * @package\n * @extends {Blockly.blockRendering.RenderInfo}\n */\nBlockly.zelos.RenderInfo = function(renderer, block) {\n  Blockly.zelos.RenderInfo.superClass_.constructor.call(this, renderer, block);\n\n  /**\n   * An object with rendering information about the top row of the block.\n   * @type {!Blockly.zelos.TopRow}\n   * @override\n   */\n  this.topRow = new Blockly.zelos.TopRow(this.constants_);\n\n  /**\n   * An object with rendering information about the bottom row of the block.\n   * @type {!Blockly.zelos.BottomRow}\n   * @override\n   */\n  this.bottomRow = new Blockly.zelos.BottomRow(this.constants_);\n\n  /**\n   * @override\n   */\n  this.isInline = true;\n\n  /**\n   * Whether the block should be rendered as a multi-line block, either because\n   * it's not inline or because it has been collapsed.\n   * @type {boolean}\n   */\n  this.isMultiRow = !block.getInputsInline() || block.isCollapsed();\n\n  /**\n   * Whether or not the block has a statement input in one of its rows.\n   * @type {boolean}\n   */\n  this.hasStatementInput = block.statementInputCount > 0;\n\n  /**\n   * An object with rendering information about the right connection shape.\n   * @type {Blockly.zelos.RightConnectionShape}\n   */\n  this.rightSide = this.outputConnection ?\n      new Blockly.zelos.RightConnectionShape(this.constants_) : null;\n};\nBlockly.utils.object.inherits(Blockly.zelos.RenderInfo,\n    Blockly.blockRendering.RenderInfo);\n\n/**\n * Get the block renderer in use.\n * @return {!Blockly.zelos.Renderer} The block renderer in use.\n * @package\n */\nBlockly.zelos.RenderInfo.prototype.getRenderer = function() {\n  return /** @type {!Blockly.zelos.Renderer} */ (this.renderer_);\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.measure = function() {\n  // Modifying parent measure method to add `adjustXPosition_`.\n  this.createRows_();\n  this.addElemSpacing_();\n  this.addRowSpacing_();\n  this.adjustXPosition_();\n  this.computeBounds_();\n  this.alignRowElements_();\n  this.finalize_();\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.shouldStartNewRow_ = function(input,\n    lastInput) {\n  // If this is the first input, just add to the existing row.\n  // That row is either empty or has some icons in it.\n  if (!lastInput) {\n    return false;\n  }\n  // A statement input or an input following one always gets a new row.\n  if (input.type == Blockly.NEXT_STATEMENT ||\n      lastInput.type == Blockly.NEXT_STATEMENT) {\n    return true;\n  }\n  // Value and dummy inputs get new row if inputs are not inlined.\n  if (input.type == Blockly.INPUT_VALUE || input.type == Blockly.DUMMY_INPUT) {\n    return !this.isInline || this.isMultiRow;\n  }\n  return false;\n};\n\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.getDesiredRowWidth_ = function(row) {\n  if (row.hasStatement) {\n    var rightCornerWidth = this.constants_.INSIDE_CORNERS.rightWidth || 0;\n    return this.width - this.startX - rightCornerWidth;\n  }\n  return Blockly.zelos.RenderInfo.superClass_.getDesiredRowWidth_.call(this,\n      row);\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.getInRowSpacing_ = function(prev, next) {\n  if (!prev || !next) {\n    // No need for padding at the beginning or end of the row if the\n    // output shape is dynamic.\n    if (this.outputConnection && this.outputConnection.isDynamicShape &&\n        !this.hasStatementInput && !this.bottomRow.hasNextConnection) {\n      return this.constants_.NO_PADDING;\n    }\n  }\n  if (!prev) {\n    // Statement input padding.\n    if (next && Blockly.blockRendering.Types.isStatementInput(next)) {\n      return this.constants_.STATEMENT_INPUT_PADDING_LEFT;\n    }\n  }\n  // Spacing between a rounded corner and a previous or next connection.\n  if (prev && Blockly.blockRendering.Types.isLeftRoundedCorner(prev) && next) {\n    if (Blockly.blockRendering.Types.isPreviousConnection(next) ||\n      Blockly.blockRendering.Types.isNextConnection(next)) {\n      return next.notchOffset - this.constants_.CORNER_RADIUS;\n    }\n  }\n  // Spacing between a square corner and a hat.\n  if (prev && Blockly.blockRendering.Types.isLeftSquareCorner(prev) && next &&\n      Blockly.blockRendering.Types.isHat(next)) {\n    return this.constants_.NO_PADDING;\n  }\n  return this.constants_.MEDIUM_PADDING;\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.getSpacerRowHeight_ = function(\n    prev, next) {\n  // If we have an empty block add a spacer to increase the height.\n  if (Blockly.blockRendering.Types.isTopRow(prev) &&\n      Blockly.blockRendering.Types.isBottomRow(next)) {\n    return this.constants_.EMPTY_BLOCK_SPACER_HEIGHT;\n  }\n  var followsStatement =\n      Blockly.blockRendering.Types.isInputRow(prev) && prev.hasStatement;\n  var precedesStatement =\n      Blockly.blockRendering.Types.isInputRow(next) && next.hasStatement;\n  if (precedesStatement || followsStatement) {\n    var cornerHeight = this.constants_.INSIDE_CORNERS.rightHeight || 0;\n    var height = Math.max(this.constants_.NOTCH_HEIGHT, cornerHeight);\n    return precedesStatement && followsStatement ?\n        Math.max(height, this.constants_.DUMMY_INPUT_MIN_HEIGHT) : height;\n  }\n  // Top and bottom rows act as a spacer so we don't need any extra padding.\n  if ((Blockly.blockRendering.Types.isTopRow(prev))) {\n    if (!prev.hasPreviousConnection &&\n        (!this.outputConnection || this.hasStatementInput)) {\n      return Math.abs(this.constants_.NOTCH_HEIGHT -\n          this.constants_.CORNER_RADIUS);\n    }\n    return this.constants_.NO_PADDING;\n  }\n  if ((Blockly.blockRendering.Types.isBottomRow(next))) {\n    if (!this.outputConnection) {\n      var topHeight = Math.max(this.topRow.minHeight,\n          Math.max(this.constants_.NOTCH_HEIGHT,\n              this.constants_.CORNER_RADIUS)) - this.constants_.CORNER_RADIUS;\n      return topHeight;\n    } else if (!next.hasNextConnection && this.hasStatementInput) {\n      return Math.abs(this.constants_.NOTCH_HEIGHT -\n          this.constants_.CORNER_RADIUS);\n    }\n    return this.constants_.NO_PADDING;\n  }\n  return this.constants_.MEDIUM_PADDING;\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.getSpacerRowWidth_ = function(prev, next) {\n  var width = this.width - this.startX;\n  if ((Blockly.blockRendering.Types.isInputRow(prev) && prev.hasStatement) ||\n      (Blockly.blockRendering.Types.isInputRow(next) && next.hasStatement)) {\n    return Math.max(width, this.constants_.STATEMENT_INPUT_SPACER_MIN_WIDTH);\n  }\n  return width;\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.getElemCenterline_ = function(row, elem) {\n  if (row.hasStatement && !Blockly.blockRendering.Types.isSpacer(elem) &&\n      !Blockly.blockRendering.Types.isStatementInput(elem)) {\n    return row.yPos + this.constants_.EMPTY_STATEMENT_INPUT_HEIGHT / 2;\n  }\n  if (Blockly.blockRendering.Types.isInlineInput(elem)) {\n    var connectedBlock = elem.connectedBlock;\n    if (connectedBlock && connectedBlock.outputConnection &&\n        connectedBlock.nextConnection) {\n      return row.yPos + connectedBlock.height / 2;\n    }\n  }\n  return Blockly.zelos.RenderInfo.superClass_.getElemCenterline_.call(this,\n      row, elem);\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.addInput_ = function(input, activeRow) {\n  // If we have two dummy inputs on the same row, one aligned left and the other\n  // right, keep track of the right aligned dummy input so we can add padding\n  // later.\n  if (input.type == Blockly.DUMMY_INPUT && activeRow.hasDummyInput &&\n      activeRow.align == Blockly.ALIGN_LEFT &&\n      input.align == Blockly.ALIGN_RIGHT) {\n    activeRow.rightAlignedDummyInput = input;\n  }\n  Blockly.zelos.RenderInfo.superClass_.addInput_.call(this, input, activeRow);\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.addAlignmentPadding_ = function(row,\n    missingSpace) {\n  if (row.rightAlignedDummyInput) {\n    var alignmentDivider;\n    for (var i = 0, elem; (elem = row.elements[i]); i++) {\n      if (Blockly.blockRendering.Types.isSpacer(elem)) {\n        alignmentDivider = elem;\n      }\n      if (Blockly.blockRendering.Types.isField(elem) &&\n        elem.parentInput == row.rightAlignedDummyInput) {\n        break;\n      }\n    }\n    if (alignmentDivider) {\n      alignmentDivider.width += missingSpace;\n      row.width += missingSpace;\n      return;\n    }\n  }\n  Blockly.zelos.RenderInfo.superClass_.addAlignmentPadding_.call(this, row,\n      missingSpace);\n};\n\n/**\n * Adjust the x position of fields to bump all non-label fields in the first row\n * past the notch position.  This must be called before ``computeBounds`` is\n * called.\n * @protected\n */\nBlockly.zelos.RenderInfo.prototype.adjustXPosition_ = function() {\n  var notchTotalWidth = this.constants_.NOTCH_OFFSET_LEFT +\n      this.constants_.NOTCH_WIDTH;\n  var minXPos = notchTotalWidth;\n  // Run through every input row on the block and only apply bump logic to the\n  // first input row (if the block has prev connection) and every input row that\n  // has a prev and next notch.\n  for (var i = 2; i < this.rows.length - 1; i += 2) {\n    var prevSpacer = this.rows[i - 1];\n    var row = this.rows[i];\n    var nextSpacer = this.rows[i + 1];\n\n    var hasPrevNotch = i == 2 ?\n        !!this.topRow.hasPreviousConnection : !!prevSpacer.followsStatement;\n    var hasNextNotch = i + 2 >= this.rows.length - 1 ?\n        !!this.bottomRow.hasNextConnection : !!nextSpacer.precedesStatement;\n\n    if (Blockly.blockRendering.Types.isInputRow(row) && row.hasStatement) {\n      row.measure();\n      minXPos = row.width - row.getLastInput().width + notchTotalWidth;\n    } else if (hasPrevNotch && (i == 2 || hasNextNotch) &&\n        Blockly.blockRendering.Types.isInputRow(row) && !row.hasStatement) {\n      var xCursor = row.xPos;\n      var prevInRowSpacer = null;\n      for (var j = 0, elem; (elem = row.elements[j]); j++) {\n        if (Blockly.blockRendering.Types.isSpacer(elem)) {\n          prevInRowSpacer = elem;\n        }\n        if (prevInRowSpacer && (Blockly.blockRendering.Types.isField(elem) ||\n            Blockly.blockRendering.Types.isInput(elem))) {\n          if (xCursor < minXPos &&\n              !(Blockly.blockRendering.Types.isField(elem) &&\n              (elem.field instanceof Blockly.FieldLabel ||\n              elem.field instanceof Blockly.FieldImage))) {\n            var difference = minXPos - xCursor;\n            prevInRowSpacer.width += difference;\n          }\n        }\n        xCursor += elem.width;\n      }\n    }\n  }\n};\n\n/**\n * Finalize the output connection info.  In particular, set the height of the\n * output connection to match that of the block.  For the right side, add a\n * right connection shape element and have it match the dimensions of the\n * output connection.\n * @protected\n */\nBlockly.zelos.RenderInfo.prototype.finalizeOutputConnection_ = function() {\n  // Dynamic output connections depend on the height of the block.\n  if (!this.outputConnection || !this.outputConnection.isDynamicShape) {\n    return;\n  }\n  var yCursor = 0;\n  // Determine the block height.\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    row.yPos = yCursor;\n    yCursor += row.height;\n  }\n  this.height = yCursor;\n\n  // Adjust the height of the output connection.\n  var blockHeight = this.bottomRow.hasNextConnection ?\n      this.height - this.bottomRow.descenderHeight : this.height;\n  var connectionHeight = this.outputConnection.shape.height(blockHeight);\n  var connectionWidth = this.outputConnection.shape.width(blockHeight);\n\n  this.outputConnection.height = connectionHeight;\n  this.outputConnection.width = connectionWidth;\n  this.outputConnection.startX = connectionWidth;\n  this.outputConnection.connectionOffsetY =\n      this.outputConnection.shape.connectionOffsetY(connectionHeight);\n  this.outputConnection.connectionOffsetX =\n      this.outputConnection.shape.connectionOffsetX(connectionWidth);\n\n  // Add the right connection measurable.\n  // Don't add it if we have a value-to-statement or a value-to-stack block.\n  var rightConnectionWidth = 0;\n  if (!this.hasStatementInput && !this.bottomRow.hasNextConnection) {\n    rightConnectionWidth = connectionWidth;\n    this.rightSide.height = connectionHeight;\n    this.rightSide.width = rightConnectionWidth;\n    this.rightSide.centerline = connectionHeight / 2;\n    this.rightSide.xPos = this.width + rightConnectionWidth;\n  }\n  this.startX = connectionWidth;\n  this.width += connectionWidth + rightConnectionWidth;\n  this.widthWithChildren += connectionWidth + rightConnectionWidth;\n};\n\n/**\n * Finalize horizontal alignment of elements on the block.  In particular,\n * reduce the implicit spacing created by the left and right output connection\n * shapes by adding setting negative spacing onto the leftmost and rightmost\n * spacers.\n * @protected\n */\nBlockly.zelos.RenderInfo.prototype.finalizeHorizontalAlignment_ = function() {\n  if (!this.outputConnection || this.hasStatementInput ||\n      this.bottomRow.hasNextConnection) {\n    return;\n  }\n  var totalNegativeSpacing = 0;\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    if (!Blockly.blockRendering.Types.isInputRow(row)) {\n      continue;\n    }\n    var firstElem = row.elements[1];\n    var lastElem = row.elements[row.elements.length - 2];\n    var leftNegPadding = this.getNegativeSpacing_(firstElem);\n    var rightNegPadding = this.getNegativeSpacing_(lastElem);\n    totalNegativeSpacing = leftNegPadding + rightNegPadding;\n    var minBlockWidth = this.constants_.MIN_BLOCK_WIDTH +\n        this.outputConnection.width * 2;\n    if (this.width - totalNegativeSpacing < minBlockWidth) {\n      // Maintain a minimum block width, split negative spacing between left\n      // and right edge.\n      totalNegativeSpacing = this.width - minBlockWidth;\n      leftNegPadding = totalNegativeSpacing / 2;\n      rightNegPadding = totalNegativeSpacing / 2;\n    }\n    // Add a negative spacer on the start and end of the block.\n    row.elements.unshift(new Blockly.blockRendering.InRowSpacer(this.constants_,\n        -leftNegPadding));\n    row.elements.push(new Blockly.blockRendering.InRowSpacer(this.constants_,\n        -rightNegPadding));\n  }\n  if (totalNegativeSpacing) {\n    this.width -= totalNegativeSpacing;\n    this.widthWithChildren -= totalNegativeSpacing;\n    this.rightSide.xPos -= totalNegativeSpacing;\n    for (var i = 0, row; (row = this.rows[i]); i++) {\n      if (Blockly.blockRendering.Types.isTopOrBottomRow(row)) {\n        row.elements[1].width -= totalNegativeSpacing;\n        row.elements[1].widthWithConnectedBlocks -= totalNegativeSpacing;\n      }\n      row.width -= totalNegativeSpacing;\n      row.widthWithConnectedBlocks -= totalNegativeSpacing;\n    }\n  }\n};\n\n/**\n * Calculate the spacing to reduce the left and right edges by based on the\n * outer and inner connection shape.\n * @param {Blockly.blockRendering.Measurable} elem The first or last element on\n *     a block.\n * @return {number} The amount of spacing to reduce the first or last spacer.\n * @protected\n */\nBlockly.zelos.RenderInfo.prototype.getNegativeSpacing_ = function(elem) {\n  if (!elem) {\n    return 0;\n  }\n  var connectionWidth = this.outputConnection.width;\n  var outerShape = this.outputConnection.shape.type;\n  var constants =\n    /** @type {!Blockly.zelos.ConstantProvider} */ (this.constants_);\n  if (this.isMultiRow && this.inputRows.length > 1) {\n    switch (outerShape) {\n      case constants.SHAPES.ROUND:\n        // Special case for multi-row round reporter blocks.\n        var maxWidth = this.constants_.MAX_DYNAMIC_CONNECTION_SHAPE_WIDTH;\n        var width = this.height / 2 > maxWidth ? maxWidth : this.height / 2;\n        var topPadding = this.constants_.SMALL_PADDING;\n        var roundPadding = width *\n          (1 - Math.sin(Math.acos((width - topPadding) / width)));\n        return connectionWidth - roundPadding;\n      default:\n        return 0;\n    }\n  }\n  if (Blockly.blockRendering.Types.isInlineInput(elem)) {\n    var connectedBlock = elem.connectedBlock;\n    var innerShape = connectedBlock ?\n        connectedBlock.pathObject.outputShapeType :\n        elem.shape.type;\n    // Special case for value to stack / value to statement blocks.\n    if (connectedBlock && connectedBlock.outputConnection &&\n        (connectedBlock.statementInputCount || connectedBlock.nextConnection)) {\n      return 0;\n    }\n    // Special case for hexagonal output.\n    if (outerShape == constants.SHAPES.HEXAGONAL &&\n        outerShape != innerShape) {\n      return 0;\n    }\n    return connectionWidth -\n        this.constants_.SHAPE_IN_SHAPE_PADDING[outerShape][innerShape];\n  } else if (Blockly.blockRendering.Types.isField(elem)) {\n    // Special case for text inputs.\n    if (outerShape == constants.SHAPES.ROUND &&\n        elem.field instanceof Blockly.FieldTextInput) {\n      return connectionWidth - (2.75 * constants.GRID_UNIT);\n    }\n    return connectionWidth -\n        this.constants_.SHAPE_IN_SHAPE_PADDING[outerShape][0];\n  } else if (Blockly.blockRendering.Types.isIcon(elem)) {\n    return this.constants_.SMALL_PADDING;\n  }\n  return 0;\n};\n\n/**\n * Finalize vertical alignment of rows on a block.  In particular, reduce the\n * implicit spacing when a non-shadow block is connected to any of an input\n * row's inline inputs.\n * @protected\n */\nBlockly.zelos.RenderInfo.prototype.finalizeVerticalAlignment_ = function() {\n  if (this.outputConnection) {\n    return;\n  }\n  // Run through every input row on the block and only apply tight nesting logic\n  // to input rows that have a prev and next notch.\n  for (var i = 2; i < this.rows.length - 1; i += 2) {\n    var prevSpacer = this.rows[i - 1];\n    var row = this.rows[i];\n    var nextSpacer = this.rows[i + 1];\n\n    var firstRow = i == 2;\n    var hasPrevNotch = firstRow ?\n        !!this.topRow.hasPreviousConnection : !!prevSpacer.followsStatement;\n    var hasNextNotch = i + 2 >= this.rows.length - 1 ?\n        !!this.bottomRow.hasNextConnection : !!nextSpacer.precedesStatement;\n\n    if (hasPrevNotch) {\n      var hasSingleTextOrImageField = row.elements.length == 3 &&\n          (row.elements[1].field instanceof Blockly.FieldLabel ||\n              row.elements[1].field instanceof Blockly.FieldImage);\n      if (!firstRow && hasSingleTextOrImageField) {\n        // Remove some padding if we have a single image or text field.\n        prevSpacer.height -= this.constants_.SMALL_PADDING;\n        nextSpacer.height -= this.constants_.SMALL_PADDING;\n        row.height -= this.constants_.MEDIUM_PADDING;\n      } else if (!firstRow && !hasNextNotch) {\n        // Add a small padding so the notch doesn't clash with inputs/fields.\n        prevSpacer.height += this.constants_.SMALL_PADDING;\n      } else if (hasNextNotch) {\n        // Determine if the input row has non-shadow connected blocks.\n        var hasNonShadowConnectedBlocks = false;\n        var MIN_VERTICAL_TIGHTNESTING_HEIGHT = 40;\n        for (var j = 0, elem; (elem = row.elements[j]); j++) {\n          if (Blockly.blockRendering.Types.isInlineInput(elem) &&\n              elem.connectedBlock && !elem.connectedBlock.isShadow() &&\n              elem.connectedBlock.getHeightWidth().height >=\n                  MIN_VERTICAL_TIGHTNESTING_HEIGHT) {\n            hasNonShadowConnectedBlocks = true;\n            break;\n          }\n        }\n        // Apply tight-nesting if we have both a prev and next notch and the\n        // block has non-shadow connected blocks.\n        if (hasNonShadowConnectedBlocks) {\n          prevSpacer.height -= this.constants_.SMALL_PADDING;\n          nextSpacer.height -= this.constants_.SMALL_PADDING;\n        }\n      }\n    }\n  }\n};\n\n/**\n * @override\n */\nBlockly.zelos.RenderInfo.prototype.finalize_ = function() {\n  this.finalizeOutputConnection_();\n  this.finalizeHorizontalAlignment_();\n  this.finalizeVerticalAlignment_();\n  Blockly.zelos.RenderInfo.superClass_.finalize_.call(this);\n\n  if (this.rightSide) {\n    this.widthWithChildren += this.rightSide.width;\n  }\n};\n"],"file":"info.min.js"}