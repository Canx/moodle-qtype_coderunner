{"version":3,"sources":["../../../../../src/blockly/core/renderers/zelos/path_object.js"],"names":["goog","provide","require","Blockly","zelos","PathObject","root","style","constants","superClass_","constructor","call","svgPathSelected_","outlines_","remainingOutlines_","outputShapeType","utils","object","inherits","blockRendering","prototype","setPath","pathString","setAttribute","applyColour","block","isShadow","getParent","svgPath","colourTertiary","i","keys","Object","key","flipRTL","updateSelected","enable","setClass_","cloneNode","selectedGlowFilterId","svgRoot","appendChild","removeChild","updateReplacementFade","replacementGlowFilterId","removeAttribute","updateShapeForInputHighlight","conn","name","getParentInput","outlinePath","getOutlinePath_","beginDrawing","endDrawing","removeOutlinePath_","setOutlinePath","outline","dom","createSvgElement","parentNode"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview An object that owns a block's rendering SVG elements.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n'use strict';\n\ngoog.provide('Blockly.zelos.PathObject');\n\ngoog.require('Blockly.blockRendering.PathObject');\ngoog.require('Blockly.zelos.ConstantProvider');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * An object that handles creating and setting each of the SVG elements\n * used by the renderer.\n * @param {!SVGElement} root The root SVG element.\n * @param {!Blockly.Theme.BlockStyle} style The style object to use for\n *     colouring.\n * @param {!Blockly.zelos.ConstantProvider} constants The renderer's constants.\n * @constructor\n * @extends {Blockly.blockRendering.PathObject}\n * @package\n */\nBlockly.zelos.PathObject = function(root, style, constants) {\n  Blockly.zelos.PathObject.superClass_.constructor.call(this, root, style,\n      constants);\n\n  /**\n   * The renderer's constant provider.\n   * @type {!Blockly.zelos.ConstantProvider}\n   */\n  this.constants = constants;\n\n  /**\n   * The selected path of the block.\n   * @type {SVGElement}\n   * @private\n   */\n  this.svgPathSelected_ = null;\n\n  /**\n   * The outline paths on the block.\n   * @type {!Object.<string,!SVGElement>}\n   * @private\n   */\n  this.outlines_ = {};\n\n  /**\n   * A set used to determine which outlines were used during a draw pass.  The\n   * set is initialized with a reference to all the outlines in\n   * `this.outlines_`. Every time we use an outline during the draw pass, the\n   * reference is removed from this set.\n   * @type {Object.<string, number>}\n   * @private\n   */\n  this.remainingOutlines_ = null;\n\n  /**\n   * The type of block's output connection shape.  This is set when a block with\n   * an output connection is drawn.\n   * @package\n   */\n  this.outputShapeType = null;\n};\nBlockly.utils.object.inherits(Blockly.zelos.PathObject,\n    Blockly.blockRendering.PathObject);\n\n/**\n * @override\n */\nBlockly.zelos.PathObject.prototype.setPath = function(pathString) {\n  Blockly.zelos.PathObject.superClass_.setPath.call(this, pathString);\n  if (this.svgPathSelected_) {\n    this.svgPathSelected_.setAttribute('d', pathString);\n  }\n};\n\n/**\n * @override\n */\nBlockly.zelos.PathObject.prototype.applyColour = function(block) {\n  Blockly.zelos.PathObject.superClass_.applyColour.call(this, block);\n  // Set shadow stroke colour.\n  if (block.isShadow() && block.getParent()) {\n    this.svgPath.setAttribute('stroke', block.getParent().style.colourTertiary);\n  }\n\n  // Apply colour to outlines.\n  for (var i = 0, keys = Object.keys(this.outlines_),\n    key; (key = keys[i]); i++) {\n    this.outlines_[key].setAttribute('fill', this.style.colourTertiary);\n  }\n};\n\n/**\n * @override\n */\nBlockly.zelos.PathObject.prototype.flipRTL = function() {\n  Blockly.zelos.PathObject.superClass_.flipRTL.call(this);\n  // Mirror each input outline path.\n  for (var i = 0, keys = Object.keys(this.outlines_),\n    key; (key = keys[i]); i++) {\n    this.outlines_[key].setAttribute('transform', 'scale(-1 1)');\n  }\n};\n\n/**\n * @override\n */\nBlockly.zelos.PathObject.prototype.updateSelected = function(enable) {\n  this.setClass_('blocklySelected', enable);\n  if (enable) {\n    if (!this.svgPathSelected_) {\n      this.svgPathSelected_ =\n        /** @type {!SVGElement} */ (this.svgPath.cloneNode(true));\n      this.svgPathSelected_.setAttribute('fill', 'none');\n      this.svgPathSelected_.setAttribute('filter',\n          'url(#' + this.constants.selectedGlowFilterId + ')');\n      this.svgRoot.appendChild(this.svgPathSelected_);\n    }\n  } else {\n    if (this.svgPathSelected_) {\n      this.svgRoot.removeChild(this.svgPathSelected_);\n      this.svgPathSelected_ = null;\n    }\n  }\n};\n\n/**\n * @override\n */\nBlockly.zelos.PathObject.prototype.updateReplacementFade = function(\n    enable) {\n  this.setClass_('blocklyReplaceable', enable);\n  if (enable) {\n    this.svgPath.setAttribute('filter',\n        'url(#' + this.constants.replacementGlowFilterId + ')');\n  } else {\n    this.svgPath.removeAttribute('filter');\n  }\n};\n\n/**\n * @override\n */\nBlockly.zelos.PathObject.prototype.updateShapeForInputHighlight = function(\n    conn, enable) {\n  var name = conn.getParentInput().name;\n  var outlinePath = this.getOutlinePath_(name);\n  if (!outlinePath) {\n    return;\n  }\n  if (enable) {\n    outlinePath.setAttribute('filter',\n        'url(#' + this.constants.replacementGlowFilterId + ')');\n  } else {\n    outlinePath.removeAttribute('filter');\n  }\n};\n\n/**\n * Method that's called when the drawer is about to draw the block.\n * @package\n */\nBlockly.zelos.PathObject.prototype.beginDrawing = function() {\n  this.remainingOutlines_ = {};\n  for (var i = 0, keys = Object.keys(this.outlines_),\n    key; (key = keys[i]); i++) {\n    // The value set here isn't used anywhere, we are just using the\n    // object as a Set data structure.\n    this.remainingOutlines_[key] = 1;\n  }\n};\n\n/**\n * Method that's called when the drawer is done drawing.\n * @package\n */\nBlockly.zelos.PathObject.prototype.endDrawing = function() {\n  // Go through all remaining outlines that were not used this draw pass, and\n  // remove them.\n  if (this.remainingOutlines_) {\n    for (var i = 0, keys = Object.keys(this.remainingOutlines_),\n      key; (key = keys[i]); i++) {\n      this.removeOutlinePath_(key);\n    }\n  }\n  this.remainingOutlines_ = null;\n};\n\n/**\n * Set the path generated by the renderer for an outline path on the respective\n * outline path SVG element.\n * @param {string} name The input name.\n * @param {string} pathString The path.\n * @package\n */\nBlockly.zelos.PathObject.prototype.setOutlinePath = function(name, pathString) {\n  var outline = this.getOutlinePath_(name);\n  outline.setAttribute('d', pathString);\n  outline.setAttribute('fill', this.style.colourTertiary);\n};\n\n/**\n * Create's an outline path for the specified input.\n * @param {string} name The input name.\n * @return {!SVGElement} The SVG outline path.\n * @private\n */\nBlockly.zelos.PathObject.prototype.getOutlinePath_ = function(name) {\n  if (!this.outlines_[name]) {\n    this.outlines_[name] = Blockly.utils.dom.createSvgElement('path', {\n      'class': 'blocklyOutlinePath',\n      // IE doesn't like paths without the data definition, set empty default\n      'd': ''\n    },\n    this.svgRoot);\n  }\n  if (this.remainingOutlines_) {\n    delete this.remainingOutlines_[name];\n  }\n  return this.outlines_[name];\n};\n\n/**\n * Remove an outline path that is associated with the specified input.\n * @param {string} name The input name.\n * @private\n */\nBlockly.zelos.PathObject.prototype.removeOutlinePath_ = function(name) {\n  this.outlines_[name].parentNode.removeChild(this.outlines_[name]);\n  delete this.outlines_[name];\n};\n"],"file":"path_object.min.js"}