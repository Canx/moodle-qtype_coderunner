{"version":3,"sources":["../../../../../src/blockly/core/renderers/geras/info.js"],"names":["goog","provide","require","Blockly","geras","RenderInfo","renderer","block","superClass_","constructor","call","utils","object","inherits","blockRendering","prototype","getRenderer","renderer_","populateBottomRow_","followsStatement","block_","inputList","length","type","NEXT_STATEMENT","bottomRow","minHeight","constants_","MEDIUM_PADDING","DARK_PATH_OFFSET","addInput_","input","activeRow","isInline","INPUT_VALUE","elements","push","InlineInput","hasInlineInput","StatementInput","hasStatement","ExternalValueInput","hasExternalInput","DUMMY_INPUT","Math","max","DUMMY_INPUT_MIN_HEIGHT","hasDummyInput","align","addElemSpacing_","hasExternalInputs","i","row","rows","oldElems","startsWithElemSpacer","InRowSpacer","getInRowSpacing_","e","spacing","endsWithElemSpacer","TAB_WIDTH","prev","next","Types","isField","isEditable","isInlineInput","MEDIUM_LARGE_PADDING","isStatementInput","STATEMENT_INPUT_PADDING_LEFT","LARGE_PADDING","isInput","isIcon","isHat","NO_PADDING","isPreviousOrNextConnection","isLeftRoundedCorner","MIN_BLOCK_WIDTH","isJaggedEdge","isExternalInput","SMALL_PADDING","isLeftSquareCorner","isPreviousConnection","notchOffset","isNextConnection","offset","RTL","CORNER_RADIUS","getSpacerRowHeight_","isTopRow","isBottomRow","EMPTY_BLOCK_SPACER_HEIGHT","BETWEEN_STATEMENT_PADDING_Y","getElemCenterline_","elem","isSpacer","yPos","height","baseline","descenderHeight","capline","result","TALL_INPUT_FIELD_OFFSET_Y","alignRowElements_","nextRightEdge","prevInput","isInputRow","alignStatementRow_","width","prevRightEdge","getDesiredRowWidth_","currentWidth","desiredWidth","missingSpace","addAlignmentPadding_","statementEdge","MAX_BOTTOM_WIDTH","startX","finalize_","widestRowWithConnectedBlocks","yCursor","xPos","widthWithConnectedBlocks","heightWithoutHat","topRow","ascenderHeight","MIN_BLOCK_HEIGHT","diff","recordElemPositions_","outputConnection","nextConnection","isConnected","targetBlock","getHeightWidth","widthWithChildren","startY"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Old (compatibility) renderer.\n * Geras: spirit of old age.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.geras');\ngoog.provide('Blockly.geras.RenderInfo');\n\ngoog.require('Blockly.blockRendering.BottomRow');\ngoog.require('Blockly.blockRendering.InputRow');\ngoog.require('Blockly.blockRendering.Measurable');\ngoog.require('Blockly.blockRendering.NextConnection');\ngoog.require('Blockly.blockRendering.OutputConnection');\ngoog.require('Blockly.blockRendering.PreviousConnection');\ngoog.require('Blockly.blockRendering.RenderInfo');\ngoog.require('Blockly.blockRendering.BottomRow');\ngoog.require('Blockly.blockRendering.InputRow');\ngoog.require('Blockly.blockRendering.Measurable');\ngoog.require('Blockly.blockRendering.NextConnection');\ngoog.require('Blockly.blockRendering.OutputConnection');\ngoog.require('Blockly.blockRendering.PreviousConnection');\ngoog.require('Blockly.blockRendering.Types');\ngoog.require('Blockly.blockRendering.ExternalValueInput');\ngoog.require('Blockly.geras.InlineInput');\ngoog.require('Blockly.geras.StatementInput');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * An object containing all sizing information needed to draw this block.\n *\n * This measure pass does not propagate changes to the block (although fields\n * may choose to rerender when getSize() is called).  However, calling it\n * repeatedly may be expensive.\n *\n * @param {!Blockly.geras.Renderer} renderer The renderer in use.\n * @param {!Blockly.BlockSvg} block The block to measure.\n * @constructor\n * @package\n * @extends {Blockly.blockRendering.RenderInfo}\n */\nBlockly.geras.RenderInfo = function(renderer, block) {\n  Blockly.geras.RenderInfo.superClass_.constructor.call(this, renderer, block);\n};\nBlockly.utils.object.inherits(Blockly.geras.RenderInfo,\n    Blockly.blockRendering.RenderInfo);\n\n/**\n * Get the block renderer in use.\n * @return {!Blockly.geras.Renderer} The block renderer in use.\n * @package\n */\nBlockly.geras.RenderInfo.prototype.getRenderer = function() {\n  return /** @type {!Blockly.geras.Renderer} */ (this.renderer_);\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.populateBottomRow_ = function() {\n  Blockly.geras.RenderInfo.superClass_.populateBottomRow_.call(this);\n\n  var followsStatement =\n      this.block_.inputList.length &&\n      this.block_.inputList[this.block_.inputList.length - 1]\n          .type == Blockly.NEXT_STATEMENT;\n\n  // The minimum height of the bottom row is smaller in Geras than in other\n  // renderers, because the dark path adds a pixel.\n  // If one of the row's elements has a greater height this will be overwritten\n  // in the compute pass.\n  if (!followsStatement) {\n    this.bottomRow.minHeight =\n        this.constants_.MEDIUM_PADDING - this.constants_.DARK_PATH_OFFSET;\n  }\n\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.addInput_ = function(input, activeRow) {\n  // Non-dummy inputs have visual representations onscreen.\n  if (this.isInline && input.type == Blockly.INPUT_VALUE) {\n    activeRow.elements.push(\n        new Blockly.geras.InlineInput(this.constants_, input));\n    activeRow.hasInlineInput = true;\n  } else if (input.type == Blockly.NEXT_STATEMENT) {\n    activeRow.elements.push(\n        new Blockly.geras.StatementInput(this.constants_, input));\n    activeRow.hasStatement = true;\n  } else if (input.type == Blockly.INPUT_VALUE) {\n    activeRow.elements.push(\n        new Blockly.blockRendering.ExternalValueInput(this.constants_, input));\n    activeRow.hasExternalInput = true;\n  } else if (input.type == Blockly.DUMMY_INPUT) {\n    // Dummy inputs have no visual representation, but the information is still\n    // important.\n    activeRow.minHeight = Math.max(activeRow.minHeight,\n        this.constants_.DUMMY_INPUT_MIN_HEIGHT);\n    activeRow.hasDummyInput = true;\n  }\n  // Ignore row alignment if inline.\n  if (!this.isInline && activeRow.align == null) {\n    activeRow.align = input.align;\n  }\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.addElemSpacing_ = function() {\n  var hasExternalInputs = false;\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    if (row.hasExternalInput) {\n      hasExternalInputs = true;\n    }\n  }\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    var oldElems = row.elements;\n    row.elements = [];\n    // No spacing needed before the corner on the top row or the bottom row.\n    if (row.startsWithElemSpacer()) {\n      // There's a spacer before the first element in the row.\n      row.elements.push(new Blockly.blockRendering.InRowSpacer(\n          this.constants_, this.getInRowSpacing_(null, oldElems[0])));\n    }\n    if (!oldElems.length) {\n      continue;\n    }\n    for (var e = 0; e < oldElems.length - 1; e++) {\n      row.elements.push(oldElems[e]);\n      var spacing = this.getInRowSpacing_(oldElems[e], oldElems[e + 1]);\n      row.elements.push(\n          new Blockly.blockRendering.InRowSpacer(this.constants_, spacing));\n    }\n    row.elements.push(oldElems[oldElems.length - 1]);\n    if (row.endsWithElemSpacer()) {\n      var spacing = this.getInRowSpacing_(oldElems[oldElems.length - 1], null);\n      if (hasExternalInputs && row.hasDummyInput) {\n        spacing += this.constants_.TAB_WIDTH;\n      }\n      // There's a spacer after the last element in the row.\n      row.elements.push(new Blockly.blockRendering.InRowSpacer(\n          this.constants_, spacing));\n    }\n  }\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.getInRowSpacing_ = function(prev, next) {\n  if (!prev) {\n    // Between an editable field and the beginning of the row.\n    if (next && Blockly.blockRendering.Types.isField(next) &&\n        (/** @type Blockly.blockRendering.Field */ (next)).isEditable) {\n      return this.constants_.MEDIUM_PADDING;\n    }\n    // Inline input at the beginning of the row.\n    if (next && Blockly.blockRendering.Types.isInlineInput(next)) {\n      return this.constants_.MEDIUM_LARGE_PADDING;\n    }\n    if (next && Blockly.blockRendering.Types.isStatementInput(next)) {\n      return this.constants_.STATEMENT_INPUT_PADDING_LEFT;\n    }\n    // Anything else at the beginning of the row.\n    return this.constants_.LARGE_PADDING;\n  }\n\n  // Spacing between a non-input and the end of the row or a statement input.\n  if (!Blockly.blockRendering.Types.isInput(prev) && (!next ||\n      Blockly.blockRendering.Types.isStatementInput(next))) {\n    // Between an editable field and the end of the row.\n    if (Blockly.blockRendering.Types.isField(prev) &&\n        (/** @type Blockly.blockRendering.Field */ (prev)).isEditable) {\n      return this.constants_.MEDIUM_PADDING;\n    }\n    // Padding at the end of an icon-only row to make the block shape clearer.\n    if (Blockly.blockRendering.Types.isIcon(prev)) {\n      return (this.constants_.LARGE_PADDING * 2) + 1;\n    }\n    if (Blockly.blockRendering.Types.isHat(prev)) {\n      return this.constants_.NO_PADDING;\n    }\n    // Establish a minimum width for a block with a previous or next connection.\n    if (Blockly.blockRendering.Types.isPreviousOrNextConnection(prev)) {\n      return this.constants_.LARGE_PADDING;\n    }\n    // Between rounded corner and the end of the row.\n    if (Blockly.blockRendering.Types.isLeftRoundedCorner(prev)) {\n      return this.constants_.MIN_BLOCK_WIDTH;\n    }\n    // Between a jagged edge and the end of the row.\n    if (Blockly.blockRendering.Types.isJaggedEdge(prev)) {\n      return this.constants_.NO_PADDING;\n    }\n    // Between noneditable fields and icons and the end of the row.\n    return this.constants_.LARGE_PADDING;\n  }\n\n  // Between inputs and the end of the row.\n  if (Blockly.blockRendering.Types.isInput(prev) && !next) {\n    if (Blockly.blockRendering.Types.isExternalInput(prev)) {\n      return this.constants_.NO_PADDING;\n    } else if (Blockly.blockRendering.Types.isInlineInput(prev)) {\n      return this.constants_.LARGE_PADDING;\n    } else if (Blockly.blockRendering.Types.isStatementInput(prev)) {\n      return this.constants_.NO_PADDING;\n    }\n  }\n\n  // Spacing between a non-input and an input.\n  if (!Blockly.blockRendering.Types.isInput(prev) &&\n      next && Blockly.blockRendering.Types.isInput(next)) {\n    // Between an editable field and an input.\n    if (Blockly.blockRendering.Types.isField(prev) &&\n        (/** @type Blockly.blockRendering.Field */ (prev)).isEditable) {\n      if (Blockly.blockRendering.Types.isInlineInput(next)) {\n        return this.constants_.SMALL_PADDING;\n      } else if (Blockly.blockRendering.Types.isExternalInput(next)) {\n        return this.constants_.SMALL_PADDING;\n      }\n    } else {\n      if (Blockly.blockRendering.Types.isInlineInput(next)) {\n        return this.constants_.MEDIUM_LARGE_PADDING;\n      } else if (Blockly.blockRendering.Types.isExternalInput(next)) {\n        return this.constants_.MEDIUM_LARGE_PADDING;\n      } else if (Blockly.blockRendering.Types.isStatementInput(next)) {\n        return this.constants_.LARGE_PADDING;\n      }\n    }\n    return this.constants_.LARGE_PADDING - 1;\n  }\n\n  // Spacing between an icon and an icon or field.\n  if (Blockly.blockRendering.Types.isIcon(prev) &&\n      next && !Blockly.blockRendering.Types.isInput(next)) {\n    return this.constants_.LARGE_PADDING;\n  }\n\n  // Spacing between an inline input and a field.\n  if (Blockly.blockRendering.Types.isInlineInput(prev) &&\n      next && Blockly.blockRendering.Types.isField(next)) {\n    // Editable field after inline input.\n    if ((/** @type Blockly.blockRendering.Field */ (next)).isEditable) {\n      return this.constants_.MEDIUM_PADDING;\n    } else {\n      // Noneditable field after inline input.\n      return this.constants_.LARGE_PADDING;\n    }\n  }\n\n  if (Blockly.blockRendering.Types.isLeftSquareCorner(prev) && next) {\n    // Spacing between a hat and a corner\n    if (Blockly.blockRendering.Types.isHat(next)) {\n      return this.constants_.NO_PADDING;\n    }\n    // Spacing between a square corner and a previous or next connection\n    if (Blockly.blockRendering.Types.isPreviousConnection(next)) {\n      return next.notchOffset;\n    } else if (Blockly.blockRendering.Types.isNextConnection(next)) {\n      // Next connections are shifted slightly to the left (in both LTR and RTL)\n      // to make the dark path under the previous connection show through.\n      var offset = (this.RTL ? 1 : -1) *\n          this.constants_.DARK_PATH_OFFSET / 2;\n      return next.notchOffset + offset;\n    }\n  }\n\n  // Spacing between a rounded corner and a previous or next connection.\n  if (Blockly.blockRendering.Types.isLeftRoundedCorner(prev) && next) {\n    if (Blockly.blockRendering.Types.isPreviousConnection(next)) {\n      return next.notchOffset - this.constants_.CORNER_RADIUS;\n    } else if (Blockly.blockRendering.Types.isNextConnection(next)) {\n      // Next connections are shifted slightly to the left (in both LTR and RTL)\n      // to make the dark path under the previous connection show through.\n      var offset = (this.RTL ? 1 : -1) *\n          this.constants_.DARK_PATH_OFFSET / 2;\n      return next.notchOffset - this.constants_.CORNER_RADIUS + offset;\n    }\n  }\n\n  // Spacing between two fields of the same editability.\n  if (Blockly.blockRendering.Types.isField(prev) &&\n      next && Blockly.blockRendering.Types.isField(next) &&\n      ((/** @type Blockly.blockRendering.Field */ (prev)).isEditable ==\n          (/** @type Blockly.blockRendering.Field */ (next)).isEditable)) {\n    return this.constants_.LARGE_PADDING;\n  }\n\n  // Spacing between anything and a jagged edge.\n  if (next && Blockly.blockRendering.Types.isJaggedEdge(next)) {\n    return this.constants_.LARGE_PADDING;\n  }\n\n  return this.constants_.MEDIUM_PADDING;\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.getSpacerRowHeight_ = function(prev, next) {\n  // If we have an empty block add a spacer to increase the height.\n  if (Blockly.blockRendering.Types.isTopRow(prev) &&\n      Blockly.blockRendering.Types.isBottomRow(next)) {\n    return this.constants_.EMPTY_BLOCK_SPACER_HEIGHT;\n  }\n  // Top and bottom rows act as a spacer so we don't need any extra padding.\n  if (Blockly.blockRendering.Types.isTopRow(prev) ||\n      Blockly.blockRendering.Types.isBottomRow(next)) {\n    return this.constants_.NO_PADDING;\n  }\n  if (prev.hasExternalInput && next.hasExternalInput) {\n    return this.constants_.LARGE_PADDING;\n  }\n  if (!prev.hasStatement && next.hasStatement) {\n    return this.constants_.BETWEEN_STATEMENT_PADDING_Y;\n  }\n  if (prev.hasStatement && next.hasStatement) {\n    return this.constants_.LARGE_PADDING;\n  }\n  if (!prev.hasStatement && next.hasDummyInput) {\n    return this.constants_.LARGE_PADDING;\n  }\n  if (prev.hasDummyInput) {\n    return this.constants_.LARGE_PADDING;\n  }\n  return this.constants_.MEDIUM_PADDING;\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.getElemCenterline_ = function(row, elem) {\n  if (Blockly.blockRendering.Types.isSpacer(elem)) {\n    return row.yPos + elem.height / 2;\n  }\n  if (Blockly.blockRendering.Types.isBottomRow(row)) {\n    var baseline = row.yPos + row.height - row.descenderHeight;\n    if (Blockly.blockRendering.Types.isNextConnection(elem)) {\n      return baseline + elem.height / 2;\n    }\n    return baseline - elem.height / 2;\n  }\n  if (Blockly.blockRendering.Types.isTopRow(row)) {\n    if (Blockly.blockRendering.Types.isHat(elem)) {\n      return row.capline - elem.height / 2;\n    }\n    return row.capline + elem.height / 2;\n  }\n\n  var result = row.yPos;\n  if (Blockly.blockRendering.Types.isField(elem) ||\n      Blockly.blockRendering.Types.isIcon(elem)) {\n    result += (elem.height / 2);\n    if ((row.hasInlineInput || row.hasStatement) &&\n        elem.height + this.constants_.TALL_INPUT_FIELD_OFFSET_Y <= row.height) {\n      result += this.constants_.TALL_INPUT_FIELD_OFFSET_Y;\n    }\n  } else if (Blockly.blockRendering.Types.isInlineInput(elem)) {\n    result += elem.height / 2;\n  } else {\n    result += (row.height / 2);\n  }\n  return result;\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.alignRowElements_ = function() {\n  if (!this.isInline) {\n    Blockly.geras.RenderInfo.superClass_.alignRowElements_.call(this);\n    return;\n  }\n\n  // Walk backgrounds through rows on the block, keeping track of the right\n  // input edge.\n  var nextRightEdge = 0;\n  var prevInput = null;\n  for (var i = this.rows.length - 1, row; (row = this.rows[i]); i--) {\n    row.nextRightEdge = nextRightEdge;\n    if (Blockly.blockRendering.Types.isInputRow(row)) {\n      if (row.hasStatement) {\n        this.alignStatementRow_(\n            /** @type {!Blockly.blockRendering.InputRow} */ (row));\n      }\n      if (prevInput && prevInput.hasStatement && row.width < prevInput.width) {\n        row.nextRightEdge = prevInput.width;\n      } else {\n        nextRightEdge = row.width;\n      }\n      prevInput = row;\n    }\n  }\n  // Walk down each row from the top, comparing the prev and next right input\n  // edges and setting the desired width to the max of the two.\n  var prevRightEdge = 0;\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    if (row.hasStatement) {\n      prevRightEdge = this.getDesiredRowWidth_(row);\n    } else if (Blockly.blockRendering.Types.isSpacer(row)) {\n      // Set the spacer row to the max of the prev or next input width.\n      row.width = Math.max(prevRightEdge, row.nextRightEdge);\n    } else {\n      var currentWidth = row.width;\n      var desiredWidth = Math.max(prevRightEdge, row.nextRightEdge);\n      var missingSpace = desiredWidth - currentWidth;\n      if (missingSpace > 0) {\n        this.addAlignmentPadding_(row, missingSpace);\n      }\n      prevRightEdge = row.width;\n    }\n  }\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.getDesiredRowWidth_ = function(\n    row) {\n  // Limit the width of a statement row when a block is inline.\n  if (this.isInline && row.hasStatement) {\n    return this.statementEdge + this.constants_.MAX_BOTTOM_WIDTH + this.startX;\n  }\n  return Blockly.geras.RenderInfo.superClass_.getDesiredRowWidth_.call(this,\n      row);\n};\n\n/**\n * @override\n */\nBlockly.geras.RenderInfo.prototype.finalize_ = function() {\n  // Performance note: this could be combined with the draw pass, if the time\n  // that this takes is excessive.  But it shouldn't be, because it only\n  // accesses and sets properties that already exist on the objects.\n  var widestRowWithConnectedBlocks = 0;\n  var yCursor = 0;\n  for (var i = 0, row; (row = this.rows[i]); i++) {\n    row.yPos = yCursor;\n    row.xPos = this.startX;\n    yCursor += row.height;\n\n    widestRowWithConnectedBlocks =\n        Math.max(widestRowWithConnectedBlocks, row.widthWithConnectedBlocks);\n    // Add padding to the bottom row if block height is less than minimum\n    var heightWithoutHat = yCursor - this.topRow.ascenderHeight;\n    if (row == this.bottomRow &&\n        heightWithoutHat < this.constants_.MIN_BLOCK_HEIGHT) {\n      // But the hat height shouldn't be part of this.\n      var diff = this.constants_.MIN_BLOCK_HEIGHT - heightWithoutHat;\n      this.bottomRow.height += diff;\n      yCursor += diff;\n    }\n    this.recordElemPositions_(row);\n  }\n  if (this.outputConnection && this.block_.nextConnection &&\n      this.block_.nextConnection.isConnected()) {\n    // Include width of connected block in value to stack width measurement.\n    widestRowWithConnectedBlocks =\n        Math.max(widestRowWithConnectedBlocks,\n            this.block_.nextConnection.targetBlock().getHeightWidth().width -\n            this.constants_.DARK_PATH_OFFSET);\n  }\n\n  this.bottomRow.baseline = yCursor - this.bottomRow.descenderHeight;\n\n  // The dark (lowlight) adds to the size of the block in both x and y.\n  this.widthWithChildren = widestRowWithConnectedBlocks +\n      this.startX + this.constants_.DARK_PATH_OFFSET;\n  this.width += this.constants_.DARK_PATH_OFFSET;\n  this.height = yCursor + this.constants_.DARK_PATH_OFFSET;\n  this.startY = this.topRow.capline;\n};\n"],"file":"info.min.js"}