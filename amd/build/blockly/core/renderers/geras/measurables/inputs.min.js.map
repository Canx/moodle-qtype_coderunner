{"version":3,"sources":["../../../../../../src/blockly/core/renderers/geras/measurables/inputs.js"],"names":["goog","provide","require","Blockly","geras","InlineInput","constants","input","superClass_","constructor","call","connectedBlock","width","constants_","DARK_PATH_OFFSET","height","utils","object","inherits","blockRendering","StatementInput"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,2BAAb,EACAD,IAAI,CAACC,OAAL,CAAa,8BAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,sBAAb,EAcAC,OAAO,CAACC,KAAR,CAAcC,WAAd,CAA4B,SAASC,CAAT,CAAoBC,CAApB,CAA2B,CACrDJ,OAAO,CAACC,KAAR,CAAcC,WAAd,CAA0BG,WAA1B,CAAsCC,WAAtC,CAAkDC,IAAlD,CACI,IADJ,CACUJ,CADV,CACqBC,CADrB,EAGA,GAAI,KAAKI,cAAT,CAAyB,CAGvB,KAAKC,KAAL,EAAc,KAAKC,UAAL,CAAgBC,gBAA9B,CACA,KAAKC,MAAL,EAAe,KAAKF,UAAL,CAAgBC,gBAChC,CACF,CAVD,CAWAX,OAAO,CAACa,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8Bf,OAAO,CAACC,KAAR,CAAcC,WAA5C,CACIF,OAAO,CAACgB,cAAR,CAAuBd,WAD3B,EAcAF,OAAO,CAACC,KAAR,CAAcgB,cAAd,CAA+B,SAASd,CAAT,CAAoBC,CAApB,CAA2B,CACxDJ,OAAO,CAACC,KAAR,CAAcgB,cAAd,CAA6BZ,WAA7B,CAAyCC,WAAzC,CAAqDC,IAArD,CACI,IADJ,CACUJ,CADV,CACqBC,CADrB,EAGA,GAAI,KAAKI,cAAT,CAAyB,CAGvB,KAAKI,MAAL,EAAe,KAAKF,UAAL,CAAgBC,gBAChC,CACF,CATD,CAUAX,OAAO,CAACa,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8Bf,OAAO,CAACC,KAAR,CAAcgB,cAA5C,CACIjB,OAAO,CAACgB,cAAR,CAAuBC,cAD3B","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Objects representing inputs with connections on a rendered\n * block.\n * @author kozbial@google.com (Monica Kozbial)\n */\n'use strict';\n\ngoog.provide('Blockly.geras.InlineInput');\ngoog.provide('Blockly.geras.StatementInput');\n\ngoog.require('Blockly.utils.object');\n\n\n/**\n * An object containing information about the space an inline input takes up\n * during rendering\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.Input} input The inline input to measure and store\n *     information for.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.InlineInput}\n */\nBlockly.geras.InlineInput = function(constants, input) {\n  Blockly.geras.InlineInput.superClass_.constructor.call(\n      this, constants, input);\n\n  if (this.connectedBlock) {\n    // We allow the dark path to show on the parent block so that the child\n    // block looks embossed.  This takes up an extra pixel in both x and y.\n    this.width += this.constants_.DARK_PATH_OFFSET;\n    this.height += this.constants_.DARK_PATH_OFFSET;\n  }\n};\nBlockly.utils.object.inherits(Blockly.geras.InlineInput,\n    Blockly.blockRendering.InlineInput);\n\n/**\n * An object containing information about the space a statement input takes up\n * during rendering\n * @param {!Blockly.blockRendering.ConstantProvider} constants The rendering\n *   constants provider.\n * @param {!Blockly.Input} input The statement input to measure and store\n *     information for.\n * @package\n * @constructor\n * @extends {Blockly.blockRendering.StatementInput}\n */\nBlockly.geras.StatementInput = function(constants, input) {\n  Blockly.geras.StatementInput.superClass_.constructor.call(\n      this, constants, input);\n\n  if (this.connectedBlock) {\n    // We allow the dark path to show on the parent block so that the child\n    // block looks embossed.  This takes up an extra pixel in both x and y.\n    this.height += this.constants_.DARK_PATH_OFFSET;\n  }\n};\nBlockly.utils.object.inherits(Blockly.geras.StatementInput,\n    Blockly.blockRendering.StatementInput);\n"],"file":"inputs.min.js"}