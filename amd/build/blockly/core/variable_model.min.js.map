{"version":3,"sources":["../../../src/blockly/core/variable_model.js"],"names":["goog","provide","require","Blockly","VariableModel","workspace","name","opt_type","opt_id","type","id_","utils","genUid","Events","fire","VarCreate","prototype","getId","compareByName","var1","var2","name1","toLowerCase","name2"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,uBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,0BAAb,EACAF,IAAI,CAACE,OAAL,CAAa,eAAb,EAiBAC,OAAO,CAACC,aAAR,CAAwB,SAASC,CAAT,CAAoBC,CAApB,CAA0BC,CAA1B,CAAoCC,CAApC,CAA4C,CAKlE,KAAKH,SAAL,CAAiBA,CAAjB,CAQA,KAAKC,IAAL,CAAYA,CAAZ,CASA,KAAKG,IAAL,CAAYF,CAAQ,EAAI,EAAxB,CASA,KAAKG,GAAL,CAAWF,CAAM,EAAIL,OAAO,CAACQ,KAAR,CAAcC,MAAd,EAArB,CAEAT,OAAO,CAACU,MAAR,CAAeC,IAAf,CAAoB,GAAIX,CAAAA,OAAO,CAACU,MAAR,CAAeE,SAAnB,CAA6B,IAA7B,CAApB,CACD,CAlCD,CAuCAZ,OAAO,CAACC,aAAR,CAAsBY,SAAtB,CAAgCC,KAAhC,CAAwC,UAAW,CACjD,MAAO,MAAKP,GACb,CAFD,CAYAP,OAAO,CAACC,aAAR,CAAsBc,aAAtB,CAAsC,SAASC,CAAT,CAAeC,CAAf,CAAqB,IACrDC,CAAAA,CAAK,CAAGF,CAAI,CAACb,IAAL,CAAUgB,WAAV,EAD6C,CAErDC,CAAK,CAAGH,CAAI,CAACd,IAAL,CAAUgB,WAAV,EAF6C,CAGzD,GAAID,CAAK,CAAGE,CAAZ,CAAmB,CACjB,MAAO,CAAC,CACT,CAFD,IAEO,IAAIF,CAAK,EAAIE,CAAb,CAAoB,CACzB,MAAO,EACR,CAFM,IAEA,CACL,MAAO,EACR,CACF,CAVD","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Components for the variable model.\n * @author marisaleung@google.com (Marisa Leung)\n */\n'use strict';\n\ngoog.provide('Blockly.VariableModel');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.VarCreate');\ngoog.require('Blockly.utils');\n\n\n/**\n * Class for a variable model.\n * Holds information for the variable including name, ID, and type.\n * @param {!Blockly.Workspace} workspace The variable's workspace.\n * @param {string} name The name of the variable. This must be unique across\n *     variables and procedures.\n * @param {string=} opt_type The type of the variable like 'int' or 'string'.\n *     Does not need to be unique. Field_variable can filter variables based on\n *     their type. This will default to '' which is a specific type.\n * @param {string=} opt_id The unique ID of the variable. This will default to\n *     a UUID.\n * @see {Blockly.FieldVariable}\n * @constructor\n */\nBlockly.VariableModel = function(workspace, name, opt_type, opt_id) {\n  /**\n   * The workspace the variable is in.\n   * @type {!Blockly.Workspace}\n   */\n  this.workspace = workspace;\n\n  /**\n   * The name of the variable, typically defined by the user. It must be\n   * unique across all names used for procedures and variables. It may be\n   * changed by the user.\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * The type of the variable, such as 'int' or 'sound_effect'. This may be\n   * used to build a list of variables of a specific type. By default this is\n   * the empty string '', which is a specific type.\n   * @see {Blockly.FieldVariable}\n   * @type {string}\n   */\n  this.type = opt_type || '';\n\n  /**\n   * A unique id for the variable. This should be defined at creation and\n   * not change, even if the name changes. In most cases this should be a\n   * UUID.\n   * @type {string}\n   * @private\n   */\n  this.id_ = opt_id || Blockly.utils.genUid();\n\n  Blockly.Events.fire(new Blockly.Events.VarCreate(this));\n};\n\n/**\n * @return {string} The ID for the variable.\n */\nBlockly.VariableModel.prototype.getId = function() {\n  return this.id_;\n};\n\n/**\n * A custom compare function for the VariableModel objects.\n * @param {Blockly.VariableModel} var1 First variable to compare.\n * @param {Blockly.VariableModel} var2 Second variable to compare.\n * @return {number} -1 if name of var1 is less than name of var2, 0 if equal,\n *     and 1 if greater.\n * @package\n */\nBlockly.VariableModel.compareByName = function(var1, var2) {\n  var name1 = var1.name.toLowerCase();\n  var name2 = var2.name.toLowerCase();\n  if (name1 < name2) {\n    return -1;\n  } else if (name1 == name2) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n"],"file":"variable_model.min.js"}