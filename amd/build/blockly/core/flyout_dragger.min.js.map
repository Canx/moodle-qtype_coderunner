{"version":3,"sources":["../../../src/blockly/core/flyout_dragger.js"],"names":["goog","provide","require","Blockly","FlyoutDragger","flyout","superClass_","constructor","call","getWorkspace","scrollbar_","scrollbar","horizontalLayout_","horizontalLayout","utils","object","inherits","WorkspaceDragger","prototype","drag","currentDragDeltaXY","newXY","Coordinate","sum","startScrollXY_","set","x","y"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,uBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,sBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,0BAAb,EAaAC,OAAO,CAACC,aAAR,CAAwB,SAASC,CAAT,CAAiB,CACvCF,OAAO,CAACC,aAAR,CAAsBE,WAAtB,CAAkCC,WAAlC,CAA8CC,IAA9C,CAAmD,IAAnD,CACIH,CAAM,CAACI,YAAP,EADJ,EAUA,KAAKC,UAAL,CAAkBL,CAAM,CAACM,SAAzB,CAQA,KAAKC,iBAAL,CAAyBP,CAAM,CAACQ,gBACjC,CApBD,CAqBAV,OAAO,CAACW,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8Bb,OAAO,CAACC,aAAtC,CAAqDD,OAAO,CAACc,gBAA7D,EAQAd,OAAO,CAACC,aAAR,CAAsBc,SAAtB,CAAgCC,IAAhC,CAAuC,SAASC,CAAT,CAA6B,CAElE,GAAIC,CAAAA,CAAK,CAAGlB,OAAO,CAACW,KAAR,CAAcQ,UAAd,CAAyBC,GAAzB,CAA6B,KAAKC,cAAlC,CACRJ,CADQ,CAAZ,CASA,GAAI,KAAKR,iBAAT,CAA4B,CAC1B,KAAKF,UAAL,CAAgBe,GAAhB,CAAoB,CAACJ,CAAK,CAACK,CAA3B,CACD,CAFD,IAEO,CACL,KAAKhB,UAAL,CAAgBe,GAAhB,CAAoB,CAACJ,CAAK,CAACM,CAA3B,CACD,CACF,CAhBD","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Methods for dragging a flyout visually.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.FlyoutDragger');\n\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.WorkspaceDragger');\n\n\n/**\n * Class for a flyout dragger.  It moves a flyout workspace around when it is\n * being dragged by a mouse or touch.\n * Note that the workspace itself manages whether or not it has a drag surface\n * and how to do translations based on that.  This simply passes the right\n * commands based on events.\n * @param {!Blockly.Flyout} flyout The flyout to drag.\n * @extends {Blockly.WorkspaceDragger}\n * @constructor\n */\nBlockly.FlyoutDragger = function(flyout) {\n  Blockly.FlyoutDragger.superClass_.constructor.call(this,\n      flyout.getWorkspace());\n\n  /**\n   * The scrollbar to update to move the flyout.\n   * Unlike the main workspace, the flyout has only one scrollbar, in either the\n   * horizontal or the vertical direction.\n   * @type {!Blockly.Scrollbar}\n   * @private\n   */\n  this.scrollbar_ = flyout.scrollbar;\n\n  /**\n   * Whether the flyout scrolls horizontally.  If false, the flyout scrolls\n   * vertically.\n   * @type {boolean}\n   * @private\n   */\n  this.horizontalLayout_ = flyout.horizontalLayout;\n};\nBlockly.utils.object.inherits(Blockly.FlyoutDragger, Blockly.WorkspaceDragger);\n\n/**\n * Move the flyout based on the most recent mouse movements.\n * @param {!Blockly.utils.Coordinate} currentDragDeltaXY How far the pointer has\n *     moved from the position at the start of the drag, in pixel coordinates.\n * @package\n */\nBlockly.FlyoutDragger.prototype.drag = function(currentDragDeltaXY) {\n  // startScrollXY_ is assigned by the superclass.\n  var newXY = Blockly.utils.Coordinate.sum(this.startScrollXY_,\n      currentDragDeltaXY);\n\n  // We can't call workspace.scroll because the flyout's workspace doesn't own\n  // it's own scrollbars. This is because (as of 2.20190722.1) the\n  // workspace's scrollbar property must be a scrollbar pair, rather than a\n  // single scrollbar.\n  // Instead we'll just expect setting the scrollbar to update the scroll of\n  // the workspace as well.\n  if (this.horizontalLayout_) {\n    this.scrollbar_.set(-newXY.x);\n  } else {\n    this.scrollbar_.set(-newXY.y);\n  }\n};\n"],"file":"flyout_dragger.min.js"}