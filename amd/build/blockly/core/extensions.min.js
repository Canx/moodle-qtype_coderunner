'use strict';function _typeof(a){"@babel/helpers - typeof";if("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator){_typeof=function(a){return typeof a}}else{_typeof=function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a}}return _typeof(a)}goog.provide("Blockly.Extensions");goog.require("Blockly.utils");Blockly.Extensions.ALL_={};Blockly.Extensions.register=function(a,b){if("string"!=typeof a||""==a.trim()){throw Error("Error: Invalid extension name \""+a+"\"")}if(Blockly.Extensions.ALL_[a]){throw Error("Error: Extension \""+a+"\" is already registered.")}if("function"!=typeof b){throw Error("Error: Extension \""+a+"\" must be a function")}Blockly.Extensions.ALL_[a]=b};Blockly.Extensions.registerMixin=function(a,b){if(!b||"object"!=_typeof(b)){throw Error("Error: Mixin \""+a+"\" must be a object")}Blockly.Extensions.register(a,function(){this.mixin(b)})};Blockly.Extensions.registerMutator=function(a,b,c,d){var e="Error when registering mutator \""+a+"\": ";Blockly.Extensions.checkHasFunction_(e,b.domToMutation,"domToMutation");Blockly.Extensions.checkHasFunction_(e,b.mutationToDom,"mutationToDom");var f=Blockly.Extensions.checkMutatorDialog_(b,e);if(c&&"function"!=typeof c){throw Error("Extension \""+a+"\" is not a function")}Blockly.Extensions.register(a,function(){if(f){if(!Blockly.Mutator){throw Error(e+"Missing require for Blockly.Mutator")}this.setMutator(new Blockly.Mutator(d||[]))}this.mixin(b);if(c){c.apply(this)}})};Blockly.Extensions.unregister=function(a){if(Blockly.Extensions.ALL_[a]){delete Blockly.Extensions.ALL_[a]}else{console.warn("No extension mapping for name \""+a+"\" found to unregister")}};Blockly.Extensions.apply=function(a,b,c){var d=Blockly.Extensions.ALL_[a];if("function"!=typeof d){throw Error("Error: Extension \""+a+"\" not found.")}if(c){Blockly.Extensions.checkNoMutatorProperties_(a,b)}else{var e=Blockly.Extensions.getMutatorProperties_(b)}d.apply(b);if(c){Blockly.Extensions.checkBlockHasMutatorProperties_("Error after applying mutator \""+a+"\": ",b)}else{if(!Blockly.Extensions.mutatorPropertiesMatch_(e,b)){throw Error("Error when applying extension \""+a+"\": mutation properties changed when applying a non-mutator extension.")}}};Blockly.Extensions.checkHasFunction_=function(a,b,c){if(!b){throw Error(a+"missing required property \""+c+"\"")}else if("function"!=typeof b){throw Error(a+"\" required property \""+c+"\" must be a function")}};Blockly.Extensions.checkNoMutatorProperties_=function(a,b){var c=Blockly.Extensions.getMutatorProperties_(b);if(c.length){throw Error("Error: tried to apply mutation \""+a+"\" to a block that already has mutator functions.  Block id: "+b.id)}};Blockly.Extensions.checkMutatorDialog_=function(a,b){var c=a.compose!==void 0,d=a.decompose!==void 0;if(c&&d){if("function"!=typeof a.compose){throw Error(b+"compose must be a function.")}else if("function"!=typeof a.decompose){throw Error(b+"decompose must be a function.")}return!0}else if(!c&&!d){return!1}else{throw Error(b+"Must have both or neither of \"compose\" and \"decompose\"")}};Blockly.Extensions.checkBlockHasMutatorProperties_=function(a,b){if("function"!=typeof b.domToMutation){throw Error(a+"Applying a mutator didn't add \"domToMutation\"")}if("function"!=typeof b.mutationToDom){throw Error(a+"Applying a mutator didn't add \"mutationToDom\"")}Blockly.Extensions.checkMutatorDialog_(b,a)};Blockly.Extensions.getMutatorProperties_=function(a){var b=[];if(a.domToMutation!==void 0){b.push(a.domToMutation)}if(a.mutationToDom!==void 0){b.push(a.mutationToDom)}if(a.compose!==void 0){b.push(a.compose)}if(a.decompose!==void 0){b.push(a.decompose)}return b};Blockly.Extensions.mutatorPropertiesMatch_=function(a,b){var c=Blockly.Extensions.getMutatorProperties_(b);if(c.length!=a.length){return!1}for(var d=0;d<c.length;d++){if(a[d]!=c[d]){return!1}}return!0};Blockly.Extensions.buildTooltipForDropdown=function(a,b){var c=[];if("object"==("undefined"==typeof document?"undefined":_typeof(document))){Blockly.utils.runAfterPageLoad(function(){for(var a in b){Blockly.utils.checkMessageReferences(b[a])}})}return function extensionFn(){if(this.type&&-1==c.indexOf(this.type)){Blockly.Extensions.checkDropdownOptionsInTable_(this,a,b);c.push(this.type)}this.setTooltip(function(){var d=this.getFieldValue(a)+"",e=b[d];if(null==e){if(-1==c.indexOf(this.type)){var f="No tooltip mapping for value "+d+" of field "+a;if(null!=this.type){f+=" of block type "+this.type}console.warn(f+".")}}else{e=Blockly.utils.replaceMessageReferences(e)}return e}.bind(this))}};Blockly.Extensions.checkDropdownOptionsInTable_=function(a,b,c){var d=a.getField(b);if(!d.isOptionListDynamic()){for(var e=d.getOptions(),f=0,g;f<e.length;++f){g=e[f][1];if(null==c[g]){console.warn("No tooltip mapping for value "+g+" of field "+b+" of block type "+a.type)}}}};Blockly.Extensions.buildTooltipWithFieldText=function(a,b){if("object"==("undefined"==typeof document?"undefined":_typeof(document))){Blockly.utils.runAfterPageLoad(function(){Blockly.utils.checkMessageReferences(a)})}return function extensionFn(){this.setTooltip(function(){var c=this.getField(b);return Blockly.utils.replaceMessageReferences(a).replace("%1",c?c.getText():"")}.bind(this))}};Blockly.Extensions.extensionParentTooltip_=function(){this.tooltipWhenNotConnected_=this.tooltip;this.setTooltip(function(){var a=this.getParent();return a&&a.getInputsInline()&&a.tooltip||this.tooltipWhenNotConnected_}.bind(this))};Blockly.Extensions.register("parent_tooltip_when_inline",Blockly.Extensions.extensionParentTooltip_);
//# sourceMappingURL=extensions.min.js.map
