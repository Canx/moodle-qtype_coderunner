{"version":3,"sources":["../../../src/blockly/core/field_number.js"],"names":["goog","provide","require","Blockly","FieldNumber","opt_value","opt_min","opt_max","opt_precision","opt_validator","opt_config","min_","Infinity","max_","precision_","decimalPlaces_","superClass_","constructor","call","setConstraints","utils","object","inherits","FieldTextInput","prototype","DEFAULT_VALUE","fromJson","options","SERIALIZABLE","configure_","config","setMinInternal_","setMaxInternal_","setPrecisionInternal_","min","max","precision","setValue","getValue","setMin","isNaN","getMin","setMax","getMax","setPrecision","precisionString","toString","decimalIndex","indexOf","length","getPrecision","doClassValidation_","opt_newValue","newValue","replace","n","Math","isFinite","round","toFixed","widgetCreate_","htmlInput","aria","setState","State","VALUEMIN","VALUEMAX","fieldRegistry","register"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Number input field\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldNumber');\n\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.FieldTextInput');\ngoog.require('Blockly.utils.aria');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for an editable number field.\n * @param {string|number=} opt_value The initial value of the field. Should cast\n *    to a number. Defaults to 0.\n * @param {?(string|number)=} opt_min Minimum value.\n * @param {?(string|number)=} opt_max Maximum value.\n * @param {?(string|number)=} opt_precision Precision for value.\n * @param {?Function=} opt_validator A function that is called to validate\n *    changes to the field's value. Takes in a number & returns a validated\n *    number, or null to abort the change.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/number#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.FieldTextInput}\n * @constructor\n */\nBlockly.FieldNumber = function(opt_value, opt_min, opt_max, opt_precision,\n    opt_validator, opt_config) {\n\n  /**\n   * The minimum value this number field can contain.\n   * @type {number}\n   * @protected\n   */\n  this.min_ = -Infinity;\n\n  /**\n   * The maximum value this number field can contain.\n   * @type {number}\n   * @protected\n   */\n  this.max_ = Infinity;\n\n  /**\n   * The multiple to which this fields value is rounded.\n   * @type {number}\n   * @protected\n   */\n  this.precision_ = 0;\n\n  /**\n   * The number of decimal places to allow, or null to allow any number of\n   * decimal digits.\n   * @type {?number}\n   * @private\n   */\n  this.decimalPlaces_ = null;\n\n  Blockly.FieldNumber.superClass_.constructor.call(\n      this, opt_value, opt_validator, opt_config);\n\n  if (!opt_config) {  // Only do one kind of configuration or the other.\n    this.setConstraints(opt_min, opt_max, opt_precision);\n  }\n};\nBlockly.utils.object.inherits(Blockly.FieldNumber, Blockly.FieldTextInput);\n\n/**\n * The default value for this field.\n * @type {*}\n * @protected\n */\nBlockly.FieldNumber.prototype.DEFAULT_VALUE = 0;\n\n/**\n * Construct a FieldNumber from a JSON arg object.\n * @param {!Object} options A JSON object with options (value, min, max, and\n *                          precision).\n * @return {!Blockly.FieldNumber} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldNumber.fromJson = function(options) {\n  return new Blockly.FieldNumber(options['value'],\n      undefined, undefined, undefined, undefined, options);\n};\n\n/**\n * Serializable fields are saved by the XML renderer, non-serializable fields\n * are not. Editable fields should also be serializable.\n * @type {boolean}\n */\nBlockly.FieldNumber.prototype.SERIALIZABLE = true;\n\n/**\n * Configure the field based on the given map of options.\n * @param {!Object} config A map of options to configure the field based on.\n * @private\n */\nBlockly.FieldNumber.prototype.configure_ = function(config) {\n  Blockly.FieldNumber.superClass_.configure_.call(this, config);\n  this.setMinInternal_(config['min']);\n  this.setMaxInternal_(config['max']);\n  this.setPrecisionInternal_(config['precision']);\n};\n\n/**\n * Set the maximum, minimum and precision constraints on this field.\n * Any of these properties may be undefined or NaN to be disabled.\n * Setting precision (usually a power of 10) enforces a minimum step between\n * values. That is, the user's value will rounded to the closest multiple of\n * precision. The least significant digit place is inferred from the precision.\n * Integers values can be enforces by choosing an integer precision.\n * @param {?(number|string|undefined)} min Minimum value.\n * @param {?(number|string|undefined)} max Maximum value.\n * @param {?(number|string|undefined)} precision Precision for value.\n */\nBlockly.FieldNumber.prototype.setConstraints = function(min, max, precision) {\n  this.setMinInternal_(min);\n  this.setMaxInternal_(max);\n  this.setPrecisionInternal_(precision);\n  this.setValue(this.getValue());\n};\n\n/**\n * Sets the minimum value this field can contain. Updates the value to reflect.\n * @param {?(number|string|undefined)} min Minimum value.\n */\nBlockly.FieldNumber.prototype.setMin = function(min) {\n  this.setMinInternal_(min);\n  this.setValue(this.getValue());\n};\n\n/**\n * Sets the minimum value this field can contain. Called internally to avoid\n * value updates.\n * @param {?(number|string|undefined)} min Minimum value.\n * @private\n */\nBlockly.FieldNumber.prototype.setMinInternal_ = function(min) {\n  if (min == null) {\n    this.min_ = -Infinity;\n  } else {\n    min = Number(min);\n    if (!isNaN(min)) {\n      this.min_ = min;\n    }\n  }\n};\n\n/**\n * Returns the current minimum value this field can contain. Default is\n * -Infinity.\n * @return {number} The current minimum value this field can contain.\n */\nBlockly.FieldNumber.prototype.getMin = function() {\n  return this.min_;\n};\n\n/**\n * Sets the maximum value this field can contain. Updates the value to reflect.\n * @param {?(number|string|undefined)} max Maximum value.\n */\nBlockly.FieldNumber.prototype.setMax = function(max) {\n  this.setMaxInternal_(max);\n  this.setValue(this.getValue());\n};\n\n/**\n * Sets the maximum value this field can contain. Called internally to avoid\n * value updates.\n * @param {?(number|string|undefined)} max Maximum value.\n * @private\n */\nBlockly.FieldNumber.prototype.setMaxInternal_ = function(max) {\n  if (max == null) {\n    this.max_ = Infinity;\n  } else {\n    max = Number(max);\n    if (!isNaN(max)) {\n      this.max_ = max;\n    }\n  }\n};\n\n/**\n * Returns the current maximum value this field can contain. Default is\n * Infinity.\n * @return {number} The current maximum value this field can contain.\n */\nBlockly.FieldNumber.prototype.getMax = function() {\n  return this.max_;\n};\n\n/**\n * Sets the precision of this field's value, i.e. the number to which the\n * value is rounded. Updates the field to reflect.\n * @param {?(number|string|undefined)} precision The number to which the\n *    field's value is rounded.\n */\nBlockly.FieldNumber.prototype.setPrecision = function(precision) {\n  this.setPrecisionInternal_(precision);\n  this.setValue(this.getValue());\n};\n\n/**\n * Sets the precision of this field's value. Called internally to avoid\n * value updates.\n * @param {?(number|string|undefined)} precision The number to which the\n *    field's value is rounded.\n * @private\n */\nBlockly.FieldNumber.prototype.setPrecisionInternal_ = function(precision) {\n  if (precision == null) {\n    // Number(precision) would also be 0, but set explicitly to be clear.\n    this.precision_ = 0;\n  } else {\n    precision = Number(precision);\n    if (!isNaN(precision)) {\n      this.precision_ = precision;\n    }\n  }\n\n  var precisionString = this.precision_.toString();\n  var decimalIndex = precisionString.indexOf('.');\n  if (decimalIndex == -1) {\n    // If the precision is 0 (float) allow any number of decimals,\n    // otherwise allow none.\n    this.decimalPlaces_ = precision ? 0 : null;\n  } else {\n    this.decimalPlaces_ = precisionString.length - decimalIndex - 1;\n  }\n};\n\n/**\n * Returns the current precision of this field. The precision being the\n * number to which the field's value is rounded. A precision of 0 means that\n * the value is not rounded.\n * @return {number} The number to which this field's value is rounded.\n */\nBlockly.FieldNumber.prototype.getPrecision = function() {\n  return this.precision_;\n};\n\n/**\n * Ensure that the input value is a valid number (must fulfill the\n * constraints placed on the field).\n * @param {*=} opt_newValue The input value.\n * @return {?number} A valid number, or null if invalid.\n * @protected\n * @override\n */\nBlockly.FieldNumber.prototype.doClassValidation_ = function(opt_newValue) {\n  if (opt_newValue === null) {\n    return null;\n  }\n  // Clean up text.\n  var newValue = String(opt_newValue);\n  // TODO: Handle cases like 'ten', '1.203,14', etc.\n  // 'O' is sometimes mistaken for '0' by inexperienced users.\n  newValue = newValue.replace(/O/ig, '0');\n  // Strip out thousands separators.\n  newValue = newValue.replace(/,/g, '');\n  // Ignore case of 'Infinity'.\n  newValue = newValue.replace(/infinity/i, 'Infinity');\n\n  // Clean up number.\n  var n = Number(newValue || 0);\n  if (isNaN(n)) {\n    // Invalid number.\n    return null;\n  }\n  // Get the value in range.\n  n = Math.min(Math.max(n, this.min_), this.max_);\n  // Round to nearest multiple of precision.\n  if (this.precision_ && isFinite(n)) {\n    n = Math.round(n / this.precision_) * this.precision_;\n  }\n  // Clean up floating point errors.\n  if (this.decimalPlaces_ != null) {\n    n = Number(n.toFixed(this.decimalPlaces_));\n  }\n  return n;\n};\n\n/**\n * Create the number input editor widget.\n * @return {!HTMLElement} The newly created number input editor.\n * @protected\n * @override\n */\nBlockly.FieldNumber.prototype.widgetCreate_ = function() {\n  var htmlInput = Blockly.FieldNumber.superClass_.widgetCreate_.call(this);\n\n  // Set the accessibility state\n  if (this.min_ > -Infinity) {\n    Blockly.utils.aria.setState(htmlInput,\n        Blockly.utils.aria.State.VALUEMIN, this.min_);\n  }\n  if (this.max_ < Infinity) {\n    Blockly.utils.aria.setState(htmlInput,\n        Blockly.utils.aria.State.VALUEMAX, this.max_);\n  }\n  return htmlInput;\n};\n\nBlockly.fieldRegistry.register('field_number', Blockly.FieldNumber);\n"],"file":"field_number.min.js"}