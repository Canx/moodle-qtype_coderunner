{"version":3,"sources":["../../../src/blockly/core/field_registry.js"],"names":["goog","provide","require","Blockly","fieldRegistry","register","type","fieldClass","registry","Type","FIELD","unregister","fromJson","options","getClass","console","warn"],"mappings":"AAYA,aAEAA,IAAI,CAACC,OAAL,CAAa,uBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,kBAAb,EAeAC,OAAO,CAACC,aAAR,CAAsBC,QAAtB,CAAiC,SAASC,CAAT,CAAeC,CAAf,CAA2B,CAC1DJ,OAAO,CAACK,QAAR,CAAiBH,QAAjB,CAA0BF,OAAO,CAACK,QAAR,CAAiBC,IAAjB,CAAsBC,KAAhD,CAAuDJ,CAAvD,CAA6DC,CAA7D,CACD,CAFD,CAQAJ,OAAO,CAACC,aAAR,CAAsBO,UAAtB,CAAmC,SAASL,CAAT,CAAe,CAChDH,OAAO,CAACK,QAAR,CAAiBG,UAAjB,CAA4BR,OAAO,CAACK,QAAR,CAAiBC,IAAjB,CAAsBC,KAAlD,CAAyDJ,CAAzD,CACD,CAFD,CAcAH,OAAO,CAACC,aAAR,CAAsBQ,QAAtB,CAAiC,SAASC,CAAT,CAAkB,CACjD,GAAIN,CAAAA,CAAU,CACZJ,OAAO,CAACK,QAAR,CAAiBM,QAAjB,CAA0BX,OAAO,CAACK,QAAR,CAAiBC,IAAjB,CAAsBC,KAAhD,CAAuDG,CAAO,KAA9D,CADF,CAEA,GAAI,CAACN,CAAL,CAAiB,CACfQ,OAAO,CAACC,IAAR,CAAa,4CAA8CH,CAAO,KAArD,0LAAb,EAIA,MAAO,KACR,CACD,MAAON,CAAAA,CAAU,CAACK,QAAX,CAAoBC,CAApB,CACR,CAXD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Fields can be created based on a JSON definition. This file\n *    contains methods for registering those JSON definitions, and building the\n *    fields based on JSON.\n * @author bekawestberg@gmail.com (Beka Westberg)\n */\n'use strict';\n\ngoog.provide('Blockly.fieldRegistry');\n\ngoog.require('Blockly.registry');\n\n\n/**\n * Registers a field type.\n * Blockly.fieldRegistry.fromJson uses this registry to\n * find the appropriate field type.\n * @param {string} type The field type name as used in the JSON definition.\n * @param {?function(new:Blockly.Field, ...?)} fieldClass The field class\n *     containing a fromJson function that can construct an instance of the\n *     field.\n * @throws {Error} if the type name is empty, the field is already\n *     registered, or the fieldClass is not an object containing a fromJson\n *     function.\n */\nBlockly.fieldRegistry.register = function(type, fieldClass) {\n  Blockly.registry.register(Blockly.registry.Type.FIELD, type, fieldClass);\n};\n\n/**\n * Unregisters the field registered with the given type.\n * @param {string} type The field type name as used in the JSON definition.\n */\nBlockly.fieldRegistry.unregister = function(type) {\n  Blockly.registry.unregister(Blockly.registry.Type.FIELD, type);\n};\n\n/**\n * Construct a Field from a JSON arg object.\n * Finds the appropriate registered field by the type name as registered using\n * Blockly.fieldRegistry.register.\n * @param {!Object} options A JSON object with a type and options specific\n *     to the field type.\n * @return {Blockly.Field} The new field instance or null if a field wasn't\n *     found with the given type name\n * @package\n */\nBlockly.fieldRegistry.fromJson = function(options) {\n  var fieldClass = /** @type {{fromJson:function(!Object):!Blockly.Field}} */ (\n    Blockly.registry.getClass(Blockly.registry.Type.FIELD, options['type']));\n  if (!fieldClass) {\n    console.warn('Blockly could not create a field of type ' + options['type'] +\n      '. The field is probably not being registered. This could be because' +\n      ' the file is not loaded, the field does not register itself (Issue' +\n      ' #1584), or the registration is not being reached.');\n    return null;\n  }\n  return fieldClass.fromJson(options);\n};\n"],"file":"field_registry.min.js"}