{"version":3,"sources":["../../../src/blockly/core/block_dragger.js"],"names":["goog","provide","require","Blockly","BlockDragger","block","workspace","draggingBlock_","workspace_","draggedConnectionManager_","InsertionMarkerManager","deleteArea_","wouldDeleteBlock_","startXY_","getRelativeToSurfaceXY","dragIconData_","initIconData_","prototype","dispose","length","dragIconData","descendants","getDescendants","i","descendant","icons","getIcons","j","data","location","getIconLocation","icon","push","startBlockDrag","currentDragDeltaXY","healStack","Events","getGroup","setGroup","fireDragStartEvent_","isMutator","bringToFront","utils","dom","startTextWidthCache","setResizesEnabled","blockAnimations","disconnectUiStop","getParent","nextConnection","targetBlock","unplug","delta","pixelsToWorkspaceUnits_","newLoc","Coordinate","sum","translate","x","y","disconnectUiEffect","updateAvailableConnections","setDragging","moveToDragSurface","toolbox","getToolbox","addStyle","style","isDeletable","event","Ui","fire","dragBlock","e","moveDuringDrag","dragIcons_","isDeleteArea","update","updateCursorDuringBlockDrag_","endBlockDrag","fireDragEndEvent_","stopTextWidthCache","moveOffDragSurface","deleted","maybeDeleteBlock_","moveConnections","fireMoveEvent_","wouldConnectBlock","applyConnections","render","scheduleSnapAndBump","removeStyle","BlockMove","oldCoordinate","recordNew","trashcan","setTimeout","close","bind","draggingConnections","wouldDeleteBlock","setDeleteStyle","DELETE_AREA_TRASH","setOpen","pixelCoord","result","scale","mainScale","options","parentWorkspace","dxy","setIconLocation","getInsertionMarkers"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Methods for dragging a block visually.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.BlockDragger');\n\ngoog.require('Blockly.blockAnimations');\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockMove');\ngoog.require('Blockly.Events.Ui');\ngoog.require('Blockly.InsertionMarkerManager');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.dom');\n\n\n/**\n * Class for a block dragger.  It moves blocks around the workspace when they\n * are being dragged by a mouse or touch.\n * @param {!Blockly.BlockSvg} block The block to drag.\n * @param {!Blockly.WorkspaceSvg} workspace The workspace to drag on.\n * @constructor\n */\nBlockly.BlockDragger = function(block, workspace) {\n  /**\n   * The top block in the stack that is being dragged.\n   * @type {!Blockly.BlockSvg}\n   * @private\n   */\n  this.draggingBlock_ = block;\n\n  /**\n   * The workspace on which the block is being dragged.\n   * @type {!Blockly.WorkspaceSvg}\n   * @private\n   */\n  this.workspace_ = workspace;\n\n  /**\n   * Object that keeps track of connections on dragged blocks.\n   * @type {!Blockly.InsertionMarkerManager}\n   * @private\n   */\n  this.draggedConnectionManager_ = new Blockly.InsertionMarkerManager(\n      this.draggingBlock_);\n\n  /**\n   * Which delete area the mouse pointer is over, if any.\n   * One of {@link Blockly.DELETE_AREA_TRASH},\n   * {@link Blockly.DELETE_AREA_TOOLBOX}, or {@link Blockly.DELETE_AREA_NONE}.\n   * @type {?number}\n   * @private\n   */\n  this.deleteArea_ = null;\n\n  /**\n   * Whether the block would be deleted if dropped immediately.\n   * @type {boolean}\n   * @private\n   */\n  this.wouldDeleteBlock_ = false;\n\n  /**\n   * The location of the top left corner of the dragging block at the beginning\n   * of the drag in workspace coordinates.\n   * @type {!Blockly.utils.Coordinate}\n   * @private\n   */\n  this.startXY_ = this.draggingBlock_.getRelativeToSurfaceXY();\n\n  /**\n   * A list of all of the icons (comment, warning, and mutator) that are\n   * on this block and its descendants.  Moving an icon moves the bubble that\n   * extends from it if that bubble is open.\n   * @type {Array.<!Object>}\n   * @private\n   */\n  this.dragIconData_ = Blockly.BlockDragger.initIconData_(block);\n};\n\n/**\n * Sever all links from this object.\n * @package\n */\nBlockly.BlockDragger.prototype.dispose = function() {\n  this.dragIconData_.length = 0;\n\n  if (this.draggedConnectionManager_) {\n    this.draggedConnectionManager_.dispose();\n  }\n};\n\n/**\n * Make a list of all of the icons (comment, warning, and mutator) that are\n * on this block and its descendants.  Moving an icon moves the bubble that\n * extends from it if that bubble is open.\n * @param {!Blockly.BlockSvg} block The root block that is being dragged.\n * @return {!Array.<!Object>} The list of all icons and their locations.\n * @private\n */\nBlockly.BlockDragger.initIconData_ = function(block) {\n  // Build a list of icons that need to be moved and where they started.\n  var dragIconData = [];\n  var descendants = block.getDescendants(false);\n  for (var i = 0, descendant; (descendant = descendants[i]); i++) {\n    var icons = descendant.getIcons();\n    for (var j = 0; j < icons.length; j++) {\n      var data = {\n        // Blockly.utils.Coordinate with x and y properties (workspace coordinates).\n        location: icons[j].getIconLocation(),\n        // Blockly.Icon\n        icon: icons[j]\n      };\n      dragIconData.push(data);\n    }\n  }\n  return dragIconData;\n};\n\n/**\n * Start dragging a block.  This includes moving it to the drag surface.\n * @param {!Blockly.utils.Coordinate} currentDragDeltaXY How far the pointer has\n *     moved from the position at mouse down, in pixel units.\n * @param {boolean} healStack Whether or not to heal the stack after\n *     disconnecting.\n * @package\n */\nBlockly.BlockDragger.prototype.startBlockDrag = function(currentDragDeltaXY,\n    healStack) {\n  if (!Blockly.Events.getGroup()) {\n    Blockly.Events.setGroup(true);\n  }\n  this.fireDragStartEvent_();\n\n  // Mutators don't have the same type of z-ordering as the normal workspace\n  // during a drag.  They have to rely on the order of the blocks in the SVG.\n  // For performance reasons that usually happens at the end of a drag,\n  // but do it at the beginning for mutators.\n  if (this.workspace_.isMutator) {\n    this.draggingBlock_.bringToFront();\n  }\n\n  // During a drag there may be a lot of rerenders, but not field changes.\n  // Turn the cache on so we don't do spurious remeasures during the drag.\n  Blockly.utils.dom.startTextWidthCache();\n  this.workspace_.setResizesEnabled(false);\n  Blockly.blockAnimations.disconnectUiStop();\n\n  if (this.draggingBlock_.getParent() ||\n      (healStack && this.draggingBlock_.nextConnection &&\n      this.draggingBlock_.nextConnection.targetBlock())) {\n    this.draggingBlock_.unplug(healStack);\n    var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);\n    var newLoc = Blockly.utils.Coordinate.sum(this.startXY_, delta);\n\n    this.draggingBlock_.translate(newLoc.x, newLoc.y);\n    Blockly.blockAnimations.disconnectUiEffect(this.draggingBlock_);\n    this.draggedConnectionManager_.updateAvailableConnections();\n  }\n  this.draggingBlock_.setDragging(true);\n  // For future consideration: we may be able to put moveToDragSurface inside\n  // the block dragger, which would also let the block not track the block drag\n  // surface.\n  this.draggingBlock_.moveToDragSurface();\n\n  var toolbox = this.workspace_.getToolbox();\n  if (toolbox && typeof toolbox.addStyle == 'function') {\n    var style = this.draggingBlock_.isDeletable() ? 'blocklyToolboxDelete' :\n        'blocklyToolboxGrab';\n    toolbox.addStyle(style);\n  }\n};\n\n/**\n * Fire a UI event at the start of a block drag.\n * @private\n */\nBlockly.BlockDragger.prototype.fireDragStartEvent_ = function() {\n  var event = new Blockly.Events.Ui(this.draggingBlock_, 'dragStart',\n      null, this.draggingBlock_.getDescendants(false));\n  Blockly.Events.fire(event);\n};\n\n/**\n * Execute a step of block dragging, based on the given event.  Update the\n * display accordingly.\n * @param {!Event} e The most recent move event.\n * @param {!Blockly.utils.Coordinate} currentDragDeltaXY How far the pointer has\n *     moved from the position at the start of the drag, in pixel units.\n * @package\n */\nBlockly.BlockDragger.prototype.dragBlock = function(e, currentDragDeltaXY) {\n  var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);\n  var newLoc = Blockly.utils.Coordinate.sum(this.startXY_, delta);\n\n  this.draggingBlock_.moveDuringDrag(newLoc);\n  this.dragIcons_(delta);\n\n  this.deleteArea_ = this.workspace_.isDeleteArea(e);\n  this.draggedConnectionManager_.update(delta, this.deleteArea_);\n\n  this.updateCursorDuringBlockDrag_();\n};\n\n/**\n * Finish a block drag and put the block back on the workspace.\n * @param {!Event} e The mouseup/touchend event.\n * @param {!Blockly.utils.Coordinate} currentDragDeltaXY How far the pointer has\n *     moved from the position at the start of the drag, in pixel units.\n * @package\n */\nBlockly.BlockDragger.prototype.endBlockDrag = function(e, currentDragDeltaXY) {\n  // Make sure internal state is fresh.\n  this.dragBlock(e, currentDragDeltaXY);\n  this.dragIconData_ = [];\n  this.fireDragEndEvent_();\n\n  Blockly.utils.dom.stopTextWidthCache();\n\n  Blockly.blockAnimations.disconnectUiStop();\n\n  var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);\n  var newLoc = Blockly.utils.Coordinate.sum(this.startXY_, delta);\n  this.draggingBlock_.moveOffDragSurface(newLoc);\n\n  var deleted = this.maybeDeleteBlock_();\n  if (!deleted) {\n    // These are expensive and don't need to be done if we're deleting.\n    this.draggingBlock_.moveConnections(delta.x, delta.y);\n    this.draggingBlock_.setDragging(false);\n    this.fireMoveEvent_();\n    if (this.draggedConnectionManager_.wouldConnectBlock()) {\n      // Applying connections also rerenders the relevant blocks.\n      this.draggedConnectionManager_.applyConnections();\n    } else {\n      this.draggingBlock_.render();\n    }\n    this.draggingBlock_.scheduleSnapAndBump();\n  }\n  this.workspace_.setResizesEnabled(true);\n\n  var toolbox = this.workspace_.getToolbox();\n  if (toolbox && typeof toolbox.removeStyle == 'function') {\n    var style = this.draggingBlock_.isDeletable() ? 'blocklyToolboxDelete' :\n        'blocklyToolboxGrab';\n    toolbox.removeStyle(style);\n  }\n  Blockly.Events.setGroup(false);\n};\n\n/**\n * Fire a UI event at the end of a block drag.\n * @private\n */\nBlockly.BlockDragger.prototype.fireDragEndEvent_ = function() {\n  var event = new Blockly.Events.Ui(this.draggingBlock_, 'dragStop',\n      this.draggingBlock_.getDescendants(false), null);\n  Blockly.Events.fire(event);\n};\n\n/**\n * Fire a move event at the end of a block drag.\n * @private\n */\nBlockly.BlockDragger.prototype.fireMoveEvent_ = function() {\n  var event = new Blockly.Events.BlockMove(this.draggingBlock_);\n  event.oldCoordinate = this.startXY_;\n  event.recordNew();\n  Blockly.Events.fire(event);\n};\n\n/**\n * Shut the trash can and, if necessary, delete the dragging block.\n * Should be called at the end of a block drag.\n * @return {boolean} Whether the block was deleted.\n * @private\n */\nBlockly.BlockDragger.prototype.maybeDeleteBlock_ = function() {\n  var trashcan = this.workspace_.trashcan;\n\n  if (this.wouldDeleteBlock_) {\n    if (trashcan) {\n      setTimeout(trashcan.close.bind(trashcan), 100);\n    }\n    // Fire a move event, so we know where to go back to for an undo.\n    this.fireMoveEvent_();\n    this.draggingBlock_.dispose(false, true);\n    Blockly.draggingConnections = [];\n  } else if (trashcan) {\n    // Make sure the trash can is closed.\n    trashcan.close();\n  }\n  return this.wouldDeleteBlock_;\n};\n\n/**\n * Update the cursor (and possibly the trash can lid) to reflect whether the\n * dragging block would be deleted if released immediately.\n * @private\n */\nBlockly.BlockDragger.prototype.updateCursorDuringBlockDrag_ = function() {\n  this.wouldDeleteBlock_ = this.draggedConnectionManager_.wouldDeleteBlock();\n  var trashcan = this.workspace_.trashcan;\n  if (this.wouldDeleteBlock_) {\n    this.draggingBlock_.setDeleteStyle(true);\n    if (this.deleteArea_ == Blockly.DELETE_AREA_TRASH && trashcan) {\n      trashcan.setOpen(true);\n    }\n  } else {\n    this.draggingBlock_.setDeleteStyle(false);\n    if (trashcan) {\n      trashcan.setOpen(false);\n    }\n  }\n};\n\n/**\n * Convert a coordinate object from pixels to workspace units, including a\n * correction for mutator workspaces.\n * This function does not consider differing origins.  It simply scales the\n * input's x and y values.\n * @param {!Blockly.utils.Coordinate} pixelCoord A coordinate with x and y values\n *     in CSS pixel units.\n * @return {!Blockly.utils.Coordinate} The input coordinate divided by the workspace\n *     scale.\n * @private\n */\nBlockly.BlockDragger.prototype.pixelsToWorkspaceUnits_ = function(pixelCoord) {\n  var result = new Blockly.utils.Coordinate(\n      pixelCoord.x / this.workspace_.scale,\n      pixelCoord.y / this.workspace_.scale);\n  if (this.workspace_.isMutator) {\n    // If we're in a mutator, its scale is always 1, purely because of some\n    // oddities in our rendering optimizations.  The actual scale is the same as\n    // the scale on the parent workspace.\n    // Fix that for dragging.\n    var mainScale = this.workspace_.options.parentWorkspace.scale;\n    result.scale(1 / mainScale);\n  }\n  return result;\n};\n\n/**\n * Move all of the icons connected to this drag.\n * @param {!Blockly.utils.Coordinate} dxy How far to move the icons from their\n *     original positions, in workspace units.\n * @private\n */\nBlockly.BlockDragger.prototype.dragIcons_ = function(dxy) {\n  // Moving icons moves their associated bubbles.\n  for (var i = 0; i < this.dragIconData_.length; i++) {\n    var data = this.dragIconData_[i];\n    data.icon.setIconLocation(Blockly.utils.Coordinate.sum(data.location, dxy));\n  }\n};\n\n/**\n * Get a list of the insertion markers that currently exist.  Drags have 0, 1,\n * or 2 insertion markers.\n * @return {!Array.<!Blockly.BlockSvg>} A possibly empty list of insertion\n *     marker blocks.\n * @package\n */\nBlockly.BlockDragger.prototype.getInsertionMarkers = function() {\n  // No insertion markers with the old style of dragged connection managers.\n  if (this.draggedConnectionManager_ &&\n      this.draggedConnectionManager_.getInsertionMarkers) {\n    return this.draggedConnectionManager_.getInsertionMarkers();\n  }\n  return [];\n};\n"],"file":"block_dragger.min.js"}