{"version":3,"sources":["../../../src/blockly/core/theme.js"],"names":["goog","provide","require","Blockly","Theme","name","opt_blockStyles","opt_categoryStyles","opt_componentStyles","blockStyles","Object","create","categoryStyles","componentStyles","fontStyle","startHats","registry","register","Type","THEME","BlockStyle","CategoryStyle","ComponentStyle","FontStyle","prototype","getClassName","setBlockStyle","blockStyleName","blockStyle","setCategoryStyle","categoryStyleName","categoryStyle","getComponentStyle","componentName","style","propertyValue","setComponentStyle","styleValue","setFontStyle","setStartHats","defineTheme","themeObj","theme","base","getObject","utils","object","deepMerge"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a theme.\n */\n'use strict';\n\ngoog.provide('Blockly.Theme');\n\ngoog.require('Blockly.registry');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.colour');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for a theme.\n * @param {string} name Theme name.\n * @param {!Object.<string, Blockly.Theme.BlockStyle>=} opt_blockStyles A map\n *     from style names (strings) to objects with style attributes for blocks.\n * @param {!Object.<string, Blockly.Theme.CategoryStyle>=} opt_categoryStyles A\n *     map from style names (strings) to objects with style attributes for\n *     categories.\n * @param {!Blockly.Theme.ComponentStyle=} opt_componentStyles A map of Blockly\n *     component names to style value.\n * @constructor\n */\nBlockly.Theme = function(name, opt_blockStyles, opt_categoryStyles,\n    opt_componentStyles) {\n\n  /**\n   * The theme name. This can be used to reference a specific theme in CSS.\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * The block styles map.\n   * @type {!Object.<string, !Blockly.Theme.BlockStyle>}\n   * @package\n   */\n  this.blockStyles = opt_blockStyles || Object.create(null);\n\n  /**\n   * The category styles map.\n   * @type {!Object.<string, Blockly.Theme.CategoryStyle>}\n   * @package\n   */\n  this.categoryStyles = opt_categoryStyles || Object.create(null);\n\n  /**\n   * The UI components styles map.\n   * @type {!Blockly.Theme.ComponentStyle}\n   * @package\n   */\n  this.componentStyles = opt_componentStyles ||\n    (/** @type {Blockly.Theme.ComponentStyle} */ (Object.create(null)));\n\n  /**\n   * The font style.\n   * @type {!Blockly.Theme.FontStyle}\n   * @package\n   */\n  this.fontStyle = /** @type {Blockly.Theme.FontStyle} */ (Object.create(null));\n\n  /**\n   * Whether or not to add a 'hat' on top of all blocks with no previous or\n   * output connections.\n   * @type {?boolean}\n   * @package\n   */\n  this.startHats = null;\n\n  // Register the theme by name.\n  Blockly.registry.register(Blockly.registry.Type.THEME, name, this);\n};\n\n/**\n * A block style.\n * @typedef {{\n *            colourPrimary:string,\n *            colourSecondary:string,\n *            colourTertiary:string,\n *            hat:string\n *          }}\n */\nBlockly.Theme.BlockStyle;\n\n/**\n * A category style.\n * @typedef {{\n *            colour:string\n *          }}\n */\nBlockly.Theme.CategoryStyle;\n\n/**\n * A component style.\n * @typedef {{\n *            workspaceBackgroundColour:?string,\n *            toolboxBackgroundColour:?string,\n *            toolboxForegroundColour:?string,\n *            flyoutBackgroundColour:?string,\n *            flyoutForegroundColour:?string,\n *            flyoutOpacity:?number,\n *            scrollbarColour:?string,\n *            scrollbarOpacity:?number,\n *            insertionMarkerColour:?string,\n *            insertionMarkerOpacity:?number,\n *            markerColour:?string,\n *            cursorColour:?string,\n *            selectedGlowColour:?string,\n *            selectedGlowOpacity:?number,\n *            replacementGlowColour:?string,\n *            replacementGlowOpacity:?number\n *          }}\n */\nBlockly.Theme.ComponentStyle;\n\n/**\n * A font style.\n * @typedef {{\n *            family:?string,\n *            weight:?string,\n *            size:?number\n *          }}\n */\nBlockly.Theme.FontStyle;\n\n/**\n * Gets the class name that identifies this theme.\n * @return {string} The CSS class name.\n * @package\n */\nBlockly.Theme.prototype.getClassName = function() {\n  return this.name + '-theme';\n};\n\n/**\n * Overrides or adds a style to the blockStyles map.\n * @param {string} blockStyleName The name of the block style.\n * @param {Blockly.Theme.BlockStyle} blockStyle The block style.\n*/\nBlockly.Theme.prototype.setBlockStyle = function(blockStyleName, blockStyle) {\n  this.blockStyles[blockStyleName] = blockStyle;\n};\n\n/**\n * Overrides or adds a style to the categoryStyles map.\n * @param {string} categoryStyleName The name of the category style.\n * @param {Blockly.Theme.CategoryStyle} categoryStyle The category style.\n*/\nBlockly.Theme.prototype.setCategoryStyle = function(categoryStyleName,\n    categoryStyle) {\n  this.categoryStyles[categoryStyleName] = categoryStyle;\n};\n\n/**\n * Gets the style for a given Blockly UI component.  If the style value is a\n * string, we attempt to find the value of any named references.\n * @param {string} componentName The name of the component.\n * @return {?string} The style value.\n */\nBlockly.Theme.prototype.getComponentStyle = function(componentName) {\n  var style = this.componentStyles[componentName];\n  if (style && typeof propertyValue == 'string' &&\n      this.getComponentStyle(/** @type {string} */ (style))) {\n    return this.getComponentStyle(/** @type {string} */ (style));\n  }\n  return style ? String(style) : null;\n};\n\n/**\n * Configure a specific Blockly UI component with a style value.\n * @param {string} componentName The name of the component.\n * @param {*} styleValue The style value.\n*/\nBlockly.Theme.prototype.setComponentStyle = function(componentName,\n    styleValue) {\n  this.componentStyles[componentName] = styleValue;\n};\n\n/**\n * Configure a theme's font style.\n * @param {Blockly.Theme.FontStyle} fontStyle The font style.\n*/\nBlockly.Theme.prototype.setFontStyle = function(fontStyle) {\n  this.fontStyle = fontStyle;\n};\n\n/**\n * Configure a theme's start hats.\n * @param {boolean} startHats True if the theme enables start hats, false\n *     otherwise.\n*/\nBlockly.Theme.prototype.setStartHats = function(startHats) {\n  this.startHats = startHats;\n};\n\n/**\n * Define a new Blockly theme.\n * @param {string} name The name of the theme.\n * @param {!Object} themeObj An object containing theme properties.\n * @return {!Blockly.Theme} A new Blockly theme.\n*/\nBlockly.Theme.defineTheme = function(name, themeObj) {\n  var theme = new Blockly.Theme(name);\n  var base = themeObj['base'];\n  if (base) {\n    if (typeof base == \"string\") {\n      base = Blockly.registry.getObject(Blockly.registry.Type.THEME, base);\n    }\n    if (base instanceof Blockly.Theme) {\n      Blockly.utils.object.deepMerge(theme, base);\n      theme.name = name;\n    }\n  }\n\n  Blockly.utils.object.deepMerge(theme.blockStyles,\n      themeObj['blockStyles']);\n  Blockly.utils.object.deepMerge(theme.categoryStyles,\n      themeObj['categoryStyles']);\n  Blockly.utils.object.deepMerge(theme.componentStyles,\n      themeObj['componentStyles']);\n  Blockly.utils.object.deepMerge(theme.fontStyle,\n      themeObj['fontStyle']);\n  if (themeObj['startHats'] != null) {\n    theme.startHats = themeObj['startHats'];\n  }\n\n  return theme;\n};\n"],"file":"theme.min.js"}