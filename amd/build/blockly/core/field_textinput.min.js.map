{"version":3,"sources":["../../../src/blockly/core/field_textinput.js"],"names":["goog","provide","require","Blockly","FieldTextInput","opt_value","opt_validator","opt_config","spellcheck_","superClass_","constructor","call","htmlInput_","onKeyDownWrapper_","onKeyInputWrapper_","fullBlockClickTarget_","workspace_","utils","object","inherits","Field","prototype","DEFAULT_VALUE","fromJson","options","text","replaceMessageReferences","SERIALIZABLE","BORDERRADIUS","CURSOR","configure_","config","initView","getConstants","FULL_BLOCK_FIELDS","nFields","nConnections","i","input","sourceBlock_","inputList","j","fieldRow","connection","outputConnection","clickTarget_","getSvgRoot","createBorderRect_","createTextElement_","doClassValidation_","opt_newValue","doValueInvalid_","isBeingEdited_","isTextValid_","oldValue","value_","untypedDefaultValue_","Events","isEnabled","fire","BlockChange","name","doValueUpdate_","newValue","isDirty_","applyColour","borderRect_","setAttribute","style","colourTertiary","pathObject","svgPath","FIELD_BORDER_RECT_COLOUR","render_","resizeEditor_","htmlInput","dom","addClass","aria","setState","State","INVALID","removeClass","setSpellcheck","check","showEditor_","_opt_e","opt_quietInput","workspace","quietInput","userAgent","MOBILE","ANDROID","IPAD","showPromptEditor_","showInlineEditor_","fieldText","prompt","Msg","getText","setValue","WidgetDiv","show","RTL","widgetDispose_","bind","widgetCreate_","focus","preventScroll","select","div","DIV","getClickTarget_","document","createElement","className","scale","getScale","fontSize","FIELD_TEXT_FONTSIZE","borderRadius","bBox","getScaledBBox","bottom","top","strokeColour","getParent","border","transition","FIELD_TEXTINPUT_BOX_SHADOW","boxShadow","appendChild","value","defaultValue","getEditorText_","oldValue_","bindInputEvents_","forceRerender","onFinishEditing_","unbindInputEvents_","width","height","bindEventWithChecks_","onHtmlInputKeyDown_","onHtmlInputChange_","unbindEvent_","e","keyCode","KeyCodes","ENTER","hide","DropDownDiv","hideWithoutAnimation","ESC","TAB","tab","shiftKey","preventDefault","setGroup","getValueFromEditorText_","setEditorValue_","right","left","x","offsetWidth","xy","Coordinate","y","numberValidator","console","warn","replace","n","isNaN","nonnegativeIntegerValidator","Math","max","floor","isTabNavigable","getText_","fieldRegistry","register"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Text input field.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldTextInput');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockChange');\ngoog.require('Blockly.Field');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.Msg');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.aria');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.KeyCodes');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.Size');\ngoog.require('Blockly.utils.userAgent');\n\n\n/**\n * Class for an editable text field.\n * @param {string=} opt_value The initial value of the field. Should cast to a\n *    string. Defaults to an empty string if null or undefined.\n * @param {?Function=} opt_validator A function that is called to validate\n *    changes to the field's value. Takes in a string & returns a validated\n *    string, or null to abort the change.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/text-input#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.Field}\n * @constructor\n */\nBlockly.FieldTextInput = function(opt_value, opt_validator, opt_config) {\n  /**\n   * Allow browser to spellcheck this field.\n   * @type {boolean}\n   * @protected\n   */\n  this.spellcheck_ = true;\n\n  Blockly.FieldTextInput.superClass_.constructor.call(this,\n      opt_value, opt_validator, opt_config);\n\n  /**\n   * The HTML input element.\n   * @type {HTMLElement}\n   */\n  this.htmlInput_ = null;\n\n  /**\n   * Key down event data.\n   * @type {?Blockly.EventData}\n   * @private\n   */\n  this.onKeyDownWrapper_ = null;\n\n  /**\n   * Key input event data.\n   * @type {?Blockly.EventData}\n   * @private\n   */\n  this.onKeyInputWrapper_ = null;\n\n  /**\n   * Whether the field should consider the whole parent block to be its click\n   * target.\n   * @type {?boolean}\n   */\n  this.fullBlockClickTarget_ = false;\n\n  /**\n   * The workspace that this field belongs to.\n   * @type {?Blockly.WorkspaceSvg}\n   * @protected\n   */\n  this.workspace_ = null;\n};\nBlockly.utils.object.inherits(Blockly.FieldTextInput, Blockly.Field);\n\n/**\n * The default value for this field.\n * @type {*}\n * @protected\n */\nBlockly.FieldTextInput.prototype.DEFAULT_VALUE = '';\n\n/**\n * Construct a FieldTextInput from a JSON arg object,\n * dereferencing any string table references.\n * @param {!Object} options A JSON object with options (text, and spellcheck).\n * @return {!Blockly.FieldTextInput} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldTextInput.fromJson = function(options) {\n  var text = Blockly.utils.replaceMessageReferences(options['text']);\n  return new Blockly.FieldTextInput(text, undefined, options);\n};\n\n/**\n * Serializable fields are saved by the XML renderer, non-serializable fields\n * are not. Editable fields should also be serializable.\n * @type {boolean}\n */\nBlockly.FieldTextInput.prototype.SERIALIZABLE = true;\n\n/**\n * Pixel size of input border radius.\n * Should match blocklyText's border-radius in CSS.\n */\nBlockly.FieldTextInput.BORDERRADIUS = 4;\n\n/**\n * Mouse cursor style when over the hotspot that initiates the editor.\n */\nBlockly.FieldTextInput.prototype.CURSOR = 'text';\n\n/**\n * @override\n */\nBlockly.FieldTextInput.prototype.configure_ = function(config) {\n  Blockly.FieldTextInput.superClass_.configure_.call(this, config);\n  if (typeof config['spellcheck'] == 'boolean') {\n    this.spellcheck_ = config['spellcheck'];\n  }\n};\n\n/**\n * @override\n */\nBlockly.FieldTextInput.prototype.initView = function() {\n  if (this.getConstants().FULL_BLOCK_FIELDS) {\n    // Step one: figure out if this is the only field on this block.\n    // Rendering is quite different in that case.\n    var nFields = 0;\n    var nConnections = 0;\n\n    // Count the number of fields, excluding text fields\n    for (var i = 0, input; (input = this.sourceBlock_.inputList[i]); i++) {\n      for (var j = 0; (input.fieldRow[j]); j++) {\n        nFields ++;\n      }\n      if (input.connection) {\n        nConnections++;\n      }\n    }\n    // The special case is when this is the only non-label field on the block\n    // and it has an output but no inputs.\n    this.fullBlockClickTarget_ =\n        nFields <= 1 && this.sourceBlock_.outputConnection && !nConnections;\n  } else {\n    this.fullBlockClickTarget_ = false;\n  }\n\n  if (this.fullBlockClickTarget_) {\n    this.clickTarget_ = this.sourceBlock_.getSvgRoot();\n  } else {\n    this.createBorderRect_();\n  }\n  this.createTextElement_();\n};\n\n/**\n * Ensure that the input value casts to a valid string.\n * @param {*=} opt_newValue The input value.\n * @return {*} A valid string, or null if invalid.\n * @protected\n */\nBlockly.FieldTextInput.prototype.doClassValidation_ = function(opt_newValue) {\n  if (opt_newValue === null || opt_newValue === undefined) {\n    return null;\n  }\n  return String(opt_newValue);\n};\n\n/**\n * Called by setValue if the text input is not valid. If the field is\n * currently being edited it reverts value of the field to the previous\n * value while allowing the display text to be handled by the htmlInput_.\n * @param {*} _invalidValue The input value that was determined to be invalid.\n *    This is not used by the text input because its display value is stored on\n *    the htmlInput_.\n * @protected\n */\nBlockly.FieldTextInput.prototype.doValueInvalid_ = function(_invalidValue) {\n  if (this.isBeingEdited_) {\n    this.isTextValid_ = false;\n    var oldValue = this.value_;\n    // Revert value when the text becomes invalid.\n    this.value_ = this.htmlInput_.untypedDefaultValue_;\n    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {\n      Blockly.Events.fire(new Blockly.Events.BlockChange(\n          this.sourceBlock_, 'field', this.name || null, oldValue, this.value_));\n    }\n  }\n};\n\n/**\n * Called by setValue if the text input is valid. Updates the value of the\n * field, and updates the text of the field if it is not currently being\n * edited (i.e. handled by the htmlInput_).\n * @param {*} newValue The value to be saved. The default validator guarantees\n * that this is a string.\n * @protected\n */\nBlockly.FieldTextInput.prototype.doValueUpdate_ = function(newValue) {\n  this.isTextValid_ = true;\n  this.value_ = newValue;\n  if (!this.isBeingEdited_) {\n    // This should only occur if setValue is triggered programmatically.\n    this.isDirty_ = true;\n  }\n};\n\n/**\n * Updates text field to match the colour/style of the block.\n * @package\n */\nBlockly.FieldTextInput.prototype.applyColour = function() {\n  if (this.sourceBlock_ && this.getConstants().FULL_BLOCK_FIELDS) {\n    if (this.borderRect_) {\n      this.borderRect_.setAttribute('stroke',\n          this.sourceBlock_.style.colourTertiary);\n    } else {\n      this.sourceBlock_.pathObject.svgPath.setAttribute('fill',\n          this.getConstants().FIELD_BORDER_RECT_COLOUR);\n    }\n  }\n};\n\n/**\n * Updates the colour of the htmlInput given the current validity of the\n * field's value.\n * @protected\n */\nBlockly.FieldTextInput.prototype.render_ = function() {\n  Blockly.FieldTextInput.superClass_.render_.call(this);\n  // This logic is done in render_ rather than doValueInvalid_ or\n  // doValueUpdate_ so that the code is more centralized.\n  if (this.isBeingEdited_) {\n    this.resizeEditor_();\n    var htmlInput = /** @type {!HTMLElement} */(this.htmlInput_);\n    if (!this.isTextValid_) {\n      Blockly.utils.dom.addClass(htmlInput, 'blocklyInvalidInput');\n      Blockly.utils.aria.setState(htmlInput,\n          Blockly.utils.aria.State.INVALID, true);\n    } else {\n      Blockly.utils.dom.removeClass(htmlInput, 'blocklyInvalidInput');\n      Blockly.utils.aria.setState(htmlInput,\n          Blockly.utils.aria.State.INVALID, false);\n    }\n  }\n};\n\n/**\n * Set whether this field is spellchecked by the browser.\n * @param {boolean} check True if checked.\n */\nBlockly.FieldTextInput.prototype.setSpellcheck = function(check) {\n  if (check == this.spellcheck_) {\n    return;\n  }\n  this.spellcheck_ = check;\n  if (this.htmlInput_) {\n    this.htmlInput_.setAttribute('spellcheck', this.spellcheck_);\n  }\n};\n\n/**\n * Show the inline free-text editor on top of the text.\n * @param {Event=} _opt_e Optional mouse event that triggered the field to open,\n *     or undefined if triggered programmatically.\n * @param {boolean=} opt_quietInput True if editor should be created without\n *     focus.  Defaults to false.\n * @protected\n */\nBlockly.FieldTextInput.prototype.showEditor_ = function(_opt_e,\n    opt_quietInput) {\n  this.workspace_ =\n    (/** @type {!Blockly.BlockSvg} */ (this.sourceBlock_)).workspace;\n  var quietInput = opt_quietInput || false;\n  if (!quietInput && (Blockly.utils.userAgent.MOBILE ||\n                      Blockly.utils.userAgent.ANDROID ||\n                      Blockly.utils.userAgent.IPAD)) {\n    this.showPromptEditor_();\n  } else {\n    this.showInlineEditor_(quietInput);\n  }\n};\n\n/**\n * Create and show a text input editor that is a prompt (usually a popup).\n * Mobile browsers have issues with in-line textareas (focus and keyboards).\n * @private\n */\nBlockly.FieldTextInput.prototype.showPromptEditor_ = function() {\n  var fieldText = this;\n  Blockly.prompt(Blockly.Msg['CHANGE_VALUE_TITLE'], this.getText(),\n      function(newValue) {\n        fieldText.setValue(newValue);\n      });\n};\n\n/**\n * Create and show a text input editor that sits directly over the text input.\n * @param {boolean} quietInput True if editor should be created without\n *     focus.\n * @private\n */\nBlockly.FieldTextInput.prototype.showInlineEditor_ = function(quietInput) {\n  Blockly.WidgetDiv.show(\n      this, this.sourceBlock_.RTL, this.widgetDispose_.bind(this));\n  this.htmlInput_ = this.widgetCreate_();\n  this.isBeingEdited_ = true;\n\n  if (!quietInput) {\n    this.htmlInput_.focus({preventScroll:true});\n    this.htmlInput_.select();\n  }\n};\n\n/**\n * Create the text input editor widget.\n * @return {!HTMLElement} The newly created text input editor.\n * @protected\n */\nBlockly.FieldTextInput.prototype.widgetCreate_ = function() {\n  var div = Blockly.WidgetDiv.DIV;\n\n  Blockly.utils.dom.addClass(this.getClickTarget_(), 'editing');\n\n  var htmlInput = /** @type {HTMLInputElement} */ (document.createElement('input'));\n  htmlInput.className = 'blocklyHtmlInput';\n  htmlInput.setAttribute('spellcheck', this.spellcheck_);\n  var scale = this.workspace_.getScale();\n  var fontSize =\n      (this.getConstants().FIELD_TEXT_FONTSIZE * scale) + 'pt';\n  div.style.fontSize = fontSize;\n  htmlInput.style.fontSize = fontSize;\n  var borderRadius =\n      (Blockly.FieldTextInput.BORDERRADIUS * scale) + 'px';\n\n  if (this.fullBlockClickTarget_) {\n    var bBox = this.getScaledBBox();\n\n    // Override border radius.\n    borderRadius = (bBox.bottom - bBox.top) / 2 + 'px';\n    // Pull stroke colour from the existing shadow block\n    var strokeColour = this.sourceBlock_.getParent() ?\n      this.sourceBlock_.getParent().style.colourTertiary :\n      this.sourceBlock_.style.colourTertiary;\n    htmlInput.style.border = (1 * scale) + 'px solid ' + strokeColour;\n    div.style.borderRadius = borderRadius;\n    div.style.transition = 'box-shadow 0.25s ease 0s';\n    if (this.getConstants().FIELD_TEXTINPUT_BOX_SHADOW) {\n      div.style.boxShadow = 'rgba(255, 255, 255, 0.3) 0px 0px 0px ' +\n          4 * scale + 'px';\n    }\n  }\n  htmlInput.style.borderRadius = borderRadius;\n\n  div.appendChild(htmlInput);\n\n  htmlInput.value = htmlInput.defaultValue = this.getEditorText_(this.value_);\n  htmlInput.untypedDefaultValue_ = this.value_;\n  htmlInput.oldValue_ = null;\n\n  this.resizeEditor_();\n\n  this.bindInputEvents_(htmlInput);\n\n  return htmlInput;\n};\n\n/**\n * Closes the editor, saves the results, and disposes of any events or\n * dom-references belonging to the editor.\n * @private\n */\nBlockly.FieldTextInput.prototype.widgetDispose_ = function() {\n  // Non-disposal related things that we do when the editor closes.\n  this.isBeingEdited_ = false;\n  this.isTextValid_ = true;\n  // Make sure the field's node matches the field's internal value.\n  this.forceRerender();\n  // TODO(#2496): Make this less of a hack.\n  if (this.onFinishEditing_) {\n    this.onFinishEditing_(this.value_);\n  }\n\n  // Actual disposal.\n  this.unbindInputEvents_();\n  var style = Blockly.WidgetDiv.DIV.style;\n  style.width = 'auto';\n  style.height = 'auto';\n  style.fontSize = '';\n  style.transition = '';\n  style.boxShadow = '';\n  this.htmlInput_ = null;\n\n  Blockly.utils.dom.removeClass(this.getClickTarget_(), 'editing');\n};\n\n/**\n * Bind handlers for user input on the text input field's editor.\n * @param {!HTMLElement} htmlInput The htmlInput to which event\n *    handlers will be bound.\n * @protected\n */\nBlockly.FieldTextInput.prototype.bindInputEvents_ = function(htmlInput) {\n  // Trap Enter without IME and Esc to hide.\n  this.onKeyDownWrapper_ =\n      Blockly.bindEventWithChecks_(\n          htmlInput, 'keydown', this, this.onHtmlInputKeyDown_);\n  // Resize after every input change.\n  this.onKeyInputWrapper_ =\n      Blockly.bindEventWithChecks_(\n          htmlInput, 'input', this, this.onHtmlInputChange_);\n};\n\n/**\n * Unbind handlers for user input and workspace size changes.\n * @private\n */\nBlockly.FieldTextInput.prototype.unbindInputEvents_ = function() {\n  if (this.onKeyDownWrapper_) {\n    Blockly.unbindEvent_(this.onKeyDownWrapper_);\n    this.onKeyDownWrapper_ = null;\n  }\n  if (this.onKeyInputWrapper_) {\n    Blockly.unbindEvent_(this.onKeyInputWrapper_);\n    this.onKeyInputWrapper_ = null;\n  }\n};\n\n/**\n * Handle key down to the editor.\n * @param {!Event} e Keyboard event.\n * @protected\n */\nBlockly.FieldTextInput.prototype.onHtmlInputKeyDown_ = function(e) {\n  if (e.keyCode == Blockly.utils.KeyCodes.ENTER) {\n    Blockly.WidgetDiv.hide();\n    Blockly.DropDownDiv.hideWithoutAnimation();\n  } else if (e.keyCode == Blockly.utils.KeyCodes.ESC) {\n    this.htmlInput_.value = this.htmlInput_.defaultValue;\n    Blockly.WidgetDiv.hide();\n    Blockly.DropDownDiv.hideWithoutAnimation();\n  } else if (e.keyCode == Blockly.utils.KeyCodes.TAB) {\n    Blockly.WidgetDiv.hide();\n    Blockly.DropDownDiv.hideWithoutAnimation();\n    this.sourceBlock_.tab(this, !e.shiftKey);\n    e.preventDefault();\n  }\n};\n\n/**\n * Handle a change to the editor.\n * @param {!Event} _e Keyboard event.\n * @private\n */\nBlockly.FieldTextInput.prototype.onHtmlInputChange_ = function(_e) {\n  var text = this.htmlInput_.value;\n  if (text !== this.htmlInput_.oldValue_) {\n    this.htmlInput_.oldValue_ = text;\n\n    // TODO(#2169): Once issue is fixed the setGroup functionality could be\n    //              moved up to the Field setValue method. This would create a\n    //              broader fix for all field types.\n    Blockly.Events.setGroup(true);\n    var value = this.getValueFromEditorText_(text);\n    this.setValue(value);\n    this.forceRerender();\n    this.resizeEditor_();\n    Blockly.Events.setGroup(false);\n  }\n};\n\n/**\n * Set the html input value and the field's internal value. The difference\n * between this and ``setValue`` is that this also updates the html input\n * value whilst editing.\n * @param {*} newValue New value.\n * @protected\n */\nBlockly.FieldTextInput.prototype.setEditorValue_ = function(newValue) {\n  this.isDirty_ = true;\n  if (this.isBeingEdited_) {\n    // In the case this method is passed an invalid value, we still\n    // pass it through the transformation method `getEditorText` to deal\n    // with. Otherwise, the internal field's state will be inconsistent\n    // with what's shown to the user.\n    this.htmlInput_.value = this.getEditorText_(newValue);\n  }\n  this.setValue(newValue);\n};\n\n/**\n * Resize the editor to fit the text.\n * @protected\n */\nBlockly.FieldTextInput.prototype.resizeEditor_ = function() {\n  var div = Blockly.WidgetDiv.DIV;\n  var bBox = this.getScaledBBox();\n  div.style.width = bBox.right - bBox.left + 'px';\n  div.style.height = bBox.bottom - bBox.top + 'px';\n\n  // In RTL mode block fields and LTR input fields the left edge moves,\n  // whereas the right edge is fixed.  Reposition the editor.\n  var x = this.sourceBlock_.RTL ? bBox.right - div.offsetWidth : bBox.left;\n  var xy = new Blockly.utils.Coordinate(x, bBox.top);\n\n  div.style.left = xy.x + 'px';\n  div.style.top = xy.y + 'px';\n};\n\n/**\n * Ensure that only a number may be entered.\n * @param {string} text The user's text.\n * @return {?string} A string representing a valid number, or null if invalid.\n * @deprecated\n */\nBlockly.FieldTextInput.numberValidator = function(text) {\n  console.warn('Blockly.FieldTextInput.numberValidator is deprecated. ' +\n               'Use Blockly.FieldNumber instead.');\n  if (text === null) {\n    return null;\n  }\n  text = String(text);\n  // TODO: Handle cases like 'ten', '1.203,14', etc.\n  // 'O' is sometimes mistaken for '0' by inexperienced users.\n  text = text.replace(/O/ig, '0');\n  // Strip out thousands separators.\n  text = text.replace(/,/g, '');\n  var n = Number(text || 0);\n  return isNaN(n) ? null : String(n);\n};\n\n/**\n * Ensure that only a non-negative integer may be entered.\n * @param {string} text The user's text.\n * @return {?string} A string representing a valid int, or null if invalid.\n * @deprecated\n */\nBlockly.FieldTextInput.nonnegativeIntegerValidator = function(text) {\n  var n = Blockly.FieldTextInput.numberValidator(text);\n  if (n) {\n    n = String(Math.max(0, Math.floor(n)));\n  }\n  return n;\n};\n\n/**\n * Returns whether or not the field is tab navigable.\n * @return {boolean} True if the field is tab navigable.\n * @override\n */\nBlockly.FieldTextInput.prototype.isTabNavigable = function() {\n  return true;\n};\n\n/**\n * Use the `getText_` developer hook to override the field's text representation.\n * When we're currently editing, return the current html value instead.\n * Otherwise, return null which tells the field to use the default behaviour\n * (which is a string cast of the field's value).\n * @return {?string} The html value if we're editing, otherwise null.\n * @protected\n * @override\n */\nBlockly.FieldTextInput.prototype.getText_ = function() {\n  if (this.isBeingEdited_ && this.htmlInput_) {\n    // We are currently editing, return the html input value instead.\n    return this.htmlInput_.value;\n  }\n  return null;\n};\n\n/**\n * Transform the provided value into a text to show in the html input.\n * Override this method if the field's html input representation is different\n * than the field's value. This should be coupled with an override of\n * `getValueFromEditorText_`.\n * @param {*} value The value stored in this field.\n * @return {string} The text to show on the html input.\n * @protected\n */\nBlockly.FieldTextInput.prototype.getEditorText_ = function(value) {\n  return String(value);\n};\n\n/**\n * Transform the text received from the html input into a value to store\n * in this field.\n * Override this method if the field's html input representation is different\n * than the field's value. This should be coupled with an override of\n * `getEditorText_`.\n * @param {string} text Text received from the html input.\n * @return {*} The value to store.\n * @protected\n */\nBlockly.FieldTextInput.prototype.getValueFromEditorText_ = function(text) {\n  return text;\n};\n\nBlockly.fieldRegistry.register('field_input', Blockly.FieldTextInput);\n"],"file":"field_textinput.min.js"}