{"version":3,"sources":["../../../src/blockly/core/events_abstract.js"],"names":["goog","provide","require","Blockly","Events","Abstract","workspaceId","group","getGroup","recordUndo","prototype","toJson","json","type","fromJson","isNull","run","getEventWorkspace_","workspace","Workspace","getById","Error"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,yBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EAOAC,OAAO,CAACC,MAAR,CAAeC,QAAf,CAA0B,UAAW,CAKnC,KAAKC,WAAL,QAQA,KAAKC,KAAL,CAAaJ,OAAO,CAACC,MAAR,CAAeI,QAAf,EAAb,CAMA,KAAKC,UAAL,CAAkBN,OAAO,CAACC,MAAR,CAAeK,UAClC,CApBD,CA0BAN,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAwBK,SAAxB,CAAkCC,MAAlC,CAA2C,UAAW,CACpD,GAAIC,CAAAA,CAAI,CAAG,CACT,KAAQ,KAAKC,IADJ,CAAX,CAGA,GAAI,KAAKN,KAAT,CAAgB,CACdK,CAAI,MAAJ,CAAgB,KAAKL,KACtB,CACD,MAAOK,CAAAA,CACR,CARD,CAcAT,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAwBK,SAAxB,CAAkCI,QAAlC,CAA6C,SAASF,CAAT,CAAe,CAC1D,KAAKL,KAAL,CAAaK,CAAI,MAClB,CAFD,CAQAT,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAwBK,SAAxB,CAAkCK,MAAlC,CAA2C,UAAW,CACpD,QACD,CAFD,CAQAZ,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAwBK,SAAxB,CAAkCM,GAAlC,CAAwC,UAAmB,CAE1D,CAFD,CAUAb,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAwBK,SAAxB,CAAkCO,kBAAlC,CAAuD,UAAW,CAChE,GAAI,KAAKX,WAAT,CAAsB,CACpB,GAAIY,CAAAA,CAAS,CAAGf,OAAO,CAACgB,SAAR,CAAkBC,OAAlB,CAA0B,KAAKd,WAA/B,CACjB,CACD,GAAI,CAACY,CAAL,CAAgB,CACd,KAAMG,CAAAA,KAAK,+EAEZ,CACD,MAAOH,CAAAA,CACR,CATD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Abstract class for events fired as a result of actions in\n *     Blockly's editor.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Events.Abstract');\n\ngoog.require('Blockly.Events');\n\n\n/**\n * Abstract class for an event.\n * @constructor\n */\nBlockly.Events.Abstract = function() {\n  /**\n   * The workspace identifier for this event.\n   * @type {string|undefined}\n   */\n  this.workspaceId = undefined;\n\n  /**\n   * The event group id for the group this event belongs to. Groups define\n   * events that should be treated as an single action from the user's\n   * perspective, and should be undone together.\n   * @type {string}\n   */\n  this.group = Blockly.Events.getGroup();\n\n  /**\n   * Sets whether the event should be added to the undo stack.\n   * @type {boolean}\n   */\n  this.recordUndo = Blockly.Events.recordUndo;\n};\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\nBlockly.Events.Abstract.prototype.toJson = function() {\n  var json = {\n    'type': this.type\n  };\n  if (this.group) {\n    json['group'] = this.group;\n  }\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.Abstract.prototype.fromJson = function(json) {\n  this.group = json['group'];\n};\n\n/**\n * Does this event record any change of state?\n * @return {boolean} True if null, false if something changed.\n */\nBlockly.Events.Abstract.prototype.isNull = function() {\n  return false;\n};\n\n/**\n * Run an event.\n * @param {boolean} _forward True if run forward, false if run backward (undo).\n */\nBlockly.Events.Abstract.prototype.run = function(_forward) {\n  // Defined by subclasses.\n};\n\n/**\n * Get workspace the event belongs to.\n * @return {!Blockly.Workspace} The workspace the event belongs to.\n * @throws {Error} if workspace is null.\n * @protected\n */\nBlockly.Events.Abstract.prototype.getEventWorkspace_ = function() {\n  if (this.workspaceId) {\n    var workspace = Blockly.Workspace.getById(this.workspaceId);\n  }\n  if (!workspace) {\n    throw Error('Workspace is null. Event must have been generated from real' +\n        ' Blockly events.');\n  }\n  return workspace;\n};\n"],"file":"events_abstract.min.js"}