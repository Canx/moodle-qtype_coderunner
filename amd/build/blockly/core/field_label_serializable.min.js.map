{"version":3,"sources":["../../../src/blockly/core/field_label_serializable.js"],"names":["goog","provide","require","Blockly","FieldLabelSerializable","opt_value","opt_class","opt_config","superClass_","constructor","call","utils","object","inherits","FieldLabel","fromJson","options","text","replaceMessageReferences","prototype","EDITABLE","SERIALIZABLE","fieldRegistry","register"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,gCAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,oBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,uBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,eAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EAeAC,OAAO,CAACC,sBAAR,CAAiC,SAASC,CAAT,CAAoBC,CAApB,CAA+BC,CAA/B,CAA2C,CAC1EJ,OAAO,CAACC,sBAAR,CAA+BI,WAA/B,CAA2CC,WAA3C,CAAuDC,IAAvD,CACI,IADJ,CACUL,CADV,CACqBC,CADrB,CACgCC,CADhC,CAED,CAHD,CAIAJ,OAAO,CAACQ,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BV,OAAO,CAACC,sBAAtC,CACID,OAAO,CAACW,UADZ,EAWAX,OAAO,CAACC,sBAAR,CAA+BW,QAA/B,CAA0C,SAASC,CAAT,CAAkB,CAC1D,GAAIC,CAAAA,CAAI,CAAGd,OAAO,CAACQ,KAAR,CAAcO,wBAAd,CAAuCF,CAAO,KAA9C,CAAX,CACA,MAAO,IAAIb,CAAAA,OAAO,CAACC,sBAAZ,CAAmCa,CAAnC,QAAoDD,CAApD,CACR,CAHD,CAUAb,OAAO,CAACC,sBAAR,CAA+Be,SAA/B,CAAyCC,QAAzC,IAOAjB,OAAO,CAACC,sBAAR,CAA+Be,SAA/B,CAAyCE,YAAzC,IAEAlB,OAAO,CAACmB,aAAR,CAAsBC,QAAtB,CACI,0BADJ,CACgCpB,OAAO,CAACC,sBADxC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Non-editable, serializable text field. Behaves like a\n *    normal label but is serialized to XML. It may only be\n *    edited programmatically.\n */\n'use strict';\n\ngoog.provide('Blockly.FieldLabelSerializable');\n\ngoog.require('Blockly.FieldLabel');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for a non-editable, serializable text field.\n * @param {*} opt_value The initial value of the field. Should cast to a\n *    string. Defaults to an empty string if null or undefined.\n * @param {string=} opt_class Optional CSS class for the field's text.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/label-serializable#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.FieldLabel}\n * @constructor\n *\n */\nBlockly.FieldLabelSerializable = function(opt_value, opt_class, opt_config) {\n  Blockly.FieldLabelSerializable.superClass_.constructor.call(\n      this, opt_value, opt_class, opt_config);\n};\nBlockly.utils.object.inherits(Blockly.FieldLabelSerializable,\n    Blockly.FieldLabel);\n\n/**\n * Construct a FieldLabelSerializable from a JSON arg object,\n * dereferencing any string table references.\n * @param {!Object} options A JSON object with options (text, and class).\n * @return {!Blockly.FieldLabelSerializable} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldLabelSerializable.fromJson = function(options) {\n  var text = Blockly.utils.replaceMessageReferences(options['text']);\n  return new Blockly.FieldLabelSerializable(text, undefined, options);\n};\n\n/**\n * Editable fields usually show some sort of UI indicating they are\n * editable. This field should not.\n * @type {boolean}\n */\nBlockly.FieldLabelSerializable.prototype.EDITABLE = false;\n\n/**\n * Serializable fields are saved by the XML renderer, non-serializable fields\n * are not.  This field should be serialized, but only edited programmatically.\n * @type {boolean}\n */\nBlockly.FieldLabelSerializable.prototype.SERIALIZABLE = true;\n\nBlockly.fieldRegistry.register(\n    'field_label_serializable', Blockly.FieldLabelSerializable);\n"],"file":"field_label_serializable.min.js"}