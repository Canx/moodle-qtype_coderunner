{"version":3,"sources":["../../../src/blockly/core/registry.js"],"names":["goog","provide","requireType","Blockly","registry","typeMap_","DEFAULT","Type","name","name_","prototype","toString","RENDERER","FIELD","TOOLBOX","THEME","register","type","registryItem","trim","Error","toLowerCase","typeRegistry","validate_","fromJson","unregister","console","warn","getItem_","getClass","getObject","getClassFromOptions","options","typeName","plugin","plugins"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview This file is a universal registry that provides generic methods\n *    for registering and unregistering different types of classes.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n'use strict';\n\ngoog.provide('Blockly.registry');\n\ngoog.requireType('Blockly.blockRendering.Renderer');\ngoog.requireType('Blockly.Field');\ngoog.requireType('Blockly.IToolbox');\ngoog.requireType('Blockly.Theme');\ngoog.requireType('Blockly.utils.toolbox');\n\n\n/**\n * A map of maps. With the keys being the type and name of the class we are\n * registering and the value being the constructor function.\n * e.g. {'field': {'field_angle': Blockly.FieldAngle}}\n *\n * @type {Object<string, Object<string, function(new:?)>>}\n */\nBlockly.registry.typeMap_ = {};\n\n/**\n * The string used to register the default class for a type of plugin.\n * @type {string}\n */\nBlockly.registry.DEFAULT = 'default';\n\n/**\n * A name with the type of the element stored in the generic.\n * @param {string} name The name of the registry type.\n * @constructor\n * @template T\n */\nBlockly.registry.Type = function(name) {\n  /**\n   * @type {string}\n   * @private\n   */\n  this.name_ = name;\n};\n\n/**\n * Returns the name of the type.\n * @return {string} The name.\n * @override\n */\nBlockly.registry.Type.prototype.toString = function() {\n  return this.name_;\n};\n\n/** @type {!Blockly.registry.Type<Blockly.blockRendering.Renderer>} */\nBlockly.registry.Type.RENDERER = new Blockly.registry.Type('renderer');\n\n/** @type {!Blockly.registry.Type<Blockly.Field>} */\nBlockly.registry.Type.FIELD = new Blockly.registry.Type('field');\n\n/** @type {!Blockly.registry.Type<Blockly.IToolbox>} */\nBlockly.registry.Type.TOOLBOX = new Blockly.registry.Type('toolbox');\n\n/** @type {!Blockly.registry.Type<Blockly.Theme>} */\nBlockly.registry.Type.THEME = new Blockly.registry.Type('theme');\n\n/**\n * Registers a class based on a type and name.\n * @param {string|Blockly.registry.Type<T>} type The type of the plugin.\n *     (e.g. Field, Renderer)\n * @param {string} name The plugin's name. (Ex. field_angle, geras)\n * @param {?function(new:T, ...?)|Object} registryItem The class or object to\n *     register.\n * @throws {Error} if the type or name is empty, a name with the given type has\n *     already been registered, or if the given class or object is not valid for it's type.\n * @template T\n */\nBlockly.registry.register = function(type, name, registryItem) {\n  if ((!(type instanceof Blockly.registry.Type) && typeof type != 'string') || String(type).trim() == '') {\n    throw Error('Invalid type \"' + type + '\". The type must be a' +\n      ' non-empty string or a Blockly.registry.Type.');\n  }\n  type = String(type).toLowerCase();\n\n  if ((typeof name != 'string') || (name.trim() == '')) {\n    throw Error('Invalid name \"' + name + '\". The name must be a' +\n      ' non-empty string.');\n  }\n  name = name.toLowerCase();\n  if (!registryItem) {\n    throw Error('Can not register a null value');\n  }\n  var typeRegistry = Blockly.registry.typeMap_[type];\n  // If the type registry has not been created, create it.\n  if (!typeRegistry) {\n    typeRegistry = Blockly.registry.typeMap_[type] = {};\n  }\n\n  // Validate that the given class has all the required properties.\n  Blockly.registry.validate_(type, registryItem);\n\n  // If the name already exists throw an error.\n  if (typeRegistry[name]) {\n    throw Error('Name \"' + name + '\" with type \"' + type + '\" already registered.');\n  }\n  typeRegistry[name] = registryItem;\n};\n\n/**\n * Checks the given registry item for properties that are required based on the\n * type.\n * @param {string} type The type of the plugin. (e.g. Field, Renderer)\n * @param {Function|Object} registryItem A class or object that we are checking\n *     for the required properties.\n * @private\n */\nBlockly.registry.validate_ = function(type, registryItem) {\n  switch (type) {\n    case String(Blockly.registry.Type.FIELD):\n      if (typeof registryItem.fromJson != 'function') {\n        throw Error('Type \"' + type + '\" must have a fromJson function');\n      }\n      break;\n  }\n};\n\n/**\n * Unregisters the registry item with the given type and name.\n * @param {string|Blockly.registry.Type<T>} type The type of the plugin.\n *     (e.g. Field, Renderer)\n * @param {string} name The plugin's name. (Ex. field_angle, geras)\n * @template T\n */\nBlockly.registry.unregister = function(type, name) {\n  type = String(type).toLowerCase();\n  name = name.toLowerCase();\n  var typeRegistry = Blockly.registry.typeMap_[type];\n  if (!typeRegistry) {\n    console.warn('No type \"' + type + '\" found');\n    return;\n  }\n  if (!typeRegistry[name]) {\n    console.warn('No name \"' + name + '\" with type \"' + type + '\" found');\n    return;\n  }\n  delete Blockly.registry.typeMap_[type][name];\n};\n\n/**\n * Gets the registry item for the given name and type. This can be either a\n * class or an object.l\n * @param {string|Blockly.registry.Type<T>} type The type of the plugin.\n *     (e.g. Field, Renderer)\n * @param {string} name The plugin's name. (Ex. field_angle, geras)\n * @return {?function(new:T, ...?)|Object} The class or object with the given\n *     name and type or null if none exists.\n * @template T\n */\nBlockly.registry.getItem_ = function(type, name) {\n  type = String(type).toLowerCase();\n  name = name.toLowerCase();\n  var typeRegistry = Blockly.registry.typeMap_[type];\n  if (!typeRegistry) {\n    console.warn('No type \"' + type + '\" found');\n    return null;\n  }\n  if (!typeRegistry[name]) {\n    console.warn('No name \"' + name + '\" with type \"' + type + '\" found');\n    return null;\n  }\n  return typeRegistry[name];\n};\n\n/**\n * Gets the class for the given name and type.\n * @param {string|Blockly.registry.Type<T>} type The type of the plugin.\n *     (e.g. Field, Renderer)\n * @param {string} name The plugin's name. (Ex. field_angle, geras)\n * @return {?function(new:T, ...?)} The class with the given name and type or\n *     null if none exists.\n * @template T\n */\nBlockly.registry.getClass = function(type, name) {\n  return /** @type {?function(new:T, ...?)} */ (Blockly.registry.getItem_(type, name));\n};\n\n/**\n * Gets the object for the given name and type.\n * @param {string|Blockly.registry.Type<T>} type The type of the plugin.\n *     (e.g. Category)\n * @param {string} name The plugin's name. (Ex. logic_category)\n * @returns {T} The object with the given name and type or null if none exists.\n * @template T\n */\nBlockly.registry.getObject = function(type, name) {\n  return /** @type {T} */ (Blockly.registry.getItem_(type, name));\n};\n\n/**\n * Gets the class from Blockly options for the given type.\n * This is used for plugins that override a built in feature. (e.g. Toolbox)\n * @param {Blockly.registry.Type<T>} type The type of the plugin.\n * @param {!Blockly.Options} options The option object to check for the given\n *     plugin.\n * @return {?function(new:T, ...?)} The class for the plugin.\n * @template T\n */\nBlockly.registry.getClassFromOptions = function(type, options) {\n  var typeName = type.toString();\n  var plugin = options.plugins[typeName] || Blockly.registry.DEFAULT;\n\n  // If the user passed in a plugin class instead of a registered plugin name.\n  if (typeof plugin == 'function') {\n    return plugin;\n  }\n  return Blockly.registry.getClass(type, plugin);\n};\n"],"file":"registry.min.js"}