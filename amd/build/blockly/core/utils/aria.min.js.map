{"version":3,"sources":["../../../../src/blockly/core/utils/aria.js"],"names":["goog","provide","Blockly","utils","aria","ARIA_PREFIX_","ROLE_ATTRIBUTE_","Role","GRID","GRIDCELL","GROUP","LISTBOX","MENU","MENUITEM","MENUITEMCHECKBOX","OPTION","PRESENTATION","ROW","TREE","TREEITEM","State","ACTIVEDESCENDANT","COLCOUNT","DISABLED","EXPANDED","INVALID","LABEL","LABELLEDBY","LEVEL","ORIENTATION","POSINSET","ROWCOUNT","SELECTED","SETSIZE","VALUEMAX","VALUEMIN","setRole","element","roleName","setAttribute","setState","stateName","value","Array","isArray","join","attrStateName"],"mappings":"AAYA,aAEAA,IAAI,CAACC,OAAL,CAAa,oBAAb,EAOAC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBC,YAAnB,CAAkC,OAAlC,CAMAH,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBE,eAAnB,CAAqC,MAArC,CAOAJ,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBG,IAAnB,CAA0B,CAExBC,IAAI,CAAE,MAFkB,CAKxBC,QAAQ,CAAE,UALc,CAQxBC,KAAK,CAAE,OARiB,CAWxBC,OAAO,CAAE,SAXe,CAcxBC,IAAI,CAAE,MAdkB,CAiBxBC,QAAQ,CAAE,UAjBc,CAoBxBC,gBAAgB,CAAE,kBApBM,CAwBxBC,MAAM,CAAE,QAxBgB,CA2BxBC,YAAY,CAAE,cA3BU,CA8BxBC,GAAG,CAAE,KA9BmB,CAiCxBC,IAAI,CAAE,MAjCkB,CAoCxBC,QAAQ,CAAE,UApCc,CAA1B,CA4CAjB,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBgB,KAAnB,CAA2B,CAGzBC,gBAAgB,CAAE,kBAHO,CAQzBC,QAAQ,CAAE,UARe,CAWzBC,QAAQ,CAAE,UAXe,CAezBC,QAAQ,CAAE,UAfe,CAmBzBC,OAAO,CAAE,SAnBgB,CAuBzBC,KAAK,CAAE,OAvBkB,CA2BzBC,UAAU,CAAE,YA3Ba,CA+BzBC,KAAK,CAAE,OA/BkB,CAmCzBC,WAAW,CAAE,aAnCY,CAuCzBC,QAAQ,CAAE,UAvCe,CA4CzBC,QAAQ,CAAE,UA5Ce,CAgDzBC,QAAQ,CAAE,UAhDe,CAmDzBC,OAAO,CAAE,SAnDgB,CAsDzBC,QAAQ,CAAE,UAtDe,CAyDzBC,QAAQ,CAAE,UAzDe,CAA3B,CAoEAjC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBgC,OAAnB,CAA6B,SAASC,CAAT,CAAkBC,CAAlB,CAA4B,CACvDD,CAAO,CAACE,YAAR,CAAqBrC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBE,eAAxC,CAAyDgC,CAAzD,CACD,CAFD,CAcApC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBoC,QAAnB,CAA8B,SAASH,CAAT,CAAkBI,CAAlB,CAA6BC,CAA7B,CAAoC,CAChE,GAAIC,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAJ,CAA0B,CACxBA,CAAK,CAAGA,CAAK,CAACG,IAAN,CAAW,GAAX,CACT,CACD,GAAIC,CAAAA,CAAa,CAAG5C,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBC,YAAnB,CAAkCoC,CAAtD,CACAJ,CAAO,CAACE,YAAR,CAAqBO,CAArB,CAAoCJ,CAApC,CACD,CAND","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Constant declarations for common key codes.\n * These methods are not specific to Blockly, and could be factored out into\n * a JavaScript framework such as Closure.\n * @author samelh@google.com (Sam El-Husseini)\n */\n'use strict';\n\ngoog.provide('Blockly.utils.aria');\n\n\n/**\n * ARIA states/properties prefix.\n * @private\n */\nBlockly.utils.aria.ARIA_PREFIX_ = 'aria-';\n\n/**\n * ARIA role attribute.\n * @private\n */\nBlockly.utils.aria.ROLE_ATTRIBUTE_ = 'role';\n\n/**\n * ARIA role values.\n * Copied from Closure's goog.a11y.aria.Role\n * @enum {string}\n */\nBlockly.utils.aria.Role = {\n  // ARIA role for an interactive control of tabular data.\n  GRID: 'grid',\n\n  // ARIA role for a cell in a grid.\n  GRIDCELL: 'gridcell',\n\n  // ARIA role for a group of related elements like tree item siblings.\n  GROUP: 'group',\n\n  // ARIA role for a listbox.\n  LISTBOX: 'listbox',\n\n  // ARIA role for a popup menu.\n  MENU: 'menu',\n\n  // ARIA role for menu item elements.\n  MENUITEM: 'menuitem',\n\n  // ARIA role for a checkbox box element inside a menu.\n  MENUITEMCHECKBOX: 'menuitemcheckbox',\n\n  // ARIA role for option items that are  children of combobox, listbox, menu,\n  // radiogroup, or tree elements.\n  OPTION: 'option',\n\n  // ARIA role for ignorable cosmetic elements with no semantic significance.\n  PRESENTATION: 'presentation',\n\n  // ARIA role for a row of cells in a grid.\n  ROW: 'row',\n\n  // ARIA role for a tree.\n  TREE: 'tree',\n\n  // ARIA role for a tree item that sometimes may be expanded or collapsed.\n  TREEITEM: 'treeitem'\n};\n\n/**\n * ARIA states and properties.\n * Copied from Closure's goog.a11y.aria.State\n * @enum {string}\n */\nBlockly.utils.aria.State = {\n  // ARIA property for setting the currently active descendant of an element,\n  // for example the selected item in a list box. Value: ID of an element.\n  ACTIVEDESCENDANT: 'activedescendant',\n\n  // ARIA property defines the total number of columns in a table, grid, or\n  // treegrid.\n  // Value: integer.\n  COLCOUNT: 'colcount',\n\n  // ARIA state for a disabled item. Value: one of {true, false}.\n  DISABLED: 'disabled',\n\n  // ARIA state for setting whether the element like a tree node is expanded.\n  // Value: one of {true, false, undefined}.\n  EXPANDED: 'expanded',\n\n  // ARIA state indicating that the entered value does not conform. Value:\n  // one of {false, true, 'grammar', 'spelling'}\n  INVALID: 'invalid',\n\n  // ARIA property that provides a label to override any other text, value, or\n  // contents used to describe this element. Value: string.\n  LABEL: 'label',\n\n  // ARIA property for setting the element which labels another element.\n  // Value: space-separated IDs of elements.\n  LABELLEDBY: 'labelledby',\n\n  // ARIA property for setting the level of an element in the hierarchy.\n  // Value: integer.\n  LEVEL: 'level',\n\n  // ARIA property indicating if the element is horizontal or vertical.\n  // Value: one of {'vertical', 'horizontal'}.\n  ORIENTATION: 'orientation',\n\n  // ARIA property that defines an element's number of position in a list.\n  // Value: integer.\n  POSINSET: 'posinset',\n\n  // ARIA property defines the total number of rows in a table, grid, or\n  // treegrid.\n  // Value: integer.\n  ROWCOUNT: 'rowcount',\n\n  // ARIA state for setting the currently selected item in the list.\n  // Value: one of {true, false, undefined}.\n  SELECTED: 'selected',\n\n  // ARIA property defining the number of items in a list. Value: integer.\n  SETSIZE: 'setsize',\n\n  // ARIA property for slider maximum value. Value: number.\n  VALUEMAX: 'valuemax',\n\n  // ARIA property for slider minimum value. Value: number.\n  VALUEMIN: 'valuemin'\n};\n\n/**\n * Sets the role of an element.\n *\n * Similar to Closure's goog.a11y.aria\n *\n * @param {!Element} element DOM node to set role of.\n * @param {!Blockly.utils.aria.Role} roleName Role name.\n */\nBlockly.utils.aria.setRole = function(element, roleName) {\n  element.setAttribute(Blockly.utils.aria.ROLE_ATTRIBUTE_, roleName);\n};\n\n/**\n * Sets the state or property of an element.\n * Copied from Closure's goog.a11y.aria\n * @param {!Element} element DOM node where we set state.\n * @param {!Blockly.utils.aria.State} stateName State attribute being set.\n *     Automatically adds prefix 'aria-' to the state name if the attribute is\n *     not an extra attribute.\n * @param {string|boolean|number|!Array.<string>} value Value\n * for the state attribute.\n */\nBlockly.utils.aria.setState = function(element, stateName, value) {\n  if (Array.isArray(value)) {\n    value = value.join(' ');\n  }\n  var attrStateName = Blockly.utils.aria.ARIA_PREFIX_ + stateName;\n  element.setAttribute(attrStateName, value);\n};\n"],"file":"aria.min.js"}