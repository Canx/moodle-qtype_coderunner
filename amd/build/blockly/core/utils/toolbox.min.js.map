{"version":3,"sources":["../../../../src/blockly/core/utils/toolbox.js"],"names":["goog","provide","Blockly","utils","toolbox","Block","Separator","Button","Label","Category","Toolbox","ToolboxDefinition","convertToolboxToJSON","toolboxDef","Array","isArray","length","nodeType","hasCategories","console","warn","toolboxXmlToJson_","arr","childNodes","i","child","tagName","obj","toUpperCase","j","attr","attributes","nodeName","value","push","getElementsByTagName"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility functions for the toolbox and flyout.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n'use strict';\n\ngoog.provide('Blockly.utils.toolbox');\n\n\n/**\n * The information needed to create a block in the toolbox.\n * @typedef {{\n *            kind:string,\n *            blockxml:(?string|Node),\n *            type: ?string,\n *            gap: (?string|?number),\n *            disabled: (?string|?boolean)\n *          }}\n */\nBlockly.utils.toolbox.Block;\n\n/**\n * The information needed to create a separator in the toolbox.\n * @typedef {{\n *            kind:string,\n *            gap:?number\n *          }}\n */\nBlockly.utils.toolbox.Separator;\n\n/**\n * The information needed to create a button in the toolbox.\n * @typedef {{\n *            kind:string,\n *            text:string,\n *            callbackkey:string\n *          }}\n */\nBlockly.utils.toolbox.Button;\n\n/**\n * The information needed to create a label in the toolbox.\n * @typedef {{\n *            kind:string,\n *            text:string\n *          }}\n */\nBlockly.utils.toolbox.Label;\n\n/**\n * The information needed to create a category in the toolbox.\n * @typedef {{\n *            kind:string,\n *            name:string,\n *            categorystyle:?string,\n *            colour:?string,\n *            contents:Array.<Blockly.utils.toolbox.Toolbox>\n *          }}\n */\nBlockly.utils.toolbox.Category;\n\n/**\n * Any information that can be used to create an item in the toolbox.\n * @typedef {Blockly.utils.toolbox.Block|\n *           Blockly.utils.toolbox.Separator|\n *           Blockly.utils.toolbox.Button|\n *           Blockly.utils.toolbox.Label|\n *           Blockly.utils.toolbox.Category}\n */\nBlockly.utils.toolbox.Toolbox;\n\n/**\n * All of the different types that can create a toolbox.\n * @typedef {Node|\n *           NodeList|\n *           Array.<Blockly.utils.toolbox.Toolbox>|\n *           Array.<Node>}\n */\nBlockly.utils.toolbox.ToolboxDefinition;\n\n\n/**\n * Parse the provided toolbox definition into a consistent format.\n * @param {Blockly.utils.toolbox.ToolboxDefinition} toolboxDef The definition of the\n *    toolbox in one of its many forms.\n * @return {Array.<Blockly.utils.toolbox.Toolbox>} Array of JSON holding\n *    information on toolbox contents.\n * @package\n */\nBlockly.utils.toolbox.convertToolboxToJSON = function(toolboxDef) {\n  if (!toolboxDef) {\n    return null;\n  }\n  // If it is an array of JSON, then it is already in the correct format.\n  if (Array.isArray(toolboxDef) && toolboxDef.length && !(toolboxDef[0].nodeType)) {\n    if (Blockly.utils.toolbox.hasCategories(toolboxDef)) {\n      // TODO: Remove after #3985 has been looked into.\n      console.warn('Due to some performance issues, defining a toolbox using' +\n          'JSON is not ready yet. Please define your toolbox using xml.');\n    }\n    return /** @type {!Array.<Blockly.utils.toolbox.Toolbox>} */ (toolboxDef);\n  }\n\n  return Blockly.utils.toolbox.toolboxXmlToJson_(toolboxDef);\n};\n\n/**\n * Convert the xml for a toolbox to JSON.\n * @param {!NodeList|!Node|!Array.<Node>} toolboxDef The\n *     definition of the toolbox in one of its many forms.\n * @return {!Array.<Blockly.utils.toolbox.Toolbox>} A list of objects in the\n *    toolbox.\n * @private\n */\nBlockly.utils.toolbox.toolboxXmlToJson_ = function(toolboxDef) {\n  var arr = [];\n  // If it is a node it will have children.\n  var childNodes = toolboxDef.childNodes;\n  if (!childNodes) {\n    // Otherwise the toolboxDef is an array or collection.\n    childNodes = toolboxDef;\n  }\n  for (var i = 0, child; (child = childNodes[i]); i++) {\n    if (!child.tagName) {\n      continue;\n    }\n    var obj = {};\n    var tagName = child.tagName.toUpperCase();\n    obj['kind'] = tagName;\n\n    // Store the xml for a block\n    if (tagName == 'BLOCK') {\n      obj['blockxml'] = child;\n    } else if (tagName == 'CATEGORY') {\n      // Get the contents of a category\n      obj['contents'] = Blockly.utils.toolbox.toolboxXmlToJson_(child);\n    }\n\n    // Add xml attributes to object\n    for (var j = 0; j < child.attributes.length; j++) {\n      var attr = child.attributes[j];\n      obj[attr.nodeName] = attr.value;\n    }\n    arr.push(obj);\n  }\n  return arr;\n};\n\n/**\n * Whether or not the toolbox definition has categories or not.\n * @param {Node|Array.<Blockly.utils.toolbox.Toolbox>} toolboxDef The definition\n *    of the toolbox. Either in xml or JSON.\n * @return {boolean} True if the toolbox has categories.\n * @package\n */\nBlockly.utils.toolbox.hasCategories = function(toolboxDef) {\n  if (Array.isArray(toolboxDef)) {\n    // Search for categories\n    return !!(toolboxDef.length && toolboxDef[0]['kind'].toUpperCase() == 'CATEGORY');\n  } else {\n    return !!(toolboxDef && toolboxDef.getElementsByTagName('category').length);\n  }\n};\n"],"file":"toolbox.min.js"}