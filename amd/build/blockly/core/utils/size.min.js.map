{"version":3,"sources":["../../../../src/blockly/core/utils/size.js"],"names":["goog","provide","Blockly","utils","Size","width","height","equals","a","b"],"mappings":"AAYA,aAMAA,IAAI,CAACC,OAAL,CAAa,oBAAb,EAUAC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAqB,SAASC,CAAT,CAAgBC,CAAhB,CAAwB,CAK3C,KAAKD,KAAL,CAAaA,CAAb,CAMA,KAAKC,MAAL,CAAcA,CACf,CAZD,CAqBAJ,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBG,MAAnB,CAA4B,SAASC,CAAT,CAAYC,CAAZ,CAAe,CACzC,GAAID,CAAC,EAAIC,CAAT,CAAY,CACV,QACD,CACD,GAAI,CAACD,CAAD,EAAM,CAACC,CAAX,CAAc,CACZ,QACD,CACD,MAAOD,CAAAA,CAAC,CAACH,KAAF,EAAWI,CAAC,CAACJ,KAAb,EAAsBG,CAAC,CAACF,MAAF,EAAYG,CAAC,CAACH,MAC5C,CARD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility methods for size calculation.\n * These methods are not specific to Blockly, and could be factored out into\n * a JavaScript framework such as Closure.\n * @author samelh@google.com (Sam El-Husseini)\n */\n'use strict';\n\n/**\n * @name Blockly.utils.Size\n * @namespace\n */\ngoog.provide('Blockly.utils.Size');\n\n\n/**\n * Class for representing sizes consisting of a width and height.\n * @param {number} width Width.\n * @param {number} height Height.\n * @struct\n * @constructor\n */\nBlockly.utils.Size = function(width, height) {\n  /**\n   * Width\n   * @type {number}\n   */\n  this.width = width;\n\n  /**\n   * Height\n   * @type {number}\n   */\n  this.height = height;\n};\n\n/**\n * Compares sizes for equality.\n * @param {Blockly.utils.Size} a A Size.\n * @param {Blockly.utils.Size} b A Size.\n * @return {boolean} True iff the sizes have equal widths and equal\n *     heights, or if both are null.\n */\nBlockly.utils.Size.equals = function(a, b) {\n  if (a == b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.width == b.width && a.height == b.height;\n};\n"],"file":"size.min.js"}