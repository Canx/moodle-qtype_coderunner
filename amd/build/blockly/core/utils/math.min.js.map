{"version":3,"sources":["../../../../src/blockly/core/utils/math.js"],"names":["goog","provide","Blockly","utils","math","toRadians","angleDegrees","Math","PI","toDegrees","angleRadians","clamp","lowerBound","number","upperBound","temp","max","min"],"mappings":"AAYA,aAMAA,IAAI,CAACC,OAAL,CAAa,oBAAb,EASAC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBC,SAAnB,CAA+B,SAASC,CAAT,CAAuB,CACpD,MAAOA,CAAAA,CAAY,CAAGC,IAAI,CAACC,EAApB,CAAyB,GACjC,CAFD,CAUAN,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBK,SAAnB,CAA+B,SAASC,CAAT,CAAuB,CACpD,MAAsB,IAAf,CAAAA,CAAY,CAASH,IAAI,CAACC,EAClC,CAFD,CAWAN,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBO,KAAnB,CAA2B,SAASC,CAAT,CAAqBC,CAArB,CAA6BC,CAA7B,CAAyC,CAClE,GAAIA,CAAU,CAAGF,CAAjB,CAA6B,CAC3B,GAAIG,CAAAA,CAAI,CAAGD,CAAX,CACAA,CAAU,CAAGF,CAAb,CACAA,CAAU,CAAGG,CACd,CACD,MAAOR,CAAAA,IAAI,CAACS,GAAL,CAASJ,CAAT,CAAqBL,IAAI,CAACU,GAAL,CAASJ,CAAT,CAAiBC,CAAjB,CAArB,CACR,CAPD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility methods for math.\n * These methods are not specific to Blockly, and could be factored out into\n * a JavaScript framework such as Closure.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\n/**\n * @name Blockly.utils.math\n * @namespace\n */\ngoog.provide('Blockly.utils.math');\n\n\n/**\n * Converts degrees to radians.\n * Copied from Closure's goog.math.toRadians.\n * @param {number} angleDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nBlockly.utils.math.toRadians = function(angleDegrees) {\n  return angleDegrees * Math.PI / 180;\n};\n\n/**\n * Converts radians to degrees.\n * Copied from Closure's goog.math.toDegrees.\n * @param {number} angleRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nBlockly.utils.math.toDegrees = function(angleRadians) {\n  return angleRadians * 180 / Math.PI;\n};\n\n/**\n * Clamp the provided number between the lower bound and the upper bound.\n * @param {number} lowerBound The desired lower bound.\n * @param {number} number The number to clamp.\n * @param {number} upperBound The desired upper bound.\n * @return {number} The clamped number.\n */\nBlockly.utils.math.clamp = function(lowerBound, number, upperBound) {\n  if (upperBound < lowerBound) {\n    var temp = upperBound;\n    upperBound = lowerBound;\n    lowerBound = temp;\n  }\n  return Math.max(lowerBound, Math.min(number, upperBound));\n};\n"],"file":"math.min.js"}