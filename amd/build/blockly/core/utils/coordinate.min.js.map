{"version":3,"sources":["../../../../src/blockly/core/utils/coordinate.js"],"names":["goog","provide","Blockly","utils","Coordinate","x","y","equals","a","b","distance","dx","dy","Math","sqrt","magnitude","difference","sum","prototype","scale","s","translate","tx","ty"],"mappings":"AAYA,aAMAA,IAAI,CAACC,OAAL,CAAa,0BAAb,EAUAC,OAAO,CAACC,KAAR,CAAcC,UAAd,CAA2B,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAKxC,KAAKD,CAAL,CAASA,CAAT,CAMA,KAAKC,CAAL,CAASA,CACV,CAZD,CAoBAJ,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyBG,MAAzB,CAAkC,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAC/C,GAAID,CAAC,EAAIC,CAAT,CAAY,CACV,QACD,CACD,GAAI,CAACD,CAAD,EAAM,CAACC,CAAX,CAAc,CACZ,QACD,CACD,MAAOD,CAAAA,CAAC,CAACH,CAAF,EAAOI,CAAC,CAACJ,CAAT,EAAcG,CAAC,CAACF,CAAF,EAAOG,CAAC,CAACH,CAC/B,CARD,CAgBAJ,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyBM,QAAzB,CAAoC,SAASF,CAAT,CAAYC,CAAZ,CAAe,IAC7CE,CAAAA,CAAE,CAAGH,CAAC,CAACH,CAAF,CAAMI,CAAC,CAACJ,CADgC,CAE7CO,CAAE,CAAGJ,CAAC,CAACF,CAAF,CAAMG,CAAC,CAACH,CAFgC,CAGjD,MAAOO,CAAAA,IAAI,CAACC,IAAL,CAAUH,CAAE,CAAGA,CAAL,CAAUC,CAAE,CAAGA,CAAzB,CACR,CAJD,CAWAV,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyBW,SAAzB,CAAqC,SAASP,CAAT,CAAY,CAC/C,MAAOK,CAAAA,IAAI,CAACC,IAAL,CAAUN,CAAC,CAACH,CAAF,CAAMG,CAAC,CAACH,CAAR,CAAYG,CAAC,CAACF,CAAF,CAAME,CAAC,CAACF,CAA9B,CACR,CAFD,CAYAJ,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyBY,UAAzB,CAAsC,SAASR,CAAT,CAAYC,CAAZ,CAAe,CACnD,MAAO,IAAIP,CAAAA,OAAO,CAACC,KAAR,CAAcC,UAAlB,CAA6BI,CAAC,CAACH,CAAF,CAAMI,CAAC,CAACJ,CAArC,CAAwCG,CAAC,CAACF,CAAF,CAAMG,CAAC,CAACH,CAAhD,CACR,CAFD,CAWAJ,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyBa,GAAzB,CAA+B,SAAST,CAAT,CAAYC,CAAZ,CAAe,CAC5C,MAAO,IAAIP,CAAAA,OAAO,CAACC,KAAR,CAAcC,UAAlB,CAA6BI,CAAC,CAACH,CAAF,CAAMI,CAAC,CAACJ,CAArC,CAAwCG,CAAC,CAACF,CAAF,CAAMG,CAAC,CAACH,CAAhD,CACR,CAFD,CASAJ,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyBc,SAAzB,CAAmCC,KAAnC,CAA2C,SAASC,CAAT,CAAY,CACrD,KAAKf,CAAL,EAAUe,CAAV,CACA,KAAKd,CAAL,EAAUc,CAAV,CACA,MAAO,KACR,CAJD,CAaAlB,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyBc,SAAzB,CAAmCG,SAAnC,CAA+C,SAASC,CAAT,CAAaC,CAAb,CAAiB,CAC9D,KAAKlB,CAAL,EAAUiB,CAAV,CACA,KAAKhB,CAAL,EAAUiB,CAAV,CACA,MAAO,KACR,CAJD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility methods for coordinate manipulation.\n * These methods are not specific to Blockly, and could be factored out into\n * a JavaScript framework such as Closure.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\n/**\n * @name Blockly.utils.Coordinate\n * @namespace\n */\ngoog.provide('Blockly.utils.Coordinate');\n\n\n/**\n * Class for representing coordinates and positions.\n * @param {number} x Left.\n * @param {number} y Top.\n * @struct\n * @constructor\n */\nBlockly.utils.Coordinate = function(x, y) {\n  /**\n   * X-value\n   * @type {number}\n   */\n  this.x = x;\n\n  /**\n   * Y-value\n   * @type {number}\n   */\n  this.y = y;\n};\n\n/**\n * Compares coordinates for equality.\n * @param {Blockly.utils.Coordinate} a A Coordinate.\n * @param {Blockly.utils.Coordinate} b A Coordinate.\n * @return {boolean} True iff the coordinates are equal, or if both are null.\n */\nBlockly.utils.Coordinate.equals = function(a, b) {\n  if (a == b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.x == b.x && a.y == b.y;\n};\n\n/**\n * Returns the distance between two coordinates.\n * @param {!Blockly.utils.Coordinate} a A Coordinate.\n * @param {!Blockly.utils.Coordinate} b A Coordinate.\n * @return {number} The distance between `a` and `b`.\n */\nBlockly.utils.Coordinate.distance = function(a, b) {\n  var dx = a.x - b.x;\n  var dy = a.y - b.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Returns the magnitude of a coordinate.\n * @param {!Blockly.utils.Coordinate} a A Coordinate.\n * @return {number} The distance between the origin and `a`.\n */\nBlockly.utils.Coordinate.magnitude = function(a) {\n  return Math.sqrt(a.x * a.x + a.y * a.y);\n};\n\n/**\n * Returns the difference between two coordinates as a new\n * Blockly.utils.Coordinate.\n * @param {!Blockly.utils.Coordinate|!SVGPoint} a An x/y coordinate.\n * @param {!Blockly.utils.Coordinate|!SVGPoint} b An x/y coordinate.\n * @return {!Blockly.utils.Coordinate} A Coordinate representing the difference\n *     between `a` and `b`.\n */\nBlockly.utils.Coordinate.difference = function(a, b) {\n  return new Blockly.utils.Coordinate(a.x - b.x, a.y - b.y);\n};\n\n/**\n * Returns the sum of two coordinates as a new Blockly.utils.Coordinate.\n * @param {!Blockly.utils.Coordinate|!SVGPoint} a An x/y coordinate.\n * @param {!Blockly.utils.Coordinate|!SVGPoint} b An x/y coordinate.\n * @return {!Blockly.utils.Coordinate} A Coordinate representing the sum of\n *     the two coordinates.\n */\nBlockly.utils.Coordinate.sum = function(a, b) {\n  return new Blockly.utils.Coordinate(a.x + b.x, a.y + b.y);\n};\n\n/**\n * Scales this coordinate by the given scale factor.\n * @param {number} s The scale factor to use for both x and y dimensions.\n * @return {!Blockly.utils.Coordinate} This coordinate after scaling.\n */\nBlockly.utils.Coordinate.prototype.scale = function(s) {\n  this.x *= s;\n  this.y *= s;\n  return this;\n};\n\n/**\n * Translates this coordinate by the given offsets.\n * respectively.\n * @param {number} tx The value to translate x by.\n * @param {number} ty The value to translate y by.\n * @return {!Blockly.utils.Coordinate} This coordinate after translating.\n */\nBlockly.utils.Coordinate.prototype.translate = function(tx, ty) {\n  this.x += tx;\n  this.y += ty;\n  return this;\n};\n"],"file":"coordinate.min.js"}