{"version":3,"sources":["../../../../src/blockly/core/utils/style.js"],"names":["goog","provide","require","Blockly","utils","style","getSize","element","getStyle_","getSizeWithDisplay_","originalDisplay","display","originalVisibility","visibility","originalPosition","position","offsetWidth","offsetHeight","Size","getComputedStyle","getCascadedStyle","property","document","defaultView","styles","getPropertyValue","currentStyle","getPageOffset","el","pos","Coordinate","box","getBoundingClientRect","documentElement","scrollCoord","window","pageXOffset","scrollLeft","pageYOffset","scrollTop","x","left","y","top","getViewportPageOffset","body","setElementShown","isShown","isRightToLeft","getBorderBox","right","bottom","parseFloat","scrollIntoContainerView","container","opt_center","offset","getContainerOffsetToScrollInto","elementPos","containerPos","containerBorder","relX","relY","elementSize","spaceX","clientWidth","width","spaceY","clientHeight","height","Math","min","max"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for element styles.\n * These methods are not specific to Blockly, and could be factored out into\n * a JavaScript framework such as Closure.\n * @author samelh@google.com (Sam El-Husseini)\n */\n'use strict';\n\n/**\n * @name Blockly.utils.style\n * @namespace\n */\ngoog.provide('Blockly.utils.style');\n\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.Size');\n\n\n/**\n * Gets the height and width of an element.\n * Similar to Closure's goog.style.getSize\n * @param {!Element} element Element to get size of.\n * @return {!Blockly.utils.Size} Object with width/height properties.\n */\nBlockly.utils.style.getSize = function(element) {\n  if (Blockly.utils.style.getStyle_(element, 'display') != 'none') {\n    return Blockly.utils.style.getSizeWithDisplay_(element);\n  }\n\n  // Evaluate size with a temporary element.\n  var style = element.style;\n  var originalDisplay = style.display;\n  var originalVisibility = style.visibility;\n  var originalPosition = style.position;\n\n  style.visibility = 'hidden';\n  style.position = 'absolute';\n  style.display = 'inline';\n\n  var offsetWidth = /** @type {!HTMLElement} */ (element).offsetWidth;\n  var offsetHeight = /** @type {!HTMLElement} */ (element).offsetHeight;\n\n  style.display = originalDisplay;\n  style.position = originalPosition;\n  style.visibility = originalVisibility;\n\n  return new Blockly.utils.Size(offsetWidth, offsetHeight);\n};\n\n/**\n * Gets the height and width of an element when the display is not none.\n * @param {!Element} element Element to get size of.\n * @return {!Blockly.utils.Size} Object with width/height properties.\n * @private\n */\nBlockly.utils.style.getSizeWithDisplay_ = function(element) {\n  var offsetWidth = /** @type {!HTMLElement} */ (element).offsetWidth;\n  var offsetHeight = /** @type {!HTMLElement} */ (element).offsetHeight;\n  return new Blockly.utils.Size(offsetWidth, offsetHeight);\n};\n\n/**\n * Cross-browser pseudo get computed style. It returns the computed style where\n * available. If not available it tries the cascaded style value (IE\n * currentStyle) and in worst case the inline style value.  It shouldn't be\n * called directly, see http://wiki/Main/ComputedStyleVsCascadedStyle for\n * discussion.\n *\n * Copied from Closure's goog.style.getStyle_\n *\n * @param {!Element} element Element to get style of.\n * @param {string} style Property to get (must be camelCase, not css-style.).\n * @return {string} Style value.\n * @private\n */\nBlockly.utils.style.getStyle_ = function(element, style) {\n  return Blockly.utils.style.getComputedStyle(element, style) ||\n      Blockly.utils.style.getCascadedStyle(element, style) ||\n      (element.style && element.style[style]);\n};\n\n/**\n * Retrieves a computed style value of a node. It returns empty string if the\n * value cannot be computed (which will be the case in Internet Explorer) or\n * \"none\" if the property requested is an SVG one and it has not been\n * explicitly set (firefox and webkit).\n *\n * Copied from Closure's goog.style.getComputedStyle\n *\n * @param {!Element} element Element to get style of.\n * @param {string} property Property to get (camel-case).\n * @return {string} Style value.\n */\nBlockly.utils.style.getComputedStyle = function(element, property) {\n  if (document.defaultView && document.defaultView.getComputedStyle) {\n    var styles = document.defaultView.getComputedStyle(element, null);\n    if (styles) {\n      // element.style[..] is undefined for browser specific styles\n      // as 'filter'.\n      return styles[property] || styles.getPropertyValue(property) || '';\n    }\n  }\n\n  return '';\n};\n\n/**\n * Gets the cascaded style value of a node, or null if the value cannot be\n * computed (only Internet Explorer can do this).\n *\n * Copied from Closure's goog.style.getCascadedStyle\n *\n * @param {!Element} element Element to get style of.\n * @param {string} style Property to get (camel-case).\n * @return {string} Style value.\n */\nBlockly.utils.style.getCascadedStyle = function(element, style) {\n  return /** @type {string} */ (\n      element.currentStyle ? element.currentStyle[style] : null);\n};\n\n/**\n * Returns a Coordinate object relative to the top-left of the HTML document.\n * Similar to Closure's goog.style.getPageOffset\n * @param {!Element} el Element to get the page offset for.\n * @return {!Blockly.utils.Coordinate} The page offset.\n */\nBlockly.utils.style.getPageOffset = function(el) {\n  var pos = new Blockly.utils.Coordinate(0, 0);\n  var box = el.getBoundingClientRect();\n  var documentElement = document.documentElement;\n  // Must add the scroll coordinates in to get the absolute page offset\n  // of element since getBoundingClientRect returns relative coordinates to\n  // the viewport.\n  var scrollCoord = new Blockly.utils.Coordinate(\n      window.pageXOffset || documentElement.scrollLeft,\n      window.pageYOffset || documentElement.scrollTop);\n  pos.x = box.left + scrollCoord.x;\n  pos.y = box.top + scrollCoord.y;\n\n  return pos;\n};\n\n/**\n * Calculates the viewport coordinates relative to the document.\n * Similar to Closure's goog.style.getViewportPageOffset\n * @return {!Blockly.utils.Coordinate} The page offset of the viewport.\n */\nBlockly.utils.style.getViewportPageOffset = function() {\n  var body = document.body;\n  var documentElement = document.documentElement;\n  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;\n  var scrollTop = body.scrollTop || documentElement.scrollTop;\n  return new Blockly.utils.Coordinate(scrollLeft, scrollTop);\n};\n\n/**\n * Shows or hides an element from the page. Hiding the element is done by\n * setting the display property to \"none\", removing the element from the\n * rendering hierarchy so it takes up no space. To show the element, the default\n * inherited display property is restored (defined either in stylesheets or by\n * the browser's default style rules).\n * Copied from Closure's goog.style.getViewportPageOffset\n *\n * @param {!Element} el Element to show or hide.\n * @param {*} isShown True to render the element in its default style,\n *     false to disable rendering the element.\n */\nBlockly.utils.style.setElementShown = function(el, isShown) {\n  el.style.display = isShown ? '' : 'none';\n};\n\n/**\n * Returns true if the element is using right to left (RTL) direction.\n * Copied from Closure's goog.style.isRightToLeft\n *\n * @param {!Element} el The element to test.\n * @return {boolean} True for right to left, false for left to right.\n */\nBlockly.utils.style.isRightToLeft = function(el) {\n  return 'rtl' == Blockly.utils.style.getStyle_(el, 'direction');\n};\n\n/**\n * Gets the computed border widths (on all sides) in pixels\n * Copied from Closure's goog.style.getBorderBox\n * @param {!Element} element  The element to get the border widths for.\n * @return {!Object} The computed border widths.\n */\nBlockly.utils.style.getBorderBox = function(element) {\n  var left = Blockly.utils.style.getComputedStyle(element, 'borderLeftWidth');\n  var right = Blockly.utils.style.getComputedStyle(element, 'borderRightWidth');\n  var top = Blockly.utils.style.getComputedStyle(element, 'borderTopWidth');\n  var bottom = Blockly.utils.style.getComputedStyle(element, 'borderBottomWidth');\n\n  return {\n    top: parseFloat(top),\n    right: parseFloat(right),\n    bottom: parseFloat(bottom),\n    left: parseFloat(left)\n  };\n};\n\n/**\n * Changes the scroll position of `container` with the minimum amount so\n * that the content and the borders of the given `element` become visible.\n * If the element is bigger than the container, its top left corner will be\n * aligned as close to the container's top left corner as possible.\n * Copied from Closure's goog.style.scrollIntoContainerView\n *\n * @param {!Element} element The element to make visible.\n * @param {!Element} container The container to scroll. If not set, then the\n *     document scroll element will be used.\n * @param {boolean=} opt_center Whether to center the element in the container.\n *     Defaults to false.\n */\nBlockly.utils.style.scrollIntoContainerView = function(\n    element, container, opt_center) {\n  var offset =\n      Blockly.utils.style.getContainerOffsetToScrollInto(element,\n          container, opt_center);\n  container.scrollLeft = offset.x;\n  container.scrollTop = offset.y;\n};\n\n/**\n * Calculate the scroll position of `container` with the minimum amount so\n * that the content and the borders of the given `element` become visible.\n * If the element is bigger than the container, its top left corner will be\n * aligned as close to the container's top left corner as possible.\n * Copied from Closure's goog.style.getContainerOffsetToScrollInto\n *\n * @param {!Element} element The element to make visible.\n * @param {!Element} container The container to scroll. If not set, then the\n *     document scroll element will be used.\n * @param {boolean=} opt_center Whether to center the element in the container.\n *     Defaults to false.\n * @return {!Blockly.utils.Coordinate} The new scroll position of the container,\n *     in form of goog.math.Coordinate(scrollLeft, scrollTop).\n */\nBlockly.utils.style.getContainerOffsetToScrollInto = function(\n    element, container, opt_center) {\n  // Absolute position of the element's border's top left corner.\n  var elementPos = Blockly.utils.style.getPageOffset(element);\n  // Absolute position of the container's border's top left corner.\n  var containerPos = Blockly.utils.style.getPageOffset(container);\n  var containerBorder = Blockly.utils.style.getBorderBox(container);\n  // Relative pos. of the element's border box to the container's content box.\n  var relX = elementPos.x - containerPos.x - containerBorder.left;\n  var relY = elementPos.y - containerPos.y - containerBorder.top;\n  // How much the element can move in the container, i.e. the difference between\n  // the element's bottom-right-most and top-left-most position where it's\n  // fully visible.\n  var elementSize = Blockly.utils.style.getSizeWithDisplay_(element);\n  var spaceX = container.clientWidth - elementSize.width;\n  var spaceY = container.clientHeight - elementSize.height;\n  var scrollLeft = container.scrollLeft;\n  var scrollTop = container.scrollTop;\n  if (opt_center) {\n    // All browsers round non-integer scroll positions down.\n    scrollLeft += relX - spaceX / 2;\n    scrollTop += relY - spaceY / 2;\n  } else {\n    // This formula was designed to give the correct scroll values in the\n    // following cases:\n    // - element is higher than container (spaceY < 0) => scroll down by relY\n    // - element is not higher that container (spaceY >= 0):\n    //   - it is above container (relY < 0) => scroll up by abs(relY)\n    //   - it is below container (relY > spaceY) => scroll down by relY - spaceY\n    //   - it is in the container => don't scroll\n    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));\n    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));\n  }\n  return new Blockly.utils.Coordinate(scrollLeft, scrollTop);\n};\n"],"file":"style.min.js"}