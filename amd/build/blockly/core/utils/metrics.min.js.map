{"version":3,"sources":["../../../../src/blockly/core/utils/metrics.js"],"names":["goog","provide","Blockly","utils","Metrics","prototype","viewHeight","viewWidth","contentHeight","contentWidth","viewTop","viewLeft","contentTop","contentLeft","absoluteTop","absoluteLeft","svgHeight","svgWidth","toolboxWidth","toolboxHeight","toolboxPosition","flyoutWidth","flyoutHeight"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,uBAAb,EAMAC,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAwB,UAAW,CAAE,CAArC,CAMAF,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCC,UAAhC,CAMAJ,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCE,SAAhC,CAMAL,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCG,aAAhC,CAMAN,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCI,YAAhC,CAOAP,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCK,OAAhC,CAOAR,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCM,QAAhC,CAMAT,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCO,UAAhC,CAMAV,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCQ,WAAhC,CAMAX,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCS,WAAhC,CAOAZ,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCU,YAAhC,CAMAb,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCW,SAAhC,CAMAd,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCY,QAAhC,CAMAf,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCa,YAAhC,CAMAhB,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCc,aAAhC,CAMAjB,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCe,eAAhC,CAMAlB,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCgB,WAAhC,CAMAnB,OAAO,CAACC,KAAR,CAAcC,OAAd,CAAsBC,SAAtB,CAAgCiB,YAAhC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Workspace metrics definitions.\n * @author samelh@google.com (Sam El-Husseini)\n */\n'use strict';\n\ngoog.provide('Blockly.utils.Metrics');\n\n\n/**\n * @record\n */\nBlockly.utils.Metrics = function() {};\n\n/**\n * Height of the visible portion of the workspace.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.viewHeight;\n\n/**\n * Width of the visible portion of the workspace.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.viewWidth;\n\n/**\n * Height of the content.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.contentHeight;\n\n/**\n * Width of the content.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.contentWidth;\n\n/**\n * Top-edge of the visible portion of the workspace, relative to the workspace\n * origin.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.viewTop;\n\n/**\n * Left-edge of the visible portion of the workspace, relative to the workspace\n * origin.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.viewLeft;\n\n/**\n * Top-edge of the content, relative to the workspace origin.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.contentTop;\n\n/**\n * Left-edge of the content relative to the workspace origin.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.contentLeft;\n\n/**\n * Top-edge of the visible portion of the workspace, relative to the blocklyDiv.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.absoluteTop;\n\n/**\n * Left-edge of the visible portion of the workspace, relative to the\n * blocklyDiv.\n * @type {number}\n */\nBlockly.utils.Metrics.prototype.absoluteLeft;\n\n/**\n * Height of the Blockly div (the view + the toolbox, simple of otherwise).\n * @type {number|undefined}\n */\nBlockly.utils.Metrics.prototype.svgHeight;\n\n/**\n * Width of the Blockly div (the view + the toolbox, simple or otherwise).\n * @type {number|undefined}\n */\nBlockly.utils.Metrics.prototype.svgWidth;\n\n/**\n * Width of the toolbox, if it exists.  Otherwise zero.\n * @type {number|undefined}\n */\nBlockly.utils.Metrics.prototype.toolboxWidth;\n\n/**\n * Height of the toolbox, if it exists.  Otherwise zero.\n * @type {number|undefined}\n */\nBlockly.utils.Metrics.prototype.toolboxHeight;\n\n/**\n * Top, bottom, left or right. Use TOOLBOX_AT constants to compare.\n * @type {number|undefined}\n */\nBlockly.utils.Metrics.prototype.toolboxPosition;\n\n/**\n * Width of the flyout if it is always open.  Otherwise zero.\n * @type {number|undefined}\n */\nBlockly.utils.Metrics.prototype.flyoutWidth;\n\n/**\n * Height of the flyout if it is always open.  Otherwise zero.\n * @type {number|undefined}\n */\nBlockly.utils.Metrics.prototype.flyoutHeight;\n"],"file":"metrics.min.js"}