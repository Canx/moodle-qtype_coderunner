{"version":3,"sources":["../../../../src/blockly/core/utils/colour.js"],"names":["goog","provide","Blockly","utils","colour","parse","str","toLowerCase","trim","hex","names","substring","test","join","rgb","match","r","g","b","rgbToHex","toString","substr","hexToRgb","parseInt","hsvToHex","h","s","v","red","green","blue","sextant","Math","floor","remainder","val1","val2","val3","blend","colour1","colour2","factor","hex1","hex2","rgb1","rgb2","round"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility methods for colour manipulation.\n * These methods are not specific to Blockly, and could be factored out into\n * a JavaScript framework such as Closure.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\n/**\n * @name Blockly.utils.colour\n * @namespace\n */\ngoog.provide('Blockly.utils.colour');\n\n\n/**\n * Parses a colour from a string.\n * .parse('red') -> '#ff0000'\n * .parse('#f00') -> '#ff0000'\n * .parse('#ff0000') -> '#ff0000'\n * .parse('0xff0000') -> '#ff0000'\n * .parse('rgb(255, 0, 0)') -> '#ff0000'\n * @param {string|number} str Colour in some CSS format.\n * @return {?string} A string containing a hex representation of the colour,\n *   or null if can't be parsed.\n */\nBlockly.utils.colour.parse = function(str) {\n  str = String(str).toLowerCase().trim();\n  var hex = Blockly.utils.colour.names[str];\n  if (hex) {\n    // e.g. 'red'\n    return hex;\n  }\n  hex = str.substring(0, 2) == '0x' ? '#' + str.substring(2) : str;\n  hex = hex[0] == '#' ? hex : '#' + hex;\n  if (/^#[0-9a-f]{6}$/.test(hex)) {\n    // e.g. '#00ff88'\n    return hex;\n  }\n  if (/^#[0-9a-f]{3}$/.test(hex)) {\n    // e.g. '#0f8'\n    return ['#', hex[1], hex[1], hex[2], hex[2], hex[3], hex[3]].join('');\n  }\n  var rgb = str.match(/^(?:rgb)?\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/);\n  if (rgb) {\n    // e.g. 'rgb(0, 128, 255)'\n    var r = Number(rgb[1]);\n    var g = Number(rgb[2]);\n    var b = Number(rgb[3]);\n    if (r >= 0 && r < 256 && g >= 0 && g < 256 && b >= 0 && b < 256) {\n      return Blockly.utils.colour.rgbToHex(r, g, b);\n    }\n  }\n  return null;\n};\n\n/**\n * Converts a colour from RGB to hex representation.\n * @param {number} r Amount of red, int between 0 and 255.\n * @param {number} g Amount of green, int between 0 and 255.\n * @param {number} b Amount of blue, int between 0 and 255.\n * @return {string} Hex representation of the colour.\n */\nBlockly.utils.colour.rgbToHex = function(r, g, b) {\n  var rgb = (r << 16) | (g << 8) | b;\n  if (r < 0x10) {\n    return '#' + (0x1000000 | rgb).toString(16).substr(1);\n  }\n  return '#' + rgb.toString(16);\n};\n\n/**\n * Converts a colour to RGB.\n * @param {string} colour String representing colour in any\n *     colour format ('#ff0000', 'red', '0xff000', etc).\n * @return {!Array.<number>} RGB representation of the colour.\n */\nBlockly.utils.colour.hexToRgb = function(colour) {\n  var hex = Blockly.utils.colour.parse(colour);\n  if (!hex) {\n    return [0, 0, 0];\n  }\n\n  var rgb = parseInt(hex.substr(1), 16);\n  var r = rgb >> 16;\n  var g = (rgb >> 8) & 255;\n  var b = rgb & 255;\n\n  return [r, g, b];\n};\n\n/**\n * Converts an HSV triplet to hex representation.\n * @param {number} h Hue value in [0, 360].\n * @param {number} s Saturation value in [0, 1].\n * @param {number} v Brightness in [0, 255].\n * @return {string} Hex representation of the colour.\n */\nBlockly.utils.colour.hsvToHex = function(h, s, v) {\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  if (s == 0) {\n    red = v;\n    green = v;\n    blue = v;\n  } else {\n    var sextant = Math.floor(h / 60);\n    var remainder = (h / 60) - sextant;\n    var val1 = v * (1 - s);\n    var val2 = v * (1 - (s * remainder));\n    var val3 = v * (1 - (s * (1 - remainder)));\n    switch (sextant) {\n      case 1:\n        red = val2;\n        green = v;\n        blue = val1;\n        break;\n      case 2:\n        red = val1;\n        green = v;\n        blue = val3;\n        break;\n      case 3:\n        red = val1;\n        green = val2;\n        blue = v;\n        break;\n      case 4:\n        red = val3;\n        green = val1;\n        blue = v;\n        break;\n      case 5:\n        red = v;\n        green = val1;\n        blue = val2;\n        break;\n      case 6:\n      case 0:\n        red = v;\n        green = val3;\n        blue = val1;\n        break;\n    }\n  }\n  return Blockly.utils.colour.rgbToHex(\n      Math.floor(red), Math.floor(green), Math.floor(blue));\n};\n\n/**\n * Blend two colours together, using the specified factor to indicate the\n * weight given to the first colour.\n * @param {string} colour1 First colour.\n * @param {string} colour2 Second colour.\n * @param {number} factor The weight to be given to colour1 over colour2.\n *     Values should be in the range [0, 1].\n * @return {?string} Combined colour represented in hex.\n */\nBlockly.utils.colour.blend = function(colour1, colour2, factor) {\n  var hex1 = Blockly.utils.colour.parse(colour1);\n  if (!hex1) {\n    return null;\n  }\n  var hex2 = Blockly.utils.colour.parse(colour2);\n  if (!hex2) {\n    return null;\n  }\n  var rgb1 = Blockly.utils.colour.hexToRgb(hex1);\n  var rgb2 = Blockly.utils.colour.hexToRgb(hex2);\n  var r = Math.round(rgb2[0] + factor * (rgb1[0] - rgb2[0]));\n  var g = Math.round(rgb2[1] + factor * (rgb1[1] - rgb2[1]));\n  var b = Math.round(rgb2[2] + factor * (rgb1[2] - rgb2[2]));\n  return Blockly.utils.colour.rgbToHex(r, g, b);\n};\n\n/**\n * A map that contains the 16 basic colour keywords as defined by W3C:\n * https://www.w3.org/TR/2018/REC-css-color-3-20180619/#html4\n * The keys of this map are the lowercase \"readable\" names of the colours,\n * while the values are the \"hex\" values.\n *\n * @type {!Object<string, string>}\n */\nBlockly.utils.colour.names = {\n  'aqua': '#00ffff',\n  'black': '#000000',\n  'blue': '#0000ff',\n  'fuchsia': '#ff00ff',\n  'gray': '#808080',\n  'green': '#008000',\n  'lime': '#00ff00',\n  'maroon': '#800000',\n  'navy': '#000080',\n  'olive': '#808000',\n  'purple': '#800080',\n  'red': '#ff0000',\n  'silver': '#c0c0c0',\n  'teal': '#008080',\n  'white': '#ffffff',\n  'yellow': '#ffff00'\n};\n"],"file":"colour.min.js"}