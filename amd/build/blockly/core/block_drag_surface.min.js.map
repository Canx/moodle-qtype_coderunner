{"version":3,"sources":["../../../src/blockly/core/block_drag_surface.js"],"names":["goog","provide","require","Blockly","BlockDragSurfaceSvg","container","container_","createDom","prototype","SVG_","dragGroup_","scale_","surfaceXY_","utils","dom","createSvgElement","SVG_NS","HTML_NS","XLINK_NS","setBlocksAndShow","blocks","childNodes","length","Error","appendChild","style","display","Coordinate","translateAndScaleGroup","x","y","scale","fixedX","toFixed","fixedY","setAttribute","translateSurfaceInternal_","setCssTransform","translateSurface","getSurfaceTranslation","xy","getRelativeXY","getGroup","getCurrentBlock","firstChild","clearAndHide","opt_newSurface","removeChild"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview A class that manages a surface for dragging blocks.  When a\n * block drag is started, we move the block (and children) to a separate DOM\n * element that we move around using translate3d. At the end of the drag, the\n * blocks are put back in into the SVG they came from. This helps performance by\n * avoiding repainting the entire SVG on every mouse move while dragging blocks.\n * @author picklesrus\n */\n\n'use strict';\n\ngoog.provide('Blockly.BlockDragSurfaceSvg');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.dom');\n\n\n/**\n * Class for a drag surface for the currently dragged block. This is a separate\n * SVG that contains only the currently moving block, or nothing.\n * @param {!Element} container Containing element.\n * @constructor\n */\nBlockly.BlockDragSurfaceSvg = function(container) {\n  /**\n   * @type {!Element}\n   * @private\n   */\n  this.container_ = container;\n  this.createDom();\n};\n\n/**\n * The SVG drag surface. Set once by Blockly.BlockDragSurfaceSvg.createDom.\n * @type {SVGElement}\n * @private\n */\nBlockly.BlockDragSurfaceSvg.prototype.SVG_ = null;\n\n/**\n * This is where blocks live while they are being dragged if the drag surface\n * is enabled.\n * @type {SVGElement}\n * @private\n */\nBlockly.BlockDragSurfaceSvg.prototype.dragGroup_ = null;\n\n/**\n * Containing HTML element; parent of the workspace and the drag surface.\n * @type {Element}\n * @private\n */\nBlockly.BlockDragSurfaceSvg.prototype.container_ = null;\n\n/**\n * Cached value for the scale of the drag surface.\n * Used to set/get the correct translation during and after a drag.\n * @type {number}\n * @private\n */\nBlockly.BlockDragSurfaceSvg.prototype.scale_ = 1;\n\n/**\n * Cached value for the translation of the drag surface.\n * This translation is in pixel units, because the scale is applied to the\n * drag group rather than the top-level SVG.\n * @type {Blockly.utils.Coordinate}\n * @private\n */\nBlockly.BlockDragSurfaceSvg.prototype.surfaceXY_ = null;\n\n/**\n * Create the drag surface and inject it into the container.\n */\nBlockly.BlockDragSurfaceSvg.prototype.createDom = function() {\n  if (this.SVG_) {\n    return;  // Already created.\n  }\n  this.SVG_ = Blockly.utils.dom.createSvgElement('svg', {\n    'xmlns': Blockly.utils.dom.SVG_NS,\n    'xmlns:html': Blockly.utils.dom.HTML_NS,\n    'xmlns:xlink': Blockly.utils.dom.XLINK_NS,\n    'version': '1.1',\n    'class': 'blocklyBlockDragSurface'\n  }, this.container_);\n  this.dragGroup_ = Blockly.utils.dom.createSvgElement('g', {}, this.SVG_);\n};\n\n/**\n * Set the SVG blocks on the drag surface's group and show the surface.\n * Only one block group should be on the drag surface at a time.\n * @param {!SVGElement} blocks Block or group of blocks to place on the drag\n * surface.\n */\nBlockly.BlockDragSurfaceSvg.prototype.setBlocksAndShow = function(blocks) {\n  if (this.dragGroup_.childNodes.length) {\n    throw Error('Already dragging a block.');\n  }\n  // appendChild removes the blocks from the previous parent\n  this.dragGroup_.appendChild(blocks);\n  this.SVG_.style.display = 'block';\n  this.surfaceXY_ = new Blockly.utils.Coordinate(0, 0);\n};\n\n/**\n * Translate and scale the entire drag surface group to the given position, to\n * keep in sync with the workspace.\n * @param {number} x X translation in workspace coordinates.\n * @param {number} y Y translation in workspace coordinates.\n * @param {number} scale Scale of the group.\n */\nBlockly.BlockDragSurfaceSvg.prototype.translateAndScaleGroup = function(x, y,\n    scale) {\n  this.scale_ = scale;\n  // This is a work-around to prevent a the blocks from rendering\n  // fuzzy while they are being dragged on the drag surface.\n  var fixedX = x.toFixed(0);\n  var fixedY = y.toFixed(0);\n  this.dragGroup_.setAttribute('transform',\n      'translate(' + fixedX + ',' + fixedY + ') scale(' + scale + ')');\n};\n\n/**\n * Translate the drag surface's SVG based on its internal state.\n * @private\n */\nBlockly.BlockDragSurfaceSvg.prototype.translateSurfaceInternal_ = function() {\n  var x = this.surfaceXY_.x;\n  var y = this.surfaceXY_.y;\n  // This is a work-around to prevent a the blocks from rendering\n  // fuzzy while they are being dragged on the drag surface.\n  x = x.toFixed(0);\n  y = y.toFixed(0);\n  this.SVG_.style.display = 'block';\n\n  Blockly.utils.dom.setCssTransform(this.SVG_,\n      'translate3d(' + x + 'px, ' + y + 'px, 0px)');\n};\n\n/**\n * Translate the entire drag surface during a drag.\n * We translate the drag surface instead of the blocks inside the surface\n * so that the browser avoids repainting the SVG.\n * Because of this, the drag coordinates must be adjusted by scale.\n * @param {number} x X translation for the entire surface.\n * @param {number} y Y translation for the entire surface.\n */\nBlockly.BlockDragSurfaceSvg.prototype.translateSurface = function(x, y) {\n  this.surfaceXY_ = new Blockly.utils.Coordinate(x * this.scale_, y * this.scale_);\n  this.translateSurfaceInternal_();\n};\n\n/**\n * Reports the surface translation in scaled workspace coordinates.\n * Use this when finishing a drag to return blocks to the correct position.\n * @return {!Blockly.utils.Coordinate} Current translation of the surface.\n */\nBlockly.BlockDragSurfaceSvg.prototype.getSurfaceTranslation = function() {\n  var xy = Blockly.utils.getRelativeXY(/** @type {!SVGElement} */ (this.SVG_));\n  return new Blockly.utils.Coordinate(xy.x / this.scale_, xy.y / this.scale_);\n};\n\n/**\n * Provide a reference to the drag group (primarily for\n * BlockSvg.getRelativeToSurfaceXY).\n * @return {SVGElement} Drag surface group element.\n */\nBlockly.BlockDragSurfaceSvg.prototype.getGroup = function() {\n  return this.dragGroup_;\n};\n\n/**\n * Get the current blocks on the drag surface, if any (primarily\n * for BlockSvg.getRelativeToSurfaceXY).\n * @return {Element} Drag surface block DOM element, or undefined if no blocks\n * exist.\n */\nBlockly.BlockDragSurfaceSvg.prototype.getCurrentBlock = function() {\n  return /** @type {Element} */ (this.dragGroup_.firstChild);\n};\n\n/**\n * Clear the group and hide the surface; move the blocks off onto the provided\n * element.\n * If the block is being deleted it doesn't need to go back to the original\n * surface, since it would be removed immediately during dispose.\n * @param {Element=} opt_newSurface Surface the dragging blocks should be moved\n *     to, or null if the blocks should be removed from this surface without\n *     being moved to a different surface.\n */\nBlockly.BlockDragSurfaceSvg.prototype.clearAndHide = function(opt_newSurface) {\n  if (opt_newSurface) {\n    // appendChild removes the node from this.dragGroup_\n    opt_newSurface.appendChild(this.getCurrentBlock());\n  } else {\n    this.dragGroup_.removeChild(this.getCurrentBlock());\n  }\n  this.SVG_.style.display = 'none';\n  if (this.dragGroup_.childNodes.length) {\n    throw Error('Drag group was not cleared.');\n  }\n  this.surfaceXY_ = null;\n};\n"],"file":"block_drag_surface.min.js"}