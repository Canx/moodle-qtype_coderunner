{"version":3,"sources":["../../../../src/blockly/core/interfaces/i_toolbox.js"],"names":["goog","provide","requireType","Blockly","IToolbox","prototype","init","render","dispose","getWidth","getHeight","getFlyout","position","clearSelection","refreshTheme","refreshSelection","setVisible","selectFirstCategory"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,kBAAb,EAEAD,IAAI,CAACE,WAAL,CAAiB,sBAAjB,EAQAC,OAAO,CAACC,QAAR,CAAmB,UAAW,CAAE,CAAhC,CAMAD,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BC,IAA3B,CAOAH,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BE,MAA3B,CAMAJ,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BG,OAA3B,CAMAL,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BI,QAA3B,CAMAN,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BK,SAA3B,CAMAP,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BM,SAA3B,CAMAR,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BO,QAA3B,CAMAT,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BQ,cAA3B,CAMAV,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BS,YAA3B,CAQAX,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BU,gBAA3B,CAMAZ,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BW,UAA3B,CAMAb,OAAO,CAACC,QAAR,CAAiBC,SAAjB,CAA2BY,mBAA3B","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The interface for a toolbox.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n\n'use strict';\n\ngoog.provide('Blockly.IToolbox');\n\ngoog.requireType('Blockly.IRegistrable');\n\n\n/**\n * Interface for a toolbox.\n * @extends {Blockly.IRegistrable}\n * @interface\n */\nBlockly.IToolbox = function() {};\n\n/**\n * Initializes the toolbox.\n * @return {void}\n */\nBlockly.IToolbox.prototype.init;\n\n/**\n * Fill the toolbox with categories and blocks.\n * @param {Array.<Blockly.utils.toolbox.Toolbox>} toolboxDef Array holding objects\n *    containing information on the contents of the toolbox.\n */\nBlockly.IToolbox.prototype.render;\n\n/**\n * Dispose of this toolbox.\n * @return {void}\n */\nBlockly.IToolbox.prototype.dispose;\n\n/**\n * Get the width of the toolbox.\n * @return {number} The width of the toolbox.\n */\nBlockly.IToolbox.prototype.getWidth;\n\n/**\n * Get the height of the toolbox.\n * @return {number} The width of the toolbox.\n */\nBlockly.IToolbox.prototype.getHeight;\n\n/**\n * Get the toolbox flyout.\n * @return {Blockly.Flyout} The toolbox flyout.\n */\nBlockly.IToolbox.prototype.getFlyout;\n\n/**\n * Move the toolbox to the edge.\n * @return {void}\n */\nBlockly.IToolbox.prototype.position;\n\n/**\n * Unhighlight any previously specified option.\n * @return {void}\n */\nBlockly.IToolbox.prototype.clearSelection;\n\n/**\n * Updates the category colours and background colour of selected categories.\n * @return {void}\n */\nBlockly.IToolbox.prototype.refreshTheme;\n\n/**\n * Update the flyout's contents without closing it.  Should be used in response\n * to a change in one of the dynamic categories, such as variables or\n * procedures.\n * @return {void}\n */\nBlockly.IToolbox.prototype.refreshSelection;\n\n/**\n * Toggles the visibility of the toolbox.\n * @param {boolean} isVisible True if the toolbox should be visible.\n */\nBlockly.IToolbox.prototype.setVisible;\n\n/**\n * Select the first toolbox category if no category is selected.\n * @return {void}\n */\nBlockly.IToolbox.prototype.selectFirstCategory;\n"],"file":"i_toolbox.min.js"}