{"version":3,"sources":["../../../../src/blockly/core/interfaces/i_accessibility.js"],"names":["goog","provide","Blockly","IASTNodeLocation","IASTNodeLocationSvg","prototype","setMarkerSvg","setCursorSvg","IASTNodeLocationWithBlock","getSourceBlock","IBlocklyActionable","onBlocklyAction"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,0BAAb,EACAD,IAAI,CAACC,OAAL,CAAa,6BAAb,EACAD,IAAI,CAACC,OAAL,CAAa,mCAAb,EACAD,IAAI,CAACC,OAAL,CAAa,4BAAb,EAMAC,OAAO,CAACC,gBAAR,CAA2B,UAAW,CAAE,CAAxC,CAOAD,OAAO,CAACE,mBAAR,CAA8B,UAAW,CAAE,CAA3C,CAOAF,OAAO,CAACE,mBAAR,CAA4BC,SAA5B,CAAsCC,YAAtC,CAOAJ,OAAO,CAACE,mBAAR,CAA4BC,SAA5B,CAAsCE,YAAtC,CAOAL,OAAO,CAACM,yBAAR,CAAoC,UAAW,CAAE,CAAjD,CAMAN,OAAO,CAACM,yBAAR,CAAkCH,SAAlC,CAA4CI,cAA5C,CAQAP,OAAO,CAACQ,kBAAR,CAA6B,UAAW,CAAE,CAA1C,CAOAR,OAAO,CAACQ,kBAAR,CAA2BL,SAA3B,CAAqCM,eAArC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview AST Node and keyboard navigation interfaces.\n * @author samelh@google.com (Sam El-Husseini)\n */\n\n'use strict';\n\ngoog.provide('Blockly.IASTNodeLocation');\ngoog.provide('Blockly.IASTNodeLocationSvg');\ngoog.provide('Blockly.IASTNodeLocationWithBlock');\ngoog.provide('Blockly.IBlocklyActionable');\n\n/**\n * An AST node location interface.\n * @interface\n */\nBlockly.IASTNodeLocation = function() {};\n\n/**\n * An AST node location SVG interface.\n * @interface\n * @extends {Blockly.IASTNodeLocation}\n */\nBlockly.IASTNodeLocationSvg = function() {};\n\n/**\n * Add the marker svg to this node's svg group.\n * @param {SVGElement} markerSvg The svg root of the marker to be added to the\n *     svg group.\n */\nBlockly.IASTNodeLocationSvg.prototype.setMarkerSvg;\n\n/**\n * Add the cursor svg to this node's svg group.\n * @param {SVGElement} cursorSvg The svg root of the cursor to be added to the\n *     svg group.\n */\nBlockly.IASTNodeLocationSvg.prototype.setCursorSvg;\n\n/**\n * An AST node location that has an associated block.\n * @interface\n * @extends {Blockly.IASTNodeLocation}\n */\nBlockly.IASTNodeLocationWithBlock = function() {};\n\n/**\n * Get the source block associated with this node.\n * @return {Blockly.Block} The source block.\n */\nBlockly.IASTNodeLocationWithBlock.prototype.getSourceBlock;\n\n\n/**\n * An interface for an object that handles Blockly actions when keyboard\n * navigation is enabled.\n * @interface\n */\nBlockly.IBlocklyActionable = function() {};\n\n/**\n * Handles the given action.\n * @param {!Blockly.Action} action The action to be handled.\n * @return {boolean} True if the action has been handled, false otherwise.\n */\nBlockly.IBlocklyActionable.prototype.onBlocklyAction;\n"],"file":"i_accessibility.min.js"}