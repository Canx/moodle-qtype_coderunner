{"version":3,"sources":["../../../src/blockly/core/xml.js"],"names":["goog","provide","require","Blockly","Xml","workspaceToDom","workspace","opt_noId","xml","utils","createElement","variablesElement","variablesToDom","Variables","allUsedVarModels","hasChildNodes","appendChild","comments","getTopComments","i","comment","toXmlWithXY","blocks","getTopBlocks","block","blockToDomWithXY","variableList","variables","variable","element","createTextNode","name","type","setAttribute","id","getId","isInsertionMarker","getChildren","DocumentFragment","width","RTL","getWidth","blockToDom","xy","getRelativeToSurfaceXY","Math","round","x","y","fieldToDom_","field","isSerializable","container","toXml","allFieldsToDom_","input","inputList","j","fieldDom","fieldRow","child","isShadow","mutationToDom","mutation","hasAttributes","commentText","getCommentText","size","commentModel","pinned","commentElement","height","data","dataElement","empty","DUMMY_INPUT","childBlock","connection","targetBlock","INPUT_VALUE","NEXT_STATEMENT","shadow","getShadowDom","cloneShadow_","elem","nodeType","dom","NodeType","ELEMENT_NODE","inputsInline","inputsInlineDefault","isCollapsed","isEnabled","isDeletable","isMovable","isEditable","nextBlock","getNextBlock","nextConnection","cloneNode","node","textNode","nodeName","removeAttribute","firstChild","nextSibling","parentNode","TEXT_NODE","trim","removeNode","domToText","text","oldText","replace","domToPrettyText","blob","lines","split","indent","line","length","substring","slice","join","textToDom","doc","textToDomDocument","documentElement","getElementsByTagName","Error","clearWorkspaceAndLoadFromXml","setResizesEnabled","clear","blockIds","domToWorkspace","Workspace","swap","console","warn","newBlockIds","startTextWidthCache","existingGroup","Events","getGroup","setGroup","variablesFirst","xmlChild","childNodes","toLowerCase","xmlChildElement","recordUndo","domToBlock","push","blockX","hasAttribute","parseInt","getAttribute","blockY","isNaN","moveBy","TypeError","rendered","WorkspaceCommentSvg","fromXml","WorkspaceComment","domToVariables","stopTextWidthCache","fire","FinishedLoading","appendDomToWorkspace","bbox","hasOwnProperty","getBlocksBoundingBox","top","bottom","offsetY","offsetX","farY","topX","right","left","newLeftX","newRightX","Infinity","newY","ySeparation","blockXY","getBlockById","xmlBlock","disable","variablesBeforeCreation","getAllVariables","topBlock","domToBlockHeadless_","getDescendants","setConnectionTracking","initSvg","render","setTimeout","disposed","updateDisabled","resizeContents","initModel","enable","newVariables","getAddedVariables","thisVariable","VarCreate","BlockCreate","xmlVariables","textContent","createVariable","prototypeName","outerHTML","newBlock","blockChild","childBlockElement","childShadowElement","grandchild","domToMutation","Comment","setCommentText","Size","getCommentIcon","isInFlyout","setVisible","domToField_","getInput","setShadowDom","outputConnection","connect","previousConnection","isConnected","inline","setInputsInline","disabled","setEnabled","deletable","setDeletable","movable","setMovable","editable","setEditable","collapsed","setCollapsed","children","getVarModels","setShadow","fieldName","getField","deleteNext","removeChild"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview XML reader and writer.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\n/**\n * @name Blockly.Xml\n * @namespace\n */\ngoog.provide('Blockly.Xml');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockCreate');\ngoog.require('Blockly.Events.FinishedLoading');\ngoog.require('Blockly.Events.VarCreate');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.global');\ngoog.require('Blockly.utils.xml');\n\n\n/**\n * Encode a block tree as XML.\n * @param {!Blockly.Workspace} workspace The workspace containing blocks.\n * @param {boolean=} opt_noId True if the encoder should skip the block IDs.\n * @return {!Element} XML DOM element.\n */\nBlockly.Xml.workspaceToDom = function(workspace, opt_noId) {\n  var xml = Blockly.utils.xml.createElement('xml');\n  var variablesElement = Blockly.Xml.variablesToDom(\n      Blockly.Variables.allUsedVarModels(workspace));\n  if (variablesElement.hasChildNodes()) {\n    xml.appendChild(variablesElement);\n  }\n  var comments = workspace.getTopComments(true);\n  for (var i = 0, comment; (comment = comments[i]); i++) {\n    xml.appendChild(comment.toXmlWithXY(opt_noId));\n  }\n  var blocks = workspace.getTopBlocks(true);\n  for (var i = 0, block; (block = blocks[i]); i++) {\n    xml.appendChild(Blockly.Xml.blockToDomWithXY(block, opt_noId));\n  }\n  return xml;\n};\n\n/**\n * Encode a list of variables as XML.\n * @param {!Array.<!Blockly.VariableModel>} variableList List of all variable\n *     models.\n * @return {!Element} Tree of XML elements.\n */\nBlockly.Xml.variablesToDom = function(variableList) {\n  var variables = Blockly.utils.xml.createElement('variables');\n  for (var i = 0, variable; (variable = variableList[i]); i++) {\n    var element = Blockly.utils.xml.createElement('variable');\n    element.appendChild(Blockly.utils.xml.createTextNode(variable.name));\n    if (variable.type) {\n      element.setAttribute('type', variable.type);\n    }\n    element.id = variable.getId();\n    variables.appendChild(element);\n  }\n  return variables;\n};\n\n/**\n * Encode a block subtree as XML with XY coordinates.\n * @param {!Blockly.Block} block The root block to encode.\n * @param {boolean=} opt_noId True if the encoder should skip the block ID.\n * @return {!Element} Tree of XML elements.\n */\nBlockly.Xml.blockToDomWithXY = function(block, opt_noId) {\n  if (block.isInsertionMarker()) {  // Skip over insertion markers.\n    block = block.getChildren(false)[0];\n    if (!block) {\n      // Disappears when appended. Cast to ANY b/c DocumentFragment -> Element\n      // is invalid. We have to cast to ANY in between.\n      return /** @type{?} */ (new DocumentFragment());\n    }\n  }\n\n  var width;  // Not used in LTR.\n  if (block.workspace.RTL) {\n    width = block.workspace.getWidth();\n  }\n\n  var element = Blockly.Xml.blockToDom(block, opt_noId);\n  var xy = block.getRelativeToSurfaceXY();\n  element.setAttribute('x',\n      Math.round(block.workspace.RTL ? width - xy.x : xy.x));\n  element.setAttribute('y', Math.round(xy.y));\n  return element;\n};\n\n/**\n * Encode a field as XML.\n * @param {!Blockly.Field} field The field to encode.\n * @return {Element} XML element, or null if the field did not need to be\n *     serialized.\n * @private\n */\nBlockly.Xml.fieldToDom_ = function(field) {\n  if (field.isSerializable()) {\n    var container = Blockly.utils.xml.createElement('field');\n    container.setAttribute('name', field.name || '');\n    return field.toXml(container);\n  }\n  return null;\n};\n\n/**\n * Encode all of a block's fields as XML and attach them to the given tree of\n * XML elements.\n * @param {!Blockly.Block} block A block with fields to be encoded.\n * @param {!Element} element The XML element to which the field DOM should be\n *     attached.\n * @private\n */\nBlockly.Xml.allFieldsToDom_ = function(block, element) {\n  for (var i = 0, input; (input = block.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      var fieldDom = Blockly.Xml.fieldToDom_(field);\n      if (fieldDom) {\n        element.appendChild(fieldDom);\n      }\n    }\n  }\n};\n\n/**\n * Encode a block subtree as XML.\n * @param {!Blockly.Block} block The root block to encode.\n * @param {boolean=} opt_noId True if the encoder should skip the block ID.\n * @return {!Element} Tree of XML elements.\n */\nBlockly.Xml.blockToDom = function(block, opt_noId) {\n  // Skip over insertion markers.\n  if (block.isInsertionMarker()) {\n    var child = block.getChildren(false)[0];\n    if (child) {\n      return Blockly.Xml.blockToDom(child);\n    } else {\n      // Disappears when appended. Cast to ANY b/c DocumentFragment -> Element\n      // is invalid. We have to cast to ANY in between.\n      return /** @type{?} */ (new DocumentFragment());\n    }\n  }\n\n\n  var element =\n      Blockly.utils.xml.createElement(block.isShadow() ? 'shadow' : 'block');\n  element.setAttribute('type', block.type);\n  if (!opt_noId) {\n    // It's important to use setAttribute here otherwise IE11 won't serialize\n    // the block's id when domToText is called.\n    element.setAttribute('id', block.id);\n  }\n  if (block.mutationToDom) {\n    // Custom data for an advanced block.\n    var mutation = block.mutationToDom();\n    if (mutation && (mutation.hasChildNodes() || mutation.hasAttributes())) {\n      element.appendChild(mutation);\n    }\n  }\n\n  Blockly.Xml.allFieldsToDom_(block, element);\n\n  var commentText = block.getCommentText();\n  if (commentText) {\n    var size = block.commentModel.size;\n    var pinned = block.commentModel.pinned;\n\n    var commentElement = Blockly.utils.xml.createElement('comment');\n    commentElement.appendChild(Blockly.utils.xml.createTextNode(commentText));\n    commentElement.setAttribute('pinned', pinned);\n    commentElement.setAttribute('h', size.height);\n    commentElement.setAttribute('w', size.width);\n\n    element.appendChild(commentElement);\n  }\n\n  if (block.data) {\n    var dataElement = Blockly.utils.xml.createElement('data');\n    dataElement.appendChild(Blockly.utils.xml.createTextNode(block.data));\n    element.appendChild(dataElement);\n  }\n\n  for (var i = 0, input; (input = block.inputList[i]); i++) {\n    var container;\n    var empty = true;\n    if (input.type == Blockly.DUMMY_INPUT) {\n      continue;\n    } else {\n      var childBlock = input.connection.targetBlock();\n      if (input.type == Blockly.INPUT_VALUE) {\n        container = Blockly.utils.xml.createElement('value');\n      } else if (input.type == Blockly.NEXT_STATEMENT) {\n        container = Blockly.utils.xml.createElement('statement');\n      }\n      var shadow = input.connection.getShadowDom();\n      if (shadow && (!childBlock || !childBlock.isShadow())) {\n        container.appendChild(Blockly.Xml.cloneShadow_(shadow, opt_noId));\n      }\n      if (childBlock) {\n        var elem = Blockly.Xml.blockToDom(childBlock, opt_noId);\n        if (elem.nodeType == Blockly.utils.dom.NodeType.ELEMENT_NODE) {\n          container.appendChild(elem);\n          empty = false;\n        }\n      }\n    }\n    container.setAttribute('name', input.name);\n    if (!empty) {\n      element.appendChild(container);\n    }\n  }\n  if (block.inputsInline != undefined &&\n      block.inputsInline != block.inputsInlineDefault) {\n    element.setAttribute('inline', block.inputsInline);\n  }\n  if (block.isCollapsed()) {\n    element.setAttribute('collapsed', true);\n  }\n  if (!block.isEnabled()) {\n    element.setAttribute('disabled', true);\n  }\n  if (!block.isDeletable() && !block.isShadow()) {\n    element.setAttribute('deletable', false);\n  }\n  if (!block.isMovable() && !block.isShadow()) {\n    element.setAttribute('movable', false);\n  }\n  if (!block.isEditable()) {\n    element.setAttribute('editable', false);\n  }\n\n  var nextBlock = block.getNextBlock();\n  if (nextBlock) {\n    var elem = Blockly.Xml.blockToDom(nextBlock, opt_noId);\n    if (elem.nodeType == Blockly.utils.dom.NodeType.ELEMENT_NODE) {\n      var container = Blockly.utils.xml.createElement('next');\n      container.appendChild(elem);\n      element.appendChild(container);\n    }\n  }\n  var shadow = block.nextConnection && block.nextConnection.getShadowDom();\n  if (shadow && (!nextBlock || !nextBlock.isShadow())) {\n    container.appendChild(Blockly.Xml.cloneShadow_(shadow, opt_noId));\n  }\n\n  return element;\n};\n\n/**\n * Deeply clone the shadow's DOM so that changes don't back-wash to the block.\n * @param {!Element} shadow A tree of XML elements.\n * @param {boolean=} opt_noId True if the encoder should skip the block ID.\n * @return {!Element} A tree of XML elements.\n * @private\n */\nBlockly.Xml.cloneShadow_ = function(shadow, opt_noId) {\n  shadow = shadow.cloneNode(true);\n  // Walk the tree looking for whitespace.  Don't prune whitespace in a tag.\n  var node = shadow;\n  var textNode;\n  while (node) {\n    if (opt_noId && node.nodeName == 'shadow') {\n      // Strip off IDs from shadow blocks.  There should never be a 'block' as\n      // a child of a 'shadow', so no need to check that.\n      node.removeAttribute('id');\n    }\n    if (node.firstChild) {\n      node = node.firstChild;\n    } else {\n      while (node && !node.nextSibling) {\n        textNode = node;\n        node = node.parentNode;\n        if (textNode.nodeType == Blockly.utils.dom.NodeType.TEXT_NODE &&\n            textNode.data.trim() == '' && node.firstChild != textNode) {\n          // Prune whitespace after a tag.\n          Blockly.utils.dom.removeNode(textNode);\n        }\n      }\n      if (node) {\n        textNode = node;\n        node = node.nextSibling;\n        if (textNode.nodeType == Blockly.utils.dom.NodeType.TEXT_NODE &&\n            textNode.data.trim() == '') {\n          // Prune whitespace before a tag.\n          Blockly.utils.dom.removeNode(textNode);\n        }\n      }\n    }\n  }\n  return shadow;\n};\n\n/**\n * Converts a DOM structure into plain text.\n * Currently the text format is fairly ugly: all one line with no whitespace,\n * unless the DOM itself has whitespace built-in.\n * @param {!Node} dom A tree of XML nodes.\n * @return {string} Text representation.\n */\nBlockly.Xml.domToText = function(dom) {\n  var text = Blockly.utils.xml.domToText(dom);\n  // Replace line breaks in text content with '&#10;' to make them single line.\n  // E.g. <foo>hello\\nworld</foo> -> <foo>hello&#10;world</foo>\n  // Do not replace line breaks between tags.\n  // E.g. ...</foo>\\n</bar> is unchanged.\n  // Can't use global flag on regexp since backtracking is needed.\n  var regexp = /(<[^/](?:[^>]*[^/])?>[^<]*)\\n([^<]*<\\/)/;\n  var oldText;\n  do {\n    oldText = text;\n    text = text.replace(regexp, '$1&#10;$2');\n  } while (text != oldText);\n  // Unpack self-closing tags.  These tags fail when embedded in HTML.\n  // <block name=\"foo\"/> -> <block name=\"foo\"></block>\n  return text.replace(/<(\\w+)([^<]*)\\/>/g, '<$1$2></$1>');\n};\n\n/**\n * Converts a DOM structure into properly indented text.\n * @param {!Node} dom A tree of XML elements.\n * @return {string} Text representation.\n */\nBlockly.Xml.domToPrettyText = function(dom) {\n  // This function is not guaranteed to be correct for all XML.\n  // But it handles the XML that Blockly generates.\n  var blob = Blockly.Xml.domToText(dom);\n  // Place every open and close tag on its own line.\n  var lines = blob.split('<');\n  // Indent every line.\n  var indent = '';\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    if (line[0] == '/') {\n      indent = indent.substring(2);\n    }\n    lines[i] = indent + '<' + line;\n    if (line[0] != '/' && line.slice(-2) != '/>') {\n      indent += '  ';\n    }\n  }\n  // Pull simple tags back together.\n  // E.g. <foo></foo>\n  var text = lines.join('\\n');\n  text = text.replace(/(<(\\w+)\\b[^>]*>[^\\n]*)\\n *<\\/\\2>/g, '$1</$2>');\n  // Trim leading blank line.\n  return text.replace(/^\\n/, '');\n};\n\n/**\n * Converts an XML string into a DOM structure.\n * @param {string} text An XML string.\n * @return {!Element} A DOM object representing the singular child of the\n *     document element.\n * @throws if the text doesn't parse.\n */\nBlockly.Xml.textToDom = function(text) {\n  var doc = Blockly.utils.xml.textToDomDocument(text);\n  if (!doc || !doc.documentElement ||\n      doc.getElementsByTagName('parsererror').length) {\n    throw Error('textToDom was unable to parse: ' + text);\n  }\n  return doc.documentElement;\n};\n\n/**\n * Clear the given workspace then decode an XML DOM and\n * create blocks on the workspace.\n * @param {!Element} xml XML DOM.\n * @param {!Blockly.Workspace} workspace The workspace.\n * @return {Array.<string>} An array containing new block ids.\n */\nBlockly.Xml.clearWorkspaceAndLoadFromXml = function(xml, workspace) {\n  workspace.setResizesEnabled(false);\n  workspace.clear();\n  var blockIds = Blockly.Xml.domToWorkspace(xml, workspace);\n  workspace.setResizesEnabled(true);\n  return blockIds;\n};\n\n/**\n * Decode an XML DOM and create blocks on the workspace.\n * @param {!Element} xml XML DOM.\n * @param {!Blockly.Workspace} workspace The workspace.\n * @return {!Array.<string>} An array containing new block IDs.\n * @suppress {strictModuleDepCheck} Suppress module check while workspace\n *     comments are not bundled in.\n */\nBlockly.Xml.domToWorkspace = function(xml, workspace) {\n  if (xml instanceof Blockly.Workspace) {\n    var swap = xml;\n    // Closure Compiler complains here because the arguments are reversed.\n    /** @suppress {checkTypes} */\n    xml = workspace;\n    workspace = swap;\n    console.warn('Deprecated call to Blockly.Xml.domToWorkspace, ' +\n                 'swap the arguments.');\n  }\n\n  var width;  // Not used in LTR.\n  if (workspace.RTL) {\n    width = workspace.getWidth();\n  }\n  var newBlockIds = [];  // A list of block IDs added by this call.\n  Blockly.utils.dom.startTextWidthCache();\n  var existingGroup = Blockly.Events.getGroup();\n  if (!existingGroup) {\n    Blockly.Events.setGroup(true);\n  }\n\n  // Disable workspace resizes as an optimization.\n  if (workspace.setResizesEnabled) {\n    workspace.setResizesEnabled(false);\n  }\n  var variablesFirst = true;\n  try {\n    for (var i = 0, xmlChild; (xmlChild = xml.childNodes[i]); i++) {\n      var name = xmlChild.nodeName.toLowerCase();\n      var xmlChildElement = /** @type {!Element} */ (xmlChild);\n      if (name == 'block' ||\n          (name == 'shadow' && !Blockly.Events.recordUndo)) {\n        // Allow top-level shadow blocks if recordUndo is disabled since\n        // that means an undo is in progress.  Such a block is expected\n        // to be moved to a nested destination in the next operation.\n        var block = Blockly.Xml.domToBlock(xmlChildElement, workspace);\n        newBlockIds.push(block.id);\n        var blockX = xmlChildElement.hasAttribute('x') ?\n            parseInt(xmlChildElement.getAttribute('x'), 10) : 10;\n        var blockY = xmlChildElement.hasAttribute('y') ?\n            parseInt(xmlChildElement.getAttribute('y'), 10) : 10;\n        if (!isNaN(blockX) && !isNaN(blockY)) {\n          block.moveBy(workspace.RTL ? width - blockX : blockX, blockY);\n        }\n        variablesFirst = false;\n      } else if (name == 'shadow') {\n        throw TypeError('Shadow block cannot be a top-level block.');\n      } else if (name == 'comment') {\n        if (workspace.rendered) {\n          if (!Blockly.WorkspaceCommentSvg) {\n            console.warn('Missing require for Blockly.WorkspaceCommentSvg, ' +\n                'ignoring workspace comment.');\n          } else {\n            Blockly.WorkspaceCommentSvg.fromXml(\n                xmlChildElement, workspace, width);\n          }\n        } else {\n          if (!Blockly.WorkspaceComment) {\n            console.warn('Missing require for Blockly.WorkspaceComment, ' +\n                'ignoring workspace comment.');\n          } else {\n            Blockly.WorkspaceComment.fromXml(xmlChildElement, workspace);\n          }\n        }\n      } else if (name == 'variables') {\n        if (variablesFirst) {\n          Blockly.Xml.domToVariables(xmlChildElement, workspace);\n        } else {\n          throw Error('\\'variables\\' tag must exist once before block and ' +\n              'shadow tag elements in the workspace XML, but it was found in ' +\n              'another location.');\n        }\n        variablesFirst = false;\n      }\n    }\n  } finally {\n    if (!existingGroup) {\n      Blockly.Events.setGroup(false);\n    }\n    Blockly.utils.dom.stopTextWidthCache();\n  }\n  // Re-enable workspace resizing.\n  if (workspace.setResizesEnabled) {\n    workspace.setResizesEnabled(true);\n  }\n  Blockly.Events.fire(new Blockly.Events.FinishedLoading(workspace));\n  return newBlockIds;\n};\n\n/**\n * Decode an XML DOM and create blocks on the workspace. Position the new\n * blocks immediately below prior blocks, aligned by their starting edge.\n * @param {!Element} xml The XML DOM.\n * @param {!Blockly.Workspace} workspace The workspace to add to.\n * @return {Array.<string>} An array containing new block IDs.\n */\nBlockly.Xml.appendDomToWorkspace = function(xml, workspace) {\n  var bbox;  // Bounding box of the current blocks.\n  // First check if we have a workspaceSvg, otherwise the blocks have no shape\n  // and the position does not matter.\n  if (workspace.hasOwnProperty('scale')) {\n    bbox = workspace.getBlocksBoundingBox();\n  }\n  // Load the new blocks into the workspace and get the IDs of the new blocks.\n  var newBlockIds = Blockly.Xml.domToWorkspace(xml, workspace);\n  if (bbox && bbox.top != bbox.bottom) {  // check if any previous block\n    var offsetY = 0;  // offset to add to y of the new block\n    var offsetX = 0;\n    var farY = bbox.bottom;  // bottom position\n    var topX = workspace.RTL ? bbox.right : bbox.left;  // x of bounding box\n    // Check position of the new blocks.\n    var newLeftX = Infinity;  // x of top left corner\n    var newRightX = -Infinity;  // x of top right corner\n    var newY = Infinity;  // y of top corner\n    var ySeparation = 10;\n    for (var i = 0; i < newBlockIds.length; i++) {\n      var blockXY =\n          workspace.getBlockById(newBlockIds[i]).getRelativeToSurfaceXY();\n      if (blockXY.y < newY) {\n        newY = blockXY.y;\n      }\n      if (blockXY.x < newLeftX) {  // if we left align also on x\n        newLeftX = blockXY.x;\n      }\n      if (blockXY.x > newRightX) {  // if we right align also on x\n        newRightX = blockXY.x;\n      }\n    }\n    offsetY = farY - newY + ySeparation;\n    offsetX = workspace.RTL ? topX - newRightX : topX - newLeftX;\n    for (var i = 0; i < newBlockIds.length; i++) {\n      var block = workspace.getBlockById(newBlockIds[i]);\n      block.moveBy(offsetX, offsetY);\n    }\n  }\n  return newBlockIds;\n};\n\n/**\n * Decode an XML block tag and create a block (and possibly sub blocks) on the\n * workspace.\n * @param {!Element} xmlBlock XML block element.\n * @param {!Blockly.Workspace} workspace The workspace.\n * @return {!Blockly.Block} The root block created.\n */\nBlockly.Xml.domToBlock = function(xmlBlock, workspace) {\n  if (xmlBlock instanceof Blockly.Workspace) {\n    var swap = xmlBlock;\n    // Closure Compiler complains here because the arguments are reversed.\n    /** @suppress {checkTypes} */\n    xmlBlock = /** @type {!Element} */ (workspace);\n    workspace = swap;\n    console.warn('Deprecated call to Blockly.Xml.domToBlock, ' +\n                 'swap the arguments.');\n  }\n  // Create top-level block.\n  Blockly.Events.disable();\n  var variablesBeforeCreation = workspace.getAllVariables();\n  try {\n    var topBlock = Blockly.Xml.domToBlockHeadless_(xmlBlock, workspace);\n    // Generate list of all blocks.\n    var blocks = topBlock.getDescendants(false);\n    if (workspace.rendered) {\n      // Wait to track connections to speed up assembly.\n      topBlock.setConnectionTracking(false);\n      // Render each block.\n      for (var i = blocks.length - 1; i >= 0; i--) {\n        blocks[i].initSvg();\n      }\n      for (var i = blocks.length - 1; i >= 0; i--) {\n        blocks[i].render(false);\n      }\n      // Populating the connection database may be deferred until after the\n      // blocks have rendered.\n      setTimeout(function() {\n        if (!topBlock.disposed) {\n          topBlock.setConnectionTracking(true);\n        }\n      }, 1);\n      topBlock.updateDisabled();\n      // Allow the scrollbars to resize and move based on the new contents.\n      // TODO(@picklesrus): #387. Remove when domToBlock avoids resizing.\n      workspace.resizeContents();\n    } else {\n      for (var i = blocks.length - 1; i >= 0; i--) {\n        blocks[i].initModel();\n      }\n    }\n  } finally {\n    Blockly.Events.enable();\n  }\n  if (Blockly.Events.isEnabled()) {\n    var newVariables = Blockly.Variables.getAddedVariables(workspace,\n        variablesBeforeCreation);\n    // Fire a VarCreate event for each (if any) new variable created.\n    for (var i = 0; i < newVariables.length; i++) {\n      var thisVariable = newVariables[i];\n      Blockly.Events.fire(new Blockly.Events.VarCreate(thisVariable));\n    }\n    // Block events come after var events, in case they refer to newly created\n    // variables.\n    Blockly.Events.fire(new Blockly.Events.BlockCreate(topBlock));\n  }\n  return topBlock;\n};\n\n\n/**\n * Decode an XML list of variables and add the variables to the workspace.\n * @param {!Element} xmlVariables List of XML variable elements.\n * @param {!Blockly.Workspace} workspace The workspace to which the variable\n *     should be added.\n */\nBlockly.Xml.domToVariables = function(xmlVariables, workspace) {\n  for (var i = 0, xmlChild; (xmlChild = xmlVariables.childNodes[i]); i++) {\n    if (xmlChild.nodeType != Blockly.utils.dom.NodeType.ELEMENT_NODE) {\n      continue;  // Skip text nodes.\n    }\n    var type = xmlChild.getAttribute('type');\n    var id = xmlChild.getAttribute('id');\n    var name = xmlChild.textContent;\n\n    workspace.createVariable(name, type, id);\n  }\n};\n\n/**\n * Decode an XML block tag and create a block (and possibly sub blocks) on the\n * workspace.\n * @param {!Element} xmlBlock XML block element.\n * @param {!Blockly.Workspace} workspace The workspace.\n * @return {!Blockly.Block} The root block created.\n * @private\n */\nBlockly.Xml.domToBlockHeadless_ = function(xmlBlock, workspace) {\n  var block = null;\n  var prototypeName = xmlBlock.getAttribute('type');\n  if (!prototypeName) {\n    throw TypeError('Block type unspecified: ' + xmlBlock.outerHTML);\n  }\n  var id = xmlBlock.getAttribute('id');\n  block = workspace.newBlock(prototypeName, id);\n\n  var blockChild = null;\n  for (var i = 0, xmlChild; (xmlChild = xmlBlock.childNodes[i]); i++) {\n    if (xmlChild.nodeType == Blockly.utils.dom.NodeType.TEXT_NODE) {\n      // Ignore any text at the <block> level.  It's all whitespace anyway.\n      continue;\n    }\n    var input;\n\n    // Find any enclosed blocks or shadows in this tag.\n    var childBlockElement = null;\n    var childShadowElement = null;\n    for (var j = 0, grandchild; (grandchild = xmlChild.childNodes[j]); j++) {\n      if (grandchild.nodeType == Blockly.utils.dom.NodeType.ELEMENT_NODE) {\n        if (grandchild.nodeName.toLowerCase() == 'block') {\n          childBlockElement = /** @type {!Element} */ (grandchild);\n        } else if (grandchild.nodeName.toLowerCase() == 'shadow') {\n          childShadowElement = /** @type {!Element} */ (grandchild);\n        }\n      }\n    }\n    // Use the shadow block if there is no child block.\n    if (!childBlockElement && childShadowElement) {\n      childBlockElement = childShadowElement;\n    }\n\n    var name = xmlChild.getAttribute('name');\n    var xmlChildElement = /** @type {!Element} */ (xmlChild);\n    switch (xmlChild.nodeName.toLowerCase()) {\n      case 'mutation':\n        // Custom data for an advanced block.\n        if (block.domToMutation) {\n          block.domToMutation(xmlChildElement);\n          if (block.initSvg) {\n            // Mutation may have added some elements that need initializing.\n            block.initSvg();\n          }\n        }\n        break;\n      case 'comment':\n        if (!Blockly.Comment) {\n          console.warn('Missing require for Blockly.Comment, ' +\n              'ignoring block comment.');\n          break;\n        }\n        var text = xmlChildElement.textContent;\n        var pinned = xmlChildElement.getAttribute('pinned') == 'true';\n        var width = parseInt(xmlChildElement.getAttribute('w'), 10);\n        var height = parseInt(xmlChildElement.getAttribute('h'), 10);\n\n        block.setCommentText(text);\n        block.commentModel.pinned = pinned;\n        if (!isNaN(width) && !isNaN(height)) {\n          block.commentModel.size = new Blockly.utils.Size(width, height);\n        }\n\n        if (pinned && block.getCommentIcon && !block.isInFlyout) {\n          setTimeout(function() {\n            block.getCommentIcon().setVisible(true);\n          }, 1);\n        }\n        break;\n      case 'data':\n        block.data = xmlChild.textContent;\n        break;\n      case 'title':\n        // Titles were renamed to field in December 2013.\n        // Fall through.\n      case 'field':\n        Blockly.Xml.domToField_(block, name, xmlChildElement);\n        break;\n      case 'value':\n      case 'statement':\n        input = block.getInput(name);\n        if (!input) {\n          console.warn('Ignoring non-existent input ' + name + ' in block ' +\n                       prototypeName);\n          break;\n        }\n        if (childShadowElement) {\n          input.connection.setShadowDom(childShadowElement);\n        }\n        if (childBlockElement) {\n          blockChild = Blockly.Xml.domToBlockHeadless_(childBlockElement,\n              workspace);\n          if (blockChild.outputConnection) {\n            input.connection.connect(blockChild.outputConnection);\n          } else if (blockChild.previousConnection) {\n            input.connection.connect(blockChild.previousConnection);\n          } else {\n            throw TypeError(\n                'Child block does not have output or previous statement.');\n          }\n        }\n        break;\n      case 'next':\n        if (childShadowElement && block.nextConnection) {\n          block.nextConnection.setShadowDom(childShadowElement);\n        }\n        if (childBlockElement) {\n          if (!block.nextConnection) {\n            throw TypeError('Next statement does not exist.');\n          }\n          // If there is more than one XML 'next' tag.\n          if (block.nextConnection.isConnected()) {\n            throw TypeError('Next statement is already connected.');\n          }\n          blockChild = Blockly.Xml.domToBlockHeadless_(childBlockElement,\n              workspace);\n          if (!blockChild.previousConnection) {\n            throw TypeError('Next block does not have previous statement.');\n          }\n          block.nextConnection.connect(blockChild.previousConnection);\n        }\n        break;\n      default:\n        // Unknown tag; ignore.  Same principle as HTML parsers.\n        console.warn('Ignoring unknown tag: ' + xmlChild.nodeName);\n    }\n  }\n\n  var inline = xmlBlock.getAttribute('inline');\n  if (inline) {\n    block.setInputsInline(inline == 'true');\n  }\n  var disabled = xmlBlock.getAttribute('disabled');\n  if (disabled) {\n    block.setEnabled(disabled != 'true' && disabled != 'disabled');\n  }\n  var deletable = xmlBlock.getAttribute('deletable');\n  if (deletable) {\n    block.setDeletable(deletable == 'true');\n  }\n  var movable = xmlBlock.getAttribute('movable');\n  if (movable) {\n    block.setMovable(movable == 'true');\n  }\n  var editable = xmlBlock.getAttribute('editable');\n  if (editable) {\n    block.setEditable(editable == 'true');\n  }\n  var collapsed = xmlBlock.getAttribute('collapsed');\n  if (collapsed) {\n    block.setCollapsed(collapsed == 'true');\n  }\n  if (xmlBlock.nodeName.toLowerCase() == 'shadow') {\n    // Ensure all children are also shadows.\n    var children = block.getChildren(false);\n    for (var i = 0, child; (child = children[i]); i++) {\n      if (!child.isShadow()) {\n        throw TypeError('Shadow block not allowed non-shadow child.');\n      }\n    }\n    // Ensure this block doesn't have any variable inputs.\n    if (block.getVarModels().length) {\n      throw TypeError('Shadow blocks cannot have variable references.');\n    }\n    block.setShadow(true);\n  }\n  return block;\n};\n\n/**\n * Decode an XML field tag and set the value of that field on the given block.\n * @param {!Blockly.Block} block The block that is currently being deserialized.\n * @param {string} fieldName The name of the field on the block.\n * @param {!Element} xml The field tag to decode.\n * @private\n */\nBlockly.Xml.domToField_ = function(block, fieldName, xml) {\n  var field = block.getField(fieldName);\n  if (!field) {\n    console.warn('Ignoring non-existent field ' + fieldName + ' in block ' +\n        block.type);\n    return;\n  }\n  field.fromXml(xml);\n};\n\n/**\n * Remove any 'next' block (statements in a stack).\n * @param {!Element} xmlBlock XML block element.\n */\nBlockly.Xml.deleteNext = function(xmlBlock) {\n  for (var i = 0, child; (child = xmlBlock.childNodes[i]); i++) {\n    if (child.nodeName.toLowerCase() == 'next') {\n      xmlBlock.removeChild(child);\n      break;\n    }\n  }\n};\n"],"file":"xml.min.js"}