{"version":3,"sources":["../../../src/blockly/core/procedures.js"],"names":["goog","provide","require","Blockly","Procedures","NAME_TYPE","PROCEDURE_CATEGORY_NAME","DEFAULT_ARG","ProcedureBlock","allProcedures","root","proceduresNoReturn","getBlocksByType","map","block","getProcedureDef","proceduresReturn","sort","procTupleComparator_","ta","tb","toLowerCase","localeCompare","findLegalName","name","isInFlyout","Msg","isLegalName_","workspace","r","match","parseInt","opt_exclude","isNameUsed","blocks","getAllBlocks","i","length","procedureBlock","procName","Names","equals","rename","trim","legalName","getSourceBlock","oldName","getValue","renameProcedure","flyoutCategory","xmlList","Blocks","utils","xml","createElement","setAttribute","nameField","appendChild","createTextNode","push","populateProcedures","procedureList","templateName","args","mutation","j","arg","tuple","updateMutatorFlyout_","usedNames","getFieldValue","argBlock","argValue","Variables","generateUniqueNameFromOptions","fieldContent","updateToolbox","mutatorOpenListener","e","type","Events","UI","element","newValue","workspaceId","Workspace","getById","getBlockById","blockId","mutator","getWorkspace","addChangeListener","mutatorChangeListener_","BLOCK_CREATE","BLOCK_DELETE","BLOCK_CHANGE","getCallers","callers","getProcedureCall","mutateCallers","defBlock","oldRecordUndo","recordUndo","xmlElement","mutationToDom","caller","oldMutationDom","oldMutation","Xml","domToText","domToMutation","newMutationDom","newMutation","fire","BlockChange","getDefinition","getTopBlocks"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility functions for handling procedures.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\n/**\n * @name Blockly.Procedures\n * @namespace\n */\ngoog.provide('Blockly.Procedures');\n\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.constants');\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockChange');\ngoog.require('Blockly.Field');\ngoog.require('Blockly.Msg');\ngoog.require('Blockly.Names');\ngoog.require('Blockly.utils.xml');\ngoog.require('Blockly.Workspace');\ngoog.require('Blockly.Xml');\n\n\n/**\n * Constant to separate procedure names from variables and generated functions\n * when running generators.\n * @deprecated Use Blockly.PROCEDURE_CATEGORY_NAME\n */\nBlockly.Procedures.NAME_TYPE = Blockly.PROCEDURE_CATEGORY_NAME;\n\n/**\n * The default argument for a procedures_mutatorarg block.\n * @type {string}\n */\nBlockly.Procedures.DEFAULT_ARG = 'x';\n\n/**\n * Procedure block type.\n * @typedef {{\n *    getProcedureCall: function():string,\n *    renameProcedure: function(string,string),\n *    getProcedureDef: function():!Array\n * }}\n */\nBlockly.Procedures.ProcedureBlock;\n\n/**\n * Find all user-created procedure definitions in a workspace.\n * @param {!Blockly.Workspace} root Root workspace.\n * @return {!Array.<!Array.<!Array>>} Pair of arrays, the\n *     first contains procedures without return variables, the second with.\n *     Each procedure is defined by a three-element list of name, parameter\n *     list, and return value boolean.\n */\nBlockly.Procedures.allProcedures = function(root) {\n  var proceduresNoReturn = root.getBlocksByType('procedures_defnoreturn', false)\n      .map(function(block) {\n        return /** @type {!Blockly.Procedures.ProcedureBlock} */ (block).getProcedureDef();\n      });\n  var proceduresReturn = root.getBlocksByType('procedures_defreturn', false).map(function(block) {\n    return /** @type {!Blockly.Procedures.ProcedureBlock} */ (block).getProcedureDef();\n  });\n  proceduresNoReturn.sort(Blockly.Procedures.procTupleComparator_);\n  proceduresReturn.sort(Blockly.Procedures.procTupleComparator_);\n  return [proceduresNoReturn, proceduresReturn];\n};\n\n/**\n * Comparison function for case-insensitive sorting of the first element of\n * a tuple.\n * @param {!Array} ta First tuple.\n * @param {!Array} tb Second tuple.\n * @return {number} -1, 0, or 1 to signify greater than, equality, or less than.\n * @private\n */\nBlockly.Procedures.procTupleComparator_ = function(ta, tb) {\n  return ta[0].toLowerCase().localeCompare(tb[0].toLowerCase());\n};\n\n/**\n * Ensure two identically-named procedures don't exist.\n * Take the proposed procedure name, and return a legal name i.e. one that\n * is not empty and doesn't collide with other procedures.\n * @param {string} name Proposed procedure name.\n * @param {!Blockly.Block} block Block to disambiguate.\n * @return {string} Non-colliding name.\n */\nBlockly.Procedures.findLegalName = function(name, block) {\n  if (block.isInFlyout) {\n    // Flyouts can have multiple procedures called 'do something'.\n    return name;\n  }\n  name = name || Blockly.Msg['UNNAMED_KEY'] || 'unnamed';\n  while (!Blockly.Procedures.isLegalName_(name, block.workspace, block)) {\n    // Collision with another procedure.\n    var r = name.match(/^(.*?)(\\d+)$/);\n    if (!r) {\n      name += '2';\n    } else {\n      name = r[1] + (parseInt(r[2], 10) + 1);\n    }\n  }\n  return name;\n};\n\n/**\n * Does this procedure have a legal name?  Illegal names include names of\n * procedures already defined.\n * @param {string} name The questionable name.\n * @param {!Blockly.Workspace} workspace The workspace to scan for collisions.\n * @param {Blockly.Block=} opt_exclude Optional block to exclude from\n *     comparisons (one doesn't want to collide with oneself).\n * @return {boolean} True if the name is legal.\n * @private\n */\nBlockly.Procedures.isLegalName_ = function(name, workspace, opt_exclude) {\n  return !Blockly.Procedures.isNameUsed(name, workspace, opt_exclude);\n};\n\n/**\n * Return if the given name is already a procedure name.\n * @param {string} name The questionable name.\n * @param {!Blockly.Workspace} workspace The workspace to scan for collisions.\n * @param {Blockly.Block=} opt_exclude Optional block to exclude from\n *     comparisons (one doesn't want to collide with oneself).\n * @return {boolean} True if the name is used, otherwise return false.\n */\nBlockly.Procedures.isNameUsed = function(name, workspace, opt_exclude) {\n  var blocks = workspace.getAllBlocks(false);\n  // Iterate through every block and check the name.\n  for (var i = 0; i < blocks.length; i++) {\n    if (blocks[i] == opt_exclude) {\n      continue;\n    }\n    if (blocks[i].getProcedureDef) {\n      var procedureBlock = /** @type {!Blockly.Procedures.ProcedureBlock} */ (\n        blocks[i]);\n      var procName = procedureBlock.getProcedureDef();\n      if (Blockly.Names.equals(procName[0], name)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/**\n * Rename a procedure.  Called by the editable field.\n * @param {string} name The proposed new name.\n * @return {string} The accepted name.\n * @this {Blockly.Field}\n */\nBlockly.Procedures.rename = function(name) {\n  // Strip leading and trailing whitespace.  Beyond this, all names are legal.\n  name = name.trim();\n\n  var legalName = Blockly.Procedures.findLegalName(name,\n      /** @type {!Blockly.Block} */ (this.getSourceBlock()));\n  var oldName = this.getValue();\n  if (oldName != name && oldName != legalName) {\n    // Rename any callers.\n    var blocks = this.getSourceBlock().workspace.getAllBlocks(false);\n    for (var i = 0; i < blocks.length; i++) {\n      if (blocks[i].renameProcedure) {\n        var procedureBlock = /** @type {!Blockly.Procedures.ProcedureBlock} */ (\n          blocks[i]);\n        procedureBlock.renameProcedure(\n            /** @type {string} */ (oldName), legalName);\n      }\n    }\n  }\n  return legalName;\n};\n\n/**\n * Construct the blocks required by the flyout for the procedure category.\n * @param {!Blockly.Workspace} workspace The workspace containing procedures.\n * @return {!Array.<!Element>} Array of XML block elements.\n */\nBlockly.Procedures.flyoutCategory = function(workspace) {\n  var xmlList = [];\n  if (Blockly.Blocks['procedures_defnoreturn']) {\n    // <block type=\"procedures_defnoreturn\" gap=\"16\">\n    //     <field name=\"NAME\">do something</field>\n    // </block>\n    var block = Blockly.utils.xml.createElement('block');\n    block.setAttribute('type', 'procedures_defnoreturn');\n    block.setAttribute('gap', 16);\n    var nameField = Blockly.utils.xml.createElement('field');\n    nameField.setAttribute('name', 'NAME');\n    nameField.appendChild(Blockly.utils.xml.createTextNode(\n        Blockly.Msg['PROCEDURES_DEFNORETURN_PROCEDURE']));\n    block.appendChild(nameField);\n    xmlList.push(block);\n  }\n  if (Blockly.Blocks['procedures_defreturn']) {\n    // <block type=\"procedures_defreturn\" gap=\"16\">\n    //     <field name=\"NAME\">do something</field>\n    // </block>\n    var block = Blockly.utils.xml.createElement('block');\n    block.setAttribute('type', 'procedures_defreturn');\n    block.setAttribute('gap', 16);\n    var nameField = Blockly.utils.xml.createElement('field');\n    nameField.setAttribute('name', 'NAME');\n    nameField.appendChild(Blockly.utils.xml.createTextNode(\n        Blockly.Msg['PROCEDURES_DEFRETURN_PROCEDURE']));\n    block.appendChild(nameField);\n    xmlList.push(block);\n  }\n  if (Blockly.Blocks['procedures_ifreturn']) {\n    // <block type=\"procedures_ifreturn\" gap=\"16\"></block>\n    var block = Blockly.utils.xml.createElement('block');\n    block.setAttribute('type', 'procedures_ifreturn');\n    block.setAttribute('gap', 16);\n    xmlList.push(block);\n  }\n  if (xmlList.length) {\n    // Add slightly larger gap between system blocks and user calls.\n    xmlList[xmlList.length - 1].setAttribute('gap', 24);\n  }\n\n  function populateProcedures(procedureList, templateName) {\n    for (var i = 0; i < procedureList.length; i++) {\n      var name = procedureList[i][0];\n      var args = procedureList[i][1];\n      // <block type=\"procedures_callnoreturn\" gap=\"16\">\n      //   <mutation name=\"do something\">\n      //     <arg name=\"x\"></arg>\n      //   </mutation>\n      // </block>\n      var block = Blockly.utils.xml.createElement('block');\n      block.setAttribute('type', templateName);\n      block.setAttribute('gap', 16);\n      var mutation = Blockly.utils.xml.createElement('mutation');\n      mutation.setAttribute('name', name);\n      block.appendChild(mutation);\n      for (var j = 0; j < args.length; j++) {\n        var arg = Blockly.utils.xml.createElement('arg');\n        arg.setAttribute('name', args[j]);\n        mutation.appendChild(arg);\n      }\n      xmlList.push(block);\n    }\n  }\n\n  var tuple = Blockly.Procedures.allProcedures(workspace);\n  populateProcedures(tuple[0], 'procedures_callnoreturn');\n  populateProcedures(tuple[1], 'procedures_callreturn');\n  return xmlList;\n};\n\n/**\n * Updates the procedure mutator's flyout so that the arg block is not a\n * duplicate of another arg.\n * @param {!Blockly.Workspace} workspace The procedure mutator's workspace. This\n *     workspace's flyout is what is being updated.\n * @private\n */\nBlockly.Procedures.updateMutatorFlyout_ = function(workspace) {\n  var usedNames = [];\n  var blocks = workspace.getBlocksByType('procedures_mutatorarg', false);\n  for (var i = 0, block; (block = blocks[i]); i++) {\n    usedNames.push(block.getFieldValue('NAME'));\n  }\n\n  var xml = Blockly.utils.xml.createElement('xml');\n  var argBlock = Blockly.utils.xml.createElement('block');\n  argBlock.setAttribute('type', 'procedures_mutatorarg');\n  var nameField = Blockly.utils.xml.createElement('field');\n  nameField.setAttribute('name', 'NAME');\n  var argValue = Blockly.Variables.generateUniqueNameFromOptions(\n      Blockly.Procedures.DEFAULT_ARG, usedNames);\n  var fieldContent = Blockly.utils.xml.createTextNode(argValue);\n\n  nameField.appendChild(fieldContent);\n  argBlock.appendChild(nameField);\n  xml.appendChild(argBlock);\n\n  workspace.updateToolbox(xml);\n};\n\n/**\n * Listens for when a procedure mutator is opened. Then it triggers a flyout\n * update and adds a mutator change listener to the mutator workspace.\n * @param {!Blockly.Events.Abstract} e The event that triggered this listener.\n * @package\n */\nBlockly.Procedures.mutatorOpenListener = function(e) {\n  if (e.type != Blockly.Events.UI || e.element != 'mutatorOpen' ||\n      !e.newValue) {\n    return;\n  }\n  var workspaceId = /** @type {string} */ (e.workspaceId);\n  var block = Blockly.Workspace.getById(workspaceId)\n      .getBlockById(e.blockId);\n  var type = block.type;\n  if (type != 'procedures_defnoreturn' && type != 'procedures_defreturn') {\n    return;\n  }\n  var workspace = block.mutator.getWorkspace();\n  Blockly.Procedures.updateMutatorFlyout_(workspace);\n  workspace.addChangeListener(Blockly.Procedures.mutatorChangeListener_);\n};\n\n/**\n * Listens for changes in a procedure mutator and triggers flyout updates when\n * necessary.\n * @param {!Blockly.Events.Abstract} e The event that triggered this listener.\n * @private\n */\nBlockly.Procedures.mutatorChangeListener_ = function(e) {\n  if (e.type != Blockly.Events.BLOCK_CREATE &&\n      e.type != Blockly.Events.BLOCK_DELETE &&\n      e.type != Blockly.Events.BLOCK_CHANGE) {\n    return;\n  }\n  var workspaceId = /** @type {string} */ (e.workspaceId);\n  var workspace = /** @type {!Blockly.WorkspaceSvg} */\n      (Blockly.Workspace.getById(workspaceId));\n  Blockly.Procedures.updateMutatorFlyout_(workspace);\n};\n\n/**\n * Find all the callers of a named procedure.\n * @param {string} name Name of procedure.\n * @param {!Blockly.Workspace} workspace The workspace to find callers in.\n * @return {!Array.<!Blockly.Block>} Array of caller blocks.\n */\nBlockly.Procedures.getCallers = function(name, workspace) {\n  var callers = [];\n  var blocks = workspace.getAllBlocks(false);\n  // Iterate through every block and check the name.\n  for (var i = 0; i < blocks.length; i++) {\n    if (blocks[i].getProcedureCall) {\n      var procedureBlock = /** @type {!Blockly.Procedures.ProcedureBlock} */ (\n        blocks[i]);\n      var procName = procedureBlock.getProcedureCall();\n      // Procedure name may be null if the block is only half-built.\n      if (procName && Blockly.Names.equals(procName, name)) {\n        callers.push(blocks[i]);\n      }\n    }\n  }\n  return callers;\n};\n\n/**\n * When a procedure definition changes its parameters, find and edit all its\n * callers.\n * @param {!Blockly.Block} defBlock Procedure definition block.\n */\nBlockly.Procedures.mutateCallers = function(defBlock) {\n  var oldRecordUndo = Blockly.Events.recordUndo;\n  var procedureBlock = /** @type {!Blockly.Procedures.ProcedureBlock} */ (\n    defBlock);\n  var name = procedureBlock.getProcedureDef()[0];\n  var xmlElement = defBlock.mutationToDom(true);\n  var callers = Blockly.Procedures.getCallers(name, defBlock.workspace);\n  for (var i = 0, caller; (caller = callers[i]); i++) {\n    var oldMutationDom = caller.mutationToDom();\n    var oldMutation = oldMutationDom && Blockly.Xml.domToText(oldMutationDom);\n    caller.domToMutation(xmlElement);\n    var newMutationDom = caller.mutationToDom();\n    var newMutation = newMutationDom && Blockly.Xml.domToText(newMutationDom);\n    if (oldMutation != newMutation) {\n      // Fire a mutation on every caller block.  But don't record this as an\n      // undo action since it is deterministically tied to the procedure's\n      // definition mutation.\n      Blockly.Events.recordUndo = false;\n      Blockly.Events.fire(new Blockly.Events.BlockChange(\n          caller, 'mutation', null, oldMutation, newMutation));\n      Blockly.Events.recordUndo = oldRecordUndo;\n    }\n  }\n};\n\n/**\n * Find the definition block for the named procedure.\n * @param {string} name Name of procedure.\n * @param {!Blockly.Workspace} workspace The workspace to search.\n * @return {Blockly.Block} The procedure definition block, or null not found.\n */\nBlockly.Procedures.getDefinition = function(name, workspace) {\n  // Assume that a procedure definition is a top block.\n  var blocks = workspace.getTopBlocks(false);\n  for (var i = 0; i < blocks.length; i++) {\n    if (blocks[i].getProcedureDef) {\n      var procedureBlock = /** @type {!Blockly.Procedures.ProcedureBlock} */ (\n        blocks[i]);\n      var tuple = procedureBlock.getProcedureDef();\n      if (tuple && Blockly.Names.equals(tuple[0], name)) {\n        return blocks[i];\n      }\n    }\n  }\n  return null;\n};\n"],"file":"procedures.min.js"}