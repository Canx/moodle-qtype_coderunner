{"version":3,"sources":["../../../src/blockly/core/field_checkbox.js"],"names":["goog","provide","require","Blockly","FieldCheckbox","opt_value","opt_validator","opt_config","checkChar_","superClass_","constructor","call","utils","object","inherits","Field","prototype","DEFAULT_VALUE","fromJson","options","CHECK_CHAR","SERIALIZABLE","CURSOR","configure_","config","initView","dom","addClass","textElement_","style","display","value_","render_","textContent_","nodeValue","getDisplayText_","updateSize_","getConstants","FIELD_CHECKBOX_X_OFFSET","setCheckCharacter","character","forceRerender","showEditor_","setValue","doClassValidation_","opt_newValue","doValueUpdate_","newValue","convertValueToBool_","getValue","getValueBoolean","getText","value","fieldRegistry","register"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Checkbox field.  Checked or not checked.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldCheckbox');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockChange');\ngoog.require('Blockly.Field');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.Size');\n\n\n/**\n * Class for a checkbox field.\n * @param {string|boolean=} opt_value The initial value of the field. Should\n *    either be 'TRUE', 'FALSE' or a boolean. Defaults to 'FALSE'.\n * @param {Function=} opt_validator  A function that is called to validate\n *    changes to the field's value. Takes in a value ('TRUE' or 'FALSE') &\n *    returns a validated value ('TRUE' or 'FALSE'), or null to abort the\n *    change.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/checkbox#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.Field}\n * @constructor\n */\nBlockly.FieldCheckbox = function(opt_value, opt_validator, opt_config) {\n  /**\n   * Character for the check mark. Used to apply a different check mark\n   * character to individual fields.\n   * @type {?string}\n   * @private\n   */\n  this.checkChar_ = null;\n\n  Blockly.FieldCheckbox.superClass_.constructor.call(\n      this, opt_value, opt_validator, opt_config);\n};\nBlockly.utils.object.inherits(Blockly.FieldCheckbox, Blockly.Field);\n\n/**\n * The default value for this field.\n * @type {*}\n * @protected\n */\nBlockly.FieldCheckbox.prototype.DEFAULT_VALUE = false;\n\n/**\n * Construct a FieldCheckbox from a JSON arg object.\n * @param {!Object} options A JSON object with options (checked).\n * @return {!Blockly.FieldCheckbox} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldCheckbox.fromJson = function(options) {\n  return new Blockly.FieldCheckbox(options['checked'], undefined, options);\n};\n\n/**\n * Default character for the checkmark.\n * @type {string}\n * @const\n */\nBlockly.FieldCheckbox.CHECK_CHAR = '\\u2713';\n\n/**\n * Serializable fields are saved by the XML renderer, non-serializable fields\n * are not. Editable fields should also be serializable.\n * @type {boolean}\n */\nBlockly.FieldCheckbox.prototype.SERIALIZABLE = true;\n\n/**\n * Mouse cursor style when over the hotspot that initiates editability.\n */\nBlockly.FieldCheckbox.prototype.CURSOR = 'default';\n\n/**\n * Configure the field based on the given map of options.\n * @param {!Object} config A map of options to configure the field based on.\n * @private\n */\nBlockly.FieldCheckbox.prototype.configure_ = function(config) {\n  Blockly.FieldCheckbox.superClass_.configure_.call(this, config);\n  if (config['checkCharacter']) {\n    this.checkChar_ = config['checkCharacter'];\n  }\n};\n\n/**\n * Create the block UI for this checkbox.\n * @package\n */\nBlockly.FieldCheckbox.prototype.initView = function() {\n  Blockly.FieldCheckbox.superClass_.initView.call(this);\n\n  Blockly.utils.dom.addClass(\n      /** @type {!SVGTextElement} **/ (this.textElement_), 'blocklyCheckbox');\n  this.textElement_.style.display = this.value_ ? 'block' : 'none';\n};\n\n/**\n * @override\n */\nBlockly.FieldCheckbox.prototype.render_ = function() {\n  if (this.textContent_) {\n    this.textContent_.nodeValue = this.getDisplayText_();\n  }\n  this.updateSize_(this.getConstants().FIELD_CHECKBOX_X_OFFSET);\n};\n\n/**\n * @override\n */\nBlockly.FieldCheckbox.prototype.getDisplayText_ = function() {\n  return this.checkChar_ || Blockly.FieldCheckbox.CHECK_CHAR;\n};\n\n/**\n * Set the character used for the check mark.\n * @param {?string} character The character to use for the check mark, or\n *    null to use the default.\n */\nBlockly.FieldCheckbox.prototype.setCheckCharacter = function(character) {\n  this.checkChar_ = character;\n  this.forceRerender();\n};\n\n/**\n * Toggle the state of the checkbox on click.\n * @protected\n */\nBlockly.FieldCheckbox.prototype.showEditor_ = function() {\n  this.setValue(!this.value_);\n};\n\n/**\n * Ensure that the input value is valid ('TRUE' or 'FALSE').\n * @param {*=} opt_newValue The input value.\n * @return {?string} A valid value ('TRUE' or 'FALSE), or null if invalid.\n * @protected\n */\nBlockly.FieldCheckbox.prototype.doClassValidation_ = function(opt_newValue) {\n  if (opt_newValue === true || opt_newValue === 'TRUE') {\n    return 'TRUE';\n  }\n  if (opt_newValue === false || opt_newValue === 'FALSE') {\n    return 'FALSE';\n  }\n  return null;\n};\n\n/**\n * Update the value of the field, and update the checkElement.\n * @param {*} newValue The value to be saved. The default validator guarantees\n * that this is a either 'TRUE' or 'FALSE'.\n * @protected\n */\nBlockly.FieldCheckbox.prototype.doValueUpdate_ = function(newValue) {\n  this.value_ = this.convertValueToBool_(newValue);\n  // Update visual.\n  if (this.textElement_) {\n    this.textElement_.style.display = this.value_ ? 'block' : 'none';\n  }\n};\n\n/**\n * Get the value of this field, either 'TRUE' or 'FALSE'.\n * @return {string} The value of this field.\n */\nBlockly.FieldCheckbox.prototype.getValue = function() {\n  return this.value_ ? 'TRUE' : 'FALSE';\n};\n\n/**\n * Get the boolean value of this field.\n * @return {boolean} The boolean value of this field.\n */\nBlockly.FieldCheckbox.prototype.getValueBoolean = function() {\n  return /** @type {boolean} */ (this.value_);\n};\n\n/**\n * Get the text of this field. Used when the block is collapsed.\n * @return {string} Text representing the value of this field\n *    ('true' or 'false').\n */\nBlockly.FieldCheckbox.prototype.getText = function() {\n  return String(this.convertValueToBool_(this.value_));\n};\n\n/**\n * Convert a value into a pure boolean.\n *\n * Converts 'TRUE' to true and 'FALSE' to false correctly, everything else\n * is cast to a boolean.\n * @param {*} value The value to convert.\n * @return {boolean} The converted value.\n * @private\n */\nBlockly.FieldCheckbox.prototype.convertValueToBool_ = function(value) {\n  if (typeof value == 'string') {\n    return value == 'TRUE';\n  } else {\n    return !!value;\n  }\n};\n\nBlockly.fieldRegistry.register('field_checkbox', Blockly.FieldCheckbox);\n"],"file":"field_checkbox.min.js"}