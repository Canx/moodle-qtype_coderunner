{"version":3,"sources":["../../../src/blockly/core/workspace_audio.js"],"names":["goog","provide","require","Blockly","WorkspaceAudio","parentWorkspace","parentWorkspace_","SOUNDS_","Object","create","prototype","lastSound_","dispose","load","filenames","name","length","audioTest","utils","global","e","sound","i","filename","ext","match","canPlayType","play","preload","volume","playPromise","then","pause","catch","userAgent","IPAD","IPHONE","opt_volume","now","Date","SOUND_LIMIT","mySound","ANDROID","cloneNode","getAudioManager"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object in charge of loading, storing, and playing audio for a\n *     workspace.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.WorkspaceAudio');\n\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.global');\ngoog.require('Blockly.utils.userAgent');\n\n\n/**\n * Class for loading, storing, and playing audio for a workspace.\n * @param {Blockly.WorkspaceSvg} parentWorkspace The parent of the workspace\n *     this audio object belongs to, or null.\n * @constructor\n */\nBlockly.WorkspaceAudio = function(parentWorkspace) {\n\n  /**\n   * The parent of the workspace this object belongs to, or null.  May be\n   * checked for sounds that this object can't find.\n   * @type {Blockly.WorkspaceSvg}\n   * @private\n   */\n  this.parentWorkspace_ = parentWorkspace;\n\n  /**\n   * Database of pre-loaded sounds.\n   * @private\n   */\n  this.SOUNDS_ = Object.create(null);\n};\n\n/**\n * Time that the last sound was played.\n * @type {Date}\n * @private\n */\nBlockly.WorkspaceAudio.prototype.lastSound_ = null;\n\n/**\n * Dispose of this audio manager.\n * @package\n */\nBlockly.WorkspaceAudio.prototype.dispose = function() {\n  this.parentWorkspace_ = null;\n  this.SOUNDS_ = null;\n};\n\n/**\n * Load an audio file.  Cache it, ready for instantaneous playing.\n * @param {!Array.<string>} filenames List of file types in decreasing order of\n *   preference (i.e. increasing size).  E.g. ['media/go.mp3', 'media/go.wav']\n *   Filenames include path from Blockly's root.  File extensions matter.\n * @param {string} name Name of sound.\n */\nBlockly.WorkspaceAudio.prototype.load = function(filenames, name) {\n  if (!filenames.length) {\n    return;\n  }\n  try {\n    var audioTest = new Blockly.utils.global['Audio']();\n  } catch (e) {\n    // No browser support for Audio.\n    // IE can throw an error even if the Audio object exists.\n    return;\n  }\n  var sound;\n  for (var i = 0; i < filenames.length; i++) {\n    var filename = filenames[i];\n    var ext = filename.match(/\\.(\\w+)$/);\n    if (ext && audioTest.canPlayType('audio/' + ext[1])) {\n      // Found an audio format we can play.\n      sound = new Blockly.utils.global['Audio'](filename);\n      break;\n    }\n  }\n  if (sound && sound.play) {\n    this.SOUNDS_[name] = sound;\n  }\n};\n\n/**\n * Preload all the audio files so that they play quickly when asked for.\n * @package\n */\nBlockly.WorkspaceAudio.prototype.preload = function() {\n  for (var name in this.SOUNDS_) {\n    var sound = this.SOUNDS_[name];\n    sound.volume = 0.01;\n    var playPromise = sound.play();\n    // Edge does not return a promise, so we need to check.\n    if (playPromise !== undefined) {\n      // If we don't wait for the play request to complete before calling pause()\n      // we will get an exception: (DOMException: The play() request was interrupted)\n      // See more: https://developers.google.com/web/updates/2017/06/play-request-was-interrupted\n      playPromise.then(sound.pause).catch(function() {\n        // Play without user interaction was prevented.\n      });\n    } else {\n      sound.pause();\n    }\n\n    // iOS can only process one sound at a time.  Trying to load more than one\n    // corrupts the earlier ones.  Just load one and leave the others uncached.\n    if (Blockly.utils.userAgent.IPAD || Blockly.utils.userAgent.IPHONE) {\n      break;\n    }\n  }\n};\n\n/**\n * Play a named sound at specified volume.  If volume is not specified,\n * use full volume (1).\n * @param {string} name Name of sound.\n * @param {number=} opt_volume Volume of sound (0-1).\n */\nBlockly.WorkspaceAudio.prototype.play = function(name, opt_volume) {\n  var sound = this.SOUNDS_[name];\n  if (sound) {\n    // Don't play one sound on top of another.\n    var now = new Date;\n    if (this.lastSound_ != null &&\n        now - this.lastSound_ < Blockly.SOUND_LIMIT) {\n      return;\n    }\n    this.lastSound_ = now;\n    var mySound;\n    if (Blockly.utils.userAgent.IPAD || Blockly.utils.userAgent.ANDROID) {\n      // Creating a new audio node causes lag in Android and iPad.  Android\n      // refetches the file from the server, iPad uses a singleton audio\n      // node which must be deleted and recreated for each new audio tag.\n      mySound = sound;\n    } else {\n      mySound = sound.cloneNode();\n    }\n    mySound.volume = (opt_volume === undefined ? 1 : opt_volume);\n    mySound.play();\n  } else if (this.parentWorkspace_) {\n    // Maybe a workspace on a lower level knows about this sound.\n    this.parentWorkspace_.getAudioManager().play(name, opt_volume);\n  }\n};\n"],"file":"workspace_audio.min.js"}