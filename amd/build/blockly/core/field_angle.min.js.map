{"version":3,"sources":["../../../src/blockly/core/field_angle.js"],"names":["goog","provide","require","Blockly","FieldAngle","opt_value","opt_validator","opt_config","clockwise_","CLOCKWISE","offset_","OFFSET","wrap_","WRAP","round_","ROUND","superClass_","constructor","call","gauge_","line_","clickWrapper_","clickSurfaceWrapper_","moveSurfaceWrapper_","utils","object","inherits","FieldTextInput","prototype","DEFAULT_VALUE","fromJson","options","SERIALIZABLE","HALF","RADIUS","configure_","config","clockwise","offset","isNaN","wrap","round","initView","symbol_","dom","createSvgElement","appendChild","document","createTextNode","textElement_","render_","updateGraph_","showEditor_","opt_e","noFocus","userAgent","MOBILE","ANDROID","IPAD","editor","dropdownCreate_","DropDownDiv","getContentDiv","setColour","sourceBlock_","style","colourPrimary","colourTertiary","showPositionedByField","dropdownDispose_","bind","svg","SVG_NS","HTML_NS","XLINK_NS","circle","angle","bindEventWithChecks_","hide_","onMouseMove_","unbindEvent_","hideIfOwner","WidgetDiv","hide","e","bBox","ownerSVGElement","getBoundingClientRect","dx","clientX","left","dy","clientY","top","Math","atan","math","toDegrees","displayMouseOrKeyboardValue_","wrapValue_","value_","setEditorValue_","angleDegrees","getText","angleRadians","toRadians","path","x2","y2","clockwiseFlag","angle1","x1","cos","y1","sin","largeFlag","abs","floor","PI","push","setAttribute","join","onHtmlInputKeyDown_","multiplier","keyCode","KeyCodes","LEFT","RTL","RIGHT","DOWN","UP","value","getValue","preventDefault","stopPropagation","doClassValidation_","opt_newValue","isFinite","Css","register","fieldRegistry"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2013 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Angle input field.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldAngle');\n\ngoog.require('Blockly.Css');\ngoog.require('Blockly.DropDownDiv');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.FieldTextInput');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.math');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.userAgent');\n\n\n/**\n * Class for an editable angle field.\n * @param {string|number=} opt_value The initial value of the field. Should cast\n *    to a number. Defaults to 0.\n * @param {Function=} opt_validator A function that is called to validate\n *    changes to the field's value. Takes in a number & returns a\n *    validated number, or null to abort the change.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/angle#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.FieldTextInput}\n * @constructor\n */\nBlockly.FieldAngle = function(opt_value, opt_validator, opt_config) {\n\n  /**\n   * Should the angle increase as the angle picker is moved clockwise (true)\n   * or counterclockwise (false)\n   * @see Blockly.FieldAngle.CLOCKWISE\n   * @type {boolean}\n   * @private\n   */\n  this.clockwise_ = Blockly.FieldAngle.CLOCKWISE;\n\n  /**\n   * The offset of zero degrees (and all other angles).\n   * @see Blockly.FieldAngle.OFFSET\n   * @type {number}\n   * @private\n   */\n  this.offset_ = Blockly.FieldAngle.OFFSET;\n\n  /**\n   * The maximum angle to allow before wrapping.\n   * @see Blockly.FieldAngle.WRAP\n   * @type {number}\n   * @private\n   */\n  this.wrap_ = Blockly.FieldAngle.WRAP;\n\n  /**\n   * The amount to round angles to when using a mouse or keyboard nav input.\n   * @see Blockly.FieldAngle.ROUND\n   * @type {number}\n   * @private\n   */\n  this.round_ = Blockly.FieldAngle.ROUND;\n\n  Blockly.FieldAngle.superClass_.constructor.call(\n      this, opt_value, opt_validator, opt_config);\n\n  /**\n   * The angle picker's gauge path depending on the value.\n   * @type {SVGElement}\n   */\n  this.gauge_ = null;\n\n  /**\n   * The angle picker's line drawn representing the value's angle.\n   * @type {SVGElement}\n   */\n  this.line_ = null;\n\n  /**\n   * Wrapper click event data.\n   * @type {?Blockly.EventData}\n   * @private\n   */\n  this.clickWrapper_ = null;\n\n  /**\n   * Surface click event data.\n   * @type {?Blockly.EventData}\n   * @private\n   */\n  this.clickSurfaceWrapper_ = null;\n\n  /**\n   * Surface mouse move event data.\n   * @type {?Blockly.EventData}\n   * @private\n   */\n  this.moveSurfaceWrapper_ = null;\n};\nBlockly.utils.object.inherits(Blockly.FieldAngle, Blockly.FieldTextInput);\n\n\n/**\n * The default value for this field.\n * @type {*}\n * @protected\n */\nBlockly.FieldAngle.prototype.DEFAULT_VALUE = 0;\n\n/**\n * Construct a FieldAngle from a JSON arg object.\n * @param {!Object} options A JSON object with options (angle).\n * @return {!Blockly.FieldAngle} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldAngle.fromJson = function(options) {\n  return new Blockly.FieldAngle(options['angle'], undefined, options);\n};\n\n/**\n * Serializable fields are saved by the XML renderer, non-serializable fields\n * are not. Editable fields should also be serializable.\n * @type {boolean}\n */\nBlockly.FieldAngle.prototype.SERIALIZABLE = true;\n\n/**\n * The default amount to round angles to when using a mouse or keyboard nav\n * input. Must be a positive integer to support keyboard navigation.\n * @const {number}\n */\nBlockly.FieldAngle.ROUND = 15;\n\n/**\n * Half the width of protractor image.\n * @const {number}\n */\nBlockly.FieldAngle.HALF = 100 / 2;\n\n/**\n * Default property describing which direction makes an angle field's value\n * increase. Angle increases clockwise (true) or counterclockwise (false).\n * @const {boolean}\n */\nBlockly.FieldAngle.CLOCKWISE = false;\n\n/**\n * The default offset of 0 degrees (and all angles). Always offsets in the\n * counterclockwise direction, regardless of the field's clockwise property.\n * Usually either 0 (0 = right) or 90 (0 = up).\n * @const {number}\n */\nBlockly.FieldAngle.OFFSET = 0;\n\n/**\n * The default maximum angle to allow before wrapping.\n * Usually either 360 (for 0 to 359.9) or 180 (for -179.9 to 180).\n * @const {number}\n */\nBlockly.FieldAngle.WRAP = 360;\n\n/**\n * Radius of protractor circle.  Slightly smaller than protractor size since\n * otherwise SVG crops off half the border at the edges.\n * @const {number}\n */\nBlockly.FieldAngle.RADIUS = Blockly.FieldAngle.HALF - 1;\n\n/**\n * Configure the field based on the given map of options.\n * @param {!Object} config A map of options to configure the field based on.\n * @private\n */\nBlockly.FieldAngle.prototype.configure_ = function(config) {\n  Blockly.FieldAngle.superClass_.configure_.call(this, config);\n\n  switch (config['mode']) {\n    case 'compass':\n      this.clockwise_ = true;\n      this.offset_ = 90;\n      break;\n    case 'protractor':\n      // This is the default mode, so we could do nothing. But just to\n      // future-proof, we'll set it anyway.\n      this.clockwise_ = false;\n      this.offset_ = 0;\n      break;\n  }\n\n  // Allow individual settings to override the mode setting.\n  var clockwise = config['clockwise'];\n  if (typeof clockwise == 'boolean') {\n    this.clockwise_ = clockwise;\n  }\n\n  // If these are passed as null then we should leave them on the default.\n  var offset = config['offset'];\n  if (offset != null) {\n    offset = Number(offset);\n    if (!isNaN(offset)) {\n      this.offset_ = offset;\n    }\n  }\n  var wrap = config['wrap'];\n  if (wrap != null) {\n    wrap = Number(wrap);\n    if (!isNaN(wrap)) {\n      this.wrap_ = wrap;\n    }\n  }\n  var round = config['round'];\n  if (round != null) {\n    round = Number(round);\n    if (!isNaN(round)) {\n      this.round_ = round;\n    }\n  }\n};\n\n\n\n/**\n * Create the block UI for this field.\n * @package\n */\nBlockly.FieldAngle.prototype.initView = function() {\n  Blockly.FieldAngle.superClass_.initView.call(this);\n  // Add the degree symbol to the left of the number, even in RTL (issue #2380)\n  this.symbol_ = Blockly.utils.dom.createSvgElement('tspan', {}, null);\n  this.symbol_.appendChild(document.createTextNode('\\u00B0'));\n  this.textElement_.appendChild(this.symbol_);\n};\n\n/**\n * Updates the graph when the field rerenders.\n * @private\n * @override\n */\nBlockly.FieldAngle.prototype.render_ = function() {\n  Blockly.FieldAngle.superClass_.render_.call(this);\n  this.updateGraph_();\n};\n\n/**\n * Create and show the angle field's editor.\n * @param {Event=} opt_e Optional mouse event that triggered the field to open,\n *     or undefined if triggered programmatically.\n * @protected\n */\nBlockly.FieldAngle.prototype.showEditor_ = function(opt_e) {\n  // Mobile browsers have issues with in-line textareas (focus & keyboards).\n  var noFocus =\n      Blockly.utils.userAgent.MOBILE ||\n      Blockly.utils.userAgent.ANDROID ||\n      Blockly.utils.userAgent.IPAD;\n  Blockly.FieldAngle.superClass_.showEditor_.call(this, opt_e, noFocus);\n\n  var editor = this.dropdownCreate_();\n  Blockly.DropDownDiv.getContentDiv().appendChild(editor);\n\n  Blockly.DropDownDiv.setColour(this.sourceBlock_.style.colourPrimary,\n      this.sourceBlock_.style.colourTertiary);\n\n  Blockly.DropDownDiv.showPositionedByField(\n      this, this.dropdownDispose_.bind(this));\n\n  this.updateGraph_();\n};\n\n/**\n * Create the angle dropdown editor.\n * @return {!SVGElement} The newly created angle picker.\n * @private\n */\nBlockly.FieldAngle.prototype.dropdownCreate_ = function() {\n  var svg = Blockly.utils.dom.createSvgElement('svg', {\n    'xmlns': Blockly.utils.dom.SVG_NS,\n    'xmlns:html': Blockly.utils.dom.HTML_NS,\n    'xmlns:xlink': Blockly.utils.dom.XLINK_NS,\n    'version': '1.1',\n    'height': (Blockly.FieldAngle.HALF * 2) + 'px',\n    'width': (Blockly.FieldAngle.HALF * 2) + 'px',\n    'style': 'touch-action: none'\n  }, null);\n  var circle = Blockly.utils.dom.createSvgElement('circle', {\n    'cx': Blockly.FieldAngle.HALF,\n    'cy': Blockly.FieldAngle.HALF,\n    'r': Blockly.FieldAngle.RADIUS,\n    'class': 'blocklyAngleCircle'\n  }, svg);\n  this.gauge_ = Blockly.utils.dom.createSvgElement('path', {\n    'class': 'blocklyAngleGauge'\n  }, svg);\n  this.line_ = Blockly.utils.dom.createSvgElement('line', {\n    'x1': Blockly.FieldAngle.HALF,\n    'y1': Blockly.FieldAngle.HALF,\n    'class': 'blocklyAngleLine'\n  }, svg);\n  // Draw markers around the edge.\n  for (var angle = 0; angle < 360; angle += 15) {\n    Blockly.utils.dom.createSvgElement('line', {\n      'x1': Blockly.FieldAngle.HALF + Blockly.FieldAngle.RADIUS,\n      'y1': Blockly.FieldAngle.HALF,\n      'x2': Blockly.FieldAngle.HALF + Blockly.FieldAngle.RADIUS -\n          (angle % 45 == 0 ? 10 : 5),\n      'y2': Blockly.FieldAngle.HALF,\n      'class': 'blocklyAngleMarks',\n      'transform': 'rotate(' + angle + ',' +\n          Blockly.FieldAngle.HALF + ',' + Blockly.FieldAngle.HALF + ')'\n    }, svg);\n  }\n\n  // The angle picker is different from other fields in that it updates on\n  // mousemove even if it's not in the middle of a drag.  In future we may\n  // change this behaviour.\n  this.clickWrapper_ =\n      Blockly.bindEventWithChecks_(svg, 'click', this, this.hide_);\n  // On touch devices, the picker's value is only updated with a drag. Add\n  // a click handler on the drag surface to update the value if the surface\n  // is clicked.\n  this.clickSurfaceWrapper_ =\n      Blockly.bindEventWithChecks_(circle, 'click', this, this.onMouseMove_,\n          true, true);\n  this.moveSurfaceWrapper_ =\n      Blockly.bindEventWithChecks_(circle, 'mousemove', this, this.onMouseMove_,\n          true, true);\n  return svg;\n};\n\n/**\n * Disposes of events and dom-references belonging to the angle editor.\n * @private\n */\nBlockly.FieldAngle.prototype.dropdownDispose_ = function() {\n  if (this.clickWrapper_) {\n    Blockly.unbindEvent_(this.clickWrapper_);\n    this.clickWrapper_ = null;\n  }\n  if (this.clickSurfaceWrapper_) {\n    Blockly.unbindEvent_(this.clickSurfaceWrapper_);\n    this.clickSurfaceWrapper_ = null;\n  }\n  if (this.moveSurfaceWrapper_) {\n    Blockly.unbindEvent_(this.moveSurfaceWrapper_);\n    this.moveSurfaceWrapper_ = null;\n  }\n  this.gauge_ = null;\n  this.line_ = null;\n};\n\n/**\n * Hide the editor.\n * @private\n */\nBlockly.FieldAngle.prototype.hide_ = function() {\n  Blockly.DropDownDiv.hideIfOwner(this);\n  Blockly.WidgetDiv.hide();\n};\n\n/**\n * Set the angle to match the mouse's position.\n * @param {!Event} e Mouse move event.\n * @protected\n */\nBlockly.FieldAngle.prototype.onMouseMove_ = function(e) {\n  // Calculate angle.\n  var bBox = this.gauge_.ownerSVGElement.getBoundingClientRect();\n  var dx = e.clientX - bBox.left - Blockly.FieldAngle.HALF;\n  var dy = e.clientY - bBox.top - Blockly.FieldAngle.HALF;\n  var angle = Math.atan(-dy / dx);\n  if (isNaN(angle)) {\n    // This shouldn't happen, but let's not let this error propagate further.\n    return;\n  }\n  angle = Blockly.utils.math.toDegrees(angle);\n  // 0: East, 90: North, 180: West, 270: South.\n  if (dx < 0) {\n    angle += 180;\n  } else if (dy > 0) {\n    angle += 360;\n  }\n\n  // Do offsetting.\n  if (this.clockwise_) {\n    angle = this.offset_ + 360 - angle;\n  } else {\n    angle = 360 - (this.offset_ - angle);\n  }\n\n  this.displayMouseOrKeyboardValue_(angle);\n};\n\n/**\n * Handles and displays values that are input via mouse or arrow key input.\n * These values need to be rounded and wrapped before being displayed so\n * that the text input's value is appropriate.\n * @param {number} angle New angle.\n * @private\n */\nBlockly.FieldAngle.prototype.displayMouseOrKeyboardValue_ = function(angle) {\n  if (this.round_) {\n    angle = Math.round(angle / this.round_) * this.round_;\n  }\n  angle = this.wrapValue_(angle);\n  if (angle != this.value_) {\n    this.setEditorValue_(angle);\n  }\n};\n\n/**\n * Redraw the graph with the current angle.\n * @private\n */\nBlockly.FieldAngle.prototype.updateGraph_ = function() {\n  if (!this.gauge_) {\n    return;\n  }\n  // Always display the input (i.e. getText) even if it is invalid.\n  var angleDegrees = Number(this.getText()) + this.offset_;\n  angleDegrees %= 360;\n  var angleRadians = Blockly.utils.math.toRadians(angleDegrees);\n  var path = ['M ', Blockly.FieldAngle.HALF, ',', Blockly.FieldAngle.HALF];\n  var x2 = Blockly.FieldAngle.HALF;\n  var y2 = Blockly.FieldAngle.HALF;\n  if (!isNaN(angleRadians)) {\n    var clockwiseFlag = Number(this.clockwise_);\n    var angle1 = Blockly.utils.math.toRadians(this.offset_);\n    var x1 = Math.cos(angle1) * Blockly.FieldAngle.RADIUS;\n    var y1 = Math.sin(angle1) * -Blockly.FieldAngle.RADIUS;\n    if (clockwiseFlag) {\n      angleRadians = 2 * angle1 - angleRadians;\n    }\n    x2 += Math.cos(angleRadians) * Blockly.FieldAngle.RADIUS;\n    y2 -= Math.sin(angleRadians) * Blockly.FieldAngle.RADIUS;\n    // Don't ask how the flag calculations work.  They just do.\n    var largeFlag = Math.abs(Math.floor((angleRadians - angle1) / Math.PI) % 2);\n    if (clockwiseFlag) {\n      largeFlag = 1 - largeFlag;\n    }\n    path.push(' l ', x1, ',', y1,\n        ' A ', Blockly.FieldAngle.RADIUS, ',', Blockly.FieldAngle.RADIUS,\n        ' 0 ', largeFlag, ' ', clockwiseFlag, ' ', x2, ',', y2, ' z');\n  }\n  this.gauge_.setAttribute('d', path.join(''));\n  this.line_.setAttribute('x2', x2);\n  this.line_.setAttribute('y2', y2);\n};\n\n/**\n * Handle key down to the editor.\n * @param {!Event} e Keyboard event.\n * @protected\n * @override\n */\nBlockly.FieldAngle.prototype.onHtmlInputKeyDown_ = function(e) {\n  Blockly.FieldAngle.superClass_.onHtmlInputKeyDown_.call(this, e);\n\n  var multiplier;\n  if (e.keyCode === Blockly.utils.KeyCodes.LEFT) {\n    // decrement (increment in RTL)\n    multiplier = this.sourceBlock_.RTL ? 1 : -1;\n  } else if (e.keyCode === Blockly.utils.KeyCodes.RIGHT) {\n    // increment (decrement in RTL)\n    multiplier = this.sourceBlock_.RTL ? -1 : 1;\n  } else if (e.keyCode === Blockly.utils.KeyCodes.DOWN) {\n    // decrement\n    multiplier = -1;\n  } else if (e.keyCode === Blockly.utils.KeyCodes.UP) {\n    // increment\n    multiplier = 1;\n  }\n  if (multiplier) {\n    var value = /** @type {number} */ (this.getValue());\n    this.displayMouseOrKeyboardValue_(\n        value + (multiplier * this.round_));\n    e.preventDefault();\n    e.stopPropagation();\n  }\n};\n\n/**\n * Ensure that the input value is a valid angle.\n * @param {*=} opt_newValue The input value.\n * @return {?number} A valid angle, or null if invalid.\n * @protected\n * @override\n */\nBlockly.FieldAngle.prototype.doClassValidation_ = function(opt_newValue) {\n  var value = Number(opt_newValue);\n  if (isNaN(value) || !isFinite(value)) {\n    return null;\n  }\n  return this.wrapValue_(value);\n};\n\n/**\n * Wraps the value so that it is in the range (-360 + wrap, wrap).\n * @param {number} value The value to wrap.\n * @return {number} The wrapped value.\n * @private\n */\nBlockly.FieldAngle.prototype.wrapValue_ = function(value) {\n  value %= 360;\n  if (value < 0) {\n    value += 360;\n  }\n  if (value > this.wrap_) {\n    value -= 360;\n  }\n  return value;\n};\n\n/**\n * CSS for angle field.  See css.js for use.\n */\nBlockly.Css.register([\n  /* eslint-disable indent */\n  '.blocklyAngleCircle {',\n    'stroke: #444;',\n    'stroke-width: 1;',\n    'fill: #ddd;',\n    'fill-opacity: .8;',\n  '}',\n\n  '.blocklyAngleMarks {',\n    'stroke: #444;',\n    'stroke-width: 1;',\n  '}',\n\n  '.blocklyAngleGauge {',\n    'fill: #f88;',\n    'fill-opacity: .8;',\n    'pointer-events: none;',\n  '}',\n\n  '.blocklyAngleLine {',\n    'stroke: #f00;',\n    'stroke-width: 2;',\n    'stroke-linecap: round;',\n    'pointer-events: none;',\n  '}'\n  /* eslint-enable indent */\n]);\n\nBlockly.fieldRegistry.register('field_angle', Blockly.FieldAngle);\n"],"file":"field_angle.min.js"}