{"version":3,"sources":["../../../src/blockly/core/block.js"],"names":["goog","provide","require","requireType","Blockly","Block","workspace","prototypeName","opt_id","Generator","prototype","Error","id","getBlockById","utils","genUid","setBlockById","outputConnection","nextConnection","previousConnection","inputList","inputsInline","disabled","tooltip","contextMenu","parentBlock_","childBlocks_","deletable_","movable_","editable_","isShadow_","collapsed_","outputShape_","comment","commentModel","text","pinned","size","Size","xy_","Coordinate","isInFlyout","isFlyout","isInMutator","isMutator","RTL","isInsertionMarker_","hat","rendered","statementInputCount","type","Blocks","TypeError","object","mixin","addTopBlock","addTypedBlock","init","inputsInlineDefault","Events","isEnabled","existingGroup","getGroup","setGroup","fire","BlockCreate","onchange","setOnChange","CommentModel","COLLAPSED_INPUT_NAME","COLLAPSED_FIELD_NAME","data","disposed","hue_","colour_","styleName_","mutationToDom","domToMutation","suppressPrefixSuffix","getDeveloperVariables","dispose","healStack","onchangeWrapper_","removeChangeListener","unplug","BlockDelete","disable","removeTopBlock","removeTypedBlock","removeBlockById","selected","i","length","input","connections","getConnections_","connection","enable","initModel","j","field","fieldRow","opt_healStack","unplugFromRow_","unplugFromStack_","parentConnection","isConnected","targetConnection","disconnect","thisConnection","getOnlyValueConnection_","targetBlock","isShadow","childConnection","checkType","connect","onFailedConnect","INPUT_VALUE","previousTarget","nextBlock","getNextBlock","nextTarget","myConnections","push","lastConnectionInStack","bumpNeighbours","console","warn","getParent","getInputWithBlock","block","getSurroundParent","prevBlock","getPreviousBlock","getFirstStatementConnection","NEXT_STATEMENT","getRootBlock","rootBlock","getTopStackBlock","previous","getChildren","ordered","blocks","child","next","setParent","newParent","arrayRemove","getDescendants","childBlocks","apply","isDeletable","options","readOnly","setDeletable","deletable","isMovable","setMovable","movable","isDuplicatable","hasBlockLimits","isCapacityAvailable","getBlockTypeCounts","setShadow","shadow","isInsertionMarker","setInsertionMarker","insertionMarker","isEditable","setEditable","editable","updateEditable","isDisposed","getMatchingConnection","otherBlock","conn","otherConnections","setHelpUrl","url","helpUrl","setTooltip","newTip","getColour","getStyleName","getHue","setColour","colour","parsed","parseBlockColour","hue","hex","setStyle","blockStyleName","onchangeFn","bind","addChangeListener","getField","name","getVars","vars","referencesVariables","getValue","getVarModels","model","getVariableById","updateVarName","variable","getId","refreshVariableName","renameVarById","oldId","newId","setValue","getFieldValue","setFieldValue","newValue","setPreviousStatement","newBoolean","opt_check","makeConnection_","PREVIOUS_STATEMENT","setCheck","setNextStatement","setOutput","OUTPUT_VALUE","setInputsInline","BlockChange","getInputsInline","DUMMY_INPUT","setOutputShape","outputShape","getOutputShape","setDisabled","setEnabled","enabled","getInheritedDisabled","ancestor","isCollapsed","setCollapsed","collapsed","toString","opt_maxLength","opt_emptyToken","prevNavigateFields","ASTNode","NAVIGATE_ALL_FIELDS","node","createBlockNode","rootNode","shouldAddParentheses","checks","getCheck","indexOf","checkRoot","getType","getLocation","types","INPUT","in","FIELD","getText","current","out","l","splice","join","replace","trim","substring","appendValueInput","appendInput_","appendStatementInput","appendDummyInput","opt_name","jsonInit","json","warningPrefix","jsonInitStyle_","jsonInitColour_","interpolate_","rawValue","localizedText","replaceMessageReferences","localizedValue","Extensions","Array","isArray","extensionNames","extensionName","e","styleError","mixinObj","opt_disableCheck","overwrites","key","JSON","stringify","message","args","lastDummyAlign","tokens","tokenizeInterpolation","indexDup","indexCount","elements","token","string","startsWith","dummyInput","alignmentLookup","ALIGN_LEFT","ALIGN_RIGHT","ALIGN_CENTRE","fieldStack","element","altRepeat","FieldLabel","fieldRegistry","fromJson","alignment","toUpperCase","setAlign","appendField","Input","moveInputBefore","refName","inputIndex","refIndex","moveNumberedInputBefore","RangeError","removeInput","opt_quiet","getInput","getInputTargetBlock","getCommentText","setCommentText","setWarningText","setMutator","getRelativeToSurfaceXY","moveBy","dx","dy","event","BlockMove","translate","recordNew","Connection","allInputsFilled","opt_shadowBlocksAreFilled","target","toDevString","msg"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2011 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing one block.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Block');\n\ngoog.require('Blockly.ASTNode');\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.Connection');\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockChange');\ngoog.require('Blockly.Events.BlockCreate');\ngoog.require('Blockly.Events.BlockDelete');\ngoog.require('Blockly.Events.BlockMove');\ngoog.require('Blockly.Extensions');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.Input');\ngoog.require('Blockly.navigation');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.string');\ngoog.require('Blockly.Workspace');\n\ngoog.requireType('Blockly.IASTNodeLocation');\n\n\n/**\n * Class for one block.\n * Not normally called directly, workspace.newBlock() is preferred.\n * @param {!Blockly.Workspace} workspace The block's workspace.\n * @param {?string} prototypeName Name of the language object containing\n *     type-specific functions for this block.\n * @param {string=} opt_id Optional ID.  Use this ID if provided, otherwise\n *     create a new ID.\n * @constructor\n * @implements {Blockly.IASTNodeLocation}\n * @throws When block is not valid or block name is not allowed.\n */\nBlockly.Block = function(workspace, prototypeName, opt_id) {\n  if (Blockly.Generator &&\n      typeof Blockly.Generator.prototype[prototypeName] != 'undefined') {\n    // Occluding Generator class members is not allowed.\n    throw Error('Block prototypeName \"' + prototypeName +\n        '\" conflicts with Blockly.Generator members.');\n  }\n\n  /** @type {string} */\n  this.id = (opt_id && !workspace.getBlockById(opt_id)) ?\n      opt_id : Blockly.utils.genUid();\n  workspace.setBlockById(this.id, this);\n  /** @type {Blockly.Connection} */\n  this.outputConnection = null;\n  /** @type {Blockly.Connection} */\n  this.nextConnection = null;\n  /** @type {Blockly.Connection} */\n  this.previousConnection = null;\n  /** @type {!Array.<!Blockly.Input>} */\n  this.inputList = [];\n  /** @type {boolean|undefined} */\n  this.inputsInline = undefined;\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.disabled = false;\n  /** @type {string|!Function} */\n  this.tooltip = '';\n  /** @type {boolean} */\n  this.contextMenu = true;\n\n  /**\n   * @type {Blockly.Block}\n   * @protected\n   */\n  this.parentBlock_ = null;\n\n  /**\n   * @type {!Array.<!Blockly.Block>}\n   * @protected\n   */\n  this.childBlocks_ = [];\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.deletable_ = true;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.movable_ = true;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.editable_ = true;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.isShadow_ = false;\n\n  /**\n   * @type {boolean}\n   * @protected\n   */\n  this.collapsed_ = false;\n\n  /**\n   * @type {?number}\n   * @protected\n   */\n  this.outputShape_ = null;\n\n  /**\n   * A string representing the comment attached to this block.\n   * @type {string|Blockly.Comment}\n   * @deprecated August 2019. Use getCommentText instead.\n   */\n  this.comment = null;\n\n  /**\n   * A model of the comment attached to this block.\n   * @type {!Blockly.Block.CommentModel}\n   * @package\n   */\n  this.commentModel = {\n    text: null,\n    pinned: false,\n    size: new Blockly.utils.Size(160, 80)\n  };\n\n  /**\n   * The block's position in workspace units.  (0, 0) is at the workspace's\n   * origin; scale does not change this value.\n   * @type {!Blockly.utils.Coordinate}\n   * @private\n   */\n  this.xy_ = new Blockly.utils.Coordinate(0, 0);\n\n  /** @type {!Blockly.Workspace} */\n  this.workspace = workspace;\n  /** @type {boolean} */\n  this.isInFlyout = workspace.isFlyout;\n  /** @type {boolean} */\n  this.isInMutator = workspace.isMutator;\n\n  /** @type {boolean} */\n  this.RTL = workspace.RTL;\n\n  /**\n   * True if this block is an insertion marker.\n   * @type {boolean}\n   * @protected\n   */\n  this.isInsertionMarker_ = false;\n\n  /**\n   * Name of the type of hat.\n   * @type {string|undefined}\n   */\n  this.hat = undefined;\n\n  /** @type {?boolean} */\n  this.rendered = null;\n\n  /**\n   * A count of statement inputs on the block.\n   * @type {number}\n   * @package\n   */\n  this.statementInputCount = 0;\n\n  // Copy the type-specific functions and data from the prototype.\n  if (prototypeName) {\n    /** @type {string} */\n    this.type = prototypeName;\n    var prototype = Blockly.Blocks[prototypeName];\n    if (!prototype || typeof prototype != 'object') {\n      throw TypeError('Unknown block type: ' + prototypeName);\n    }\n    Blockly.utils.object.mixin(this, prototype);\n  }\n\n  workspace.addTopBlock(this);\n  workspace.addTypedBlock(this);\n\n  // Call an initialization function, if it exists.\n  if (typeof this.init == 'function') {\n    this.init();\n  }\n  // Record initial inline state.\n  /** @type {boolean|undefined} */\n  this.inputsInlineDefault = this.inputsInline;\n\n  // Fire a create event.\n  if (Blockly.Events.isEnabled()) {\n    var existingGroup = Blockly.Events.getGroup();\n    if (!existingGroup) {\n      Blockly.Events.setGroup(true);\n    }\n    try {\n      Blockly.Events.fire(new Blockly.Events.BlockCreate(this));\n    } finally {\n      if (!existingGroup) {\n        Blockly.Events.setGroup(false);\n      }\n    }\n\n  }\n  // Bind an onchange function, if it exists.\n  if (typeof this.onchange == 'function') {\n    this.setOnChange(this.onchange);\n  }\n};\n\n/**\n * @typedef {{\n *            text:?string,\n *            pinned:boolean,\n *            size:Blockly.utils.Size\n *          }}\n */\nBlockly.Block.CommentModel;\n\n/**\n * The language-neutral id given to the collapsed input.\n * @const {string}\n */\nBlockly.Block.COLLAPSED_INPUT_NAME = '_TEMP_COLLAPSED_INPUT';\n/**\n * The language-neutral id given to the collapsed field.\n * @const {string}\n */\nBlockly.Block.COLLAPSED_FIELD_NAME = '_TEMP_COLLAPSED_FIELD';\n\n/**\n * Optional text data that round-trips between blocks and XML.\n * Has no effect. May be used by 3rd parties for meta information.\n * @type {?string}\n */\nBlockly.Block.prototype.data = null;\n\n/**\n * Has this block been disposed of?\n * @type {boolean}\n * @package\n */\nBlockly.Block.prototype.disposed = false;\n\n/**\n * Colour of the block as HSV hue value (0-360)\n * This may be null if the block colour was not set via a hue number.\n * @type {?number}\n * @private\n */\nBlockly.Block.prototype.hue_ = null;\n\n/**\n * Colour of the block in '#RRGGBB' format.\n * @type {string}\n * @protected\n */\nBlockly.Block.prototype.colour_ = '#000000';\n\n/**\n * Name of the block style.\n * @type {?string}\n * @protected\n */\nBlockly.Block.prototype.styleName_ = null;\n\n/**\n * An optional method called during initialization.\n * @type {?function()}\n */\nBlockly.Block.prototype.init;\n\n/**\n * An optional callback method to use whenever the block's parent workspace\n * changes. This is usually only called from the constructor, the block type\n * initializer function, or an extension initializer function.\n * @type {?function(Blockly.Events.Abstract)}\n */\nBlockly.Block.prototype.onchange;\n\n/**\n * An optional serialization method for defining how to serialize the\n * mutation state. This must be coupled with defining `domToMutation`.\n * @type {?function(...):!Element}\n */\nBlockly.Block.prototype.mutationToDom;\n\n/**\n * An optional deserialization method for defining how to deserialize the\n * mutation state. This must be coupled with defining `mutationToDom`.\n * @type {?function(!Element)}\n */\nBlockly.Block.prototype.domToMutation;\n\n/**\n * An optional property for suppressing adding STATEMENT_PREFIX and\n * STATEMENT_SUFFIX to generated code.\n * @type {?boolean}\n */\nBlockly.Block.prototype.suppressPrefixSuffix;\n\n/**\n * An optional property for declaring developer variables.  Return a list of\n * variable names for use by generators.  Developer variables are never shown to\n * the user, but are declared as global variables in the generated code.\n * @type {?function():!Array.<string>}\n */\nBlockly.Block.prototype.getDeveloperVariables;\n\n/**\n * Dispose of this block.\n * @param {boolean} healStack If true, then try to heal any gap by connecting\n *     the next statement with the previous statement.  Otherwise, dispose of\n *     all children of this block.\n * @suppress {checkTypes}\n */\nBlockly.Block.prototype.dispose = function(healStack) {\n  if (!this.workspace) {\n    // Already deleted.\n    return;\n  }\n  // Terminate onchange event calls.\n  if (this.onchangeWrapper_) {\n    this.workspace.removeChangeListener(this.onchangeWrapper_);\n  }\n\n  this.unplug(healStack);\n  if (Blockly.Events.isEnabled()) {\n    Blockly.Events.fire(new Blockly.Events.BlockDelete(this));\n  }\n  Blockly.Events.disable();\n\n  try {\n    // This block is now at the top of the workspace.\n    // Remove this block from the workspace's list of top-most blocks.\n    if (this.workspace) {\n      this.workspace.removeTopBlock(this);\n      this.workspace.removeTypedBlock(this);\n      // Remove from block database.\n      this.workspace.removeBlockById(this.id);\n      this.workspace = null;\n    }\n\n    // Just deleting this block from the DOM would result in a memory leak as\n    // well as corruption of the connection database.  Therefore we must\n    // methodically step through the blocks and carefully disassemble them.\n\n    if (Blockly.selected == this) {\n      Blockly.selected = null;\n    }\n\n    // First, dispose of all my children.\n    for (var i = this.childBlocks_.length - 1; i >= 0; i--) {\n      this.childBlocks_[i].dispose(false);\n    }\n    // Then dispose of myself.\n    // Dispose of all inputs and their fields.\n    for (var i = 0, input; (input = this.inputList[i]); i++) {\n      input.dispose();\n    }\n    this.inputList.length = 0;\n    // Dispose of any remaining connections (next/previous/output).\n    var connections = this.getConnections_(true);\n    for (var i = 0, connection; (connection = connections[i]); i++) {\n      connection.dispose();\n    }\n  } finally {\n    Blockly.Events.enable();\n    this.disposed = true;\n  }\n};\n\n/**\n * Call initModel on all fields on the block.\n * May be called more than once.\n * Either initModel or initSvg must be called after creating a block and before\n * the first interaction with it.  Interactions include UI actions\n * (e.g. clicking and dragging) and firing events (e.g. create, delete, and\n * change).\n * @public\n */\nBlockly.Block.prototype.initModel = function() {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      if (field.initModel) {\n        field.initModel();\n      }\n    }\n  }\n};\n\n/**\n * Unplug this block from its superior block.  If this block is a statement,\n * optionally reconnect the block underneath with the block on top.\n * @param {boolean=} opt_healStack Disconnect child statement and reconnect\n *   stack.  Defaults to false.\n */\nBlockly.Block.prototype.unplug = function(opt_healStack) {\n  if (this.outputConnection) {\n    this.unplugFromRow_(opt_healStack);\n  } else if (this.previousConnection) {\n    this.unplugFromStack_(opt_healStack);\n  }\n};\n\n/**\n * Unplug this block's output from an input on another block.  Optionally\n * reconnect the block's parent to the only child block, if possible.\n * @param {boolean=} opt_healStack Disconnect right-side block and connect to\n *     left-side block.  Defaults to false.\n * @private\n */\nBlockly.Block.prototype.unplugFromRow_ = function(opt_healStack) {\n  var parentConnection = null;\n  if (this.outputConnection.isConnected()) {\n    parentConnection = this.outputConnection.targetConnection;\n    // Disconnect from any superior block.\n    this.outputConnection.disconnect();\n  }\n\n  // Return early in obvious cases.\n  if (!parentConnection || !opt_healStack) {\n    return;\n  }\n\n  var thisConnection = this.getOnlyValueConnection_();\n  if (!thisConnection ||\n      !thisConnection.isConnected() ||\n      thisConnection.targetBlock().isShadow()) {\n    // Too many or too few possible connections on this block, or there's\n    // nothing on the other side of this connection.\n    return;\n  }\n\n  var childConnection = thisConnection.targetConnection;\n  // Disconnect the child block.\n  childConnection.disconnect();\n  // Connect child to the parent if possible, otherwise bump away.\n  if (childConnection.checkType(parentConnection)) {\n    parentConnection.connect(childConnection);\n  } else {\n    childConnection.onFailedConnect(parentConnection);\n  }\n};\n\n/**\n * Returns the connection on the value input that is connected to another block.\n * When an insertion marker is connected to a connection with a block already\n * attached, the connected block is attached to the insertion marker.\n * Since only one block can be displaced and attached to the insertion marker\n * this should only ever return one connection.\n *\n * @return {Blockly.Connection} The connection on the value input, or null.\n * @private\n */\nBlockly.Block.prototype.getOnlyValueConnection_ = function() {\n  var connection = null;\n  for (var i = 0; i < this.inputList.length; i++) {\n    var thisConnection = this.inputList[i].connection;\n    if (thisConnection && thisConnection.type == Blockly.INPUT_VALUE &&\n        thisConnection.targetConnection) {\n      if (connection) {\n        return null; // More than one value input found.\n      }\n      connection = thisConnection;\n    }\n  }\n  return connection;\n};\n\n/**\n * Unplug this statement block from its superior block.  Optionally reconnect\n * the block underneath with the block on top.\n * @param {boolean=} opt_healStack Disconnect child statement and reconnect\n *   stack.  Defaults to false.\n * @private\n */\nBlockly.Block.prototype.unplugFromStack_ = function(opt_healStack) {\n  var previousTarget = null;\n  if (this.previousConnection.isConnected()) {\n    // Remember the connection that any next statements need to connect to.\n    previousTarget = this.previousConnection.targetConnection;\n    // Detach this block from the parent's tree.\n    this.previousConnection.disconnect();\n  }\n  var nextBlock = this.getNextBlock();\n  if (opt_healStack && nextBlock && !nextBlock.isShadow()) {\n    // Disconnect the next statement.\n    var nextTarget = this.nextConnection.targetConnection;\n    nextTarget.disconnect();\n    if (previousTarget && previousTarget.checkType(nextTarget)) {\n      // Attach the next statement to the previous statement.\n      previousTarget.connect(nextTarget);\n    }\n  }\n};\n\n/**\n * Returns all connections originating from this block.\n * @param {boolean} _all If true, return all connections even hidden ones.\n * @return {!Array.<!Blockly.Connection>} Array of connections.\n * @package\n */\nBlockly.Block.prototype.getConnections_ = function(_all) {\n  var myConnections = [];\n  if (this.outputConnection) {\n    myConnections.push(this.outputConnection);\n  }\n  if (this.previousConnection) {\n    myConnections.push(this.previousConnection);\n  }\n  if (this.nextConnection) {\n    myConnections.push(this.nextConnection);\n  }\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (input.connection) {\n      myConnections.push(input.connection);\n    }\n  }\n  return myConnections;\n};\n\n/**\n * Walks down a stack of blocks and finds the last next connection on the stack.\n * @return {Blockly.Connection} The last next connection on the stack, or null.\n * @package\n */\nBlockly.Block.prototype.lastConnectionInStack = function() {\n  var nextConnection = this.nextConnection;\n  while (nextConnection) {\n    var nextBlock = nextConnection.targetBlock();\n    if (!nextBlock) {\n      // Found a next connection with nothing on the other side.\n      return nextConnection;\n    }\n    nextConnection = nextBlock.nextConnection;\n  }\n  // Ran out of next connections.\n  return null;\n};\n\n/**\n * Bump unconnected blocks out of alignment.  Two blocks which aren't actually\n * connected should not coincidentally line up on screen.\n */\nBlockly.Block.prototype.bumpNeighbours = function() {\n  console.warn('Not expected to reach Block.bumpNeighbours function. ' +\n      'BlockSvg.bumpNeighbours was expected to be called instead.');\n};\n\n/**\n * Return the parent block or null if this block is at the top level. The parent\n * block is either the block connected to the previous connection (for a statement\n * block) or the block connected to the output connection (for a value block).\n * @return {Blockly.Block} The block that holds the current block.\n */\nBlockly.Block.prototype.getParent = function() {\n  // Look at the DOM to see if we are nested in another block.\n  return this.parentBlock_;\n};\n\n/**\n * Return the input that connects to the specified block.\n * @param {!Blockly.Block} block A block connected to an input on this block.\n * @return {Blockly.Input} The input that connects to the specified block.\n */\nBlockly.Block.prototype.getInputWithBlock = function(block) {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (input.connection && input.connection.targetBlock() == block) {\n      return input;\n    }\n  }\n  return null;\n};\n\n/**\n * Return the parent block that surrounds the current block, or null if this\n * block has no surrounding block.  A parent block might just be the previous\n * statement, whereas the surrounding block is an if statement, while loop, etc.\n * @return {Blockly.Block} The block that surrounds the current block.\n */\nBlockly.Block.prototype.getSurroundParent = function() {\n  var block = this;\n  do {\n    var prevBlock = block;\n    block = block.getParent();\n    if (!block) {\n      // Ran off the top.\n      return null;\n    }\n  } while (block.getNextBlock() == prevBlock);\n  // This block is an enclosing parent, not just a statement in a stack.\n  return block;\n};\n\n/**\n * Return the next statement block directly connected to this block.\n * @return {Blockly.Block} The next statement block or null.\n */\nBlockly.Block.prototype.getNextBlock = function() {\n  return this.nextConnection && this.nextConnection.targetBlock();\n};\n\n/**\n * Returns the block connected to the previous connection.\n * @return {Blockly.Block} The previous statement block or null.\n */\nBlockly.Block.prototype.getPreviousBlock = function() {\n  return this.previousConnection && this.previousConnection.targetBlock();\n};\n\n/**\n * Return the connection on the first statement input on this block, or null if\n * there are none.\n * @return {Blockly.Connection} The first statement connection or null.\n * @package\n */\nBlockly.Block.prototype.getFirstStatementConnection = function() {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (input.connection && input.connection.type == Blockly.NEXT_STATEMENT) {\n      return input.connection;\n    }\n  }\n  return null;\n};\n\n/**\n * Return the top-most block in this block's tree.\n * This will return itself if this block is at the top level.\n * @return {!Blockly.Block} The root block.\n */\nBlockly.Block.prototype.getRootBlock = function() {\n  var rootBlock;\n  var block = this;\n  do {\n    rootBlock = block;\n    block = rootBlock.parentBlock_;\n  } while (block);\n  return rootBlock;\n};\n\n/**\n * Walk up from the given block up through the stack of blocks to find\n * the top block of the sub stack. If we are nested in a statement input only\n * find the top-most nested block. Do not go all the way to the root block.\n * @return {!Blockly.Block} The top block in a stack.\n * @package\n */\nBlockly.Block.prototype.getTopStackBlock = function() {\n  var block = this;\n  do {\n    var previous = block.getPreviousBlock();\n  } while (previous && previous.getNextBlock() == block && (block = previous));\n  return block;\n};\n\n/**\n * Find all the blocks that are directly nested inside this one.\n * Includes value and statement inputs, as well as any following statement.\n * Excludes any connection on an output tab or any preceding statement.\n * Blocks are optionally sorted by position; top to bottom.\n * @param {boolean} ordered Sort the list if true.\n * @return {!Array.<!Blockly.Block>} Array of blocks.\n */\nBlockly.Block.prototype.getChildren = function(ordered) {\n  if (!ordered) {\n    return this.childBlocks_;\n  }\n  var blocks = [];\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (input.connection) {\n      var child = input.connection.targetBlock();\n      if (child) {\n        blocks.push(child);\n      }\n    }\n  }\n  var next = this.getNextBlock();\n  if (next) {\n    blocks.push(next);\n  }\n  return blocks;\n};\n\n/**\n * Set parent of this block to be a new block or null.\n * @param {Blockly.Block} newParent New parent block.\n */\nBlockly.Block.prototype.setParent = function(newParent) {\n  if (newParent == this.parentBlock_) {\n    return;\n  }\n  if (this.parentBlock_) {\n    // Remove this block from the old parent's child list.\n    Blockly.utils.arrayRemove(this.parentBlock_.childBlocks_, this);\n\n    // Disconnect from superior blocks.\n    if (this.previousConnection && this.previousConnection.isConnected()) {\n      throw Error('Still connected to previous block.');\n    }\n    if (this.outputConnection && this.outputConnection.isConnected()) {\n      throw Error('Still connected to parent block.');\n    }\n    this.parentBlock_ = null;\n    // This block hasn't actually moved on-screen, so there's no need to update\n    // its connection locations.\n  } else {\n    // Remove this block from the workspace's list of top-most blocks.\n    this.workspace.removeTopBlock(this);\n  }\n\n  this.parentBlock_ = newParent;\n  if (newParent) {\n    // Add this block to the new parent's child list.\n    newParent.childBlocks_.push(this);\n  } else {\n    this.workspace.addTopBlock(this);\n  }\n};\n\n/**\n * Find all the blocks that are directly or indirectly nested inside this one.\n * Includes this block in the list.\n * Includes value and statement inputs, as well as any following statements.\n * Excludes any connection on an output tab or any preceding statements.\n * Blocks are optionally sorted by position; top to bottom.\n * @param {boolean} ordered Sort the list if true.\n * @return {!Array.<!Blockly.Block>} Flattened array of blocks.\n */\nBlockly.Block.prototype.getDescendants = function(ordered) {\n  var blocks = [this];\n  var childBlocks = this.getChildren(ordered);\n  for (var child, i = 0; (child = childBlocks[i]); i++) {\n    blocks.push.apply(blocks, child.getDescendants(ordered));\n  }\n  return blocks;\n};\n\n/**\n * Get whether this block is deletable or not.\n * @return {boolean} True if deletable.\n */\nBlockly.Block.prototype.isDeletable = function() {\n  return this.deletable_ && !this.isShadow_ &&\n      !(this.workspace && this.workspace.options.readOnly);\n};\n\n/**\n * Set whether this block is deletable or not.\n * @param {boolean} deletable True if deletable.\n */\nBlockly.Block.prototype.setDeletable = function(deletable) {\n  this.deletable_ = deletable;\n};\n\n/**\n * Get whether this block is movable or not.\n * @return {boolean} True if movable.\n */\nBlockly.Block.prototype.isMovable = function() {\n  return this.movable_ && !this.isShadow_ &&\n      !(this.workspace && this.workspace.options.readOnly);\n};\n\n/**\n * Set whether this block is movable or not.\n * @param {boolean} movable True if movable.\n */\nBlockly.Block.prototype.setMovable = function(movable) {\n  this.movable_ = movable;\n};\n\n/**\n * Get whether is block is duplicatable or not. If duplicating this block and\n * descendants will put this block over the workspace's capacity this block is\n * not duplicatable. If duplicating this block and descendants will put any\n * type over their maxInstances this block is not duplicatable.\n * @return {boolean} True if duplicatable.\n */\nBlockly.Block.prototype.isDuplicatable = function() {\n  if (!this.workspace.hasBlockLimits()) {\n    return true;\n  }\n  return this.workspace.isCapacityAvailable(\n      Blockly.utils.getBlockTypeCounts(this, true));\n};\n\n/**\n * Get whether this block is a shadow block or not.\n * @return {boolean} True if a shadow.\n */\nBlockly.Block.prototype.isShadow = function() {\n  return this.isShadow_;\n};\n\n/**\n * Set whether this block is a shadow block or not.\n * @param {boolean} shadow True if a shadow.\n */\nBlockly.Block.prototype.setShadow = function(shadow) {\n  this.isShadow_ = shadow;\n};\n\n/**\n * Get whether this block is an insertion marker block or not.\n * @return {boolean} True if an insertion marker.\n * @package\n */\nBlockly.Block.prototype.isInsertionMarker = function() {\n  return this.isInsertionMarker_;\n};\n\n/**\n * Set whether this block is an insertion marker block or not.\n * Once set this cannot be unset.\n * @param {boolean} insertionMarker True if an insertion marker.\n * @package\n */\nBlockly.Block.prototype.setInsertionMarker = function(insertionMarker) {\n  this.isInsertionMarker_ = insertionMarker;\n};\n\n/**\n * Get whether this block is editable or not.\n * @return {boolean} True if editable.\n */\nBlockly.Block.prototype.isEditable = function() {\n  return this.editable_ && !(this.workspace && this.workspace.options.readOnly);\n};\n\n/**\n * Set whether this block is editable or not.\n * @param {boolean} editable True if editable.\n */\nBlockly.Block.prototype.setEditable = function(editable) {\n  this.editable_ = editable;\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      field.updateEditable();\n    }\n  }\n};\n\n/**\n * Returns if this block has been disposed of / deleted.\n * @return {boolean} True if this block has been disposed of / deleted.\n */\nBlockly.Block.prototype.isDisposed = function() {\n  return this.disposed;\n};\n\n/**\n * Find the connection on this block that corresponds to the given connection\n * on the other block.\n * Used to match connections between a block and its insertion marker.\n * @param {!Blockly.Block} otherBlock The other block to match against.\n * @param {!Blockly.Connection} conn The other connection to match.\n * @return {Blockly.Connection} The matching connection on this block, or null.\n * @package\n */\nBlockly.Block.prototype.getMatchingConnection = function(otherBlock, conn) {\n  var connections = this.getConnections_(true);\n  var otherConnections = otherBlock.getConnections_(true);\n  if (connections.length != otherConnections.length) {\n    throw Error(\"Connection lists did not match in length.\");\n  }\n  for (var i = 0; i < otherConnections.length; i++) {\n    if (otherConnections[i] == conn) {\n      return connections[i];\n    }\n  }\n  return null;\n};\n\n/**\n * Set the URL of this block's help page.\n * @param {string|Function} url URL string for block help, or function that\n *     returns a URL.  Null for no help.\n */\nBlockly.Block.prototype.setHelpUrl = function(url) {\n  this.helpUrl = url;\n};\n\n/**\n * Change the tooltip text for a block.\n * @param {string|!Function} newTip Text for tooltip or a parent element to\n *     link to for its tooltip.  May be a function that returns a string.\n */\nBlockly.Block.prototype.setTooltip = function(newTip) {\n  this.tooltip = newTip;\n};\n\n/**\n * Get the colour of a block.\n * @return {string} #RRGGBB string.\n */\nBlockly.Block.prototype.getColour = function() {\n  return this.colour_;\n};\n\n/**\n * Get the name of the block style.\n * @return {?string} Name of the block style.\n */\nBlockly.Block.prototype.getStyleName = function() {\n  return this.styleName_;\n};\n\n/**\n * Get the HSV hue value of a block.  Null if hue not set.\n * @return {?number} Hue value (0-360).\n */\nBlockly.Block.prototype.getHue = function() {\n  return this.hue_;\n};\n\n/**\n * Change the colour of a block.\n * @param {number|string} colour HSV hue value (0 to 360), #RRGGBB string,\n *     or a message reference string pointing to one of those two values.\n */\nBlockly.Block.prototype.setColour = function(colour) {\n  var parsed = Blockly.utils.parseBlockColour(colour);\n  this.hue_ = parsed.hue;\n  this.colour_ = parsed.hex;\n};\n\n/**\n * Set the style and colour values of a block.\n * @param {string} blockStyleName Name of the block style\n */\nBlockly.Block.prototype.setStyle = function(blockStyleName) {\n  this.styleName_ = blockStyleName;\n};\n\n/**\n * Sets a callback function to use whenever the block's parent workspace\n * changes, replacing any prior onchange handler. This is usually only called\n * from the constructor, the block type initializer function, or an extension\n * initializer function.\n * @param {function(Blockly.Events.Abstract)} onchangeFn The callback to call\n *     when the block's workspace changes.\n * @throws {Error} if onchangeFn is not falsey and not a function.\n */\nBlockly.Block.prototype.setOnChange = function(onchangeFn) {\n  if (onchangeFn && typeof onchangeFn != 'function') {\n    throw Error('onchange must be a function.');\n  }\n  if (this.onchangeWrapper_) {\n    this.workspace.removeChangeListener(this.onchangeWrapper_);\n  }\n  this.onchange = onchangeFn;\n  if (this.onchange) {\n    this.onchangeWrapper_ = onchangeFn.bind(this);\n    this.workspace.addChangeListener(this.onchangeWrapper_);\n  }\n};\n\n/**\n * Returns the named field from a block.\n * @param {string} name The name of the field.\n * @return {Blockly.Field} Named field, or null if field does not exist.\n */\nBlockly.Block.prototype.getField = function(name) {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      if (field.name == name) {\n        return field;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Return all variables referenced by this block.\n * @return {!Array.<string>} List of variable names.\n */\nBlockly.Block.prototype.getVars = function() {\n  var vars = [];\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      if (field.referencesVariables()) {\n        vars.push(field.getValue());\n      }\n    }\n  }\n  return vars;\n};\n\n/**\n * Return all variables referenced by this block.\n * @return {!Array.<!Blockly.VariableModel>} List of variable models.\n * @package\n */\nBlockly.Block.prototype.getVarModels = function() {\n  var vars = [];\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      if (field.referencesVariables()) {\n        var model = this.workspace.getVariableById(\n            /** @type {string} */ (field.getValue()));\n        // Check if the variable actually exists (and isn't just a potential\n        // variable).\n        if (model) {\n          vars.push(model);\n        }\n      }\n    }\n  }\n  return vars;\n};\n\n/**\n * Notification that a variable is renaming but keeping the same ID.  If the\n * variable is in use on this block, rerender to show the new name.\n * @param {!Blockly.VariableModel} variable The variable being renamed.\n * @package\n */\nBlockly.Block.prototype.updateVarName = function(variable) {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      if (field.referencesVariables() &&\n          variable.getId() == field.getValue()) {\n        field.refreshVariableName();\n      }\n    }\n  }\n};\n\n/**\n * Notification that a variable is renaming.\n * If the ID matches one of this block's variables, rename it.\n * @param {string} oldId ID of variable to rename.\n * @param {string} newId ID of new variable.  May be the same as oldId, but with\n *     an updated name.\n */\nBlockly.Block.prototype.renameVarById = function(oldId, newId) {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    for (var j = 0, field; (field = input.fieldRow[j]); j++) {\n      if (field.referencesVariables() &&\n          oldId == field.getValue()) {\n        field.setValue(newId);\n      }\n    }\n  }\n};\n\n/**\n * Returns the language-neutral value from the field of a block.\n * @param {string} name The name of the field.\n * @return {*} Value from the field or null if field does not exist.\n */\nBlockly.Block.prototype.getFieldValue = function(name) {\n  var field = this.getField(name);\n  if (field) {\n    return field.getValue();\n  }\n  return null;\n};\n\n/**\n * Change the field value for a block (e.g. 'CHOOSE' or 'REMOVE').\n * @param {string} newValue Value to be the new field.\n * @param {string} name The name of the field.\n */\nBlockly.Block.prototype.setFieldValue = function(newValue, name) {\n  var field = this.getField(name);\n  if (!field) {\n    throw Error('Field \"' + name + '\" not found.');\n  }\n  field.setValue(newValue);\n};\n\n/**\n * Set whether this block can chain onto the bottom of another block.\n * @param {boolean} newBoolean True if there can be a previous statement.\n * @param {(string|Array.<string>|null)=} opt_check Statement type or\n *     list of statement types.  Null/undefined if any type could be connected.\n */\nBlockly.Block.prototype.setPreviousStatement = function(newBoolean, opt_check) {\n  if (newBoolean) {\n    if (opt_check === undefined) {\n      opt_check = null;\n    }\n    if (!this.previousConnection) {\n      if (this.outputConnection) {\n        throw Error('Remove output connection prior to adding previous ' +\n            'connection.');\n      }\n      this.previousConnection =\n          this.makeConnection_(Blockly.PREVIOUS_STATEMENT);\n    }\n    this.previousConnection.setCheck(opt_check);\n  } else {\n    if (this.previousConnection) {\n      if (this.previousConnection.isConnected()) {\n        throw Error('Must disconnect previous statement before removing ' +\n            'connection.');\n      }\n      this.previousConnection.dispose();\n      this.previousConnection = null;\n    }\n  }\n};\n\n/**\n * Set whether another block can chain onto the bottom of this block.\n * @param {boolean} newBoolean True if there can be a next statement.\n * @param {(string|Array.<string>|null)=} opt_check Statement type or\n *     list of statement types.  Null/undefined if any type could be connected.\n */\nBlockly.Block.prototype.setNextStatement = function(newBoolean, opt_check) {\n  if (newBoolean) {\n    if (opt_check === undefined) {\n      opt_check = null;\n    }\n    if (!this.nextConnection) {\n      this.nextConnection = this.makeConnection_(Blockly.NEXT_STATEMENT);\n    }\n    this.nextConnection.setCheck(opt_check);\n  } else {\n    if (this.nextConnection) {\n      if (this.nextConnection.isConnected()) {\n        throw Error('Must disconnect next statement before removing ' +\n            'connection.');\n      }\n      this.nextConnection.dispose();\n      this.nextConnection = null;\n    }\n  }\n};\n\n/**\n * Set whether this block returns a value.\n * @param {boolean} newBoolean True if there is an output.\n * @param {(string|Array.<string>|null)=} opt_check Returned type or list\n *     of returned types.  Null or undefined if any type could be returned\n *     (e.g. variable get).\n */\nBlockly.Block.prototype.setOutput = function(newBoolean, opt_check) {\n  if (newBoolean) {\n    if (opt_check === undefined) {\n      opt_check = null;\n    }\n    if (!this.outputConnection) {\n      if (this.previousConnection) {\n        throw Error('Remove previous connection prior to adding output ' +\n            'connection.');\n      }\n      this.outputConnection = this.makeConnection_(Blockly.OUTPUT_VALUE);\n    }\n    this.outputConnection.setCheck(opt_check);\n  } else {\n    if (this.outputConnection) {\n      if (this.outputConnection.isConnected()) {\n        throw Error('Must disconnect output value before removing connection.');\n      }\n      this.outputConnection.dispose();\n      this.outputConnection = null;\n    }\n  }\n};\n\n/**\n * Set whether value inputs are arranged horizontally or vertically.\n * @param {boolean} newBoolean True if inputs are horizontal.\n */\nBlockly.Block.prototype.setInputsInline = function(newBoolean) {\n  if (this.inputsInline != newBoolean) {\n    Blockly.Events.fire(new Blockly.Events.BlockChange(\n        this, 'inline', null, this.inputsInline, newBoolean));\n    this.inputsInline = newBoolean;\n  }\n};\n\n/**\n * Get whether value inputs are arranged horizontally or vertically.\n * @return {boolean} True if inputs are horizontal.\n */\nBlockly.Block.prototype.getInputsInline = function() {\n  if (this.inputsInline != undefined) {\n    // Set explicitly.\n    return this.inputsInline;\n  }\n  // Not defined explicitly.  Figure out what would look best.\n  for (var i = 1; i < this.inputList.length; i++) {\n    if (this.inputList[i - 1].type == Blockly.DUMMY_INPUT &&\n        this.inputList[i].type == Blockly.DUMMY_INPUT) {\n      // Two dummy inputs in a row.  Don't inline them.\n      return false;\n    }\n  }\n  for (var i = 1; i < this.inputList.length; i++) {\n    if (this.inputList[i - 1].type == Blockly.INPUT_VALUE &&\n        this.inputList[i].type == Blockly.DUMMY_INPUT) {\n      // Dummy input after a value input.  Inline them.\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Set the block's output shape.\n * @param {?number} outputShape Value representing an output shape.\n */\nBlockly.Block.prototype.setOutputShape = function(outputShape) {\n  this.outputShape_ = outputShape;\n};\n\n/**\n * Get the block's output shape.\n * @return {?number} Value representing output shape if one exists.\n */\nBlockly.Block.prototype.getOutputShape = function() {\n  return this.outputShape_;\n};\n\n/**\n * Set whether the block is disabled or not.\n * @param {boolean} disabled True if disabled.\n * @deprecated May 2019\n */\nBlockly.Block.prototype.setDisabled = function(disabled) {\n  console.warn('Deprecated call to Blockly.Block.prototype.setDisabled, ' +\n               'use Blockly.Block.prototype.setEnabled instead.');\n  this.setEnabled(!disabled);\n};\n\n/**\n * Get whether this block is enabled or not.\n * @return {boolean} True if enabled.\n */\nBlockly.Block.prototype.isEnabled = function() {\n  return !this.disabled;\n};\n\n/**\n * Set whether the block is enabled or not.\n * @param {boolean} enabled True if enabled.\n */\nBlockly.Block.prototype.setEnabled = function(enabled) {\n  if (this.isEnabled() != enabled) {\n    Blockly.Events.fire(new Blockly.Events.BlockChange(\n        this, 'disabled', null, this.disabled, !enabled));\n    this.disabled = !enabled;\n  }\n};\n\n/**\n * Get whether the block is disabled or not due to parents.\n * The block's own disabled property is not considered.\n * @return {boolean} True if disabled.\n */\nBlockly.Block.prototype.getInheritedDisabled = function() {\n  var ancestor = this.getSurroundParent();\n  while (ancestor) {\n    if (ancestor.disabled) {\n      return true;\n    }\n    ancestor = ancestor.getSurroundParent();\n  }\n  // Ran off the top.\n  return false;\n};\n\n/**\n * Get whether the block is collapsed or not.\n * @return {boolean} True if collapsed.\n */\nBlockly.Block.prototype.isCollapsed = function() {\n  return this.collapsed_;\n};\n\n/**\n * Set whether the block is collapsed or not.\n * @param {boolean} collapsed True if collapsed.\n */\nBlockly.Block.prototype.setCollapsed = function(collapsed) {\n  if (this.collapsed_ != collapsed) {\n    Blockly.Events.fire(new Blockly.Events.BlockChange(\n        this, 'collapsed', null, this.collapsed_, collapsed));\n    this.collapsed_ = collapsed;\n  }\n};\n\n/**\n * Create a human-readable text representation of this block and any children.\n * @param {number=} opt_maxLength Truncate the string to this length.\n * @param {string=} opt_emptyToken The placeholder string used to denote an\n *     empty field. If not specified, '?' is used.\n * @return {string} Text of block.\n */\nBlockly.Block.prototype.toString = function(opt_maxLength, opt_emptyToken) {\n  var text = [];\n  var emptyFieldPlaceholder = opt_emptyToken || '?';\n\n  // Temporarily set flag to navigate to all fields.\n  var prevNavigateFields = Blockly.ASTNode.NAVIGATE_ALL_FIELDS;\n  Blockly.ASTNode.NAVIGATE_ALL_FIELDS = true;\n\n  var node = Blockly.ASTNode.createBlockNode(this);\n  var rootNode = node;\n\n  /**\n   * Whether or not to add parentheses around an input.\n   * @param {!Blockly.Connection} connection The connection.\n   * @return {boolean} True if we should add parentheses around the input.\n   */\n  function shouldAddParentheses(connection) {\n    var checks = connection.getCheck();\n    if (!checks && connection.targetConnection) {\n      checks = connection.targetConnection.getCheck();\n    }\n    return !!checks && (checks.indexOf('Boolean') != -1 ||\n        checks.indexOf('Number') != -1);\n  }\n\n  /**\n   * Check that we haven't circled back to the original root node.\n   */\n  function checkRoot() {\n    if (node && node.getType() == rootNode.getType() &&\n        node.getLocation() == rootNode.getLocation()) {\n      node = null;\n    }\n  }\n\n  // Traverse the AST building up our text string.\n  while (node) {\n    switch (node.getType()) {\n      case Blockly.ASTNode.types.INPUT:\n        var connection = /** @type {!Blockly.Connection} */ (node.getLocation());\n        if (!node.in()) {\n          text.push(emptyFieldPlaceholder);\n        } else if (shouldAddParentheses(connection)) {\n          text.push('(');\n        }\n        break;\n      case Blockly.ASTNode.types.FIELD:\n        var field = /** @type {Blockly.Field} */ (node.getLocation());\n        if (field.name != Blockly.Block.COLLAPSED_FIELD_NAME) {\n          text.push(field.getText());\n        }\n        break;\n    }\n\n    var current = node;\n    node = current.in() || current.next();\n    if (!node) {\n      // Can't go in or next, keep going out until we can go next.\n      node = current.out();\n      checkRoot();\n      while (node && !node.next()) {\n        node = node.out();\n        checkRoot();\n        // If we hit an input on the way up, possibly close out parentheses.\n        if (node && node.getType() == Blockly.ASTNode.types.INPUT &&\n            shouldAddParentheses(\n                /** @type {!Blockly.Connection} */ (node.getLocation()))) {\n          text.push(')');\n        }\n      }\n      if (node) {\n        node = node.next();\n      }\n    }\n  }\n\n  // Restore state of NAVIGATE_ALL_FIELDS.\n  Blockly.ASTNode.NAVIGATE_ALL_FIELDS = prevNavigateFields;\n\n  // Run through our text array and simplify expression to remove parentheses\n  // around single field blocks.\n  for (var i = 2, l = text.length; i < l; i++) {\n    if (text[i - 2] == '(' && text[i] == ')') {\n      text[i - 2] = text[i - 1];\n      text.splice(i - 1, 2);\n      l -= 2;\n    }\n  }\n\n  // Join the text array, removing spaces around added paranthesis.\n  text = text.join(' ').replace(/(\\() | (\\))/gmi, '$1$2').trim() || '???';\n  if (opt_maxLength) {\n    // TODO: Improve truncation so that text from this block is given priority.\n    // E.g. \"1+2+3+4+5+6+7+8+9=0\" should be \"...6+7+8+9=0\", not \"1+2+3+4+5...\".\n    // E.g. \"1+2+3+4+5=6+7+8+9+0\" should be \"...4+5=6+7...\".\n    if (text.length > opt_maxLength) {\n      text = text.substring(0, opt_maxLength - 3) + '...';\n    }\n  }\n  return text;\n};\n\n/**\n * Shortcut for appending a value input row.\n * @param {string} name Language-neutral identifier which may used to find this\n *     input again.  Should be unique to this block.\n * @return {!Blockly.Input} The input object created.\n */\nBlockly.Block.prototype.appendValueInput = function(name) {\n  return this.appendInput_(Blockly.INPUT_VALUE, name);\n};\n\n/**\n * Shortcut for appending a statement input row.\n * @param {string} name Language-neutral identifier which may used to find this\n *     input again.  Should be unique to this block.\n * @return {!Blockly.Input} The input object created.\n */\nBlockly.Block.prototype.appendStatementInput = function(name) {\n  return this.appendInput_(Blockly.NEXT_STATEMENT, name);\n};\n\n/**\n * Shortcut for appending a dummy input row.\n * @param {string=} opt_name Language-neutral identifier which may used to find\n *     this input again.  Should be unique to this block.\n * @return {!Blockly.Input} The input object created.\n */\nBlockly.Block.prototype.appendDummyInput = function(opt_name) {\n  return this.appendInput_(Blockly.DUMMY_INPUT, opt_name || '');\n};\n\n/**\n * Initialize this block using a cross-platform, internationalization-friendly\n * JSON description.\n * @param {!Object} json Structured data describing the block.\n */\nBlockly.Block.prototype.jsonInit = function(json) {\n  var warningPrefix = json['type'] ? 'Block \"' + json['type'] + '\": ' : '';\n\n  // Validate inputs.\n  if (json['output'] && json['previousStatement']) {\n    throw Error(warningPrefix +\n        'Must not have both an output and a previousStatement.');\n  }\n\n  // Set basic properties of block.\n  // Makes styles backward compatible with old way of defining hat style.\n  if (json['style'] && json['style'].hat) {\n    this.hat = json['style'].hat;\n    // Must set to null so it doesn't error when checking for style and colour.\n    json['style'] = null;\n  }\n\n  if (json['style'] && json['colour']) {\n    throw Error(warningPrefix + 'Must not have both a colour and a style.');\n  } else if (json['style']) {\n    this.jsonInitStyle_(json, warningPrefix);\n  } else {\n    this.jsonInitColour_(json, warningPrefix);\n  }\n\n  // Interpolate the message blocks.\n  var i = 0;\n  while (json['message' + i] !== undefined) {\n    this.interpolate_(json['message' + i], json['args' + i] || [],\n        json['lastDummyAlign' + i], warningPrefix);\n    i++;\n  }\n\n  if (json['inputsInline'] !== undefined) {\n    this.setInputsInline(json['inputsInline']);\n  }\n  // Set output and previous/next connections.\n  if (json['output'] !== undefined) {\n    this.setOutput(true, json['output']);\n  }\n  if (json['outputShape'] !== undefined) {\n    this.setOutputShape(json['outputShape']);\n  }\n  if (json['previousStatement'] !== undefined) {\n    this.setPreviousStatement(true, json['previousStatement']);\n  }\n  if (json['nextStatement'] !== undefined) {\n    this.setNextStatement(true, json['nextStatement']);\n  }\n  if (json['tooltip'] !== undefined) {\n    var rawValue = json['tooltip'];\n    var localizedText = Blockly.utils.replaceMessageReferences(rawValue);\n    this.setTooltip(localizedText);\n  }\n  if (json['enableContextMenu'] !== undefined) {\n    var rawValue = json['enableContextMenu'];\n    this.contextMenu = !!rawValue;\n  }\n  if (json['helpUrl'] !== undefined) {\n    var rawValue = json['helpUrl'];\n    var localizedValue = Blockly.utils.replaceMessageReferences(rawValue);\n    this.setHelpUrl(localizedValue);\n  }\n  if (typeof json['extensions'] == 'string') {\n    console.warn(\n        warningPrefix + 'JSON attribute \\'extensions\\' should be an array of' +\n        ' strings. Found raw string in JSON for \\'' + json['type'] +\n        '\\' block.');\n    json['extensions'] = [json['extensions']];  // Correct and continue.\n  }\n\n  // Add the mutator to the block\n  if (json['mutator'] !== undefined) {\n    Blockly.Extensions.apply(json['mutator'], this, true);\n  }\n\n  if (Array.isArray(json['extensions'])) {\n    var extensionNames = json['extensions'];\n    for (var j = 0; j < extensionNames.length; ++j) {\n      var extensionName = extensionNames[j];\n      Blockly.Extensions.apply(extensionName, this, false);\n    }\n  }\n};\n\n/**\n * Initialize the colour of this block from the JSON description.\n * @param {!Object} json Structured data describing the block.\n * @param {string} warningPrefix Warning prefix string identifying block.\n * @private\n */\nBlockly.Block.prototype.jsonInitColour_ = function(json, warningPrefix) {\n  if ('colour' in json) {\n    if (json['colour'] === undefined) {\n      console.warn(warningPrefix + 'Undefined colour value.');\n    } else {\n      var rawValue = json['colour'];\n      try {\n        this.setColour(rawValue);\n      } catch (e) {\n        console.warn(warningPrefix + 'Illegal colour value: ', rawValue);\n      }\n    }\n  }\n};\n\n/**\n * Initialize the style of this block from the JSON description.\n * @param {!Object} json Structured data describing the block.\n * @param {string} warningPrefix Warning prefix string identifying block.\n * @private\n */\nBlockly.Block.prototype.jsonInitStyle_ = function(json, warningPrefix) {\n  var blockStyleName = json['style'];\n  try {\n    this.setStyle(blockStyleName);\n  } catch (styleError) {\n    console.warn(warningPrefix + 'Style does not exist: ', blockStyleName);\n  }\n};\n\n/**\n * Add key/values from mixinObj to this block object. By default, this method\n * will check that the keys in mixinObj will not overwrite existing values in\n * the block, including prototype values. This provides some insurance against\n * mixin / extension incompatibilities with future block features. This check\n * can be disabled by passing true as the second argument.\n * @param {!Object} mixinObj The key/values pairs to add to this block object.\n * @param {boolean=} opt_disableCheck Option flag to disable overwrite checks.\n */\nBlockly.Block.prototype.mixin = function(mixinObj, opt_disableCheck) {\n  if (opt_disableCheck !== undefined && typeof opt_disableCheck != 'boolean') {\n    throw Error('opt_disableCheck must be a boolean if provided');\n  }\n  if (!opt_disableCheck) {\n    var overwrites = [];\n    for (var key in mixinObj) {\n      if (this[key] !== undefined) {\n        overwrites.push(key);\n      }\n    }\n    if (overwrites.length) {\n      throw Error('Mixin will overwrite block members: ' +\n          JSON.stringify(overwrites));\n    }\n  }\n  Blockly.utils.object.mixin(this, mixinObj);\n};\n\n/**\n * Interpolate a message description onto the block.\n * @param {string} message Text contains interpolation tokens (%1, %2, ...)\n *     that match with fields or inputs defined in the args array.\n * @param {!Array} args Array of arguments to be interpolated.\n * @param {string|undefined} lastDummyAlign If a dummy input is added at the\n *     end, how should it be aligned?\n * @param {string} warningPrefix Warning prefix string identifying block.\n * @private\n */\nBlockly.Block.prototype.interpolate_ = function(message, args, lastDummyAlign,\n    warningPrefix) {\n  var tokens = Blockly.utils.tokenizeInterpolation(message);\n  // Interpolate the arguments.  Build a list of elements.\n  var indexDup = [];\n  var indexCount = 0;\n  var elements = [];\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    if (typeof token == 'number') {\n      if (token <= 0 || token > args.length) {\n        throw Error('Block \"' + this.type + '\": ' +\n            'Message index %' + token + ' out of range.');\n      }\n      if (indexDup[token]) {\n        throw Error('Block \"' + this.type + '\": ' +\n            'Message index %' + token + ' duplicated.');\n      }\n      indexDup[token] = true;\n      indexCount++;\n      elements.push(args[token - 1]);\n    } else {\n      token = token.trim();\n      if (token) {\n        elements.push(token);\n      }\n    }\n  }\n  if (indexCount != args.length) {\n    throw Error('Block \"' + this.type + '\": ' +\n        'Message does not reference all ' + args.length + ' arg(s).');\n  }\n  // Add last dummy input if needed.\n  if (elements.length && (typeof elements[elements.length - 1] == 'string' ||\n      Blockly.utils.string.startsWith(\n          elements[elements.length - 1]['type'], 'field_'))) {\n    var dummyInput = {type: 'input_dummy'};\n    if (lastDummyAlign) {\n      dummyInput['align'] = lastDummyAlign;\n    }\n    elements.push(dummyInput);\n  }\n  // Lookup of alignment constants.\n  var alignmentLookup = {\n    'LEFT': Blockly.ALIGN_LEFT,\n    'RIGHT': Blockly.ALIGN_RIGHT,\n    'CENTRE': Blockly.ALIGN_CENTRE,\n    'CENTER': Blockly.ALIGN_CENTRE\n  };\n  // Populate block with inputs and fields.\n  var fieldStack = [];\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    if (typeof element == 'string') {\n      fieldStack.push([element, undefined]);\n    } else {\n      var field = null;\n      var input = null;\n      do {\n        var altRepeat = false;\n        if (typeof element == 'string') {\n          field = new Blockly.FieldLabel(element);\n        } else {\n          switch (element['type']) {\n            case 'input_value':\n              input = this.appendValueInput(element['name']);\n              break;\n            case 'input_statement':\n              input = this.appendStatementInput(element['name']);\n              break;\n            case 'input_dummy':\n              input = this.appendDummyInput(element['name']);\n              break;\n            default:\n              // This should handle all field JSON parsing, including\n              // options that can be applied to any field type.\n              field = Blockly.fieldRegistry.fromJson(element);\n\n              // Unknown field.\n              if (!field && element['alt']) {\n                element = element['alt'];\n                altRepeat = true;\n              }\n          }\n        }\n      } while (altRepeat);\n      if (field) {\n        fieldStack.push([field, element['name']]);\n      } else if (input) {\n        if (element['check']) {\n          input.setCheck(element['check']);\n        }\n        if (element['align']) {\n          var alignment = alignmentLookup[element['align'].toUpperCase()];\n          if (alignment === undefined) {\n            console.warn(warningPrefix + 'Illegal align value: ',\n                element['align']);\n          } else {\n            input.setAlign(alignment);\n          }\n        }\n        for (var j = 0; j < fieldStack.length; j++) {\n          input.appendField(fieldStack[j][0], fieldStack[j][1]);\n        }\n        fieldStack.length = 0;\n      }\n    }\n  }\n};\n\n/**\n * Add a value input, statement input or local variable to this block.\n * @param {number} type Either Blockly.INPUT_VALUE or Blockly.NEXT_STATEMENT or\n *     Blockly.DUMMY_INPUT.\n * @param {string} name Language-neutral identifier which may used to find this\n *     input again.  Should be unique to this block.\n * @return {!Blockly.Input} The input object created.\n * @protected\n */\nBlockly.Block.prototype.appendInput_ = function(type, name) {\n  var connection = null;\n  if (type == Blockly.INPUT_VALUE || type == Blockly.NEXT_STATEMENT) {\n    connection = this.makeConnection_(type);\n  }\n  if (type == Blockly.NEXT_STATEMENT) {\n    this.statementInputCount++;\n  }\n  var input = new Blockly.Input(type, name, this, connection);\n  // Append input to list.\n  this.inputList.push(input);\n  return input;\n};\n\n/**\n * Move a named input to a different location on this block.\n * @param {string} name The name of the input to move.\n * @param {?string} refName Name of input that should be after the moved input,\n *   or null to be the input at the end.\n */\nBlockly.Block.prototype.moveInputBefore = function(name, refName) {\n  if (name == refName) {\n    return;\n  }\n  // Find both inputs.\n  var inputIndex = -1;\n  var refIndex = refName ? -1 : this.inputList.length;\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (input.name == name) {\n      inputIndex = i;\n      if (refIndex != -1) {\n        break;\n      }\n    } else if (refName && input.name == refName) {\n      refIndex = i;\n      if (inputIndex != -1) {\n        break;\n      }\n    }\n  }\n  if (inputIndex == -1) {\n    throw Error('Named input \"' + name + '\" not found.');\n  }\n  if (refIndex == -1) {\n    throw Error('Reference input \"' + refName + '\" not found.');\n  }\n  this.moveNumberedInputBefore(inputIndex, refIndex);\n};\n\n/**\n * Move a numbered input to a different location on this block.\n * @param {number} inputIndex Index of the input to move.\n * @param {number} refIndex Index of input that should be after the moved input.\n */\nBlockly.Block.prototype.moveNumberedInputBefore = function(\n    inputIndex, refIndex) {\n  // Validate arguments.\n  if (inputIndex == refIndex) {\n    throw Error('Can\\'t move input to itself.');\n  }\n  if (inputIndex >= this.inputList.length) {\n    throw RangeError('Input index ' + inputIndex + ' out of bounds.');\n  }\n  if (refIndex > this.inputList.length) {\n    throw RangeError('Reference input ' + refIndex + ' out of bounds.');\n  }\n  // Remove input.\n  var input = this.inputList[inputIndex];\n  this.inputList.splice(inputIndex, 1);\n  if (inputIndex < refIndex) {\n    refIndex--;\n  }\n  // Reinsert input.\n  this.inputList.splice(refIndex, 0, input);\n};\n\n/**\n * Remove an input from this block.\n * @param {string} name The name of the input.\n * @param {boolean=} opt_quiet True to prevent an error if input is not present.\n * @return {boolean} True if operation succeeds, false if input is not present and opt_quiet is true\n * @throws {Error} if the input is not present and opt_quiet is not true.\n */\nBlockly.Block.prototype.removeInput = function(name, opt_quiet) {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (input.name == name) {\n      if (input.type == Blockly.NEXT_STATEMENT) {\n        this.statementInputCount--;\n      }\n      input.dispose();\n      this.inputList.splice(i, 1);\n      return true;\n    }\n  }\n  if (opt_quiet) {\n    return false;\n  } else {\n    throw Error('Input not found: ' + name);\n  }\n};\n\n/**\n * Fetches the named input object.\n * @param {string} name The name of the input.\n * @return {Blockly.Input} The input object, or null if input does not exist.\n */\nBlockly.Block.prototype.getInput = function(name) {\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (input.name == name) {\n      return input;\n    }\n  }\n  // This input does not exist.\n  return null;\n};\n\n/**\n * Fetches the block attached to the named input.\n * @param {string} name The name of the input.\n * @return {Blockly.Block} The attached value block, or null if the input is\n *     either disconnected or if the input does not exist.\n */\nBlockly.Block.prototype.getInputTargetBlock = function(name) {\n  var input = this.getInput(name);\n  return input && input.connection && input.connection.targetBlock();\n};\n\n/**\n * Returns the comment on this block (or null if there is no comment).\n * @return {?string} Block's comment.\n */\nBlockly.Block.prototype.getCommentText = function() {\n  return this.commentModel.text;\n};\n\n/**\n * Set this block's comment text.\n * @param {?string} text The text, or null to delete.\n */\nBlockly.Block.prototype.setCommentText = function(text) {\n  if (this.commentModel.text == text) {\n    return;\n  }\n  Blockly.Events.fire(new Blockly.Events.BlockChange(\n      this, 'comment', null, this.commentModel.text, text));\n  this.commentModel.text = text;\n  this.comment = text;  // For backwards compatibility.\n};\n\n/**\n * Set this block's warning text.\n * @param {?string} _text The text, or null to delete.\n * @param {string=} _opt_id An optional ID for the warning text to be able to\n *     maintain multiple warnings.\n */\nBlockly.Block.prototype.setWarningText = function(_text, _opt_id) {\n  // NOP.\n};\n\n/**\n * Give this block a mutator dialog.\n * @param {Blockly.Mutator} _mutator A mutator dialog instance or null to\n *     remove.\n */\nBlockly.Block.prototype.setMutator = function(_mutator) {\n  // NOP.\n};\n\n/**\n * Return the coordinates of the top-left corner of this block relative to the\n * drawing surface's origin (0,0), in workspace units.\n * @return {!Blockly.utils.Coordinate} Object with .x and .y properties.\n */\nBlockly.Block.prototype.getRelativeToSurfaceXY = function() {\n  return this.xy_;\n};\n\n/**\n * Move a block by a relative offset.\n * @param {number} dx Horizontal offset, in workspace units.\n * @param {number} dy Vertical offset, in workspace units.\n */\nBlockly.Block.prototype.moveBy = function(dx, dy) {\n  if (this.parentBlock_) {\n    throw Error('Block has parent.');\n  }\n  var event = new Blockly.Events.BlockMove(this);\n  this.xy_.translate(dx, dy);\n  event.recordNew();\n  Blockly.Events.fire(event);\n};\n\n/**\n * Create a connection of the specified type.\n * @param {number} type The type of the connection to create.\n * @return {!Blockly.Connection} A new connection of the specified type.\n * @protected\n */\nBlockly.Block.prototype.makeConnection_ = function(type) {\n  return new Blockly.Connection(this, type);\n};\n\n/**\n * Recursively checks whether all statement and value inputs are filled with\n * blocks. Also checks all following statement blocks in this stack.\n * @param {boolean=} opt_shadowBlocksAreFilled An optional argument controlling\n *     whether shadow blocks are counted as filled. Defaults to true.\n * @return {boolean} True if all inputs are filled, false otherwise.\n */\nBlockly.Block.prototype.allInputsFilled = function(opt_shadowBlocksAreFilled) {\n  // Account for the shadow block filledness toggle.\n  if (opt_shadowBlocksAreFilled === undefined) {\n    opt_shadowBlocksAreFilled = true;\n  }\n  if (!opt_shadowBlocksAreFilled && this.isShadow()) {\n    return false;\n  }\n\n  // Recursively check each input block of the current block.\n  for (var i = 0, input; (input = this.inputList[i]); i++) {\n    if (!input.connection) {\n      continue;\n    }\n    var target = input.connection.targetBlock();\n    if (!target || !target.allInputsFilled(opt_shadowBlocksAreFilled)) {\n      return false;\n    }\n  }\n\n  // Recursively check the next block after the current block.\n  var next = this.getNextBlock();\n  if (next) {\n    return next.allInputsFilled(opt_shadowBlocksAreFilled);\n  }\n\n  return true;\n};\n\n/**\n * This method returns a string describing this Block in developer terms (type\n * name and ID; English only).\n *\n * Intended to on be used in console logs and errors. If you need a string that\n * uses the user's native language (including block text, field values, and\n * child blocks), use [toString()]{@link Blockly.Block#toString}.\n * @return {string} The description.\n */\nBlockly.Block.prototype.toDevString = function() {\n  var msg = this.type ? '\"' + this.type + '\" block' : 'Block';\n  if (this.id) {\n    msg += ' (id=\"' + this.id + '\")';\n  }\n  return msg;\n};\n"],"file":"block.min.js"}