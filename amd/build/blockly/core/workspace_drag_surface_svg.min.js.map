{"version":3,"sources":["../../../src/blockly/core/workspace_drag_surface_svg.js"],"names":["goog","provide","require","Blockly","WorkspaceDragSurfaceSvg","container","container_","createDom","prototype","SVG_","utils","dom","createSvgElement","SVG_NS","HTML_NS","XLINK_NS","appendChild","translateSurface","x","y","fixedX","toFixed","fixedY","style","display","setCssTransform","getSurfaceTranslation","getRelativeXY","clearAndHide","newSurface","Error","blockCanvas","childNodes","bubbleCanvas","hasClass","previousSibling_","insertAfter","insertBefore","firstChild","length","setContentsAndShow","previousSibling","width","height","scale","setAttribute"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview An SVG that floats on top of the workspace.\n * Blocks are moved into this SVG during a drag, improving performance.\n * The entire SVG is translated using CSS translation instead of SVG so the\n * blocks are never repainted during drag improving performance.\n * @author katelyn@google.com (Katelyn Mann)\n */\n\n'use strict';\n\ngoog.provide('Blockly.WorkspaceDragSurfaceSvg');\n\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.dom');\n\n\n/**\n * Blocks are moved into this SVG during a drag, improving performance.\n * The entire SVG is translated using CSS transforms instead of SVG so the\n * blocks are never repainted during drag improving performance.\n * @param {!Element} container Containing element.\n * @constructor\n */\nBlockly.WorkspaceDragSurfaceSvg = function(container) {\n  this.container_ = container;\n  this.createDom();\n};\n\n/**\n * The SVG drag surface. Set once by Blockly.WorkspaceDragSurfaceSvg.createDom.\n * @type {SVGElement}\n * @private\n */\nBlockly.WorkspaceDragSurfaceSvg.prototype.SVG_ = null;\n\n/**\n * Containing HTML element; parent of the workspace and the drag surface.\n * @type {Element}\n * @private\n */\nBlockly.WorkspaceDragSurfaceSvg.prototype.container_ = null;\n\n/**\n * Create the drag surface and inject it into the container.\n */\nBlockly.WorkspaceDragSurfaceSvg.prototype.createDom = function() {\n  if (this.SVG_) {\n    return;  // Already created.\n  }\n\n  /**\n  * Dom structure when the workspace is being dragged. If there is no drag in\n  * progress, the SVG is empty and display: none.\n  * <svg class=\"blocklyWsDragSurface\" style=transform:translate3d(...)>\n  *   <g class=\"blocklyBlockCanvas\"></g>\n  *   <g class=\"blocklyBubbleCanvas\">/g>\n  * </svg>\n  */\n  this.SVG_ = Blockly.utils.dom.createSvgElement('svg',\n      {\n        'xmlns': Blockly.utils.dom.SVG_NS,\n        'xmlns:html': Blockly.utils.dom.HTML_NS,\n        'xmlns:xlink': Blockly.utils.dom.XLINK_NS,\n        'version': '1.1',\n        'class': 'blocklyWsDragSurface blocklyOverflowVisible'\n      }, null);\n  this.container_.appendChild(this.SVG_);\n};\n\n/**\n * Translate the entire drag surface during a drag.\n * We translate the drag surface instead of the blocks inside the surface\n * so that the browser avoids repainting the SVG.\n * Because of this, the drag coordinates must be adjusted by scale.\n * @param {number} x X translation for the entire surface\n * @param {number} y Y translation for the entire surface\n * @package\n */\nBlockly.WorkspaceDragSurfaceSvg.prototype.translateSurface = function(x, y) {\n  // This is a work-around to prevent a the blocks from rendering\n  // fuzzy while they are being moved on the drag surface.\n  var fixedX = x.toFixed(0);\n  var fixedY = y.toFixed(0);\n\n  this.SVG_.style.display = 'block';\n  Blockly.utils.dom.setCssTransform(\n      this.SVG_, 'translate3d(' + fixedX + 'px, ' + fixedY + 'px, 0px)');\n};\n\n/**\n * Reports the surface translation in scaled workspace coordinates.\n * Use this when finishing a drag to return blocks to the correct position.\n * @return {!Blockly.utils.Coordinate} Current translation of the surface\n * @package\n */\nBlockly.WorkspaceDragSurfaceSvg.prototype.getSurfaceTranslation = function() {\n  return Blockly.utils.getRelativeXY(/** @type {!SVGElement} */ (this.SVG_));\n};\n\n/**\n * Move the blockCanvas and bubbleCanvas out of the surface SVG and on to\n * newSurface.\n * @param {SVGElement} newSurface The element to put the drag surface contents\n *     into.\n * @package\n */\nBlockly.WorkspaceDragSurfaceSvg.prototype.clearAndHide = function(newSurface) {\n  if (!newSurface) {\n    throw Error('Couldn\\'t clear and hide the drag surface: missing ' +\n        'new surface.');\n  }\n  var blockCanvas = /** @type {!Element} */ (this.SVG_.childNodes[0]);\n  var bubbleCanvas = /** @type {!Element} */ (this.SVG_.childNodes[1]);\n  if (!blockCanvas || !bubbleCanvas ||\n      !Blockly.utils.dom.hasClass(blockCanvas, 'blocklyBlockCanvas') ||\n      !Blockly.utils.dom.hasClass(bubbleCanvas, 'blocklyBubbleCanvas')) {\n    throw Error('Couldn\\'t clear and hide the drag surface. ' +\n        'A node was missing.');\n  }\n\n  // If there is a previous sibling, put the blockCanvas back right afterwards,\n  // otherwise insert it as the first child node in newSurface.\n  if (this.previousSibling_ != null) {\n    Blockly.utils.dom.insertAfter(blockCanvas, this.previousSibling_);\n  } else {\n    newSurface.insertBefore(blockCanvas, newSurface.firstChild);\n  }\n\n  // Reattach the bubble canvas after the blockCanvas.\n  Blockly.utils.dom.insertAfter(bubbleCanvas, blockCanvas);\n  // Hide the drag surface.\n  this.SVG_.style.display = 'none';\n  if (this.SVG_.childNodes.length) {\n    throw Error('Drag surface was not cleared.');\n  }\n  Blockly.utils.dom.setCssTransform(this.SVG_, '');\n  this.previousSibling_ = null;\n};\n\n/**\n * Set the SVG to have the block canvas and bubble canvas in it and then\n * show the surface.\n * @param {!SVGElement} blockCanvas The block canvas <g> element from the\n *     workspace.\n * @param {!SVGElement} bubbleCanvas The <g> element that contains the bubbles.\n * @param {Element} previousSibling The element to insert the block canvas and\n       bubble canvas after when it goes back in the DOM at the end of a drag.\n * @param {number} width The width of the workspace SVG element.\n * @param {number} height The height of the workspace SVG element.\n * @param {number} scale The scale of the workspace being dragged.\n * @package\n */\nBlockly.WorkspaceDragSurfaceSvg.prototype.setContentsAndShow = function(\n    blockCanvas, bubbleCanvas, previousSibling, width, height, scale) {\n  if (this.SVG_.childNodes.length) {\n    throw Error('Already dragging a block.');\n  }\n  this.previousSibling_ = previousSibling;\n  // Make sure the blocks and bubble canvas are scaled appropriately.\n  blockCanvas.setAttribute('transform', 'translate(0, 0) scale(' + scale + ')');\n  bubbleCanvas.setAttribute(\n      'transform', 'translate(0, 0) scale(' + scale + ')');\n  this.SVG_.setAttribute('width', width);\n  this.SVG_.setAttribute('height', height);\n  this.SVG_.appendChild(blockCanvas);\n  this.SVG_.appendChild(bubbleCanvas);\n  this.SVG_.style.display = 'block';\n};\n"],"file":"workspace_drag_surface_svg.min.js"}