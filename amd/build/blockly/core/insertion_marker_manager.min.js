'use strict';goog.provide("Blockly.InsertionMarkerManager");goog.require("Blockly.blockAnimations");goog.require("Blockly.Events");Blockly.InsertionMarkerManager=function(a){Blockly.selected=a;this.topBlock_=a;this.workspace_=a.workspace;this.lastOnStack_=null;this.lastMarker_=null;this.firstMarker_=this.createMarkerBlock_(this.topBlock_);this.closestConnection_=null;this.localConnection_=null;this.wouldDeleteBlock_=!1;this.markerConnection_=null;this.highlightedBlock_=null;this.fadedBlock_=null;this.availableConnections_=this.initAvailableConnections_()};Blockly.InsertionMarkerManager.PREVIEW_TYPE={INSERTION_MARKER:0,INPUT_OUTLINE:1,REPLACEMENT_FADE:2};Blockly.InsertionMarkerManager.prototype.dispose=function(){this.availableConnections_.length=0;Blockly.Events.disable();try{if(this.firstMarker_){this.firstMarker_.dispose()}if(this.lastMarker_){this.lastMarker_.dispose()}}finally{Blockly.Events.enable()}};Blockly.InsertionMarkerManager.prototype.updateAvailableConnections=function(){this.availableConnections_=this.initAvailableConnections_()};Blockly.InsertionMarkerManager.prototype.wouldDeleteBlock=function(){return this.wouldDeleteBlock_};Blockly.InsertionMarkerManager.prototype.wouldConnectBlock=function(){return!!this.closestConnection_};Blockly.InsertionMarkerManager.prototype.applyConnections=function(){if(this.closestConnection_){Blockly.Events.disable();this.hidePreview_();Blockly.Events.enable();this.localConnection_.connect(this.closestConnection_);if(this.topBlock_.rendered){var a=this.localConnection_.isSuperior()?this.closestConnection_:this.localConnection_;Blockly.blockAnimations.connectionUiEffect(a.getSourceBlock());var b=this.topBlock_.getRootBlock();b.bringToFront()}}};Blockly.InsertionMarkerManager.prototype.update=function(a,b){var c=this.getCandidate_(a);this.wouldDeleteBlock_=this.shouldDelete_(c,b);var d=this.wouldDeleteBlock_||this.shouldUpdatePreviews_(c,a);if(d){Blockly.Events.disable();this.maybeHidePreview_(c);this.maybeShowPreview_(c);Blockly.Events.enable()}};Blockly.InsertionMarkerManager.prototype.createMarkerBlock_=function(a){var b=a.type;Blockly.Events.disable();try{var c=this.workspace_.newBlock(b);c.setInsertionMarker(!0);if(a.mutationToDom){var d=a.mutationToDom();if(d){c.domToMutation(d)}}for(var e=0,f;e<a.inputList.length;e++){f=a.inputList[e];if(f.name==Blockly.Block.COLLAPSED_INPUT_NAME){continue}for(var g=c.inputList[e],h=0;h<f.fieldRow.length;h++){var k=f.fieldRow[h],l=g.fieldRow[h];l.setValue(k.getValue())}}c.setCollapsed(a.isCollapsed());c.setInputsInline(a.getInputsInline());c.initSvg();c.getSvgRoot().setAttribute("visibility","hidden")}finally{Blockly.Events.enable()}return c};Blockly.InsertionMarkerManager.prototype.initAvailableConnections_=function(){var a=this.topBlock_.getConnections_(!1),b=this.topBlock_.lastConnectionInStack();if(b&&b!=this.topBlock_.nextConnection){a.push(b);this.lastOnStack_=b;this.lastMarker_=this.createMarkerBlock_(b.getSourceBlock())}return a};Blockly.InsertionMarkerManager.prototype.shouldUpdatePreviews_=function(a,b){var c=a.local,d=a.closest,e=a.radius;if(c&&d){if(this.localConnection_&&this.closestConnection_){if(this.closestConnection_==d&&this.localConnection_==c){return!1}var f=this.localConnection_.x+b.x-this.closestConnection_.x,g=this.localConnection_.y+b.y-this.closestConnection_.y,h=Math.sqrt(f*f+g*g);return!(d&&e>h-Blockly.CURRENT_CONNECTION_PREFERENCE)}else if(!this.localConnection_&&!this.closestConnection_){return!0}else{console.error("Only one of localConnection_ and closestConnection_ was set.")}}else{return!!(this.localConnection_&&this.closestConnection_)}console.error("Returning true from shouldUpdatePreviews, but it's not clear why.");return!0};Blockly.InsertionMarkerManager.prototype.getCandidate_=function(a){for(var b=this.getStartRadius_(),c=null,d=null,e=0;e<this.availableConnections_.length;e++){var f=this.availableConnections_[e],g=f.closest(b,a);if(g.connection){c=g.connection;d=f;b=g.radius}}return{closest:c,local:d,radius:b}};Blockly.InsertionMarkerManager.prototype.getStartRadius_=function(){if(this.closestConnection_&&this.localConnection_){return Blockly.CONNECTING_SNAP_RADIUS}return Blockly.SNAP_RADIUS};Blockly.InsertionMarkerManager.prototype.shouldDelete_=function(a,b){var c=a&&!!a.closest&&b!=Blockly.DELETE_AREA_TOOLBOX,d=!!b&&!this.topBlock_.getParent()&&this.topBlock_.isDeletable();return d&&!c};Blockly.InsertionMarkerManager.prototype.maybeShowPreview_=function(a){if(this.wouldDeleteBlock_){return}var b=a.closest,c=a.local;if(!b){return}if(b==this.closestConnection_||b.getSourceBlock().isInsertionMarker()){console.log("Trying to connect to an insertion marker");return}this.closestConnection_=b;this.localConnection_=c;this.showPreview_()};Blockly.InsertionMarkerManager.prototype.showPreview_=function(){var a=this.closestConnection_,b=this.workspace_.getRenderer(),c=b.getConnectionPreviewMethod(a,this.localConnection_,this.topBlock_);switch(c){case Blockly.InsertionMarkerManager.PREVIEW_TYPE.INPUT_OUTLINE:this.showInsertionInputOutline_();break;case Blockly.InsertionMarkerManager.PREVIEW_TYPE.INSERTION_MARKER:this.showInsertionMarker_();break;case Blockly.InsertionMarkerManager.PREVIEW_TYPE.REPLACEMENT_FADE:this.showReplacementFade_();break;}if(a&&b.shouldHighlightConnection(a)){a.highlight()}};Blockly.InsertionMarkerManager.prototype.maybeHidePreview_=function(a){if(!a.closest){this.hidePreview_()}else{var b=this.closestConnection_&&this.localConnection_,c=this.closestConnection_!=a.closest,d=this.localConnection_!=a.local;if(b&&(c||d||this.wouldDeleteBlock_)){this.hidePreview_()}}this.markerConnection_=null;this.closestConnection_=null;this.localConnection_=null};Blockly.InsertionMarkerManager.prototype.hidePreview_=function(){if(this.closestConnection_&&this.closestConnection_.targetBlock()&&this.workspace_.getRenderer().shouldHighlightConnection(this.closestConnection_)){this.closestConnection_.unhighlight()}if(this.fadedBlock_){this.hideReplacementFade_()}else if(this.highlightedBlock_){this.hideInsertionInputOutline_()}else if(this.markerConnection_){this.hideInsertionMarker_()}};Blockly.InsertionMarkerManager.prototype.showInsertionMarker_=function(){var a=this.localConnection_,b=this.closestConnection_,c=this.lastOnStack_&&a==this.lastOnStack_,d=c?this.lastMarker_:this.firstMarker_,e=d.getMatchingConnection(a.getSourceBlock(),a);if(e==this.markerConnection_){throw Error("Made it to showInsertionMarker_ even though the marker isn't changing")}d.render();d.rendered=!0;d.getSvgRoot().setAttribute("visibility","visible");if(e&&b){d.positionNearConnection(e,b)}if(b){e.connect(b)}this.markerConnection_=e};Blockly.InsertionMarkerManager.prototype.hideInsertionMarker_=function(){if(!this.markerConnection_){console.log("No insertion marker connection to disconnect");return}var a=this.markerConnection_,b=a.getSourceBlock(),c=b.nextConnection,d=b.previousConnection,e=b.outputConnection,f=a==c&&!(d&&d.targetConnection),g=a.type==Blockly.INPUT_VALUE&&!(e&&e.targetConnection);if(f||g){a.targetBlock().unplug(!1)}else if(a.type==Blockly.NEXT_STATEMENT&&a!=c){var h=a.targetConnection;h.getSourceBlock().unplug(!1);var i=d?d.targetConnection:null;b.unplug(!0);if(i){i.connect(h)}}else{b.unplug(!0)}if(a.targetConnection){throw Error("markerConnection_ still connected at the end of disconnectInsertionMarker")}this.markerConnection_=null;b.getSvgRoot().setAttribute("visibility","hidden")};Blockly.InsertionMarkerManager.prototype.showInsertionInputOutline_=function(){var a=this.closestConnection_;this.highlightedBlock_=a.getSourceBlock();this.highlightedBlock_.highlightShapeForInput(a,!0)};Blockly.InsertionMarkerManager.prototype.hideInsertionInputOutline_=function(){this.highlightedBlock_.highlightShapeForInput(this.closestConnection_,!1);this.highlightedBlock_=null};Blockly.InsertionMarkerManager.prototype.showReplacementFade_=function(){this.fadedBlock_=this.closestConnection_.targetBlock();this.fadedBlock_.fadeForReplacement(!0)};Blockly.InsertionMarkerManager.prototype.hideReplacementFade_=function(){this.fadedBlock_.fadeForReplacement(!1);this.fadedBlock_=null};Blockly.InsertionMarkerManager.prototype.getInsertionMarkers=function(){var a=[];if(this.firstMarker_){a.push(this.firstMarker_)}if(this.lastMarker_){a.push(this.lastMarker_)}return a};
//# sourceMappingURL=insertion_marker_manager.min.js.map
