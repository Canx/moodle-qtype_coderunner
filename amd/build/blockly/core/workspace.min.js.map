{"version":3,"sources":["../../../src/blockly/core/workspace.js"],"names":["goog","provide","require","requireType","Blockly","Workspace","opt_options","id","utils","genUid","WorkspaceDB_","options","Options","RTL","horizontalLayout","toolboxPosition","topBlocks_","topComments_","commentDB_","Object","create","listeners_","undoStack_","redoStack_","blockDB_","typedBlocksDB_","variableMap_","VariableMap","potentialVariableMap_","prototype","rendered","isClearing","MAX_UNDO","connectionDBList","dispose","length","clear","SCAN_ANGLE","sortObjects_","a","b","aXY","getRelativeToSurfaceXY","bXY","y","offset","x","addTopBlock","block","push","removeTopBlock","arrayRemove","Error","getTopBlocks","ordered","blocks","concat","Math","sin","math","toRadians","sort","addTypedBlock","type","removeTypedBlock","splice","indexOf","getBlocksByType","slice","addTopComment","comment","console","warn","removeTopComment","getTopComments","comments","getAllBlocks","topBlocks","i","apply","getDescendants","getChildren","filtered","filter","isInsertionMarker","existingGroup","Events","getGroup","setGroup","renameVariableById","newName","createVariable","name","opt_type","opt_id","getVariableUsesById","deleteVariableById","variableIndexOf","getVariable","getVariableById","getVariablesOfType","getVariableTypes","getAllVariables","getAllVariableNames","getWidth","newBlock","prototypeName","Block","remainingCapacity","isNaN","maxBlocks","remainingCapacityOfType","maxInstances","maxInstanceOfType","isCapacityAvailable","typeCountsMap","hasBlockLimits","copyableBlocksCount","undo","redo","inputStack","outputStack","inputEvent","pop","events","group","event","recordUndo","run","clearUndo","clearPendingUndo","addChangeListener","func","removeChangeListener","fireChangeListener","shift","getBlockById","setBlockById","removeBlockById","getCommentById","allInputsFilled","opt_shadowBlocksAreFilled","getPotentialVariableMap","createPotentialVariableMap","getVariableMap","setVariableMap","variableMap","getById","getAll","workspaces","workspaceId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object representing a workspace.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Workspace');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Options');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.math');\ngoog.require('Blockly.VariableMap');\n\ngoog.requireType('Blockly.IASTNodeLocation');\n\n\n/**\n * Class for a workspace.  This is a data structure that contains blocks.\n * There is no UI, and can be created headlessly.\n * @param {!Blockly.Options=} opt_options Dictionary of options.\n * @constructor\n * @implements {Blockly.IASTNodeLocation}\n */\nBlockly.Workspace = function(opt_options) {\n  /** @type {string} */\n  this.id = Blockly.utils.genUid();\n  Blockly.Workspace.WorkspaceDB_[this.id] = this;\n  /** @type {!Blockly.Options} */\n  this.options = opt_options ||\n      new Blockly.Options(/** @type {!Blockly.BlocklyOptions} */ ({}));\n  /** @type {boolean} */\n  this.RTL = !!this.options.RTL;\n  /** @type {boolean} */\n  this.horizontalLayout = !!this.options.horizontalLayout;\n  /** @type {number} */\n  this.toolboxPosition = this.options.toolboxPosition;\n\n  /**\n   * @type {!Array.<!Blockly.Block>}\n   * @private\n   */\n  this.topBlocks_ = [];\n  /**\n   * @type {!Array.<!Blockly.WorkspaceComment>}\n   * @private\n   */\n  this.topComments_ = [];\n  /**\n   * @type {!Object}\n   * @private\n   */\n  this.commentDB_ = Object.create(null);\n  /**\n   * @type {!Array.<!Function>}\n   * @private\n   */\n  this.listeners_ = [];\n  /**\n   * @type {!Array.<!Blockly.Events.Abstract>}\n   * @protected\n   */\n  this.undoStack_ = [];\n  /**\n   * @type {!Array.<!Blockly.Events.Abstract>}\n   * @protected\n   */\n  this.redoStack_ = [];\n  /**\n   * @type {!Object}\n   * @private\n   */\n  this.blockDB_ = Object.create(null);\n  /**\n   * @type {!Object}\n   * @private\n   */\n  this.typedBlocksDB_ = Object.create(null);\n\n  /**\n   * A map from variable type to list of variable names.  The lists contain all\n   * of the named variables in the workspace, including variables\n   * that are not currently in use.\n   * @type {!Blockly.VariableMap}\n   * @private\n   */\n  this.variableMap_ = new Blockly.VariableMap(this);\n\n  /**\n   * Blocks in the flyout can refer to variables that don't exist in the main\n   * workspace.  For instance, the \"get item in list\" block refers to an \"item\"\n   * variable regardless of whether the variable has been created yet.\n   * A FieldVariable must always refer to a Blockly.VariableModel.  We reconcile\n   * these by tracking \"potential\" variables in the flyout.  These variables\n   * become real when references to them are dragged into the main workspace.\n   * @type {Blockly.VariableMap}\n   * @private\n   */\n  this.potentialVariableMap_ = null;\n};\n\n/**\n * Returns `true` if the workspace is visible and `false` if it's headless.\n * @type {boolean}\n */\nBlockly.Workspace.prototype.rendered = false;\n\n/**\n * Returns `true` if the workspace is currently in the process of a bulk clear.\n * @type {boolean}\n * @package\n */\nBlockly.Workspace.prototype.isClearing = false;\n\n/**\n * Maximum number of undo events in stack. `0` turns off undo, `Infinity` sets\n * it to unlimited.\n * @type {number}\n */\nBlockly.Workspace.prototype.MAX_UNDO = 1024;\n\n/**\n * Set of databases for rapid lookup of connection locations.\n * @type {Array.<!Blockly.ConnectionDB>}\n */\nBlockly.Workspace.prototype.connectionDBList = null;\n\n/**\n * Dispose of this workspace.\n * Unlink from all DOM elements to prevent memory leaks.\n * @suppress {checkTypes}\n */\nBlockly.Workspace.prototype.dispose = function() {\n  this.listeners_.length = 0;\n  this.clear();\n  // Remove from workspace database.\n  delete Blockly.Workspace.WorkspaceDB_[this.id];\n};\n\n/**\n * Angle away from the horizontal to sweep for blocks.  Order of execution is\n * generally top to bottom, but a small angle changes the scan to give a bit of\n * a left to right bias (reversed in RTL).  Units are in degrees.\n * See: https://tvtropes.org/pmwiki/pmwiki.php/Main/DiagonalBilling\n */\nBlockly.Workspace.SCAN_ANGLE = 3;\n\n/**\n * Compare function for sorting objects (blocks, comments, etc) by position;\n *    top to bottom (with slight LTR or RTL bias).\n * @param {!Blockly.Block | !Blockly.WorkspaceComment} a The first object to\n *    compare.\n * @param {!Blockly.Block | !Blockly.WorkspaceComment} b The second object to\n *    compare.\n * @return {number} The comparison value. This tells Array.sort() how to change\n *    object a's index.\n * @private\n */\nBlockly.Workspace.prototype.sortObjects_ = function(a, b) {\n  var aXY = a.getRelativeToSurfaceXY();\n  var bXY = b.getRelativeToSurfaceXY();\n  return (aXY.y + Blockly.Workspace.prototype.sortObjects_.offset * aXY.x) -\n      (bXY.y + Blockly.Workspace.prototype.sortObjects_.offset * bXY.x);\n};\n\n/**\n * Adds a block to the list of top blocks.\n * @param {!Blockly.Block} block Block to add.\n */\nBlockly.Workspace.prototype.addTopBlock = function(block) {\n  this.topBlocks_.push(block);\n};\n\n/**\n * Removes a block from the list of top blocks.\n * @param {!Blockly.Block} block Block to remove.\n */\nBlockly.Workspace.prototype.removeTopBlock = function(block) {\n  if (!Blockly.utils.arrayRemove(this.topBlocks_, block)) {\n    throw Error('Block not present in workspace\\'s list of top-most blocks.');\n  }\n};\n\n/**\n * Finds the top-level blocks and returns them.  Blocks are optionally sorted\n * by position; top to bottom (with slight LTR or RTL bias).\n * @param {boolean} ordered Sort the list if true.\n * @return {!Array.<!Blockly.Block>} The top-level block objects.\n */\nBlockly.Workspace.prototype.getTopBlocks = function(ordered) {\n  // Copy the topBlocks_ list.\n  var blocks = [].concat(this.topBlocks_);\n  if (ordered && blocks.length > 1) {\n    this.sortObjects_.offset =\n        Math.sin(Blockly.utils.math.toRadians(Blockly.Workspace.SCAN_ANGLE));\n    if (this.RTL) {\n      this.sortObjects_.offset *= -1;\n    }\n    blocks.sort(this.sortObjects_);\n  }\n  return blocks;\n};\n\n/**\n * Add a block to the list of blocks keyed by type.\n * @param {!Blockly.Block} block Block to add.\n */\nBlockly.Workspace.prototype.addTypedBlock = function(block) {\n  if (!this.typedBlocksDB_[block.type]) {\n    this.typedBlocksDB_[block.type] = [];\n  }\n  this.typedBlocksDB_[block.type].push(block);\n};\n\n/**\n * Remove a block from the list of blocks keyed by type.\n * @param {!Blockly.Block} block Block to remove.\n */\nBlockly.Workspace.prototype.removeTypedBlock = function(block) {\n  this.typedBlocksDB_[block.type].splice(this.typedBlocksDB_[block.type]\n      .indexOf(block), 1);\n  if (!this.typedBlocksDB_[block.type].length) {\n    delete this.typedBlocksDB_[block.type];\n  }\n};\n\n/**\n * Finds the blocks with the associated type and returns them. Blocks are\n * optionally sorted by position; top to bottom (with slight LTR or RTL bias).\n * @param {string} type The type of block to search for.\n * @param {boolean} ordered Sort the list if true.\n * @return {!Array.<!Blockly.Block>} The blocks of the given type.\n */\nBlockly.Workspace.prototype.getBlocksByType = function(type, ordered) {\n  if (!this.typedBlocksDB_[type]) {\n    return [];\n  }\n  var blocks = this.typedBlocksDB_[type].slice(0);\n  if (ordered && blocks.length > 1) {\n    this.sortObjects_.offset =\n        Math.sin(Blockly.utils.math.toRadians(Blockly.Workspace.SCAN_ANGLE));\n    if (this.RTL) {\n      this.sortObjects_.offset *= -1;\n    }\n    blocks.sort(this.sortObjects_);\n  }\n  return blocks;\n};\n\n/**\n * Adds a comment to the list of top comments.\n * @param {!Blockly.WorkspaceComment} comment comment to add.\n * @package\n */\nBlockly.Workspace.prototype.addTopComment = function(comment) {\n  this.topComments_.push(comment);\n\n  // Note: If the comment database starts to hold block comments, this may need\n  // to move to a separate function.\n  if (this.commentDB_[comment.id]) {\n    console.warn('Overriding an existing comment on this workspace, with id \"' +\n        comment.id + '\"');\n  }\n  this.commentDB_[comment.id] = comment;\n};\n\n/**\n * Removes a comment from the list of top comments.\n * @param {!Blockly.WorkspaceComment} comment comment to remove.\n * @package\n */\nBlockly.Workspace.prototype.removeTopComment = function(comment) {\n  if (!Blockly.utils.arrayRemove(this.topComments_, comment)) {\n    throw Error('Comment not present in workspace\\'s list of top-most ' +\n        'comments.');\n  }\n  // Note: If the comment database starts to hold block comments, this may need\n  // to move to a separate function.\n  delete this.commentDB_[comment.id];\n};\n\n/**\n * Finds the top-level comments and returns them.  Comments are optionally\n * sorted by position; top to bottom (with slight LTR or RTL bias).\n * @param {boolean} ordered Sort the list if true.\n * @return {!Array.<!Blockly.WorkspaceComment>} The top-level comment objects.\n * @package\n */\nBlockly.Workspace.prototype.getTopComments = function(ordered) {\n  // Copy the topComments_ list.\n  var comments = [].concat(this.topComments_);\n  if (ordered && comments.length > 1) {\n    this.sortObjects_.offset =\n        Math.sin(Blockly.utils.math.toRadians(Blockly.Workspace.SCAN_ANGLE));\n    if (this.RTL) {\n      this.sortObjects_.offset *= -1;\n    }\n    comments.sort(this.sortObjects_);\n  }\n  return comments;\n};\n\n/**\n * Find all blocks in workspace.  Blocks are optionally sorted\n * by position; top to bottom (with slight LTR or RTL bias).\n * @param {boolean} ordered Sort the list if true.\n * @return {!Array.<!Blockly.Block>} Array of blocks.\n */\nBlockly.Workspace.prototype.getAllBlocks = function(ordered) {\n  if (ordered) {\n    // Slow, but ordered.\n    var topBlocks = this.getTopBlocks(true);\n    var blocks = [];\n    for (var i = 0; i < topBlocks.length; i++) {\n      blocks.push.apply(blocks, topBlocks[i].getDescendants(true));\n    }\n  } else {\n    // Fast, but in no particular order.\n    var blocks = this.getTopBlocks(false);\n    for (var i = 0; i < blocks.length; i++) {\n      blocks.push.apply(blocks, blocks[i].getChildren(false));\n    }\n  }\n\n  // Insertion markers exist on the workspace for rendering reasons, but aren't\n  // \"real\" blocks from a developer perspective.\n  var filtered = blocks.filter(function(block) {\n    return !block.isInsertionMarker();\n  });\n\n  return filtered;\n};\n\n/**\n * Dispose of all blocks and comments in workspace.\n */\nBlockly.Workspace.prototype.clear = function() {\n  this.isClearing = true;\n  try {\n    var existingGroup = Blockly.Events.getGroup();\n    if (!existingGroup) {\n      Blockly.Events.setGroup(true);\n    }\n    while (this.topBlocks_.length) {\n      this.topBlocks_[0].dispose(false);\n    }\n    while (this.topComments_.length) {\n      this.topComments_[this.topComments_.length - 1].dispose(false);\n    }\n    if (!existingGroup) {\n      Blockly.Events.setGroup(false);\n    }\n    this.variableMap_.clear();\n    if (this.potentialVariableMap_) {\n      this.potentialVariableMap_.clear();\n    }\n  } finally {\n    this.isClearing = false;\n  }\n};\n\n/* Begin functions that are just pass-throughs to the variable map. */\n/**\n * Rename a variable by updating its name in the variable map. Identify the\n * variable to rename with the given ID.\n * @param {string} id ID of the variable to rename.\n * @param {string} newName New variable name.\n */\nBlockly.Workspace.prototype.renameVariableById = function(id, newName) {\n  this.variableMap_.renameVariableById(id, newName);\n};\n\n/**\n * Create a variable with a given name, optional type, and optional ID.\n * @param {string} name The name of the variable. This must be unique across\n *     variables and procedures.\n * @param {?string=} opt_type The type of the variable like 'int' or 'string'.\n *     Does not need to be unique. Field_variable can filter variables based on\n *     their type. This will default to '' which is a specific type.\n * @param {?string=} opt_id The unique ID of the variable. This will default to\n *     a UUID.\n * @return {!Blockly.VariableModel} The newly created variable.\n */\nBlockly.Workspace.prototype.createVariable = function(name, opt_type, opt_id) {\n  return this.variableMap_.createVariable(name, opt_type, opt_id);\n};\n\n/**\n * Find all the uses of the given variable, which is identified by ID.\n * @param {string} id ID of the variable to find.\n * @return {!Array.<!Blockly.Block>} Array of block usages.\n */\nBlockly.Workspace.prototype.getVariableUsesById = function(id) {\n  return this.variableMap_.getVariableUsesById(id);\n};\n\n/**\n * Delete a variables by the passed in ID and all of its uses from this\n * workspace. May prompt the user for confirmation.\n * @param {string} id ID of variable to delete.\n */\nBlockly.Workspace.prototype.deleteVariableById = function(id) {\n  this.variableMap_.deleteVariableById(id);\n};\n\n/**\n * Check whether a variable exists with the given name.  The check is\n * case-insensitive.\n * @param {string} _name The name to check for.\n * @return {number} The index of the name in the variable list, or -1 if it is\n *     not present.\n * @deprecated April 2017\n */\n\nBlockly.Workspace.prototype.variableIndexOf = function(_name) {\n  console.warn(\n      'Deprecated call to Blockly.Workspace.prototype.variableIndexOf');\n  return -1;\n};\n\n/**\n * Find the variable by the given name and return it. Return null if it is not\n *     found.\n * @param {string} name The name to check for.\n * @param {string=} opt_type The type of the variable.  If not provided it\n *     defaults to the empty string, which is a specific type.\n * @return {Blockly.VariableModel} The variable with the given name.\n */\n// TODO (#1559): Possibly delete this function after resolving #1559.\nBlockly.Workspace.prototype.getVariable = function(name, opt_type) {\n  return this.variableMap_.getVariable(name, opt_type);\n};\n\n/**\n * Find the variable by the given ID and return it. Return null if it is not\n *     found.\n * @param {string} id The ID to check for.\n * @return {Blockly.VariableModel} The variable with the given ID.\n */\nBlockly.Workspace.prototype.getVariableById = function(id) {\n  return this.variableMap_.getVariableById(id);\n};\n\n/**\n * Find the variable with the specified type. If type is null, return list of\n *     variables with empty string type.\n * @param {?string} type Type of the variables to find.\n * @return {!Array.<!Blockly.VariableModel>} The sought after variables of the\n *     passed in type. An empty array if none are found.\n */\nBlockly.Workspace.prototype.getVariablesOfType = function(type) {\n  return this.variableMap_.getVariablesOfType(type);\n};\n\n/**\n * Return all variable types.\n * @return {!Array.<string>} List of variable types.\n * @package\n */\nBlockly.Workspace.prototype.getVariableTypes = function() {\n  return this.variableMap_.getVariableTypes(this);\n};\n\n/**\n * Return all variables of all types.\n * @return {!Array.<!Blockly.VariableModel>} List of variable models.\n */\nBlockly.Workspace.prototype.getAllVariables = function() {\n  return this.variableMap_.getAllVariables();\n};\n\n/**\n * Returns all variable names of all types.\n * @return {!Array.<string>} List of all variable names of all types.\n */\nBlockly.Workspace.prototype.getAllVariableNames = function() {\n  return this.variableMap_.getAllVariableNames();\n};\n\n/* End functions that are just pass-throughs to the variable map. */\n\n/**\n * Returns the horizontal offset of the workspace.\n * Intended for LTR/RTL compatibility in XML.\n * Not relevant for a headless workspace.\n * @return {number} Width.\n */\nBlockly.Workspace.prototype.getWidth = function() {\n  return 0;\n};\n\n/**\n * Obtain a newly created block.\n * @param {?string} prototypeName Name of the language object containing\n *     type-specific functions for this block.\n * @param {string=} opt_id Optional ID.  Use this ID if provided, otherwise\n *     create a new ID.\n * @return {!Blockly.Block} The created block.\n */\nBlockly.Workspace.prototype.newBlock = function(prototypeName, opt_id) {\n  return new Blockly.Block(this, prototypeName, opt_id);\n};\n\n/**\n * The number of blocks that may be added to the workspace before reaching\n *     the maxBlocks.\n * @return {number} Number of blocks left.\n */\nBlockly.Workspace.prototype.remainingCapacity = function() {\n  if (isNaN(this.options.maxBlocks)) {\n    return Infinity;\n  }\n\n  return this.options.maxBlocks - this.getAllBlocks(false).length;\n};\n\n/**\n * The number of blocks of the given type that may be added to the workspace\n *    before reaching the maxInstances allowed for that type.\n * @param {string} type Type of block to return capacity for.\n * @return {number} Number of blocks of type left.\n */\nBlockly.Workspace.prototype.remainingCapacityOfType = function(type) {\n  if (!this.options.maxInstances) {\n    return Infinity;\n  }\n\n  var maxInstanceOfType = (this.options.maxInstances[type] !== undefined) ?\n      this.options.maxInstances[type] : Infinity;\n\n  return maxInstanceOfType - this.getBlocksByType(type, false).length;\n};\n\n/**\n * Check if there is remaining capacity for blocks of the given counts to be\n *    created. If the total number of blocks represented by the map is more than\n *    the total remaining capacity, it returns false. If a type count is more\n *    than the remaining capacity for that type, it returns false.\n * @param {!Object} typeCountsMap A map of types to counts (usually representing\n *    blocks to be created).\n * @return {boolean} True if there is capacity for the given map,\n *    false otherwise.\n */\nBlockly.Workspace.prototype.isCapacityAvailable = function(typeCountsMap) {\n  if (!this.hasBlockLimits()) {\n    return true;\n  }\n  var copyableBlocksCount = 0;\n  for (var type in typeCountsMap) {\n    if (typeCountsMap[type] > this.remainingCapacityOfType(type)) {\n      return false;\n    }\n    copyableBlocksCount += typeCountsMap[type];\n  }\n  if (copyableBlocksCount > this.remainingCapacity()) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Checks if the workspace has any limits on the maximum number of blocks,\n *    or the maximum number of blocks of specific types.\n * @return {boolean} True if it has block limits, false otherwise.\n */\nBlockly.Workspace.prototype.hasBlockLimits = function() {\n  return this.options.maxBlocks != Infinity || !!this.options.maxInstances;\n};\n\n/**\n * Undo or redo the previous action.\n * @param {boolean} redo False if undo, true if redo.\n */\nBlockly.Workspace.prototype.undo = function(redo) {\n  var inputStack = redo ? this.redoStack_ : this.undoStack_;\n  var outputStack = redo ? this.undoStack_ : this.redoStack_;\n  var inputEvent = inputStack.pop();\n  if (!inputEvent) {\n    return;\n  }\n  var events = [inputEvent];\n  // Do another undo/redo if the next one is of the same group.\n  while (inputStack.length && inputEvent.group &&\n      inputEvent.group == inputStack[inputStack.length - 1].group) {\n    events.push(inputStack.pop());\n  }\n  // Push these popped events on the opposite stack.\n  for (var i = 0, event; (event = events[i]); i++) {\n    outputStack.push(event);\n  }\n  events = Blockly.Events.filter(events, redo);\n  Blockly.Events.recordUndo = false;\n  try {\n    for (var i = 0, event; (event = events[i]); i++) {\n      event.run(redo);\n    }\n  } finally {\n    Blockly.Events.recordUndo = true;\n  }\n};\n\n/**\n * Clear the undo/redo stacks.\n */\nBlockly.Workspace.prototype.clearUndo = function() {\n  this.undoStack_.length = 0;\n  this.redoStack_.length = 0;\n  // Stop any events already in the firing queue from being undoable.\n  Blockly.Events.clearPendingUndo();\n};\n\n/**\n * When something in this workspace changes, call a function.\n * Note that there may be a few recent events already on the stack.  Thus the\n * new change listener might be called with events that occurred a few\n * milliseconds before the change listener was added.\n * @param {!Function} func Function to call.\n * @return {!Function} Obsolete return value, ignore.\n */\nBlockly.Workspace.prototype.addChangeListener = function(func) {\n  this.listeners_.push(func);\n  return func;\n};\n\n/**\n * Stop listening for this workspace's changes.\n * @param {Function} func Function to stop calling.\n */\nBlockly.Workspace.prototype.removeChangeListener = function(func) {\n  Blockly.utils.arrayRemove(this.listeners_, func);\n};\n\n/**\n * Fire a change event.\n * @param {!Blockly.Events.Abstract} event Event to fire.\n */\nBlockly.Workspace.prototype.fireChangeListener = function(event) {\n  if (event.recordUndo) {\n    this.undoStack_.push(event);\n    this.redoStack_.length = 0;\n    while (this.undoStack_.length > this.MAX_UNDO && this.MAX_UNDO >= 0) {\n      this.undoStack_.shift();\n    }\n  }\n  for (var i = 0, func; (func = this.listeners_[i]); i++) {\n    func(event);\n  }\n};\n\n/**\n * Find the block on this workspace with the specified ID.\n * @param {string} id ID of block to find.\n * @return {Blockly.Block} The sought after block, or null if not found.\n */\nBlockly.Workspace.prototype.getBlockById = function(id) {\n  return this.blockDB_[id] || null;\n};\n\n/**\n * Set a block on this workspace with the specified ID.\n * @param {string} id ID of block to set.\n * @param {Blockly.Block} block The block to set.\n * @package\n */\nBlockly.Workspace.prototype.setBlockById = function(id, block) {\n  this.blockDB_[id] = block;\n};\n\n/**\n * Delete a block off this workspace with the specified ID.\n * @param {string} id ID of block to delete.\n * @package\n */\nBlockly.Workspace.prototype.removeBlockById = function(id) {\n  delete this.blockDB_[id];\n};\n\n/**\n * Find the comment on this workspace with the specified ID.\n * @param {string} id ID of comment to find.\n * @return {Blockly.WorkspaceComment} The sought after comment, or null if not\n *     found.\n * @package\n */\nBlockly.Workspace.prototype.getCommentById = function(id) {\n  return this.commentDB_[id] || null;\n};\n\n/**\n * Checks whether all value and statement inputs in the workspace are filled\n * with blocks.\n * @param {boolean=} opt_shadowBlocksAreFilled An optional argument controlling\n *     whether shadow blocks are counted as filled. Defaults to true.\n * @return {boolean} True if all inputs are filled, false otherwise.\n */\nBlockly.Workspace.prototype.allInputsFilled = function(\n    opt_shadowBlocksAreFilled) {\n  var blocks = this.getTopBlocks(false);\n  for (var i = 0, block; (block = blocks[i]); i++) {\n    if (!block.allInputsFilled(opt_shadowBlocksAreFilled)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Return the variable map that contains \"potential\" variables.\n * These exist in the flyout but not in the workspace.\n * @return {Blockly.VariableMap} The potential variable map.\n * @package\n */\nBlockly.Workspace.prototype.getPotentialVariableMap = function() {\n  return this.potentialVariableMap_;\n};\n\n/**\n * Create and store the potential variable map for this workspace.\n * @package\n */\nBlockly.Workspace.prototype.createPotentialVariableMap = function() {\n  this.potentialVariableMap_ = new Blockly.VariableMap(this);\n};\n\n/**\n * Return the map of all variables on the workspace.\n * @return {!Blockly.VariableMap} The variable map.\n */\nBlockly.Workspace.prototype.getVariableMap = function() {\n  return this.variableMap_;\n};\n\n/**\n * Set the map of all variables on the workspace.\n * @param {!Blockly.VariableMap} variableMap The variable map.\n * @package\n */\nBlockly.Workspace.prototype.setVariableMap = function(variableMap) {\n  this.variableMap_ = variableMap;\n};\n\n/**\n * Database of all workspaces.\n * @private\n */\nBlockly.Workspace.WorkspaceDB_ = Object.create(null);\n\n/**\n * Find the workspace with the specified ID.\n * @param {string} id ID of workspace to find.\n * @return {Blockly.Workspace} The sought after workspace or null if not found.\n */\nBlockly.Workspace.getById = function(id) {\n  return Blockly.Workspace.WorkspaceDB_[id] || null;\n};\n\n/**\n * Find all workspaces.\n * @return {!Array.<!Blockly.Workspace>} Array of workspaces.\n */\nBlockly.Workspace.getAll = function() {\n  var workspaces = [];\n  for (var workspaceId in Blockly.Workspace.WorkspaceDB_) {\n    workspaces.push(Blockly.Workspace.WorkspaceDB_[workspaceId]);\n  }\n  return workspaces;\n};\n"],"file":"workspace.min.js"}