{"version":3,"sources":["../../../src/blockly/core/workspace_events.js"],"names":["goog","provide","require","Blockly","Events","FinishedLoading","workspace","workspaceId","id","group","getGroup","recordUndo","utils","object","inherits","Ui","prototype","type","FINISHED_LOADING","toJson","json","fromJson"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,gCAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,mBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EAaAC,OAAO,CAACC,MAAR,CAAeC,eAAf,CAAiC,SAASC,CAAT,CAAoB,CAKnD,KAAKC,WAAL,CAAmBD,CAAS,CAACE,EAA7B,CAQA,KAAKC,KAAL,CAAaN,OAAO,CAACC,MAAR,CAAeM,QAAf,EAAb,CAGA,KAAKC,UAAL,GACD,CAjBD,CAkBAR,OAAO,CAACS,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BX,OAAO,CAACC,MAAR,CAAeC,eAA7C,CACIF,OAAO,CAACC,MAAR,CAAeW,EADnB,EAOAZ,OAAO,CAACC,MAAR,CAAeC,eAAf,CAA+BW,SAA/B,CAAyCC,IAAzC,CAAgDd,OAAO,CAACC,MAAR,CAAec,gBAA/D,CAMAf,OAAO,CAACC,MAAR,CAAeC,eAAf,CAA+BW,SAA/B,CAAyCG,MAAzC,CAAkD,UAAW,CAC3D,GAAIC,CAAAA,CAAI,CAAG,CACT,KAAQ,KAAKH,IADJ,CAAX,CAGA,GAAI,KAAKR,KAAT,CAAgB,CACdW,CAAI,MAAJ,CAAgB,KAAKX,KACtB,CACD,GAAI,KAAKF,WAAT,CAAsB,CACpBa,CAAI,YAAJ,CAAsB,KAAKb,WAC5B,CACD,MAAOa,CAAAA,CACR,CAXD,CAiBAjB,OAAO,CAACC,MAAR,CAAeC,eAAf,CAA+BW,SAA/B,CAAyCK,QAAzC,CAAoD,SAASD,CAAT,CAAe,CACjE,KAAKb,WAAL,CAAmBa,CAAI,YAAvB,CACA,KAAKX,KAAL,CAAaW,CAAI,MAClB,CAHD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Class for a finished loading workspace event.\n * @author BeksOmega\n */\n'use strict';\n\ngoog.provide('Blockly.Events.FinishedLoading');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.Ui');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for a finished loading event.\n * Used to notify the developer when the workspace has finished loading (i.e\n * domToWorkspace).\n * Finished loading events do not record undo or redo.\n * @param {!Blockly.Workspace} workspace The workspace that has finished\n *    loading.\n * @extends {Blockly.Events.Abstract}\n * @constructor\n */\nBlockly.Events.FinishedLoading = function(workspace) {\n  /**\n   * The workspace identifier for this event.\n   * @type {string}\n   */\n  this.workspaceId = workspace.id;\n\n  /**\n   * The event group ID for the group this event belongs to. Groups define\n   * events that should be treated as an single action from the user's\n   * perspective, and should be undone together.\n   * @type {string}\n   */\n  this.group = Blockly.Events.getGroup();\n\n  // Workspace events do not undo or redo.\n  this.recordUndo = false;\n};\nBlockly.utils.object.inherits(Blockly.Events.FinishedLoading,\n    Blockly.Events.Ui);\n\n/**\n * Type of this event.\n * @type {string}\n */\nBlockly.Events.FinishedLoading.prototype.type = Blockly.Events.FINISHED_LOADING;\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\nBlockly.Events.FinishedLoading.prototype.toJson = function() {\n  var json = {\n    'type': this.type,\n  };\n  if (this.group) {\n    json['group'] = this.group;\n  }\n  if (this.workspaceId) {\n    json['workspaceId'] = this.workspaceId;\n  }\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.FinishedLoading.prototype.fromJson = function(json) {\n  this.workspaceId = json['workspaceId'];\n  this.group = json['group'];\n};\n"],"file":"workspace_events.min.js"}