{"version":3,"sources":["../../../src/blockly/core/workspace_dragger.js"],"names":["goog","provide","require","Blockly","WorkspaceDragger","workspace","workspace_","startScrollXY_","utils","Coordinate","scrollX","scrollY","prototype","dispose","startDrag","selected","unselect","setupDragSurface","endDrag","currentDragDeltaXY","drag","resetDragSurface","newXY","sum","scroll","x","y"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,0BAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,0BAAb,EAYAC,OAAO,CAACC,gBAAR,CAA2B,SAASC,CAAT,CAAoB,CAK7C,KAAKC,UAAL,CAAkBD,CAAlB,CAQA,KAAKE,cAAL,CAAsB,GAAIJ,CAAAA,OAAO,CAACK,KAAR,CAAcC,UAAlB,CAClBJ,CAAS,CAACK,OADQ,CACCL,CAAS,CAACM,OADX,CAEvB,CAfD,CAsBAR,OAAO,CAACC,gBAAR,CAAyBQ,SAAzB,CAAmCC,OAAnC,CAA6C,UAAW,CACtD,KAAKP,UAAL,CAAkB,IACnB,CAFD,CAQAH,OAAO,CAACC,gBAAR,CAAyBQ,SAAzB,CAAmCE,SAAnC,CAA+C,UAAW,CACxD,GAAIX,OAAO,CAACY,QAAZ,CAAsB,CACpBZ,OAAO,CAACY,QAAR,CAAiBC,QAAjB,EACD,CACD,KAAKV,UAAL,CAAgBW,gBAAhB,EACD,CALD,CAaAd,OAAO,CAACC,gBAAR,CAAyBQ,SAAzB,CAAmCM,OAAnC,CAA6C,SAASC,CAAT,CAA6B,CAExE,KAAKC,IAAL,CAAUD,CAAV,EACA,KAAKb,UAAL,CAAgBe,gBAAhB,EACD,CAJD,CAYAlB,OAAO,CAACC,gBAAR,CAAyBQ,SAAzB,CAAmCQ,IAAnC,CAA0C,SAASD,CAAT,CAA6B,CACrE,GAAIG,CAAAA,CAAK,CAAGnB,OAAO,CAACK,KAAR,CAAcC,UAAd,CAAyBc,GAAzB,CAA6B,KAAKhB,cAAlC,CAAkDY,CAAlD,CAAZ,CACA,KAAKb,UAAL,CAAgBkB,MAAhB,CAAuBF,CAAK,CAACG,CAA7B,CAAgCH,CAAK,CAACI,CAAtC,CACD,CAHD","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Methods for dragging a workspace visually.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.WorkspaceDragger');\n\ngoog.require('Blockly.utils.Coordinate');\n\n\n/**\n * Class for a workspace dragger.  It moves the workspace around when it is\n * being dragged by a mouse or touch.\n * Note that the workspace itself manages whether or not it has a drag surface\n * and how to do translations based on that.  This simply passes the right\n * commands based on events.\n * @param {!Blockly.WorkspaceSvg} workspace The workspace to drag.\n * @constructor\n */\nBlockly.WorkspaceDragger = function(workspace) {\n  /**\n   * @type {!Blockly.WorkspaceSvg}\n   * @private\n   */\n  this.workspace_ = workspace;\n\n  /**\n   * The scroll position of the workspace at the beginning of the drag.\n   * Coordinate system: pixel coordinates.\n   * @type {!Blockly.utils.Coordinate}\n   * @protected\n   */\n  this.startScrollXY_ = new Blockly.utils.Coordinate(\n      workspace.scrollX, workspace.scrollY);\n};\n\n/**\n * Sever all links from this object.\n * @package\n * @suppress {checkTypes}\n */\nBlockly.WorkspaceDragger.prototype.dispose = function() {\n  this.workspace_ = null;\n};\n\n/**\n * Start dragging the workspace.\n * @package\n */\nBlockly.WorkspaceDragger.prototype.startDrag = function() {\n  if (Blockly.selected) {\n    Blockly.selected.unselect();\n  }\n  this.workspace_.setupDragSurface();\n};\n\n/**\n * Finish dragging the workspace and put everything back where it belongs.\n * @param {!Blockly.utils.Coordinate} currentDragDeltaXY How far the pointer has\n *     moved from the position at the start of the drag, in pixel coordinates.\n * @package\n */\nBlockly.WorkspaceDragger.prototype.endDrag = function(currentDragDeltaXY) {\n  // Make sure everything is up to date.\n  this.drag(currentDragDeltaXY);\n  this.workspace_.resetDragSurface();\n};\n\n/**\n * Move the workspace based on the most recent mouse movements.\n * @param {!Blockly.utils.Coordinate} currentDragDeltaXY How far the pointer has\n *     moved from the position at the start of the drag, in pixel coordinates.\n * @package\n */\nBlockly.WorkspaceDragger.prototype.drag = function(currentDragDeltaXY) {\n  var newXY = Blockly.utils.Coordinate.sum(this.startScrollXY_, currentDragDeltaXY);\n  this.workspace_.scroll(newXY.x, newXY.y);\n};\n"],"file":"workspace_dragger.min.js"}