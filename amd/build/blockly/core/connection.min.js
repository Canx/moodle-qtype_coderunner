'use strict';goog.provide("Blockly.Connection");goog.require("Blockly.Events");goog.require("Blockly.Events.BlockMove");goog.require("Blockly.Xml");goog.requireType("Blockly.IASTNodeLocationWithBlock");Blockly.Connection=function(a,b){this.sourceBlock_=a;this.type=b};Blockly.Connection.CAN_CONNECT=0;Blockly.Connection.REASON_SELF_CONNECTION=1;Blockly.Connection.REASON_WRONG_TYPE=2;Blockly.Connection.REASON_TARGET_NULL=3;Blockly.Connection.REASON_CHECKS_FAILED=4;Blockly.Connection.REASON_DIFFERENT_WORKSPACES=5;Blockly.Connection.REASON_SHADOW_PARENT=6;Blockly.Connection.prototype.targetConnection=null;Blockly.Connection.prototype.disposed=!1;Blockly.Connection.prototype.check_=null;Blockly.Connection.prototype.shadowDom_=null;Blockly.Connection.prototype.x=0;Blockly.Connection.prototype.y=0;Blockly.Connection.prototype.connect_=function(a){var b=this,c=b.getSourceBlock(),d=a.getSourceBlock();if(a.isConnected()){a.disconnect()}if(b.isConnected()){var e=b.targetBlock(),f=b.getShadowDom();b.setShadowDom(null);if(e.isShadow()){f=Blockly.Xml.blockToDom(e);e.dispose(!1);e=null}else if(b.type==Blockly.INPUT_VALUE){if(!e.outputConnection){throw Error("Orphan block does not have an output connection.")}var g=Blockly.Connection.lastConnectionInRow(d,e);if(g){e.outputConnection.connect(g);e=null}}else if(b.type==Blockly.NEXT_STATEMENT){if(!e.previousConnection){throw Error("Orphan block does not have a previous connection.")}var h=d;while(h.nextConnection){var i=h.getNextBlock();if(i&&!i.isShadow()){h=i}else{if(e.previousConnection.checkType(h.nextConnection)){h.nextConnection.connect(e.previousConnection);e=null}break}}}if(e){b.disconnect();if(Blockly.Events.recordUndo){var j=Blockly.Events.getGroup();setTimeout(function(){if(e.workspace&&!e.getParent()){Blockly.Events.setGroup(j);if(e.outputConnection){e.outputConnection.onFailedConnect(b)}else if(e.previousConnection){e.previousConnection.onFailedConnect(b)}Blockly.Events.setGroup(!1)}},Blockly.BUMP_DELAY)}}b.setShadowDom(f)}var k;if(Blockly.Events.isEnabled()){k=new Blockly.Events.BlockMove(d)}Blockly.Connection.connectReciprocally_(b,a);d.setParent(c);if(k){k.recordNew();Blockly.Events.fire(k)}};Blockly.Connection.prototype.dispose=function(){if(this.isConnected()){this.setShadowDom(null);var a=this.targetBlock();if(a.isShadow()){a.dispose(!1)}else{a.unplug()}}this.disposed=!0};Blockly.Connection.prototype.getSourceBlock=function(){return this.sourceBlock_};Blockly.Connection.prototype.isSuperior=function(){return this.type==Blockly.INPUT_VALUE||this.type==Blockly.NEXT_STATEMENT};Blockly.Connection.prototype.isConnected=function(){return!!this.targetConnection};Blockly.Connection.prototype.canConnectWithReason=function(a){if(!a){return Blockly.Connection.REASON_TARGET_NULL}if(this.isSuperior()){var b=this.sourceBlock_,c=a.getSourceBlock()}else{var c=this.sourceBlock_,b=a.getSourceBlock()}if(b&&b==c){return Blockly.Connection.REASON_SELF_CONNECTION}else if(a.type!=Blockly.OPPOSITE_TYPE[this.type]){return Blockly.Connection.REASON_WRONG_TYPE}else if(b&&c&&b.workspace!==c.workspace){return Blockly.Connection.REASON_DIFFERENT_WORKSPACES}else if(!this.checkType(a)){return Blockly.Connection.REASON_CHECKS_FAILED}else if(b.isShadow()&&!c.isShadow()){return Blockly.Connection.REASON_SHADOW_PARENT}return Blockly.Connection.CAN_CONNECT};Blockly.Connection.prototype.checkConnection=function(a){switch(this.canConnectWithReason(a)){case Blockly.Connection.CAN_CONNECT:break;case Blockly.Connection.REASON_SELF_CONNECTION:throw Error("Attempted to connect a block to itself.");case Blockly.Connection.REASON_DIFFERENT_WORKSPACES:throw Error("Blocks not on same workspace.");case Blockly.Connection.REASON_WRONG_TYPE:throw Error("Attempt to connect incompatible types.");case Blockly.Connection.REASON_TARGET_NULL:throw Error("Target connection is null.");case Blockly.Connection.REASON_CHECKS_FAILED:var b="Connection checks failed. ";b+=this+" expected "+this.check_+", found "+a.check_;throw Error(b);case Blockly.Connection.REASON_SHADOW_PARENT:throw Error("Connecting non-shadow to shadow block.");default:throw Error("Unknown connection failure: this should never happen!");}};Blockly.Connection.prototype.canConnectToPrevious_=function(a){if(this.targetConnection){return!1}if(-1!=Blockly.draggingConnections.indexOf(a)){return!1}if(!a.targetConnection){return!0}var b=a.targetBlock();if(!b.isInsertionMarker()){return!1}return!b.getPreviousBlock()};Blockly.Connection.prototype.isConnectionAllowed=function(a){if(a.sourceBlock_.isInsertionMarker()){return!1}var b=this.canConnectWithReason(a);if(b!=Blockly.Connection.CAN_CONNECT){return!1}switch(a.type){case Blockly.PREVIOUS_STATEMENT:return this.canConnectToPrevious_(a);case Blockly.OUTPUT_VALUE:{if(a.isConnected()&&!a.targetBlock().isInsertionMarker()||this.isConnected()){return!1}break}case Blockly.INPUT_VALUE:{if(a.isConnected()&&!a.targetBlock().isMovable()&&!a.targetBlock().isShadow()){return!1}break}case Blockly.NEXT_STATEMENT:{if(a.isConnected()&&!this.sourceBlock_.nextConnection&&!a.targetBlock().isShadow()&&a.targetBlock().nextConnection){return!1}break}default:throw Error("Unknown connection type in isConnectionAllowed");}if(-1!=Blockly.draggingConnections.indexOf(a)){return!1}return!0};Blockly.Connection.prototype.onFailedConnect=function(){};Blockly.Connection.prototype.connect=function(a){if(this.targetConnection==a){return}this.checkConnection(a);var b=Blockly.Events.getGroup();if(!b){Blockly.Events.setGroup(!0)}if(this.isSuperior()){this.connect_(a)}else{a.connect_(this)}if(!b){Blockly.Events.setGroup(!1)}};Blockly.Connection.connectReciprocally_=function(a,b){if(!a||!b){throw Error("Cannot connect null connections.")}a.targetConnection=b;b.targetConnection=a};Blockly.Connection.singleConnection_=function(a,b){for(var c=null,d=0,e;d<a.inputList.length;d++){e=a.inputList[d].connection;if(e&&e.type==Blockly.INPUT_VALUE&&b.outputConnection.checkType(e)){if(c){return null}c=e}}return c};Blockly.Connection.lastConnectionInRow=function(a,b){var c=a,d;while(d=Blockly.Connection.singleConnection_(c,b)){c=d.targetBlock();if(!c||c.isShadow()){return d}}return null};Blockly.Connection.prototype.disconnect=function(){var a=this.targetConnection;if(!a){throw Error("Source connection not connected.")}if(a.targetConnection!=this){throw Error("Target connection not connected to source connection.")}var b,c,d;if(this.isSuperior()){b=this.sourceBlock_;c=a.getSourceBlock();d=this}else{b=a.getSourceBlock();c=this.sourceBlock_;d=a}var e=Blockly.Events.getGroup();if(!e){Blockly.Events.setGroup(!0)}this.disconnectInternal_(b,c);d.respawnShadow_();if(!e){Blockly.Events.setGroup(!1)}};Blockly.Connection.prototype.disconnectInternal_=function(a,b){var c;if(Blockly.Events.isEnabled()){c=new Blockly.Events.BlockMove(b)}var d=this.targetConnection;d.targetConnection=null;this.targetConnection=null;b.setParent(null);if(c){c.recordNew();Blockly.Events.fire(c)}};Blockly.Connection.prototype.respawnShadow_=function(){var a=this.getSourceBlock(),b=this.getShadowDom();if(a.workspace&&b&&Blockly.Events.recordUndo){var c=Blockly.Xml.domToBlock(b,a.workspace);if(c.outputConnection){this.connect(c.outputConnection)}else if(c.previousConnection){this.connect(c.previousConnection)}else{throw Error("Child block does not have output or previous statement.")}}};Blockly.Connection.prototype.targetBlock=function(){if(this.isConnected()){return this.targetConnection.getSourceBlock()}return null};Blockly.Connection.prototype.checkType=function(a){if(!this.check_||!a.check_){return!0}for(var b=0;b<this.check_.length;b++){if(-1!=a.check_.indexOf(this.check_[b])){return!0}}return!1};Blockly.Connection.prototype.checkType_=function(a){console.warn("Deprecated call to Blockly.Connection.prototype.checkType_, use Blockly.Connection.prototype.checkType instead.");return this.checkType(a)};Blockly.Connection.prototype.onCheckChanged_=function(){if(this.isConnected()&&(!this.targetConnection||!this.checkType(this.targetConnection))){var a=this.isSuperior()?this.targetBlock():this.sourceBlock_;a.unplug()}};Blockly.Connection.prototype.setCheck=function(a){if(a){if(!Array.isArray(a)){a=[a]}this.check_=a;this.onCheckChanged_()}else{this.check_=null}return this};Blockly.Connection.prototype.getCheck=function(){return this.check_};Blockly.Connection.prototype.setShadowDom=function(a){this.shadowDom_=a};Blockly.Connection.prototype.getShadowDom=function(){return this.shadowDom_};Blockly.Connection.prototype.neighbours=function(){return[]};Blockly.Connection.prototype.getParentInput=function(){for(var a=null,b=this.sourceBlock_,c=b.inputList,d=0;d<b.inputList.length;d++){if(c[d].connection===this){a=c[d];break}}return a};Blockly.Connection.prototype.toString=function(){var a,b=this.sourceBlock_;if(!b){return"Orphan Connection"}else if(b.outputConnection==this){a="Output Connection of "}else if(b.previousConnection==this){a="Previous Connection of "}else if(b.nextConnection==this){a="Next Connection of "}else{for(var c=null,d=0,e;e=b.inputList[d];d++){if(e.connection==this){c=e;break}}if(c){a="Input \""+c.name+"\" connection on "}else{console.warn("Connection not actually connected to sourceBlock_");return"Orphan Connection"}}return a+b.toDevString()};
//# sourceMappingURL=connection.min.js.map
