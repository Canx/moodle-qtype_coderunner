{"version":3,"sources":["../../../src/blockly/core/marker_manager.js"],"names":["goog","provide","require","Blockly","MarkerManager","workspace","cursor_","cursorSvg_","markers_","workspace_","prototype","registerMarker","id","marker","unregisterMarker","setDrawer","getRenderer","makeMarkerDrawer","setMarkerSvg","getDrawer","createDom","dispose","Error","getCursor","getMarker","setCursor","cursor","drawer","setCursorSvg","cursorSvg","getBlockCanvas","appendChild","markerSvg","markerSvg_","insertBefore","updateMarkers","keyboardAccessibilityMode","draw","markerIds","Object","keys","i","markerId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object in charge of managing markers and the cursor.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n'use strict';\n\ngoog.provide('Blockly.MarkerManager');\n\ngoog.require('Blockly.Cursor');\ngoog.require('Blockly.Marker');\n\n\n/**\n * Class to manage the multiple markers and the cursor on a workspace.\n * @param {!Blockly.WorkspaceSvg} workspace The workspace for the marker manager.\n * @constructor\n * @package\n */\nBlockly.MarkerManager = function(workspace){\n  /**\n   * The cursor.\n   * @type {Blockly.Cursor}\n   * @private\n   */\n  this.cursor_ = null;\n\n  /**\n   * The cursor's svg element.\n   * @type {SVGElement}\n   * @private\n   */\n  this.cursorSvg_ = null;\n\n  /**\n   * The map of markers for the workspace.\n   * @type {!Object<string, !Blockly.Marker>}\n   * @private\n   */\n  this.markers_ = {};\n\n  /**\n   * The workspace this marker manager is associated with.\n   * @type {!Blockly.WorkspaceSvg}\n   * @private\n   */\n  this.workspace_ = workspace;\n};\n\n/**\n * Register the marker by adding it to the map of markers.\n * @param {string} id A unique identifier for the marker.\n * @param {!Blockly.Marker} marker The marker to register.\n */\nBlockly.MarkerManager.prototype.registerMarker = function(id, marker) {\n  if (this.markers_[id]) {\n    this.unregisterMarker(id);\n  }\n  marker.setDrawer(this.workspace_.getRenderer()\n      .makeMarkerDrawer(this.workspace_, marker));\n  this.setMarkerSvg(marker.getDrawer().createDom());\n  this.markers_[id] = marker;\n};\n\n/**\n * Unregister the marker by removing it from the map of markers.\n * @param {string} id The id of the marker to unregister.\n */\nBlockly.MarkerManager.prototype.unregisterMarker = function(id) {\n  var marker = this.markers_[id];\n  if (marker) {\n    marker.dispose();\n    delete this.markers_[id];\n  } else {\n    throw Error('Marker with id ' + id + ' does not exist. Can only unregister' +\n        'markers that exist.');\n  }\n};\n\n/**\n * Get the cursor for the workspace.\n * @return {Blockly.Cursor} The cursor for this workspace.\n */\nBlockly.MarkerManager.prototype.getCursor = function() {\n  return this.cursor_;\n};\n\n/**\n * Get a single marker that corresponds to the given id.\n * @param {string} id A unique identifier for the marker.\n * @return {Blockly.Marker} The marker that corresponds to the given id, or null\n *     if none exists.\n */\nBlockly.MarkerManager.prototype.getMarker = function(id) {\n  return this.markers_[id];\n};\n\n/**\n * Sets the cursor and initializes the drawer for use with keyboard navigation.\n * @param {Blockly.Cursor} cursor The cursor used to move around this workspace.\n */\nBlockly.MarkerManager.prototype.setCursor = function(cursor) {\n  if (this.cursor_ && this.cursor_.getDrawer()) {\n    this.cursor_.getDrawer().dispose();\n  }\n  this.cursor_ = cursor;\n  if (this.cursor_) {\n    var drawer = this.workspace_.getRenderer()\n        .makeMarkerDrawer(this.workspace_, this.cursor_);\n    this.cursor_.setDrawer(drawer);\n    this.setCursorSvg(this.cursor_.getDrawer().createDom());\n  }\n};\n\n/**\n * Add the cursor svg to this workspace svg group.\n * @param {SVGElement} cursorSvg The svg root of the cursor to be added to the\n *     workspace svg group.\n * @package\n */\nBlockly.MarkerManager.prototype.setCursorSvg = function(cursorSvg) {\n  if (!cursorSvg) {\n    this.cursorSvg_ = null;\n    return;\n  }\n\n  this.workspace_.getBlockCanvas().appendChild(cursorSvg);\n  this.cursorSvg_ = cursorSvg;\n};\n\n/**\n * Add the marker svg to this workspaces svg group.\n * @param {SVGElement} markerSvg The svg root of the marker to be added to the\n *     workspace svg group.\n * @package\n */\nBlockly.MarkerManager.prototype.setMarkerSvg = function(markerSvg) {\n  if (!markerSvg) {\n    this.markerSvg_ = null;\n    return;\n  }\n\n  if (this.workspace_.getBlockCanvas()) {\n    if (this.cursorSvg_) {\n      this.workspace_.getBlockCanvas().insertBefore(markerSvg, this.cursorSvg_);\n    } else {\n      this.workspace_.getBlockCanvas().appendChild(markerSvg);\n    }\n  }\n};\n\n/**\n * Redraw the attached cursor svg if needed.\n * @package\n */\nBlockly.MarkerManager.prototype.updateMarkers = function() {\n  if (this.workspace_.keyboardAccessibilityMode && this.cursorSvg_) {\n    this.workspace_.getCursor().draw();\n  }\n};\n\n/**\n * Dispose of the marker manager.\n * Go through and delete all markers associated with this marker manager.\n * @suppress {checkTypes}\n * @package\n */\nBlockly.MarkerManager.prototype.dispose = function() {\n  var markerIds = Object.keys(this.markers_);\n  for (var i = 0, markerId; (markerId = markerIds[i]); i++) {\n    this.unregisterMarker(markerId);\n  }\n  this.markers_ = null;\n  this.cursor_.dispose();\n  this.cursor_ = null;\n};\n"],"file":"marker_manager.min.js"}