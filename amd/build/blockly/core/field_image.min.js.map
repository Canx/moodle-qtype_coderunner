{"version":3,"sources":["../../../src/blockly/core/field_image.js"],"names":["goog","provide","require","Blockly","FieldImage","src","width","height","opt_alt","opt_onClick","opt_flipRtl","opt_config","Error","utils","replaceMessageReferences","imageHeight","imageWidth","isNaN","flipRtl_","altText_","superClass_","constructor","call","size_","Size","Y_PADDING","imageHeight_","clickHandler_","imageElement_","object","inherits","Field","prototype","DEFAULT_VALUE","fromJson","options","EDITABLE","isDirty_","configure_","config","initView","dom","createSvgElement","fieldGroup_","setAttributeNS","XLINK_NS","value_","style","cursor","updateSize_","doClassValidation_","opt_newValue","doValueUpdate_","newValue","getFlipRtl","setAlt","alt","setAttribute","showEditor_","setOnClickHandler","func","getText_","fieldRegistry","register"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Image field.  Used for pictures, icons, etc.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldImage');\n\ngoog.require('Blockly.Field');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.Size');\n\n\n/**\n * Class for an image on a block.\n * @param {string} src The URL of the image.\n * @param {!(string|number)} width Width of the image.\n * @param {!(string|number)} height Height of the image.\n * @param {string=} opt_alt Optional alt text for when block is collapsed.\n * @param {function(!Blockly.FieldImage)=} opt_onClick Optional function to be\n *     called when the image is clicked. If opt_onClick is defined, opt_alt must\n *     also be defined.\n * @param {boolean=} opt_flipRtl Whether to flip the icon in RTL.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/image#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.Field}\n * @constructor\n */\nBlockly.FieldImage = function(src, width, height,\n    opt_alt, opt_onClick, opt_flipRtl, opt_config) {\n  // Return early.\n  if (!src) {\n    throw Error('Src value of an image field is required');\n  }\n  src = Blockly.utils.replaceMessageReferences(src);\n  var imageHeight = Number(Blockly.utils.replaceMessageReferences(height));\n  var imageWidth = Number(Blockly.utils.replaceMessageReferences(width));\n  if (isNaN(imageHeight) || isNaN(imageWidth)) {\n    throw Error('Height and width values of an image field must cast to' +\n      ' numbers.');\n  }\n  if (imageHeight <= 0 || imageWidth <= 0) {\n    throw Error('Height and width values of an image field must be greater' +\n      ' than 0.');\n  }\n\n  // Initialize configurable properties.\n  /**\n   * Whether to flip this image in RTL.\n   * @type {boolean}\n   * @private\n   */\n  this.flipRtl_ = false;\n\n  /**\n   * Alt text of this image.\n   * @type {string}\n   * @private\n   */\n  this.altText_ = '';\n\n  Blockly.FieldImage.superClass_.constructor.call(\n      this, src, null, opt_config);\n\n  if (!opt_config) {  // If the config wasn't passed, do old configuration.\n    this.flipRtl_ = !!opt_flipRtl;\n    this.altText_ = Blockly.utils.replaceMessageReferences(opt_alt) || '';\n  }\n\n  // Initialize other properties.\n  /**\n   * The size of the area rendered by the field.\n   * @type {Blockly.utils.Size}\n   * @protected\n   * @override\n   */\n  this.size_ = new Blockly.utils.Size(imageWidth,\n      imageHeight + Blockly.FieldImage.Y_PADDING);\n\n  /**\n   * Store the image height, since it is different from the field height.\n   * @type {number}\n   * @private\n   */\n  this.imageHeight_ = imageHeight;\n\n  /**\n   * The function to be called when this field is clicked.\n   * @type {?function(!Blockly.FieldImage)}\n   * @private\n   */\n  this.clickHandler_ = null;\n\n  if (typeof opt_onClick == 'function') {\n    this.clickHandler_ = opt_onClick;\n  }\n\n  /**\n   * The rendered field's image element.\n   * @type {SVGImageElement}\n   * @private\n   */\n  this.imageElement_ = null;\n};\nBlockly.utils.object.inherits(Blockly.FieldImage, Blockly.Field);\n\n/**\n * The default value for this field.\n * @type {*}\n * @protected\n */\nBlockly.FieldImage.prototype.DEFAULT_VALUE = '';\n\n/**\n * Construct a FieldImage from a JSON arg object,\n * dereferencing any string table references.\n * @param {!Object} options A JSON object with options (src, width, height,\n *    alt, and flipRtl).\n * @return {!Blockly.FieldImage} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldImage.fromJson = function(options) {\n  return new Blockly.FieldImage(\n      options['src'], options['width'], options['height'],\n      undefined, undefined, undefined, options);\n};\n\n/**\n * Vertical padding below the image, which is included in the reported height of\n * the field.\n * @type {number}\n * @private\n */\nBlockly.FieldImage.Y_PADDING = 1;\n\n/**\n * Editable fields usually show some sort of UI indicating they are\n * editable. This field should not.\n * @type {boolean}\n */\nBlockly.FieldImage.prototype.EDITABLE = false;\n\n/**\n * Used to tell if the field needs to be rendered the next time the block is\n * rendered. Image fields are statically sized, and only need to be\n * rendered at initialization.\n * @type {boolean}\n * @protected\n */\nBlockly.FieldImage.prototype.isDirty_ = false;\n\n/**\n * Configure the field based on the given map of options.\n * @param {!Object} config A map of options to configure the field based on.\n * @private\n */\nBlockly.FieldImage.prototype.configure_ = function(config) {\n  Blockly.FieldImage.superClass_.configure_.call(this, config);\n  this.flipRtl_ = !!config['flipRtl'];\n  this.altText_ = Blockly.utils.replaceMessageReferences(config['alt']) || '';\n};\n\n/**\n * Create the block UI for this image.\n * @package\n */\nBlockly.FieldImage.prototype.initView = function() {\n  this.imageElement_ = /** @type {!SVGImageElement} */\n      (Blockly.utils.dom.createSvgElement(\n          'image',\n          {\n            'height': this.imageHeight_ + 'px',\n            'width': this.size_.width + 'px',\n            'alt': this.altText_\n          },\n          this.fieldGroup_));\n  this.imageElement_.setAttributeNS(Blockly.utils.dom.XLINK_NS,\n      'xlink:href', /** @type {string} */ (this.value_));\n\n  if (this.clickHandler_) {\n    this.imageElement_.style.cursor = 'pointer';\n  }\n};\n\n/**\n * @override\n */\nBlockly.FieldImage.prototype.updateSize_ = function() {\n  // NOP\n};\n\n/**\n * Ensure that the input value (the source URL) is a string.\n * @param {*=} opt_newValue The input value.\n * @return {?string} A string, or null if invalid.\n * @protected\n */\nBlockly.FieldImage.prototype.doClassValidation_ = function(opt_newValue) {\n  if (typeof opt_newValue != 'string') {\n    return null;\n  }\n  return opt_newValue;\n};\n\n/**\n * Update the value of this image field, and update the displayed image.\n * @param {*} newValue The value to be saved. The default validator guarantees\n * that this is a string.\n * @protected\n */\nBlockly.FieldImage.prototype.doValueUpdate_ = function(newValue) {\n  this.value_ = newValue;\n  if (this.imageElement_) {\n    this.imageElement_.setAttributeNS(Blockly.utils.dom.XLINK_NS,\n        'xlink:href', String(this.value_));\n  }\n};\n\n/**\n * Get whether to flip this image in RTL\n * @return {boolean} True if we should flip in RTL.\n * @override\n */\nBlockly.FieldImage.prototype.getFlipRtl = function() {\n  return this.flipRtl_;\n};\n\n/**\n * Set the alt text of this image.\n * @param {?string} alt New alt text.\n * @public\n */\nBlockly.FieldImage.prototype.setAlt = function(alt) {\n  if (alt == this.altText_) {\n    return;\n  }\n  this.altText_ = alt || '';\n  if (this.imageElement_) {\n    this.imageElement_.setAttribute('alt', this.altText_);\n  }\n};\n\n/**\n * If field click is called, and click handler defined,\n * call the handler.\n * @protected\n */\nBlockly.FieldImage.prototype.showEditor_ = function() {\n  if (this.clickHandler_) {\n    this.clickHandler_(this);\n  }\n};\n\n/**\n * Set the function that is called when this image  is clicked.\n * @param {?function(!Blockly.FieldImage)} func The function that is called\n *    when the image is clicked, or null to remove.\n */\nBlockly.FieldImage.prototype.setOnClickHandler = function(func) {\n  this.clickHandler_ = func;\n};\n\n/**\n * Use the `getText_` developer hook to override the field's text\n * representation.\n * Return the image alt text instead.\n * @return {?string} The image alt text.\n * @protected\n * @override\n */\nBlockly.FieldImage.prototype.getText_ = function() {\n  return this.altText_;\n};\n\nBlockly.fieldRegistry.register('field_image', Blockly.FieldImage);\n"],"file":"field_image.min.js"}