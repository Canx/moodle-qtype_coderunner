{"version":3,"sources":["../../../src/blockly/core/input.js"],"names":["goog","provide","require","Blockly","Input","type","name","block","connection","DUMMY_INPUT","Error","sourceBlock_","fieldRow","prototype","align","ALIGN_LEFT","visible_","getSourceBlock","appendField","field","opt_name","insertFieldAt","length","index","FieldLabel","setSourceBlock","rendered","init","setVisible","isVisible","fieldDropdown","prefixField","splice","suffixField","render","bumpNeighbours","removeField","opt_quiet","i","dispose","visible","renderList","y","startTrackingAll","stopTrackingAll","child","targetBlock","getSvgRoot","style","display","markDirty","setCheck","check","setAlign","workspace"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object representing an input (value, statement, or dummy).\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Input');\n\ngoog.require('Blockly.Connection');\ngoog.require('Blockly.FieldLabel');\n\n\n/**\n * Class for an input with an optional field.\n * @param {number} type The type of the input.\n * @param {string} name Language-neutral identifier which may used to find this\n *     input again.\n * @param {!Blockly.Block} block The block containing this input.\n * @param {Blockly.Connection} connection Optional connection for this input.\n * @constructor\n */\nBlockly.Input = function(type, name, block, connection) {\n  if (type != Blockly.DUMMY_INPUT && !name) {\n    throw Error('Value inputs and statement inputs must have non-empty name.');\n  }\n  /** @type {number} */\n  this.type = type;\n  /** @type {string} */\n  this.name = name;\n  /**\n   * @type {!Blockly.Block}\n   * @private\n   */\n  this.sourceBlock_ = block;\n  /** @type {Blockly.Connection} */\n  this.connection = connection;\n  /** @type {!Array.<!Blockly.Field>} */\n  this.fieldRow = [];\n};\n\n/**\n * Alignment of input's fields (left, right or centre).\n * @type {number}\n */\nBlockly.Input.prototype.align = Blockly.ALIGN_LEFT;\n\n/**\n * Is the input visible?\n * @type {boolean}\n * @private\n */\nBlockly.Input.prototype.visible_ = true;\n\n/**\n * Get the source block for this input.\n * @return {Blockly.Block} The source block, or null if there is none.\n */\nBlockly.Input.prototype.getSourceBlock = function() {\n  return this.sourceBlock_;\n};\n\n/**\n * Add a field (or label from string), and all prefix and suffix fields, to the\n * end of the input's field row.\n * @param {string|!Blockly.Field} field Something to add as a field.\n * @param {string=} opt_name Language-neutral identifier which may used to find\n *     this field again.  Should be unique to the host block.\n * @return {!Blockly.Input} The input being append to (to allow chaining).\n */\nBlockly.Input.prototype.appendField = function(field, opt_name) {\n  this.insertFieldAt(this.fieldRow.length, field, opt_name);\n  return this;\n};\n\n/**\n * Inserts a field (or label from string), and all prefix and suffix fields, at\n * the location of the input's field row.\n * @param {number} index The index at which to insert field.\n * @param {string|!Blockly.Field} field Something to add as a field.\n * @param {string=} opt_name Language-neutral identifier which may used to find\n *     this field again.  Should be unique to the host block.\n * @return {number} The index following the last inserted field.\n */\nBlockly.Input.prototype.insertFieldAt = function(index, field, opt_name) {\n  if (index < 0 || index > this.fieldRow.length) {\n    throw Error('index ' + index + ' out of bounds.');\n  }\n  // Falsy field values don't generate a field, unless the field is an empty\n  // string and named.\n  if (!field && !(field == '' && opt_name)) {\n    return index;\n  }\n\n  // Generate a FieldLabel when given a plain text field.\n  if (typeof field == 'string') {\n    field = new Blockly.FieldLabel(/** @type {string} */ (field));\n  }\n\n  field.setSourceBlock(this.sourceBlock_);\n  if (this.sourceBlock_.rendered) {\n    field.init();\n  }\n  field.name = opt_name;\n  field.setVisible(this.isVisible());\n\n  var fieldDropdown = /** @type {Blockly.FieldDropdown} */ (field);\n  if (fieldDropdown.prefixField) {\n    // Add any prefix.\n    index = this.insertFieldAt(index, fieldDropdown.prefixField);\n  }\n  // Add the field to the field row.\n  this.fieldRow.splice(index, 0, field);\n  ++index;\n  if (fieldDropdown.suffixField) {\n    // Add any suffix.\n    index = this.insertFieldAt(index, fieldDropdown.suffixField);\n  }\n\n  if (this.sourceBlock_.rendered) {\n    this.sourceBlock_ = /** @type {!Blockly.BlockSvg} */ (this.sourceBlock_);\n    this.sourceBlock_.render();\n    // Adding a field will cause the block to change shape.\n    this.sourceBlock_.bumpNeighbours();\n  }\n  return index;\n};\n\n/**\n * Remove a field from this input.\n * @param {string} name The name of the field.\n * @param {boolean=} opt_quiet True to prevent an error if field is not present.\n * @return {boolean} True if operation succeeds, false if field is not present\n *     and opt_quiet is true.\n * @throws {Error} if the field is not present and opt_quiet is false.\n */\nBlockly.Input.prototype.removeField = function(name, opt_quiet) {\n  for (var i = 0, field; (field = this.fieldRow[i]); i++) {\n    if (field.name === name) {\n      field.dispose();\n      this.fieldRow.splice(i, 1);\n      if (this.sourceBlock_.rendered) {\n        this.sourceBlock_ = /** @type {!Blockly.BlockSvg} */ (this.sourceBlock_);\n        this.sourceBlock_.render();\n        // Removing a field will cause the block to change shape.\n        this.sourceBlock_.bumpNeighbours();\n      }\n      return true;\n    }\n  }\n  if (opt_quiet) {\n    return false;\n  } else {\n    throw Error('Field \"' + name + '\" not found.');\n  }\n};\n\n/**\n * Gets whether this input is visible or not.\n * @return {boolean} True if visible.\n */\nBlockly.Input.prototype.isVisible = function() {\n  return this.visible_;\n};\n\n/**\n * Sets whether this input is visible or not.\n * Should only be used to collapse/uncollapse a block.\n * @param {boolean} visible True if visible.\n * @return {!Array.<!Blockly.BlockSvg>} List of blocks to render.\n * @package\n */\nBlockly.Input.prototype.setVisible = function(visible) {\n  // Note: Currently there are only unit tests for block.setCollapsed()\n  // because this function is package. If this function goes back to being a\n  // public API tests (lots of tests) should be added.\n  var renderList = [];\n  if (this.visible_ == visible) {\n    return renderList;\n  }\n  this.visible_ = visible;\n\n  for (var y = 0, field; (field = this.fieldRow[y]); y++) {\n    field.setVisible(visible);\n  }\n  if (this.connection) {\n    this.connection =\n      /** @type {!Blockly.RenderedConnection} */ (this.connection);\n    // Has a connection.\n    if (visible) {\n      renderList = this.connection.startTrackingAll();\n    } else {\n      this.connection.stopTrackingAll();\n    }\n    var child = this.connection.targetBlock();\n    if (child) {\n      child.getSvgRoot().style.display = visible ? 'block' : 'none';\n    }\n  }\n  return renderList;\n};\n\n/**\n * Mark all fields on this input as dirty.\n * @package\n */\nBlockly.Input.prototype.markDirty = function() {\n  for (var y = 0, field; (field = this.fieldRow[y]); y++) {\n    field.markDirty();\n  }\n};\n\n/**\n * Change a connection's compatibility.\n * @param {string|Array.<string>|null} check Compatible value type or\n *     list of value types.  Null if all types are compatible.\n * @return {!Blockly.Input} The input being modified (to allow chaining).\n */\nBlockly.Input.prototype.setCheck = function(check) {\n  if (!this.connection) {\n    throw Error('This input does not have a connection.');\n  }\n  this.connection.setCheck(check);\n  return this;\n};\n\n/**\n * Change the alignment of the connection's field(s).\n * @param {number} align One of Blockly.ALIGN_LEFT, ALIGN_CENTRE, ALIGN_RIGHT.\n *   In RTL mode directions are reversed, and ALIGN_RIGHT aligns to the left.\n * @return {!Blockly.Input} The input being modified (to allow chaining).\n */\nBlockly.Input.prototype.setAlign = function(align) {\n  this.align = align;\n  if (this.sourceBlock_.rendered) {\n    this.sourceBlock_ = /** @type {!Blockly.BlockSvg} */ (this.sourceBlock_);\n    this.sourceBlock_.render();\n  }\n  return this;\n};\n\n/**\n * Initialize the fields on this input.\n */\nBlockly.Input.prototype.init = function() {\n  if (!this.sourceBlock_.workspace.rendered) {\n    return;  // Headless blocks don't need fields initialized.\n  }\n  for (var i = 0; i < this.fieldRow.length; i++) {\n    this.fieldRow[i].init();\n  }\n};\n\n/**\n * Sever all links to this input.\n * @suppress {checkTypes}\n */\nBlockly.Input.prototype.dispose = function() {\n  for (var i = 0, field; (field = this.fieldRow[i]); i++) {\n    field.dispose();\n  }\n  if (this.connection) {\n    this.connection.dispose();\n  }\n  this.sourceBlock_ = null;\n};\n"],"file":"input.min.js"}