{"version":3,"sources":["../../../../../src/blockly/core/components/tree/treenode.js"],"names":["goog","provide","require","Blockly","tree","TreeNode","toolbox","content","config","toolbox_","BaseNode","call","onSizeChanged_","utils","object","inherits","prototype","getTree","parent","getParent","setTreeInternal","getCalculatedIconClass","expanded","expanded_","expandedIconClass","iconClass","config_","hasChildren","cssExpandedFolderIcon","cssTreeIcon","cssCollapsedFolderIcon","cssFileIcon","onClick_","toggle","select","isSelected","setSelectedItem","updateRow","onKeyDown","e","horizontalLayout_","map","next","KeyCodes","DOWN","prev","UP","RIGHT","rightToLeft_","LEFT","newKeyCode","keyCode","Object","defineProperties","value","superClass_","onSizeChanged","fn","resizeToolbox_","doNodeExpanded","doNodeCollapsed"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of the Blockly.tree.TreeNode class.\n * This class is similar to Closure's goog.ui.tree.TreeNode class.\n * @author samelh@google.com (Sam El-Husseini)\n */\n'use strict';\n\ngoog.provide('Blockly.tree.TreeNode');\n\ngoog.require('Blockly.tree.BaseNode');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.KeyCodes');\n\n\n/**\n * A single node in the tree, customized for Blockly's UI.\n * Similar to Closure's goog.ui.tree.TreeNode\n *\n * @param {Blockly.Toolbox} toolbox The parent toolbox for this tree.\n * @param {string} content The content of the node label treated as\n *     plain-text and will be HTML escaped.\n * @param {!Blockly.tree.BaseNode.Config} config The configuration for the tree.\n * @constructor\n * @extends {Blockly.tree.BaseNode}\n */\nBlockly.tree.TreeNode = function(toolbox, content, config) {\n  this.toolbox_ = toolbox;\n  Blockly.tree.BaseNode.call(this, content, config);\n\n  /**\n   * A handler that's triggered when the size of node has changed.\n   * @type {?function():?}\n   * @private\n   */\n  this.onSizeChanged_ = null;\n};\nBlockly.utils.object.inherits(Blockly.tree.TreeNode, Blockly.tree.BaseNode);\n\n/**\n * Returns the tree.\n * @return {?Blockly.tree.TreeControl} The tree.\n * @override\n */\nBlockly.tree.TreeNode.prototype.getTree = function() {\n  if (this.tree) {\n    return this.tree;\n  }\n  var parent = this.getParent();\n  if (parent) {\n    var tree = parent.getTree();\n    if (tree) {\n      this.setTreeInternal(tree);\n      return tree;\n    }\n  }\n  return null;\n};\n\n/**\n * Returns the source for the icon.\n * @return {string} Src for the icon.\n * @override\n */\nBlockly.tree.TreeNode.prototype.getCalculatedIconClass = function() {\n  var expanded = this.expanded_;\n  if (expanded && this.expandedIconClass) {\n    return this.expandedIconClass;\n  }\n  var iconClass = this.iconClass;\n  if (!expanded && iconClass) {\n    return iconClass;\n  }\n\n  // fall back on default icons\n  var config = this.config_;\n  if (this.hasChildren()) {\n    if (expanded && config.cssExpandedFolderIcon) {\n      return config.cssTreeIcon + ' ' + config.cssExpandedFolderIcon;\n    } else if (!expanded && config.cssCollapsedFolderIcon) {\n      return config.cssTreeIcon + ' ' + config.cssCollapsedFolderIcon;\n    }\n  } else {\n    if (config.cssFileIcon) {\n      return config.cssTreeIcon + ' ' + config.cssFileIcon;\n    }\n  }\n  return '';\n};\n\n/**\n * Expand or collapse the node on mouse click.\n * @param {!Event} _e The browser event.\n * @override\n */\nBlockly.tree.TreeNode.prototype.onClick_ = function(_e) {\n  // Expand icon.\n  if (this.hasChildren()) {\n    this.toggle();\n    this.select();\n  } else if (this.isSelected()) {\n    this.getTree().setSelectedItem(null);\n  } else {\n    this.select();\n  }\n  this.updateRow();\n};\n\n\n/**\n * Remap event.keyCode in horizontalLayout so that arrow\n * keys work properly and call original onKeyDown handler.\n * @param {!Event} e The browser event.\n * @return {boolean} The handled value.\n * @override\n * @private\n */\nBlockly.tree.TreeNode.prototype.onKeyDown = function(e) {\n  if (this.tree.toolbox_.horizontalLayout_) {\n    var map = {};\n    var next = Blockly.utils.KeyCodes.DOWN;\n    var prev = Blockly.utils.KeyCodes.UP;\n    map[Blockly.utils.KeyCodes.RIGHT] = this.rightToLeft_ ? prev : next;\n    map[Blockly.utils.KeyCodes.LEFT] = this.rightToLeft_ ? next : prev;\n    map[Blockly.utils.KeyCodes.UP] = Blockly.utils.KeyCodes.LEFT;\n    map[Blockly.utils.KeyCodes.DOWN] = Blockly.utils.KeyCodes.RIGHT;\n\n    var newKeyCode = map[e.keyCode];\n    Object.defineProperties(e, {\n      keyCode: {value: newKeyCode || e.keyCode}\n    });\n  }\n  return Blockly.tree.TreeNode.superClass_.onKeyDown.call(this, e);\n};\n\n/**\n * Set the handler that's triggered when the size of node has changed.\n * @param {function():?} fn The handler\n * @package\n */\nBlockly.tree.TreeNode.prototype.onSizeChanged = function(fn) {\n  this.onSizeChanged_ = fn;\n};\n\n/**\n * Trigger a size changed event if a handler exists.\n * @private\n */\nBlockly.tree.TreeNode.prototype.resizeToolbox_ = function() {\n  if (this.onSizeChanged_) {\n    this.onSizeChanged_.call(this.toolbox_);\n  }\n};\n\n/**\n * Resize the toolbox when a node is expanded.\n * @override\n */\nBlockly.tree.TreeNode.prototype.doNodeExpanded =\n    Blockly.tree.TreeNode.prototype.resizeToolbox_;\n\n/**\n * Resize the toolbox when a node is collapsed.\n * @override\n */\nBlockly.tree.TreeNode.prototype.doNodeCollapsed =\n    Blockly.tree.TreeNode.prototype.resizeToolbox_;\n"],"file":"treenode.min.js"}