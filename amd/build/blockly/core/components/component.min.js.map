{"version":3,"sources":["../../../../src/blockly/core/components/component.js"],"names":["goog","provide","require","Blockly","Component","rightToLeft_","defaultRightToLeft","id_","inDocument_","element_","parent_","children_","childIndex_","disposed_","Error","ALREADY_RENDERED","PARENT_UNABLE_TO_BE_SET","CHILD_INDEX_OUT_OF_BOUNDS","ABSTRACT_METHOD","prototype","getId","utils","IdGenerator","getNextUniqueId","getElement","setElementInternal","element","setParent","parent","getChild","getParent","isInDocument","createDom","render","opt_parentElement","render_","opt_beforeNode","insertBefore","document","body","appendChild","enterDocument","forEachChild","child","exitDocument","dispose","disposeInternal","dom","removeNode","addChild","opt_render","addChildAt","getChildCount","index","i","indexOf","splice","contentElement","getContentElement","insertBeforeElement","childNodes","sibling","getChildAt","parentNode","nodeType","NodeType","ELEMENT_NODE","hasChildren","length","id","f","opt_obj","call"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of the Blockly.Component class.\n * This class is similar to Closure's goog.ui.Component class.\n * @author samelh@google.com (Sam El-Husseini)\n */\n'use strict';\n\ngoog.provide('Blockly.Component');\n\ngoog.provide('Blockly.Component.Error');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.IdGenerator');\ngoog.require('Blockly.utils.style');\n\n\n/**\n * Default implementation of a UI component.\n * Similar to Closure's goog.ui.Component.\n *\n * @constructor\n */\nBlockly.Component = function() {\n\n  /**\n   * Whether the component is rendered right-to-left.\n   * @type {boolean}\n   * @protected\n   */\n  this.rightToLeft_ = Blockly.Component.defaultRightToLeft;\n\n  /**\n   * Unique ID of the component, lazily initialized in {@link\n   * Blockly.Component#getId} if needed.  This property is strictly private and\n   * must not be accessed directly outside of this class!\n   * @type {?string}\n   * @private\n   */\n  this.id_ = null;\n\n  /**\n   * Whether the component is in the document.\n   * @type {boolean}\n   * @private\n   */\n  this.inDocument_ = false;\n\n  /**\n   * The DOM element for the component.\n   * @type {?Element}\n   * @private\n   */\n  this.element_ = null;\n\n  /**\n   * Parent component to which events will be propagated.  This property is\n   * strictly private and must not be accessed directly outside of this class!\n   * @type {?Blockly.Component}\n   * @private\n   */\n  this.parent_ = null;\n\n  /**\n   * Array of child components.\n   * Must be kept in sync with `childIndex_`.  This property is strictly\n   * private and must not be accessed directly outside of this class!\n   * @type {?Array.<?Blockly.Component>}\n   * @private\n   */\n  this.children_ = [];\n\n  /**\n   * Map of child component IDs to child components.  Used for constant-time\n   * random access to child components by ID.\n   * Must be kept in sync with `children_`.  This property is strictly\n   * private and must not be accessed directly outside of this class!\n   *\n   * @type {?Object}\n   * @private\n   */\n  this.childIndex_ = {};\n\n  /**\n   * Whether or not the component has been disposed.\n   * @type {boolean}\n   * @private\n   */\n  this.disposed_ = false;\n};\n\n\n/**\n * The default right to left value.\n * @type {boolean}\n * @package\n */\nBlockly.Component.defaultRightToLeft = false;\n\n/**\n * Errors thrown by the component.\n * @enum {string}\n */\nBlockly.Component.Error = {\n  /**\n   * Error when the component is already rendered and another render attempt is\n   * made.\n   */\n  ALREADY_RENDERED: 'Component already rendered',\n\n  /**\n   * Error when an attempt is made to set the parent of a component in a way\n   * that would result in an inconsistent object graph.\n   */\n  PARENT_UNABLE_TO_BE_SET: 'Unable to set parent component',\n\n  /**\n   * Error when an attempt is made to add a child component at an out-of-bounds\n   * index.  We don't support sparse child arrays.\n   */\n  CHILD_INDEX_OUT_OF_BOUNDS: 'Child component index out of bounds',\n\n  /**\n   * Error when calling an abstract method that should be overriden.\n   */\n  ABSTRACT_METHOD: 'Unimplemented abstract method'\n};\n\n/**\n * Gets the unique ID for the instance of this component.  If the instance\n * doesn't already have an ID, generates one on the fly.\n * @return {string} Unique component ID.\n * @package\n */\nBlockly.Component.prototype.getId = function() {\n  return this.id_ || (this.id_ = Blockly.utils.IdGenerator.getNextUniqueId());\n};\n\n/**\n * Gets the component's element.\n * @return {Element} The element for the component.\n * @package\n */\nBlockly.Component.prototype.getElement = function() {\n  return this.element_;\n};\n\n/**\n * Sets the component's root element to the given element.  Considered\n * protected and final.\n *\n * This should generally only be called during createDom. Setting the element\n * does not actually change which element is rendered, only the element that is\n * associated with this UI component.\n *\n * This should only be used by subclasses and its associated renderers.\n *\n * @param {Element} element Root element for the component.\n * @protected\n */\nBlockly.Component.prototype.setElementInternal = function(element) {\n  this.element_ = element;\n};\n\n/**\n * Sets the parent of this component to use for event bubbling.  Throws an error\n * if the component already has a parent or if an attempt is made to add a\n * component to itself as a child.\n * @param {Blockly.Component} parent The parent component.\n * @protected\n */\nBlockly.Component.prototype.setParent = function(parent) {\n  if (this == parent) {\n    // Attempting to add a child to itself is an error.\n    throw Error(Blockly.Component.Error.PARENT_UNABLE_TO_BE_SET);\n  }\n\n  if (parent && this.parent_ && this.id_ && this.parent_.getChild(this.id_) &&\n      this.parent_ != parent) {\n    // This component is already the child of some parent.\n    throw Error(Blockly.Component.Error.PARENT_UNABLE_TO_BE_SET);\n  }\n\n  this.parent_ = parent;\n};\n\n/**\n * Returns the component's parent, if any.\n * @return {?Blockly.Component} The parent component.\n * @protected\n */\nBlockly.Component.prototype.getParent = function() {\n  return this.parent_;\n};\n\n/**\n * Determines whether the component has been added to the document.\n * @return {boolean} TRUE if rendered. Otherwise, FALSE.\n * @protected\n */\nBlockly.Component.prototype.isInDocument = function() {\n  return this.inDocument_;\n};\n\n/**\n * Creates the initial DOM representation for the component.\n * @protected\n */\nBlockly.Component.prototype.createDom = function() {\n  throw Error(Blockly.Component.Error.ABSTRACT_METHOD);\n};\n\n/**\n * Renders the component.  If a parent element is supplied, the component's\n * element will be appended to it.  If there is no optional parent element and\n * the element doesn't have a parentNode then it will be appended to the\n * document body.\n *\n * If this component has a parent component, and the parent component is\n * not in the document already, then this will not call `enterDocument`\n * on this component.\n *\n * Throws an Error if the component is already rendered.\n *\n * @param {Element=} opt_parentElement Optional parent element to render the\n *    component into.\n * @package\n */\nBlockly.Component.prototype.render = function(opt_parentElement) {\n  this.render_(opt_parentElement);\n};\n\n/**\n * Renders the component.  If a parent element is supplied, the component's\n * element will be appended to it.  If there is no optional parent element and\n * the element doesn't have a parentNode then it will be appended to the\n * document body.\n *\n * If this component has a parent component, and the parent component is\n * not in the document already, then this will not call `enterDocument`\n * on this component.\n *\n * Throws an Error if the component is already rendered.\n *\n * @param {Element=} opt_parentElement Optional parent element to render the\n *    component into.\n * @param {Node=} opt_beforeNode Node before which the component is to\n *    be rendered.  If left out the node is appended to the parent element.\n * @private\n */\nBlockly.Component.prototype.render_ = function(\n    opt_parentElement, opt_beforeNode) {\n  if (this.inDocument_) {\n    throw Error(Blockly.Component.Error.ALREADY_RENDERED);\n  }\n\n  if (!this.element_) {\n    this.createDom();\n  }\n\n  if (opt_parentElement) {\n    opt_parentElement.insertBefore(this.element_, opt_beforeNode || null);\n  } else {\n    document.body.appendChild(this.element_);\n  }\n\n  // If this component has a parent component that isn't in the document yet,\n  // we don't call enterDocument() here.  Instead, when the parent component\n  // enters the document, the enterDocument() call will propagate to its\n  // children, including this one.  If the component doesn't have a parent\n  // or if the parent is already in the document, we call enterDocument().\n  if (!this.parent_ || this.parent_.isInDocument()) {\n    this.enterDocument();\n  }\n};\n\n/**\n * Called when the component's element is known to be in the document. Anything\n * using document.getElementById etc. should be done at this stage.\n *\n * If the component contains child components, this call is propagated to its\n * children.\n * @protected\n */\nBlockly.Component.prototype.enterDocument = function() {\n  this.inDocument_ = true;\n\n  // Propagate enterDocument to child components that have a DOM, if any.\n  // If a child was decorated before entering the document (permitted when\n  // Blockly.Component.ALLOW_DETACHED_DECORATION is true), its enterDocument\n  // will be called here.\n  this.forEachChild(function(child) {\n    if (!child.isInDocument() && child.getElement()) {\n      child.enterDocument();\n    }\n  });\n};\n\n/**\n * Called by dispose to clean up the elements and listeners created by a\n * component, or by a parent component/application who has removed the\n * component from the document but wants to reuse it later.\n *\n * If the component contains child components, this call is propagated to its\n * children.\n *\n * It should be possible for the component to be rendered again once this method\n * has been called.\n * @protected\n */\nBlockly.Component.prototype.exitDocument = function() {\n  // Propagate exitDocument to child components that have been rendered, if any.\n  this.forEachChild(function(child) {\n    if (child.isInDocument()) {\n      child.exitDocument();\n    }\n  });\n\n  this.inDocument_ = false;\n};\n\n/**\n * Disposes of the object. If the object hasn't already been disposed of, calls\n * {@link #disposeInternal}.\n * @package\n */\nBlockly.Component.prototype.dispose = function() {\n  if (!this.disposed_) {\n    // Set disposed_ to true first, in case during the chain of disposal this\n    // gets disposed recursively.\n    this.disposed_ = true;\n    this.disposeInternal();\n  }\n};\n\n/**\n * Disposes of the component.  Calls `exitDocument`, which is expected to\n * remove event handlers and clean up the component.  Propagates the call to\n * the component's children, if any. Removes the component's DOM from the\n * document.\n * @protected\n */\nBlockly.Component.prototype.disposeInternal = function() {\n  if (this.inDocument_) {\n    this.exitDocument();\n  }\n\n  // Disposes of the component's children, if any.\n  this.forEachChild(function(child) { child.dispose(); });\n\n  // Detach the component's element from the DOM.\n  if (this.element_) {\n    Blockly.utils.dom.removeNode(this.element_);\n  }\n\n  this.children_ = null;\n  this.childIndex_ = null;\n  this.element_ = null;\n  this.parent_ = null;\n};\n\n/**\n * Adds the specified component as the last child of this component.  See\n * {@link Blockly.Component#addChildAt} for detailed semantics.\n *\n * @see Blockly.Component#addChildAt\n * @param {Blockly.Component} child The new child component.\n * @param {boolean=} opt_render If true, the child component will be rendered\n *    into the parent.\n * @package\n */\nBlockly.Component.prototype.addChild = function(child, opt_render) {\n  this.addChildAt(child, this.getChildCount(), opt_render);\n};\n\n/**\n * Adds the specified component as a child of this component at the given\n * 0-based index.\n *\n * Both `addChild` and `addChildAt` assume the following contract\n * between parent and child components:\n *  <ul>\n *    <li>the child component's element must be a descendant of the parent\n *        component's element, and\n *    <li>the DOM state of the child component must be consistent with the DOM\n *        state of the parent component (see `isInDocument`) in the\n *        steady state -- the exception is to addChildAt(child, i, false) and\n *        then immediately decorate/render the child.\n *  </ul>\n *\n * In particular, `parent.addChild(child)` will throw an error if the\n * child component is already in the document, but the parent isn't.\n *\n * Clients of this API may call `addChild` and `addChildAt` with\n * `opt_render` set to true.  If `opt_render` is true, calling these\n * methods will automatically render the child component's element into the\n * parent component's element. If the parent does not yet have an element, then\n * `createDom` will automatically be invoked on the parent before\n * rendering the child.\n *\n * Invoking {@code parent.addChild(child, true)} will throw an error if the\n * child component is already in the document, regardless of the parent's DOM\n * state.\n *\n * If `opt_render` is true and the parent component is not already\n * in the document, `enterDocument` will not be called on this component\n * at this point.\n *\n * Finally, this method also throws an error if the new child already has a\n * different parent, or the given index is out of bounds.\n *\n * @see Blockly.Component#addChild\n * @param {Blockly.Component} child The new child component.\n * @param {number} index 0-based index at which the new child component is to be\n *    added; must be between 0 and the current child count (inclusive).\n * @param {boolean=} opt_render If true, the child component will be rendered\n *    into the parent.\n * @protected\n */\nBlockly.Component.prototype.addChildAt = function(child, index, opt_render) {\n  if (child.inDocument_ && (opt_render || !this.inDocument_)) {\n    // Adding a child that's already in the document is an error, except if the\n    // parent is also in the document and opt_render is false (e.g. decorate()).\n    throw Error(Blockly.Component.Error.ALREADY_RENDERED);\n  }\n\n  if (index < 0 || index > this.getChildCount()) {\n    // Allowing sparse child arrays would lead to strange behavior, so we don't.\n    throw Error(Blockly.Component.Error.CHILD_INDEX_OUT_OF_BOUNDS);\n  }\n\n  // Moving child within component, remove old reference.\n  this.childIndex_[child.getId()] = child;\n  if (child.getParent() == this) {\n    // Remove from this.children_\n    var i = this.children_.indexOf(child);\n    if (i > -1) {\n      this.children_.splice(i, 1);\n    }\n  }\n\n  // Set the parent of the child to this component.  This throws an error if\n  // the child is already contained by another component.\n  child.setParent(this);\n  this.children_.splice(index, 0, child);\n\n  if (child.inDocument_ && this.inDocument_ && child.getParent() == this) {\n    // Changing the position of an existing child, move the DOM node (if\n    // necessary).\n    var contentElement = this.getContentElement();\n    var insertBeforeElement = contentElement.childNodes[index] || null;\n    if (insertBeforeElement != child.getElement()) {\n      contentElement.insertBefore(child.getElement(), insertBeforeElement);\n    }\n  } else if (opt_render) {\n    // If this (parent) component doesn't have a DOM yet, call createDom now\n    // to make sure we render the child component's element into the correct\n    // parent element (otherwise render_ with a null first argument would\n    // render the child into the document body, which is almost certainly not\n    // what we want).\n    if (!this.element_) {\n      this.createDom();\n    }\n    // Render the child into the parent at the appropriate location.  Note that\n    // getChildAt(index + 1) returns undefined if inserting at the end.\n    var sibling = this.getChildAt(index + 1);\n    // render_() calls enterDocument() if the parent is already in the document.\n    child.render_(this.getContentElement(), sibling ? sibling.element_ : null);\n  } else if (this.inDocument_ && !child.inDocument_ && child.element_ &&\n      child.element_.parentNode &&\n      // Under some circumstances, IE8 implicitly creates a Document Fragment\n      // for detached nodes, so ensure the parent is an Element as it should be.\n      child.element_.parentNode.nodeType ==\n          Blockly.utils.dom.NodeType.ELEMENT_NODE) {\n    // We don't touch the DOM, but if the parent is in the document, and the\n    // child element is in the document but not marked as such, then we call\n    // enterDocument on the child.\n    child.enterDocument();\n  }\n};\n\n/**\n * Returns the DOM element into which child components are to be rendered,\n * or null if the component itself hasn't been rendered yet.  This default\n * implementation returns the component's root element.  Subclasses with\n * complex DOM structures must override this method.\n * @return {Element} Element to contain child elements (null if none).\n * @protected\n */\nBlockly.Component.prototype.getContentElement = function() {\n  return this.element_;\n};\n\n/**\n * Returns true if the component has children.\n * @return {boolean} True if the component has children.\n * @protected\n */\nBlockly.Component.prototype.hasChildren = function() {\n  return this.children_.length != 0;\n};\n\n/**\n * Returns the number of children of this component.\n * @return {number} The number of children.\n * @protected\n */\nBlockly.Component.prototype.getChildCount = function() {\n  return this.children_.length;\n};\n\n/**\n * Returns the child with the given ID, or null if no such child exists.\n * @param {string} id Child component ID.\n * @return {?Blockly.Component} The child with the given ID; null if none.\n * @protected\n */\nBlockly.Component.prototype.getChild = function(id) {\n  // Use childIndex_ for O(1) access by ID.\n  return id ?\n      /** @type {Blockly.Component} */ (this.childIndex_[id]) || null : null;\n};\n\n/**\n * Returns the child at the given index, or null if the index is out of bounds.\n * @param {number} index 0-based index.\n * @return {?Blockly.Component} The child at the given index; null if none.\n * @protected\n */\nBlockly.Component.prototype.getChildAt = function(index) {\n  // Use children_ for access by index.\n  return this.children_[index] || null;\n};\n\n/**\n * Calls the given function on each of this component's children in order.  If\n * `opt_obj` is provided, it will be used as the 'this' object in the\n * function when called.  The function should take two arguments:  the child\n * component and its 0-based index.  The return value is ignored.\n * @param {function(this:T,?,number):?} f The function to call for every\n * child component; should take 2 arguments (the child and its index).\n * @param {T=} opt_obj Used as the 'this' object in f when called.\n * @template T\n * @protected\n */\nBlockly.Component.prototype.forEachChild = function(f, opt_obj) {\n  for (var i = 0; i < this.children_.length; i++) {\n    f.call(/** @type {?} */ (opt_obj), this.children_[i], i);\n  }\n};\n"],"file":"component.min.js"}