{"version":3,"sources":["../../../src/blockly/core/variables.js"],"names":["goog","provide","require","Blockly","Variables","NAME_TYPE","VARIABLE_CATEGORY_NAME","allUsedVarModels","ws","blocks","getAllBlocks","variableHash","Object","create","i","blockVariables","length","getVarModels","j","variable","id","getId","variableList","push","allUsedVariables","console","warn","ALL_DEVELOPER_VARS_WARNINGS_BY_BLOCK_TYPE_","allDeveloperVariables","workspace","block","getDeveloperVariables","getDeveloperVars","type","devVars","keys","flyoutCategory","xmlList","button","document","createElement","setAttribute","registerButtonCallback","createVariableButtonHandler","getTargetWorkspace","blockList","flyoutCategoryBlocks","concat","variableModelList","getVariablesOfType","mostRecentVariable","Blocks","utils","xml","appendChild","generateVariableFieldDom","value","Xml","textToDom","sort","VariableModel","compareByName","VAR_LETTER_OPTIONS","generateUniqueName","generateUniqueNameFromOptions","charAt","getAllVariableNames","startChar","usedNames","letters","suffix","letterIndex","indexOf","potName","inUse","toLowerCase","opt_callback","opt_type","promptAndCheckWithAlert","defaultName","promptName","Msg","text","existing","nameUsedWithAnyType","msg","replace","name","alert","createVariable","renameVariable","promptText","newName","nameUsedWithOtherType_","renameVariableById","defaultText","callback","prompt","newVar","trim","allVariables","getVariableMap","getAllVariables","variableModel","field","createTextNode","getOrCreateVariablePackage","opt_name","getVariable","createVariable_","potentialVariableMap","getPotentialVariableMap","getVariableById","Error","isFlyout","targetWorkspace","getAddedVariables","originalVariables","allCurrentVariables","addedVariables"],"mappings":"AAUA,aAMAA,IAAI,CAACC,OAAL,CAAa,mBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,aAAb,EACAF,IAAI,CAACE,OAAL,CAAa,eAAb,EACAF,IAAI,CAACE,OAAL,CAAa,mBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,uBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,aAAb,EAQAC,OAAO,CAACC,SAAR,CAAkBC,SAAlB,CAA8BF,OAAO,CAACG,sBAAtC,CAUAH,OAAO,CAACC,SAAR,CAAkBG,gBAAlB,CAAqC,SAASC,CAAT,CAAa,CAIhD,OAHIC,CAAAA,CAAM,CAAGD,CAAE,CAACE,YAAH,IAGb,CAFIC,CAAY,CAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAEnB,CAASC,CAAC,CAAG,CAAb,CACMC,CADN,CAAgBD,CAAC,CAAGL,CAAM,CAACO,MAA3B,CAAmCF,CAAC,EAApC,CAAwC,CAClCC,CADkC,CACjBN,CAAM,CAACK,CAAD,CAAN,CAAUG,YAAV,EADiB,CAEtC,GAAIF,CAAJ,CAAoB,CAClB,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,CAAc,CAACC,MAAnC,CAA2CE,CAAC,EAA5C,CAAgD,IAC1CC,CAAAA,CAAQ,CAAGJ,CAAc,CAACG,CAAD,CADiB,CAE1CE,CAAE,CAAGD,CAAQ,CAACE,KAAT,EAFqC,CAG9C,GAAID,CAAJ,CAAQ,CACNT,CAAY,CAACS,CAAD,CAAZ,CAAmBD,CACpB,CACF,CACF,CACF,CAED,GAAIG,CAAAA,CAAY,CAAG,EAAnB,CACA,IAAK,GAAIF,CAAAA,CAAT,GAAeT,CAAAA,CAAf,CAA6B,CAC3BW,CAAY,CAACC,IAAb,CAAkBZ,CAAY,CAACS,CAAD,CAA9B,CACD,CACD,MAAOE,CAAAA,CACR,CAtBD,CAgCAnB,OAAO,CAACC,SAAR,CAAkBoB,gBAAlB,CAAqC,UAAW,CAC9CC,OAAO,CAACC,IAAR,iKAGD,CAJD,CAUAvB,OAAO,CAACC,SAAR,CAAkBuB,0CAAlB,CAA+D,EAA/D,CAYAxB,OAAO,CAACC,SAAR,CAAkBwB,qBAAlB,CAA0C,SAASC,CAAT,CAAoB,CAG5D,OAFIpB,CAAAA,CAAM,CAAGoB,CAAS,CAACnB,YAAV,IAEb,CADIC,CAAY,CAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CACnB,CAASC,CAAC,CAAG,CAAb,CAAgBgB,CAAhB,CACMC,CADN,CAAwBD,CAAK,CAAGrB,CAAM,CAACK,CAAD,CAAtC,CAA4CA,CAAC,EAA7C,CAAiD,CAC3CiB,CAD2C,CACnBD,CAAK,CAACC,qBADa,CAE/C,GAAI,CAACA,CAAD,EAA0BD,CAAK,CAACE,gBAApC,CAAsD,CAGpDD,CAAqB,CAAGD,CAAK,CAACE,gBAA9B,CACA,GAAI,CAAC7B,OAAO,CAACC,SAAR,CAAkBuB,0CAAlB,CACDG,CAAK,CAACG,IADL,CAAL,CACiB,CACfR,OAAO,CAACC,IAAR,CAAa,oFACkCI,CAAK,CAACG,IADxC,CAC+C,IAD5D,EAEA9B,OAAO,CAACC,SAAR,CAAkBuB,0CAAlB,CACIG,CAAK,CAACG,IADV,IAED,CACF,CACD,GAAIF,CAAJ,CAA2B,CAEzB,OADIG,CAAAA,CAAO,CAAGH,CAAqB,EACnC,CAASb,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGgB,CAAO,CAAClB,MAA5B,CAAoCE,CAAC,EAArC,CAAyC,CACvCP,CAAY,CAACuB,CAAO,CAAChB,CAAD,CAAR,CAAZ,GACD,CACF,CACF,CAGD,MAAON,CAAAA,MAAM,CAACuB,IAAP,CAAYxB,CAAZ,CACR,CA3BD,CAmCAR,OAAO,CAACC,SAAR,CAAkBgC,cAAlB,CAAmC,SAASP,CAAT,CAAoB,IACjDQ,CAAAA,CAAO,CAAG,EADuC,CAEjDC,CAAM,CAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAFwC,CAGrDF,CAAM,CAACG,YAAP,CAAoB,MAApB,CAA4B,qBAA5B,EACAH,CAAM,CAACG,YAAP,CAAoB,aAApB,CAAmC,iBAAnC,EAEAZ,CAAS,CAACa,sBAAV,CAAiC,iBAAjC,CAAoD,SAASJ,CAAT,CAAiB,CACnEnC,OAAO,CAACC,SAAR,CAAkBuC,2BAAlB,CAA8CL,CAAM,CAACM,kBAAP,EAA9C,CACD,CAFD,EAIAP,CAAO,CAACd,IAAR,CAAae,CAAb,EAEA,GAAIO,CAAAA,CAAS,CAAG1C,OAAO,CAACC,SAAR,CAAkB0C,oBAAlB,CAAuCjB,CAAvC,CAAhB,CACAQ,CAAO,CAAGA,CAAO,CAACU,MAAR,CAAeF,CAAf,CAAV,CACA,MAAOR,CAAAA,CACR,CAfD,CAsBAlC,OAAO,CAACC,SAAR,CAAkB0C,oBAAlB,CAAyC,SAASjB,CAAT,CAAoB,IACvDmB,CAAAA,CAAiB,CAAGnB,CAAS,CAACoB,kBAAV,CAA6B,EAA7B,CADmC,CAGvDZ,CAAO,CAAG,EAH6C,CAI3D,GAA+B,CAA3B,CAAAW,CAAiB,CAAChC,MAAtB,CAAkC,CAEhC,GAAIkC,CAAAA,CAAkB,CAAGF,CAAiB,CAACA,CAAiB,CAAChC,MAAlB,CAA2B,CAA5B,CAA1C,CACA,GAAIb,OAAO,CAACgD,MAAR,cAAJ,CAAqC,CACnC,GAAIrB,CAAAA,CAAK,CAAG3B,OAAO,CAACiD,KAAR,CAAcC,GAAd,CAAkBb,aAAlB,CAAgC,OAAhC,CAAZ,CACAV,CAAK,CAACW,YAAN,CAAmB,MAAnB,CAA2B,eAA3B,EACAX,CAAK,CAACW,YAAN,CAAmB,KAAnB,CAA0BtC,OAAO,CAACgD,MAAR,aAAgC,CAAhC,CAAoC,EAA9D,EACArB,CAAK,CAACwB,WAAN,CACInD,OAAO,CAACC,SAAR,CAAkBmD,wBAAlB,CAA2CL,CAA3C,CADJ,EAEAb,CAAO,CAACd,IAAR,CAAaO,CAAb,CACD,CACD,GAAI3B,OAAO,CAACgD,MAAR,YAAJ,CAAmC,CACjC,GAAIrB,CAAAA,CAAK,CAAG3B,OAAO,CAACiD,KAAR,CAAcC,GAAd,CAAkBb,aAAlB,CAAgC,OAAhC,CAAZ,CACAV,CAAK,CAACW,YAAN,CAAmB,MAAnB,CAA2B,aAA3B,EACAX,CAAK,CAACW,YAAN,CAAmB,KAAnB,CAA0BtC,OAAO,CAACgD,MAAR,eAAkC,EAAlC,CAAuC,CAAjE,EACArB,CAAK,CAACwB,WAAN,CACInD,OAAO,CAACC,SAAR,CAAkBmD,wBAAlB,CAA2CL,CAA3C,CADJ,EAEA,GAAIM,CAAAA,CAAK,CAAGrD,OAAO,CAACsD,GAAR,CAAYC,SAAZ,qGAAZ,CAMA5B,CAAK,CAACwB,WAAN,CAAkBE,CAAlB,EACAnB,CAAO,CAACd,IAAR,CAAaO,CAAb,CACD,CAED,GAAI3B,OAAO,CAACgD,MAAR,cAAJ,CAAqC,CACnCH,CAAiB,CAACW,IAAlB,CAAuBxD,OAAO,CAACyD,aAAR,CAAsBC,aAA7C,EACA,IAAK,GAAI/C,CAAAA,CAAC,CAAG,CAAR,CAAWK,CAAX,CACCW,CADN,CAA2BX,CAAQ,CAAG6B,CAAiB,CAAClC,CAAD,CAAvD,CAA6DA,CAAC,EAA9D,CAAkE,CAC5DgB,CAD4D,CACpD3B,OAAO,CAACiD,KAAR,CAAcC,GAAd,CAAkBb,aAAlB,CAAgC,OAAhC,CADoD,CAEhEV,CAAK,CAACW,YAAN,CAAmB,MAAnB,CAA2B,eAA3B,EACAX,CAAK,CAACW,YAAN,CAAmB,KAAnB,CAA0B,CAA1B,EACAX,CAAK,CAACwB,WAAN,CAAkBnD,OAAO,CAACC,SAAR,CAAkBmD,wBAAlB,CAA2CpC,CAA3C,CAAlB,EACAkB,CAAO,CAACd,IAAR,CAAaO,CAAb,CACD,CACF,CACF,CACD,MAAOO,CAAAA,CACR,CA3CD,CA6CAlC,OAAO,CAACC,SAAR,CAAkB0D,kBAAlB,CAAuC,2BAAvC,CAUA3D,OAAO,CAACC,SAAR,CAAkB2D,kBAAlB,CAAuC,SAASlC,CAAT,CAAoB,CACzD,MAAO1B,CAAAA,OAAO,CAACC,SAAR,CAAkB4D,6BAAlB,CACH7D,OAAO,CAACC,SAAR,CAAkB0D,kBAAlB,CAAqCG,MAArC,CAA4C,CAA5C,CADG,CAEHpC,CAAS,CAACqC,mBAAV,EAFG,CAIR,CALD,CAeA/D,OAAO,CAACC,SAAR,CAAkB4D,6BAAlB,CAAkD,SAASG,CAAT,CAAoBC,CAApB,CAA+B,CAC/E,GAAI,CAACA,CAAS,CAACpD,MAAf,CAAuB,CACrB,MAAOmD,CAAAA,CACR,CAH8E,GAK3EE,CAAAA,CAAO,CAAGlE,OAAO,CAACC,SAAR,CAAkB0D,kBAL+C,CAM3EQ,CAAM,CAAG,EANkE,CAO3EC,CAAW,CAAGF,CAAO,CAACG,OAAR,CAAgBL,CAAhB,CAP6D,CAQ3EM,CAAO,CAAGN,CARiE,CAW/E,SAAa,CAEX,OADIO,CAAAA,CAAK,GACT,CAAS5D,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGsD,CAAS,CAACpD,MAA9B,CAAsCF,CAAC,EAAvC,CAA2C,CACzC,GAAIsD,CAAS,CAACtD,CAAD,CAAT,CAAa6D,WAAb,IAA8BF,CAAlC,CAA2C,CACzCC,CAAK,GAAL,CACA,KACD,CACF,CACD,GAAI,CAACA,CAAL,CAAY,CACV,MAAOD,CAAAA,CACR,CAEDF,CAAW,GACX,GAAIA,CAAW,EAAIF,CAAO,CAACrD,MAA3B,CAAmC,CAEjCuD,CAAW,CAAG,CAAd,CACAD,CAAM,CAAG,CAAOA,CAAP,CAAiB,CAC3B,CACDG,CAAO,CAAGJ,CAAO,CAACJ,MAAR,CAAeM,CAAf,EAA8BD,CACzC,CACF,CA/BD,CAkDAnE,OAAO,CAACC,SAAR,CAAkBuC,2BAAlB,CAAgD,SAC5Cd,CAD4C,CACjC+C,CADiC,CACnBC,CADmB,CACT,IACjC5C,CAAAA,CAAI,CAAG4C,CAAQ,EAAI,EADc,CAGjCC,CAAuB,CAAG,SAASC,CAAT,CAAsB,CAClD5E,OAAO,CAACC,SAAR,CAAkB4E,UAAlB,CAA6B7E,OAAO,CAAC8E,GAAR,mBAA7B,CAAgEF,CAAhE,CACI,SAASG,CAAT,CAAe,CACb,GAAIA,CAAJ,CAAU,CACR,GAAIC,CAAAA,CAAQ,CACRhF,OAAO,CAACC,SAAR,CAAkBgF,mBAAlB,CAAsCF,CAAtC,CAA4CrD,CAA5C,CADJ,CAEA,GAAIsD,CAAJ,CAAc,CACZ,GAAIA,CAAQ,CAAClD,IAAT,EAAiBA,CAArB,CAA2B,CACzB,GAAIoD,CAAAA,CAAG,CAAGlF,OAAO,CAAC8E,GAAR,yBAAuCK,OAAvC,CACN,IADM,CACAH,CAAQ,CAACI,IADT,CAEX,CAHD,IAGO,CACL,GAAIF,CAAAA,CAAG,CACHlF,OAAO,CAAC8E,GAAR,yCADJ,CAEAI,CAAG,CAAGA,CAAG,CAACC,OAAJ,CAAY,IAAZ,CAAkBH,CAAQ,CAACI,IAA3B,EAAiCD,OAAjC,CAAyC,IAAzC,CAA+CH,CAAQ,CAAClD,IAAxD,CACP,CACD9B,OAAO,CAACqF,KAAR,CAAcH,CAAd,CACI,UAAW,CACTP,CAAuB,CAACI,CAAD,CACxB,CAHL,CAID,CAbD,IAaO,CAELrD,CAAS,CAAC4D,cAAV,CAAyBP,CAAzB,CAA+BjD,CAA/B,EACA,GAAI2C,CAAJ,CAAkB,CAChBA,CAAY,CAACM,CAAD,CACb,CACF,CACF,CAvBD,IAuBO,CAEL,GAAIN,CAAJ,CAAkB,CAChBA,CAAY,CAAC,IAAD,CACb,CACF,CACF,CA/BL,CAgCD,CApCoC,CAqCrCE,CAAuB,CAAC,EAAD,CACxB,CAvCD,CAqDA3E,OAAO,CAACC,SAAR,CAAkBqF,cAAlB,CACItF,OAAO,CAACC,SAAR,CAAkBuC,2BADtB,CAcAxC,OAAO,CAACC,SAAR,CAAkBsF,cAAlB,CAAmC,SAAS7D,CAAT,CAAoBV,CAApB,CAC/ByD,CAD+B,CACjB,CAEhB,GAAIE,CAAAA,CAAuB,CAAG,SAASC,CAAT,CAAsB,CAClD,GAAIY,CAAAA,CAAU,CACVxF,OAAO,CAAC8E,GAAR,uBAAqCK,OAArC,CAA6C,IAA7C,CAAmDnE,CAAQ,CAACoE,IAA5D,CADJ,CAEApF,OAAO,CAACC,SAAR,CAAkB4E,UAAlB,CAA6BW,CAA7B,CAAyCZ,CAAzC,CACI,SAASa,CAAT,CAAkB,CAChB,GAAIA,CAAJ,CAAa,CACX,GAAIT,CAAAA,CAAQ,CAAGhF,OAAO,CAACC,SAAR,CAAkByF,sBAAlB,CAAyCD,CAAzC,CACXzE,CAAQ,CAACc,IADE,CACIJ,CADJ,CAAf,CAEA,GAAIsD,CAAJ,CAAc,CACZ,GAAIE,CAAAA,CAAG,CAAGlF,OAAO,CAAC8E,GAAR,0CACLK,OADK,CACG,IADH,CACSH,CAAQ,CAACI,IADlB,EAELD,OAFK,CAEG,IAFH,CAESH,CAAQ,CAAClD,IAFlB,CAAV,CAGA9B,OAAO,CAACqF,KAAR,CAAcH,CAAd,CACI,UAAW,CACTP,CAAuB,CAACc,CAAD,CACxB,CAHL,CAID,CARD,IAQO,CACL/D,CAAS,CAACiE,kBAAV,CAA6B3E,CAAQ,CAACE,KAAT,EAA7B,CAA+CuE,CAA/C,EACA,GAAIhB,CAAJ,CAAkB,CAChBA,CAAY,CAACgB,CAAD,CACb,CACF,CACF,CAjBD,IAiBO,CAEL,GAAIhB,CAAJ,CAAkB,CAChBA,CAAY,CAAC,IAAD,CACb,CACF,CACF,CAzBL,CA0BD,CA7BD,CA8BAE,CAAuB,CAAC,EAAD,CACxB,CAlCD,CA2CA3E,OAAO,CAACC,SAAR,CAAkB4E,UAAlB,CAA+B,SAASW,CAAT,CAAqBI,CAArB,CAAkCC,CAAlC,CAA4C,CACzE7F,OAAO,CAAC8F,MAAR,CAAeN,CAAf,CAA2BI,CAA3B,CAAwC,SAASG,CAAT,CAAiB,CAGvD,GAAIA,CAAJ,CAAY,CACVA,CAAM,CAAGA,CAAM,CAACZ,OAAP,CAAe,YAAf,CAA6B,GAA7B,EAAkCa,IAAlC,EAAT,CACA,GAAID,CAAM,EAAI/F,OAAO,CAAC8E,GAAR,gBAAV,EACAiB,CAAM,EAAI/F,OAAO,CAAC8E,GAAR,aADd,CAC2C,CAEzCiB,CAAM,CAAG,IACV,CACF,CACDF,CAAQ,CAACE,CAAD,CACT,CAZD,CAaD,CAdD,CA2BA/F,OAAO,CAACC,SAAR,CAAkByF,sBAAlB,CAA2C,SAASN,CAAT,CAAetD,CAAf,CAAqBJ,CAArB,CAAgC,CACzE,GAAIuE,CAAAA,CAAY,CAAGvE,CAAS,CAACwE,cAAV,GAA2BC,eAA3B,EAAnB,CAEAf,CAAI,CAAGA,CAAI,CAACZ,WAAL,EAAP,CACA,IAAK,GAAI7D,CAAAA,CAAC,CAAG,CAAR,CAAWK,CAAhB,CAA2BA,CAAQ,CAAGiF,CAAY,CAACtF,CAAD,CAAlD,CAAwDA,CAAC,EAAzD,CAA6D,CAC3D,GAAIK,CAAQ,CAACoE,IAAT,CAAcZ,WAAd,IAA+BY,CAA/B,EAAuCpE,CAAQ,CAACc,IAAT,EAAiBA,CAA5D,CAAkE,CAChE,MAAOd,CAAAA,CACR,CACF,CACD,MAAO,KACR,CAVD,CAoBAhB,OAAO,CAACC,SAAR,CAAkBgF,mBAAlB,CAAwC,SAASG,CAAT,CAAe1D,CAAf,CAA0B,CAChE,GAAIuE,CAAAA,CAAY,CAAGvE,CAAS,CAACwE,cAAV,GAA2BC,eAA3B,EAAnB,CAEAf,CAAI,CAAGA,CAAI,CAACZ,WAAL,EAAP,CACA,IAAK,GAAI7D,CAAAA,CAAC,CAAG,CAAR,CAAWK,CAAhB,CAA2BA,CAAQ,CAAGiF,CAAY,CAACtF,CAAD,CAAlD,CAAwDA,CAAC,EAAzD,CAA6D,CAC3D,GAAIK,CAAQ,CAACoE,IAAT,CAAcZ,WAAd,IAA+BY,CAAnC,CAAyC,CACvC,MAAOpE,CAAAA,CACR,CACF,CACD,MAAO,KACR,CAVD,CAmBAhB,OAAO,CAACC,SAAR,CAAkBmD,wBAAlB,CAA6C,SAASgD,CAAT,CAAwB,CAInE,GAAIC,CAAAA,CAAK,CAAGrG,OAAO,CAACiD,KAAR,CAAcC,GAAd,CAAkBb,aAAlB,CAAgC,OAAhC,CAAZ,CACAgE,CAAK,CAAC/D,YAAN,CAAmB,MAAnB,CAA2B,KAA3B,EACA+D,CAAK,CAAC/D,YAAN,CAAmB,IAAnB,CAAyB8D,CAAa,CAAClF,KAAd,EAAzB,EACAmF,CAAK,CAAC/D,YAAN,CAAmB,cAAnB,CAAmC8D,CAAa,CAACtE,IAAjD,EACA,GAAIsD,CAAAA,CAAI,CAAGpF,OAAO,CAACiD,KAAR,CAAcC,GAAd,CAAkBoD,cAAlB,CAAiCF,CAAa,CAAChB,IAA/C,CAAX,CACAiB,CAAK,CAAClD,WAAN,CAAkBiC,CAAlB,EACA,MAAOiB,CAAAA,CACR,CAXD,CAyBArG,OAAO,CAACC,SAAR,CAAkBsG,0BAAlB,CAA+C,SAAS7E,CAAT,CAAoBT,CAApB,CAAwBuF,CAAxB,CAC3C9B,CAD2C,CACjC,CACZ,GAAI1D,CAAAA,CAAQ,CAAGhB,OAAO,CAACC,SAAR,CAAkBwG,WAAlB,CAA8B/E,CAA9B,CAAyCT,CAAzC,CAA6CuF,CAA7C,CACX9B,CADW,CAAf,CAEA,GAAI,CAAC1D,CAAL,CAAe,CACbA,CAAQ,CAAGhB,OAAO,CAACC,SAAR,CAAkByG,eAAlB,CAAkChF,CAAlC,CAA6CT,CAA7C,CAAiDuF,CAAjD,CACP9B,CADO,CAEZ,CACD,MAAO1D,CAAAA,CACR,CATD,CA0BAhB,OAAO,CAACC,SAAR,CAAkBwG,WAAlB,CAAgC,SAAS/E,CAAT,CAAoBT,CAApB,CAAwBuF,CAAxB,CAAkC9B,CAAlC,CAA4C,IACtEiC,CAAAA,CAAoB,CAAGjF,CAAS,CAACkF,uBAAV,EAD+C,CAEtE5F,CAAQ,CAAG,IAF2D,CAI1E,GAAIC,CAAJ,CAAQ,CAEND,CAAQ,CAAGU,CAAS,CAACmF,eAAV,CAA0B5F,CAA1B,CAAX,CACA,GAAI,CAACD,CAAD,EAAa2F,CAAjB,CAAuC,CACrC3F,CAAQ,CAAG2F,CAAoB,CAACE,eAArB,CAAqC5F,CAArC,CACZ,CACD,GAAID,CAAJ,CAAc,CACZ,MAAOA,CAAAA,CACR,CACF,CAGD,GAAIwF,CAAJ,CAAc,CACZ,GAAI9B,CAAQ,QAAZ,CAA2B,CACzB,KAAMoC,CAAAA,KAAK,CAAC,oDAAD,CACZ,CAED9F,CAAQ,CAAGU,CAAS,CAAC+E,WAAV,CAAsBD,CAAtB,CAAgC9B,CAAhC,CAAX,CACA,GAAI,CAAC1D,CAAD,EAAa2F,CAAjB,CAAuC,CACrC3F,CAAQ,CAAG2F,CAAoB,CAACF,WAArB,CAAiCD,CAAjC,CAA2C9B,CAA3C,CACZ,CACF,CACD,MAAO1D,CAAAA,CACR,CA3BD,CAwCAhB,OAAO,CAACC,SAAR,CAAkByG,eAAlB,CAAoC,SAAShF,CAAT,CAAoBT,CAApB,CAAwBuF,CAAxB,CAChC9B,CADgC,CACtB,CACZ,GAAIiC,CAAAA,CAAoB,CAAGjF,CAAS,CAACkF,uBAAV,EAA3B,CAEA,GAAI,CAACJ,CAAL,CAAe,CACb,GAAInG,CAAAA,CAAE,CAAGqB,CAAS,CAACqF,QAAV,CAAqBrF,CAAS,CAACsF,eAA/B,CAAiDtF,CAA1D,CACA8E,CAAQ,CAAGxG,OAAO,CAACC,SAAR,CAAkB2D,kBAAlB,CAAqCvD,CAArC,CACZ,CAGD,GAAIW,CAAAA,CAAQ,CAAG,IAAf,CACA,GAAI2F,CAAJ,CAA0B,CACxB3F,CAAQ,CAAG2F,CAAoB,CAACrB,cAArB,CAAoCkB,CAApC,CAA8C9B,CAA9C,CAAwDzD,CAAxD,CACZ,CAFD,IAEO,CACLD,CAAQ,CAAGU,CAAS,CAAC4D,cAAV,CAAyBkB,CAAzB,CAAmC9B,CAAnC,CAA6CzD,CAA7C,CACZ,CACD,MAAOD,CAAAA,CACR,CAjBD,CA+BAhB,OAAO,CAACC,SAAR,CAAkBgH,iBAAlB,CAAsC,SAASvF,CAAT,CAAoBwF,CAApB,CAAuC,IACvEC,CAAAA,CAAmB,CAAGzF,CAAS,CAACyE,eAAV,EADiD,CAEvEiB,CAAc,CAAG,EAFsD,CAG3E,GAAIF,CAAiB,CAACrG,MAAlB,EAA4BsG,CAAmB,CAACtG,MAApD,CAA4D,CAC1D,IAAK,GAAIF,CAAAA,CAAC,CAAG,CAAR,CACCK,CADN,CAAgBL,CAAC,CAAGwG,CAAmB,CAACtG,MAAxC,CAAgDF,CAAC,EAAjD,CAAqD,CAC/CK,CAD+C,CACpCmG,CAAmB,CAACxG,CAAD,CADiB,CAInD,GAA2C,CAAC,CAAxC,EAAAuG,CAAiB,CAAC7C,OAAlB,CAA0BrD,CAA1B,CAAJ,CAA+C,CAC7CoG,CAAc,CAAChG,IAAf,CAAoBJ,CAApB,CACD,CACF,CACF,CACD,MAAOoG,CAAAA,CACR,CAdD","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility functions for handling variables.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\n/**\n * @name Blockly.Variables\n * @namespace\n */\ngoog.provide('Blockly.Variables');\n\ngoog.require('Blockly.Blocks');\ngoog.require('Blockly.Msg');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.xml');\ngoog.require('Blockly.VariableModel');\ngoog.require('Blockly.Xml');\n\n\n/**\n * Constant to separate variable names from procedures and generated functions\n * when running generators.\n * @deprecated Use Blockly.VARIABLE_CATEGORY_NAME\n */\nBlockly.Variables.NAME_TYPE = Blockly.VARIABLE_CATEGORY_NAME;\n\n/**\n * Find all user-created variables that are in use in the workspace.\n * For use by generators.\n * To get a list of all variables on a workspace, including unused variables,\n * call Workspace.getAllVariables.\n * @param {!Blockly.Workspace} ws The workspace to search for variables.\n * @return {!Array.<!Blockly.VariableModel>} Array of variable models.\n */\nBlockly.Variables.allUsedVarModels = function(ws) {\n  var blocks = ws.getAllBlocks(false);\n  var variableHash = Object.create(null);\n  // Iterate through every block and add each variable to the hash.\n  for (var i = 0; i < blocks.length; i++) {\n    var blockVariables = blocks[i].getVarModels();\n    if (blockVariables) {\n      for (var j = 0; j < blockVariables.length; j++) {\n        var variable = blockVariables[j];\n        var id = variable.getId();\n        if (id) {\n          variableHash[id] = variable;\n        }\n      }\n    }\n  }\n  // Flatten the hash into a list.\n  var variableList = [];\n  for (var id in variableHash) {\n    variableList.push(variableHash[id]);\n  }\n  return variableList;\n};\n\n/**\n * Find all user-created variables that are in use in the workspace and return\n * only their names.\n * For use by generators.\n * To get a list of all variables on a workspace, including unused variables,\n * call Workspace.getAllVariables.\n * @deprecated January 2018\n */\nBlockly.Variables.allUsedVariables = function() {\n  console.warn('Deprecated call to Blockly.Variables.allUsedVariables. ' +\n      'Use Blockly.Variables.allUsedVarModels instead.\\nIf this is a major ' +\n      'issue please file a bug on GitHub.');\n};\n\n/**\n * @private\n * @type {Object<string,boolean>}\n */\nBlockly.Variables.ALL_DEVELOPER_VARS_WARNINGS_BY_BLOCK_TYPE_ = {};\n\n/**\n * Find all developer variables used by blocks in the workspace.\n * Developer variables are never shown to the user, but are declared as global\n * variables in the generated code.\n * To declare developer variables, define the getDeveloperVariables function on\n * your block and return a list of variable names.\n * For use by generators.\n * @param {!Blockly.Workspace} workspace The workspace to search.\n * @return {!Array.<string>} A list of non-duplicated variable names.\n */\nBlockly.Variables.allDeveloperVariables = function(workspace) {\n  var blocks = workspace.getAllBlocks(false);\n  var variableHash = Object.create(null);\n  for (var i = 0, block; (block = blocks[i]); i++) {\n    var getDeveloperVariables = block.getDeveloperVariables;\n    if (!getDeveloperVariables && block.getDeveloperVars) {\n      // August 2018: getDeveloperVars() was deprecated and renamed\n      // getDeveloperVariables().\n      getDeveloperVariables = block.getDeveloperVars;\n      if (!Blockly.Variables.ALL_DEVELOPER_VARS_WARNINGS_BY_BLOCK_TYPE_[\n          block.type]) {\n        console.warn('Function getDeveloperVars() deprecated. Use ' +\n            'getDeveloperVariables() (block type \\'' + block.type + '\\')');\n        Blockly.Variables.ALL_DEVELOPER_VARS_WARNINGS_BY_BLOCK_TYPE_[\n            block.type] = true;\n      }\n    }\n    if (getDeveloperVariables) {\n      var devVars = getDeveloperVariables();\n      for (var j = 0; j < devVars.length; j++) {\n        variableHash[devVars[j]] = true;\n      }\n    }\n  }\n\n  // Flatten the hash into a list.\n  return Object.keys(variableHash);\n};\n\n/**\n * Construct the elements (blocks and button) required by the flyout for the\n * variable category.\n * @param {!Blockly.Workspace} workspace The workspace containing variables.\n * @return {!Array.<!Element>} Array of XML elements.\n */\nBlockly.Variables.flyoutCategory = function(workspace) {\n  var xmlList = [];\n  var button = document.createElement('button');\n  button.setAttribute('text', '%{BKY_NEW_VARIABLE}');\n  button.setAttribute('callbackKey', 'CREATE_VARIABLE');\n\n  workspace.registerButtonCallback('CREATE_VARIABLE', function(button) {\n    Blockly.Variables.createVariableButtonHandler(button.getTargetWorkspace());\n  });\n\n  xmlList.push(button);\n\n  var blockList = Blockly.Variables.flyoutCategoryBlocks(workspace);\n  xmlList = xmlList.concat(blockList);\n  return xmlList;\n};\n\n/**\n * Construct the blocks required by the flyout for the variable category.\n * @param {!Blockly.Workspace} workspace The workspace containing variables.\n * @return {!Array.<!Element>} Array of XML block elements.\n */\nBlockly.Variables.flyoutCategoryBlocks = function(workspace) {\n  var variableModelList = workspace.getVariablesOfType('');\n\n  var xmlList = [];\n  if (variableModelList.length > 0) {\n    // New variables are added to the end of the variableModelList.\n    var mostRecentVariable = variableModelList[variableModelList.length - 1];\n    if (Blockly.Blocks['variables_set']) {\n      var block = Blockly.utils.xml.createElement('block');\n      block.setAttribute('type', 'variables_set');\n      block.setAttribute('gap', Blockly.Blocks['math_change'] ? 8 : 24);\n      block.appendChild(\n          Blockly.Variables.generateVariableFieldDom(mostRecentVariable));\n      xmlList.push(block);\n    }\n    if (Blockly.Blocks['math_change']) {\n      var block = Blockly.utils.xml.createElement('block');\n      block.setAttribute('type', 'math_change');\n      block.setAttribute('gap', Blockly.Blocks['variables_get'] ? 20 : 8);\n      block.appendChild(\n          Blockly.Variables.generateVariableFieldDom(mostRecentVariable));\n      var value = Blockly.Xml.textToDom(\n          '<value name=\"DELTA\">' +\n          '<shadow type=\"math_number\">' +\n          '<field name=\"NUM\">1</field>' +\n          '</shadow>' +\n          '</value>');\n      block.appendChild(value);\n      xmlList.push(block);\n    }\n\n    if (Blockly.Blocks['variables_get']) {\n      variableModelList.sort(Blockly.VariableModel.compareByName);\n      for (var i = 0, variable; (variable = variableModelList[i]); i++) {\n        var block = Blockly.utils.xml.createElement('block');\n        block.setAttribute('type', 'variables_get');\n        block.setAttribute('gap', 8);\n        block.appendChild(Blockly.Variables.generateVariableFieldDom(variable));\n        xmlList.push(block);\n      }\n    }\n  }\n  return xmlList;\n};\n\nBlockly.Variables.VAR_LETTER_OPTIONS = 'ijkmnopqrstuvwxyzabcdefgh';  // No 'l'.\n\n/**\n * Return a new variable name that is not yet being used. This will try to\n * generate single letter variable names in the range 'i' to 'z' to start with.\n * If no unique name is located it will try 'i' to 'z', 'a' to 'h',\n * then 'i2' to 'z2' etc.  Skip 'l'.\n * @param {!Blockly.Workspace} workspace The workspace to be unique in.\n * @return {string} New variable name.\n */\nBlockly.Variables.generateUniqueName = function(workspace) {\n  return Blockly.Variables.generateUniqueNameFromOptions(\n      Blockly.Variables.VAR_LETTER_OPTIONS.charAt(0),\n      workspace.getAllVariableNames()\n  );\n};\n\n/**\n * Returns a unique name that is not present in the usedNames array. This\n * will try to generate single letter names in the range a -> z (skip l). It\n * will start with the character passed to startChar.\n * @param {string} startChar The character to start the search at.\n * @param {!Array.<string>} usedNames A list of all of the used names.\n * @return {string} A unique name that is not present in the usedNames array.\n */\nBlockly.Variables.generateUniqueNameFromOptions = function(startChar, usedNames) {\n  if (!usedNames.length) {\n    return startChar;\n  }\n\n  var letters = Blockly.Variables.VAR_LETTER_OPTIONS;\n  var suffix = '';\n  var letterIndex = letters.indexOf(startChar);\n  var potName = startChar;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    var inUse = false;\n    for (var i = 0; i < usedNames.length; i++) {\n      if (usedNames[i].toLowerCase() == potName) {\n        inUse = true;\n        break;\n      }\n    }\n    if (!inUse) {\n      return potName;\n    }\n\n    letterIndex++;\n    if (letterIndex == letters.length) {\n      // Reached the end of the character sequence so back to 'i'.\n      letterIndex = 0;\n      suffix = Number(suffix) + 1;\n    }\n    potName = letters.charAt(letterIndex) + suffix;\n  }\n};\n\n/**\n * Handles \"Create Variable\" button in the default variables toolbox category.\n * It will prompt the user for a variable name, including re-prompts if a name\n * is already in use among the workspace's variables.\n *\n * Custom button handlers can delegate to this function, allowing variables\n * types and after-creation processing. More complex customization (e.g.,\n * prompting for variable type) is beyond the scope of this function.\n *\n * @param {!Blockly.Workspace} workspace The workspace on which to create the\n *     variable.\n * @param {function(?string=)=} opt_callback A callback. It will be passed an\n *     acceptable new variable name, or null if change is to be aborted (cancel\n *     button), or undefined if an existing variable was chosen.\n * @param {string=} opt_type The type of the variable like 'int', 'string', or\n *     ''. This will default to '', which is a specific type.\n */\nBlockly.Variables.createVariableButtonHandler = function(\n    workspace, opt_callback, opt_type) {\n  var type = opt_type || '';\n  // This function needs to be named so it can be called recursively.\n  var promptAndCheckWithAlert = function(defaultName) {\n    Blockly.Variables.promptName(Blockly.Msg['NEW_VARIABLE_TITLE'], defaultName,\n        function(text) {\n          if (text) {\n            var existing =\n                Blockly.Variables.nameUsedWithAnyType(text, workspace);\n            if (existing) {\n              if (existing.type == type) {\n                var msg = Blockly.Msg['VARIABLE_ALREADY_EXISTS'].replace(\n                    '%1', existing.name);\n              } else {\n                var msg =\n                    Blockly.Msg['VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE'];\n                msg = msg.replace('%1', existing.name).replace('%2', existing.type);\n              }\n              Blockly.alert(msg,\n                  function() {\n                    promptAndCheckWithAlert(text);  // Recurse\n                  });\n            } else {\n              // No conflict\n              workspace.createVariable(text, type);\n              if (opt_callback) {\n                opt_callback(text);\n              }\n            }\n          } else {\n            // User canceled prompt.\n            if (opt_callback) {\n              opt_callback(null);\n            }\n          }\n        });\n  };\n  promptAndCheckWithAlert('');\n};\n\n/**\n * Original name of Blockly.Variables.createVariableButtonHandler(..).\n * @deprecated Use Blockly.Variables.createVariableButtonHandler(..).\n *\n * @param {!Blockly.Workspace} workspace The workspace on which to create the\n *     variable.\n * @param {function(?string=)=} opt_callback A callback. It will be passed an\n *     acceptable new variable name, or null if change is to be aborted (cancel\n *     button), or undefined if an existing variable was chosen.\n * @param {string=} opt_type The type of the variable like 'int', 'string', or\n *     ''. This will default to '', which is a specific type.\n */\nBlockly.Variables.createVariable =\n    Blockly.Variables.createVariableButtonHandler;\n\n/**\n * Opens a prompt that allows the user to enter a new name for a variable.\n * Triggers a rename if the new name is valid. Or re-prompts if there is a\n * collision.\n * @param {!Blockly.Workspace} workspace The workspace on which to rename the\n *     variable.\n * @param {Blockly.VariableModel} variable Variable to rename.\n * @param {function(?string=)=} opt_callback A callback. It will\n *     be passed an acceptable new variable name, or null if change is to be\n *     aborted (cancel button), or undefined if an existing variable was chosen.\n */\nBlockly.Variables.renameVariable = function(workspace, variable,\n    opt_callback) {\n  // This function needs to be named so it can be called recursively.\n  var promptAndCheckWithAlert = function(defaultName) {\n    var promptText =\n        Blockly.Msg['RENAME_VARIABLE_TITLE'].replace('%1', variable.name);\n    Blockly.Variables.promptName(promptText, defaultName,\n        function(newName) {\n          if (newName) {\n            var existing = Blockly.Variables.nameUsedWithOtherType_(newName,\n                variable.type, workspace);\n            if (existing) {\n              var msg = Blockly.Msg['VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE']\n                  .replace('%1', existing.name)\n                  .replace('%2', existing.type);\n              Blockly.alert(msg,\n                  function() {\n                    promptAndCheckWithAlert(newName);  // Recurse\n                  });\n            } else {\n              workspace.renameVariableById(variable.getId(), newName);\n              if (opt_callback) {\n                opt_callback(newName);\n              }\n            }\n          } else {\n            // User canceled prompt.\n            if (opt_callback) {\n              opt_callback(null);\n            }\n          }\n        });\n  };\n  promptAndCheckWithAlert('');\n};\n\n/**\n * Prompt the user for a new variable name.\n * @param {string} promptText The string of the prompt.\n * @param {string} defaultText The default value to show in the prompt's field.\n * @param {function(?string)} callback A callback. It will return the new\n *     variable name, or null if the user picked something illegal.\n */\nBlockly.Variables.promptName = function(promptText, defaultText, callback) {\n  Blockly.prompt(promptText, defaultText, function(newVar) {\n    // Merge runs of whitespace.  Strip leading and trailing whitespace.\n    // Beyond this, all names are legal.\n    if (newVar) {\n      newVar = newVar.replace(/[\\s\\xa0]+/g, ' ').trim();\n      if (newVar == Blockly.Msg['RENAME_VARIABLE'] ||\n          newVar == Blockly.Msg['NEW_VARIABLE']) {\n        // Ok, not ALL names are legal...\n        newVar = null;\n      }\n    }\n    callback(newVar);\n  });\n};\n\n/**\n * Check whether there exists a variable with the given name but a different\n * type.\n * @param {string} name The name to search for.\n * @param {string} type The type to exclude from the search.\n * @param {!Blockly.Workspace} workspace The workspace to search for the\n *     variable.\n * @return {Blockly.VariableModel} The variable with the given name and a\n *     different type, or null if none was found.\n * @private\n */\nBlockly.Variables.nameUsedWithOtherType_ = function(name, type, workspace) {\n  var allVariables = workspace.getVariableMap().getAllVariables();\n\n  name = name.toLowerCase();\n  for (var i = 0, variable; (variable = allVariables[i]); i++) {\n    if (variable.name.toLowerCase() == name && variable.type != type) {\n      return variable;\n    }\n  }\n  return null;\n};\n\n/**\n * Check whether there exists a variable with the given name of any type.\n * @param {string} name The name to search for.\n * @param {!Blockly.Workspace} workspace The workspace to search for the\n *     variable.\n * @return {Blockly.VariableModel} The variable with the given name,\n *     or null if none was found.\n */\nBlockly.Variables.nameUsedWithAnyType = function(name, workspace) {\n  var allVariables = workspace.getVariableMap().getAllVariables();\n\n  name = name.toLowerCase();\n  for (var i = 0, variable; (variable = allVariables[i]); i++) {\n    if (variable.name.toLowerCase() == name) {\n      return variable;\n    }\n  }\n  return null;\n};\n\n/**\n * Generate DOM objects representing a variable field.\n * @param {!Blockly.VariableModel} variableModel The variable model to\n *     represent.\n * @return {Element} The generated DOM.\n * @public\n */\nBlockly.Variables.generateVariableFieldDom = function(variableModel) {\n  /* Generates the following XML:\n   * <field name=\"VAR\" id=\"goKTKmYJ8DhVHpruv\" variabletype=\"int\">foo</field>\n   */\n  var field = Blockly.utils.xml.createElement('field');\n  field.setAttribute('name', 'VAR');\n  field.setAttribute('id', variableModel.getId());\n  field.setAttribute('variabletype', variableModel.type);\n  var name = Blockly.utils.xml.createTextNode(variableModel.name);\n  field.appendChild(name);\n  return field;\n};\n\n/**\n * Helper function to look up or create a variable on the given workspace.\n * If no variable exists, creates and returns it.\n * @param {!Blockly.Workspace} workspace The workspace to search for the\n *     variable.  It may be a flyout workspace or main workspace.\n * @param {?string} id The ID to use to look up or create the variable, or null.\n * @param {string=} opt_name The string to use to look up or create the\n *     variable.\n * @param {string=} opt_type The type to use to look up or create the variable.\n * @return {!Blockly.VariableModel} The variable corresponding to the given ID\n *     or name + type combination.\n */\nBlockly.Variables.getOrCreateVariablePackage = function(workspace, id, opt_name,\n    opt_type) {\n  var variable = Blockly.Variables.getVariable(workspace, id, opt_name,\n      opt_type);\n  if (!variable) {\n    variable = Blockly.Variables.createVariable_(workspace, id, opt_name,\n        opt_type);\n  }\n  return variable;\n};\n\n/**\n * Look up  a variable on the given workspace.\n * Always looks in the main workspace before looking in the flyout workspace.\n * Always prefers lookup by ID to lookup by name + type.\n * @param {!Blockly.Workspace} workspace The workspace to search for the\n *     variable.  It may be a flyout workspace or main workspace.\n * @param {?string} id The ID to use to look up the variable, or null.\n * @param {string=} opt_name The string to use to look up the variable.\n *     Only used if lookup by ID fails.\n * @param {string=} opt_type The type to use to look up the variable.\n *     Only used if lookup by ID fails.\n * @return {Blockly.VariableModel} The variable corresponding to the given ID\n *     or name + type combination, or null if not found.\n * @public\n */\nBlockly.Variables.getVariable = function(workspace, id, opt_name, opt_type) {\n  var potentialVariableMap = workspace.getPotentialVariableMap();\n  var variable = null;\n  // Try to just get the variable, by ID if possible.\n  if (id) {\n    // Look in the real variable map before checking the potential variable map.\n    variable = workspace.getVariableById(id);\n    if (!variable && potentialVariableMap) {\n      variable = potentialVariableMap.getVariableById(id);\n    }\n    if (variable) {\n      return variable;\n    }\n  }\n  // If there was no ID, or there was an ID but it didn't match any variables,\n  // look up by name and type.\n  if (opt_name) {\n    if (opt_type == undefined) {\n      throw Error('Tried to look up a variable by name without a type');\n    }\n    // Otherwise look up by name and type.\n    variable = workspace.getVariable(opt_name, opt_type);\n    if (!variable && potentialVariableMap) {\n      variable = potentialVariableMap.getVariable(opt_name, opt_type);\n    }\n  }\n  return variable;\n};\n\n/**\n * Helper function to create a variable on the given workspace.\n * @param {!Blockly.Workspace} workspace The workspace in which to create the\n * variable.  It may be a flyout workspace or main workspace.\n * @param {?string} id The ID to use to create the variable, or null.\n * @param {string=} opt_name The string to use to create the variable.\n * @param {string=} opt_type The type to use to create the variable.\n * @return {!Blockly.VariableModel} The variable corresponding to the given ID\n *     or name + type combination.\n * @private\n */\nBlockly.Variables.createVariable_ = function(workspace, id, opt_name,\n    opt_type) {\n  var potentialVariableMap = workspace.getPotentialVariableMap();\n  // Variables without names get uniquely named for this workspace.\n  if (!opt_name) {\n    var ws = workspace.isFlyout ? workspace.targetWorkspace : workspace;\n    opt_name = Blockly.Variables.generateUniqueName(ws);\n  }\n\n  // Create a potential variable if in the flyout.\n  var variable = null;\n  if (potentialVariableMap) {\n    variable = potentialVariableMap.createVariable(opt_name, opt_type, id);\n  } else {  // In the main workspace, create a real variable.\n    variable = workspace.createVariable(opt_name, opt_type, id);\n  }\n  return variable;\n};\n\n/**\n * Helper function to get the list of variables that have been added to the\n * workspace after adding a new block, using the given list of variables that\n * were in the workspace before the new block was added.\n * @param {!Blockly.Workspace} workspace The workspace to inspect.\n * @param {!Array.<!Blockly.VariableModel>} originalVariables The array of\n *     variables that existed in the workspace before adding the new block.\n * @return {!Array.<!Blockly.VariableModel>} The new array of variables that\n *     were freshly added to the workspace after creating the new block,\n *     or [] if no new variables were added to the workspace.\n * @package\n */\nBlockly.Variables.getAddedVariables = function(workspace, originalVariables) {\n  var allCurrentVariables = workspace.getAllVariables();\n  var addedVariables = [];\n  if (originalVariables.length != allCurrentVariables.length) {\n    for (var i = 0; i < allCurrentVariables.length; i++) {\n      var variable = allCurrentVariables[i];\n      // For any variable that is present in allCurrentVariables but not\n      // present in originalVariables, add the variable to addedVariables.\n      if (originalVariables.indexOf(variable) == -1) {\n        addedVariables.push(variable);\n      }\n    }\n  }\n  return addedVariables;\n};\n"],"file":"variables.min.js"}