{"version":3,"sources":["../../../../src/blockly/core/keyboard_nav/flyout_cursor.js"],"names":["goog","provide","require","Blockly","FlyoutCursor","superClass_","constructor","call","utils","object","inherits","Cursor","prototype","onBlocklyAction","action","name","navigation","actionNames","PREVIOUS","prev","NEXT","next","curNode","getCurNode","newNode","setCurNode","in","out"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,sBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,oBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EASAC,OAAO,CAACC,YAAR,CAAuB,UAAW,CAChCD,OAAO,CAACC,YAAR,CAAqBC,WAArB,CAAiCC,WAAjC,CAA6CC,IAA7C,CAAkD,IAAlD,CACD,CAFD,CAGAJ,OAAO,CAACK,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BP,OAAO,CAACC,YAAtC,CAAoDD,OAAO,CAACQ,MAA5D,EASAR,OAAO,CAACC,YAAR,CAAqBQ,SAArB,CAA+BC,eAA/B,CAAiD,SAASC,CAAT,CAAiB,CAChE,OAAQA,CAAM,CAACC,IAAf,EACE,IAAKZ,CAAAA,OAAO,CAACa,UAAR,CAAmBC,WAAnB,CAA+BC,QAApC,CACE,KAAKC,IAAL,GACA,SACF,IAAKhB,CAAAA,OAAO,CAACa,UAAR,CAAmBC,WAAnB,CAA+BG,IAApC,CACE,KAAKC,IAAL,GACA,SACF,QACE,SARJ,CAUD,CAXD,CAmBAlB,OAAO,CAACC,YAAR,CAAqBQ,SAArB,CAA+BS,IAA/B,CAAsC,UAAW,CAC/C,GAAIC,CAAAA,CAAO,CAAG,KAAKC,UAAL,EAAd,CACA,GAAI,CAACD,CAAL,CAAc,CACZ,MAAO,KACR,CACD,GAAIE,CAAAA,CAAO,CAAGF,CAAO,CAACD,IAAR,EAAd,CAEA,GAAIG,CAAJ,CAAa,CACX,KAAKC,UAAL,CAAgBD,CAAhB,CACD,CACD,MAAOA,CAAAA,CACR,CAXD,CAkBArB,OAAO,CAACC,YAAR,CAAqBQ,SAArB,CAA+Bc,EAA/B,CAAoC,UAAW,CAC7C,MAAO,KACR,CAFD,CAUAvB,OAAO,CAACC,YAAR,CAAqBQ,SAArB,CAA+BO,IAA/B,CAAsC,UAAW,CAC/C,GAAIG,CAAAA,CAAO,CAAG,KAAKC,UAAL,EAAd,CACA,GAAI,CAACD,CAAL,CAAc,CACZ,MAAO,KACR,CACD,GAAIE,CAAAA,CAAO,CAAGF,CAAO,CAACH,IAAR,EAAd,CAEA,GAAIK,CAAJ,CAAa,CACX,KAAKC,UAAL,CAAgBD,CAAhB,CACD,CACD,MAAOA,CAAAA,CACR,CAXD,CAkBArB,OAAO,CAACC,YAAR,CAAqBQ,SAArB,CAA+Be,GAA/B,CAAqC,UAAW,CAC9C,MAAO,KACR,CAFD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a cursor used to navigate the flyout.\n * Used primarily for keyboard navigation.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n'use strict';\n\ngoog.provide('Blockly.FlyoutCursor');\n\ngoog.require('Blockly.Cursor');\ngoog.require('Blockly.navigation');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for a flyout cursor.\n * This controls how a user navigates blocks in the flyout.\n * @constructor\n * @extends {Blockly.Cursor}\n */\nBlockly.FlyoutCursor = function() {\n  Blockly.FlyoutCursor.superClass_.constructor.call(this);\n};\nBlockly.utils.object.inherits(Blockly.FlyoutCursor, Blockly.Cursor);\n\n/**\n * Handles the given action.\n * This is only triggered when keyboard navigation is enabled.\n * @param {!Blockly.Action} action The action to be handled.\n * @return {boolean} True if the action has been handled, false otherwise.\n * @override\n */\nBlockly.FlyoutCursor.prototype.onBlocklyAction = function(action) {\n  switch (action.name) {\n    case Blockly.navigation.actionNames.PREVIOUS:\n      this.prev();\n      return true;\n    case Blockly.navigation.actionNames.NEXT:\n      this.next();\n      return true;\n    default:\n      return false;\n  }\n};\n\n/**\n * Find the next connection, field, or block.\n * @return {Blockly.ASTNode} The next element, or null if the current node is\n *     not set or there is no next value.\n * @override\n */\nBlockly.FlyoutCursor.prototype.next = function() {\n  var curNode = this.getCurNode();\n  if (!curNode) {\n    return null;\n  }\n  var newNode = curNode.next();\n\n  if (newNode) {\n    this.setCurNode(newNode);\n  }\n  return newNode;\n};\n\n/**\n * This is a  no-op since a flyout cursor can not go in.\n * @return {null} Always null.\n * @override\n */\nBlockly.FlyoutCursor.prototype.in = function() {\n  return null;\n};\n\n/**\n * Find the previous connection, field, or block.\n * @return {Blockly.ASTNode} The previous element, or null if the current node\n *     is not set or there is no previous value.\n * @override\n */\nBlockly.FlyoutCursor.prototype.prev = function() {\n  var curNode = this.getCurNode();\n  if (!curNode) {\n    return null;\n  }\n  var newNode = curNode.prev();\n\n  if (newNode) {\n    this.setCurNode(newNode);\n  }\n  return newNode;\n};\n\n/**\n * This is a  no-op since a flyout cursor can not go out.\n * @return {null} Always null.\n * @override\n */\nBlockly.FlyoutCursor.prototype.out = function() {\n  return null;\n};\n"],"file":"flyout_cursor.min.js"}