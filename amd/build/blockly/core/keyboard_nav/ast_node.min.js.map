{"version":3,"sources":["../../../../src/blockly/core/keyboard_nav/ast_node.js"],"names":["goog","provide","require","requireType","Blockly","ASTNode","type","location","opt_params","Error","type_","isConnection_","isConnectionType_","location_","wsCoordinate_","processParams_","Params","types","FIELD","BLOCK","INPUT","OUTPUT","NEXT","PREVIOUS","STACK","WORKSPACE","NAVIGATE_ALL_FIELDS","DEFAULT_OFFSET_Y","createFieldNode","field","createConnectionNode","connection","INPUT_VALUE","createInputNode","getParentInput","NEXT_STATEMENT","OUTPUT_VALUE","PREVIOUS_STATEMENT","input","createBlockNode","block","createStackNode","topBlock","createWorkspaceNode","workspace","wsCoordinate","createTopNode","astNode","topConnection","previousConnection","outputConnection","prototype","params","getLocation","getType","getWsCoordinate","isConnection","findNextForInput_","parentInput","getSourceBlock","curIdx","inputList","indexOf","i","fieldRow","j","isClickable","findNextForField_","fieldIdx","newInput","length","findPrevForInput_","findPrevForField_","navigateBetweenStacks_","forward","curLocation","Block","curRoot","getRootBlock","topBlocks","getTopBlocks","id","offset","resultIndex","findTopASTNodeForBlock_","getOutAstNodeForBlock_","getTopStackBlock","targetConnection","findFirstFieldOrInput_","inputs","next","nextConnection","in","prev","out","blockPos","getRelativeToSurfaceXY","utils","Coordinate","x","y","target"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing an AST node.\n * Used to traverse the Blockly AST.\n */\n'use strict';\n\ngoog.provide('Blockly.ASTNode');\n\ngoog.require('Blockly.utils.Coordinate');\n\ngoog.requireType('Blockly.IASTNodeLocation');\ngoog.requireType('Blockly.IASTNodeLocationWithBlock');\n\n\n/**\n * Class for an AST node.\n * It is recommended that you use one of the createNode methods instead of\n * creating a node directly.\n * @param {string} type The type of the location.\n *     Must be in Blockly.ASTNode.types.\n * @param {!Blockly.IASTNodeLocation} location The position in the AST.\n * @param {!Blockly.ASTNode.Params=} opt_params Optional dictionary of options.\n * @constructor\n */\nBlockly.ASTNode = function(type, location, opt_params) {\n  if (!location) {\n    throw Error('Cannot create a node without a location.');\n  }\n\n  /**\n   * The type of the location.\n   * One of Blockly.ASTNode.types\n   * @type {string}\n   * @private\n   */\n  this.type_ = type;\n\n  /**\n   * Whether the location points to a connection.\n   * @type {boolean}\n   * @private\n   */\n  this.isConnection_ = Blockly.ASTNode.isConnectionType_(type);\n\n  /**\n   * The location of the AST node.\n   * @type {!Blockly.IASTNodeLocation}\n   * @private\n   */\n  this.location_ = location;\n\n  /**\n   * The coordinate on the workspace.\n   * @type {Blockly.utils.Coordinate}\n   * @private\n   */\n  this.wsCoordinate_ = null;\n\n  this.processParams_(opt_params || null);\n};\n\n/**\n * @typedef {{\n *     wsCoordinate: Blockly.utils.Coordinate\n * }}\n */\nBlockly.ASTNode.Params;\n\n/**\n * Object holding different types for an AST node.\n * @enum {string}\n */\nBlockly.ASTNode.types = {\n  FIELD: 'field',\n  BLOCK: 'block',\n  INPUT: 'input',\n  OUTPUT: 'output',\n  NEXT: 'next',\n  PREVIOUS: 'previous',\n  STACK: 'stack',\n  WORKSPACE: 'workspace'\n};\n\n/**\n * True to navigate to all fields. False to only navigate to clickable fields.\n * @type {boolean}\n */\nBlockly.ASTNode.NAVIGATE_ALL_FIELDS = false;\n\n/**\n * The default y offset to use when moving the cursor from a stack to the\n * workspace.\n * @type {number}\n * @private\n */\nBlockly.ASTNode.DEFAULT_OFFSET_Y = -20;\n\n/**\n * Whether an AST node of the given type points to a connection.\n * @param {string} type The type to check.  One of Blockly.ASTNode.types.\n * @return {boolean} True if a node of the given type points to a connection.\n * @private\n */\nBlockly.ASTNode.isConnectionType_ = function(type) {\n  switch (type) {\n    case Blockly.ASTNode.types.PREVIOUS:\n    case Blockly.ASTNode.types.NEXT:\n    case Blockly.ASTNode.types.INPUT:\n    case Blockly.ASTNode.types.OUTPUT:\n      return true;\n  }\n  return false;\n};\n\n/**\n * Create an AST node pointing to a field.\n * @param {Blockly.Field} field The location of the AST node.\n * @return {Blockly.ASTNode} An AST node pointing to a field.\n */\nBlockly.ASTNode.createFieldNode = function(field) {\n  if (!field) {\n    return null;\n  }\n  return new Blockly.ASTNode(Blockly.ASTNode.types.FIELD, field);\n};\n\n/**\n * Creates an AST node pointing to a connection. If the connection has a parent\n * input then create an AST node of type input that will hold the connection.\n * @param {Blockly.Connection} connection This is the connection the node will\n *     point to.\n * @return {Blockly.ASTNode} An AST node pointing to a connection.\n */\nBlockly.ASTNode.createConnectionNode = function(connection) {\n  if (!connection) {\n    return null;\n  }\n  if (connection.type == Blockly.INPUT_VALUE) {\n    return Blockly.ASTNode.createInputNode(connection.getParentInput());\n  } else if (connection.type == Blockly.NEXT_STATEMENT &&\n      connection.getParentInput()) {\n    return Blockly.ASTNode.createInputNode(connection.getParentInput());\n  } else if (connection.type == Blockly.NEXT_STATEMENT) {\n    return new Blockly.ASTNode(Blockly.ASTNode.types.NEXT, connection);\n  } else if (connection.type == Blockly.OUTPUT_VALUE) {\n    return new Blockly.ASTNode(Blockly.ASTNode.types.OUTPUT, connection);\n  } else if (connection.type == Blockly.PREVIOUS_STATEMENT) {\n    return new Blockly.ASTNode(Blockly.ASTNode.types.PREVIOUS, connection);\n  }\n  return null;\n};\n\n/**\n * Creates an AST node pointing to an input. Stores the input connection as the\n *     location.\n * @param {Blockly.Input} input The input used to create an AST node.\n * @return {Blockly.ASTNode} An AST node pointing to a input.\n */\nBlockly.ASTNode.createInputNode = function(input) {\n  if (!input || !input.connection) {\n    return null;\n  }\n  return new Blockly.ASTNode(Blockly.ASTNode.types.INPUT, input.connection);\n};\n\n/**\n * Creates an AST node pointing to a block.\n * @param {Blockly.Block} block The block used to create an AST node.\n * @return {Blockly.ASTNode} An AST node pointing to a block.\n */\nBlockly.ASTNode.createBlockNode = function(block) {\n  if (!block) {\n    return null;\n  }\n  return new Blockly.ASTNode(Blockly.ASTNode.types.BLOCK, block);\n};\n\n/**\n * Create an AST node of type stack. A stack, represented by its top block, is\n *     the set of all blocks connected to a top block, including the top block.\n * @param {Blockly.Block} topBlock A top block has no parent and can be found\n *     in the list returned by workspace.getTopBlocks().\n * @return {Blockly.ASTNode} An AST node of type stack that points to the top\n *     block on the stack.\n */\nBlockly.ASTNode.createStackNode = function(topBlock) {\n  if (!topBlock) {\n    return null;\n  }\n  return new Blockly.ASTNode(Blockly.ASTNode.types.STACK, topBlock);\n};\n\n/**\n * Creates an AST node pointing to a workspace.\n * @param {!Blockly.Workspace} workspace The workspace that we are on.\n * @param {Blockly.utils.Coordinate} wsCoordinate The position on the workspace\n *     for this node.\n * @return {Blockly.ASTNode} An AST node pointing to a workspace and a position\n *     on the workspace.\n */\nBlockly.ASTNode.createWorkspaceNode = function(workspace, wsCoordinate) {\n  if (!wsCoordinate || !workspace) {\n    return null;\n  }\n  var params = {\n    wsCoordinate: wsCoordinate\n  };\n  return new Blockly.ASTNode(\n      Blockly.ASTNode.types.WORKSPACE, workspace, params);\n};\n\n/**\n * Creates an AST node for the top position on a block.\n * This is either an output connection, previous connection, or block.\n * @param {!Blockly.Block} block The block to find the top most AST node on.\n * @return {Blockly.ASTNode} The AST node holding the top most position on the\n *     block.\n */\nBlockly.ASTNode.createTopNode = function(block) {\n  var astNode;\n  var topConnection = block.previousConnection || block.outputConnection;\n  if (topConnection) {\n    astNode = Blockly.ASTNode.createConnectionNode(topConnection);\n  } else {\n    astNode = Blockly.ASTNode.createBlockNode(block);\n  }\n  return astNode;\n};\n\n/**\n * Parse the optional parameters.\n * @param {?Blockly.ASTNode.Params} params The user specified parameters.\n * @private\n */\nBlockly.ASTNode.prototype.processParams_ = function(params) {\n  if (!params) {\n    return;\n  }\n  if (params.wsCoordinate) {\n    this.wsCoordinate_ = params.wsCoordinate;\n  }\n};\n\n/**\n * Gets the value pointed to by this node.\n * It is the callers responsibility to check the node type to figure out what\n * type of object they get back from this.\n * @return {!Blockly.IASTNodeLocation} The current field, connection, workspace, or\n *     block the cursor is on.\n */\nBlockly.ASTNode.prototype.getLocation = function() {\n  return this.location_;\n};\n\n/**\n * The type of the current location.\n * One of Blockly.ASTNode.types\n * @return {string} The type of the location.\n */\nBlockly.ASTNode.prototype.getType = function() {\n  return this.type_;\n};\n\n/**\n * The coordinate on the workspace.\n * @return {Blockly.utils.Coordinate} The workspace coordinate or null if the\n *     location is not a workspace.\n */\nBlockly.ASTNode.prototype.getWsCoordinate = function() {\n  return this.wsCoordinate_;\n};\n\n/**\n * Whether the node points to a connection.\n * @return {boolean} [description]\n * @package\n */\nBlockly.ASTNode.prototype.isConnection = function() {\n  return this.isConnection_;\n};\n\n/**\n * Given an input find the next editable field or an input with a non null\n * connection in the same block. The current location must be an input\n * connection.\n * @return {Blockly.ASTNode} The AST node holding the next field or connection\n *     or null if there is no editable field or input connection after the given\n *     input.\n * @private\n */\nBlockly.ASTNode.prototype.findNextForInput_ = function() {\n  var location = /** @type {!Blockly.Connection} */ (this.location_);\n  var parentInput = location.getParentInput();\n  var block = parentInput.getSourceBlock();\n  var curIdx = block.inputList.indexOf(parentInput);\n  for (var i = curIdx + 1, input; (input = block.inputList[i]); i++) {\n    var fieldRow = input.fieldRow;\n    for (var j = 0, field; (field = fieldRow[j]); j++) {\n      if (field.isClickable() || Blockly.ASTNode.NAVIGATE_ALL_FIELDS) {\n        return Blockly.ASTNode.createFieldNode(field);\n      }\n    }\n    if (input.connection) {\n      return Blockly.ASTNode.createInputNode(input);\n    }\n  }\n  return null;\n};\n\n/**\n * Given a field find the next editable field or an input with a non null\n * connection in the same block. The current location must be a field.\n * @return {Blockly.ASTNode} The AST node pointing to the next field or\n *     connection or null if there is no editable field or input connection\n *     after the given input.\n * @private\n */\nBlockly.ASTNode.prototype.findNextForField_ = function() {\n  var location = /** @type {!Blockly.Field} */ (this.location_);\n  var input = location.getParentInput();\n  var block = location.getSourceBlock();\n  var curIdx = block.inputList.indexOf(/** @type {!Blockly.Input} */ (input));\n  var fieldIdx = input.fieldRow.indexOf(location) + 1;\n  for (var i = curIdx, newInput; (newInput = block.inputList[i]); i++) {\n    var fieldRow = newInput.fieldRow;\n    while (fieldIdx < fieldRow.length) {\n      if (fieldRow[fieldIdx].isClickable() || Blockly.ASTNode.NAVIGATE_ALL_FIELDS) {\n        return Blockly.ASTNode.createFieldNode(fieldRow[fieldIdx]);\n      }\n      fieldIdx++;\n    }\n    fieldIdx = 0;\n    if (newInput.connection) {\n      return Blockly.ASTNode.createInputNode(newInput);\n    }\n  }\n  return null;\n};\n\n/**\n * Given an input find the previous editable field or an input with a non null\n * connection in the same block. The current location must be an input\n * connection.\n * @return {Blockly.ASTNode} The AST node holding the previous field or\n *     connection.\n * @private\n */\nBlockly.ASTNode.prototype.findPrevForInput_ = function() {\n  var location = /** @type {!Blockly.Connection} */ (this.location_);\n  var parentInput = location.getParentInput();\n  var block = parentInput.getSourceBlock();\n  var curIdx = block.inputList.indexOf(parentInput);\n  for (var i = curIdx, input; (input = block.inputList[i]); i--) {\n    if (input.connection && input !== parentInput) {\n      return Blockly.ASTNode.createInputNode(input);\n    }\n    var fieldRow = input.fieldRow;\n    for (var j = fieldRow.length - 1, field; (field = fieldRow[j]); j--) {\n      if (field.isClickable() || Blockly.ASTNode.NAVIGATE_ALL_FIELDS) {\n        return Blockly.ASTNode.createFieldNode(field);\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Given a field find the previous editable field or an input with a non null\n * connection in the same block. The current location must be a field.\n * @return {Blockly.ASTNode} The AST node holding the previous input or field.\n * @private\n */\nBlockly.ASTNode.prototype.findPrevForField_ = function() {\n  var location = /** @type {!Blockly.Field} */ (this.location_);\n  var parentInput = location.getParentInput();\n  var block = location.getSourceBlock();\n  var curIdx = block.inputList.indexOf(\n      /** @type {!Blockly.Input} */ (parentInput));\n  var fieldIdx = parentInput.fieldRow.indexOf(location) - 1;\n  for (var i = curIdx, input; (input = block.inputList[i]); i--) {\n    if (input.connection && input !== parentInput) {\n      return Blockly.ASTNode.createInputNode(input);\n    }\n    var fieldRow = input.fieldRow;\n    while (fieldIdx > -1) {\n      if (fieldRow[fieldIdx].isClickable() || Blockly.ASTNode.NAVIGATE_ALL_FIELDS) {\n        return Blockly.ASTNode.createFieldNode(fieldRow[fieldIdx]);\n      }\n      fieldIdx--;\n    }\n    // Reset the fieldIdx to the length of the field row of the previous input.\n    if (i - 1 >= 0) {\n      fieldIdx = block.inputList[i - 1].fieldRow.length - 1;\n    }\n  }\n  return null;\n};\n\n/**\n * Navigate between stacks of blocks on the workspace.\n * @param {boolean} forward True to go forward. False to go backwards.\n * @return {Blockly.ASTNode} The first block of the next stack or null if there\n * are no blocks on the workspace.\n * @private\n */\nBlockly.ASTNode.prototype.navigateBetweenStacks_ = function(forward) {\n  var curLocation = this.getLocation();\n  if (!(curLocation instanceof Blockly.Block)) {\n    curLocation = /** @type {!Blockly.IASTNodeLocationWithBlock} */ (\n      curLocation).getSourceBlock();\n  }\n  if (!curLocation || !curLocation.workspace) {\n    return null;\n  }\n  var curRoot = curLocation.getRootBlock();\n  var topBlocks = curRoot.workspace.getTopBlocks(true);\n  for (var i = 0, topBlock; (topBlock = topBlocks[i]); i++) {\n    if (curRoot.id == topBlock.id) {\n      var offset = forward ? 1 : -1;\n      var resultIndex = i + offset;\n      if (resultIndex == -1 || resultIndex == topBlocks.length) {\n        return null;\n      }\n      return Blockly.ASTNode.createStackNode(topBlocks[resultIndex]);\n    }\n  }\n  throw Error('Couldn\\'t find ' + (forward ? 'next' : 'previous') + ' stack?!');\n};\n\n/**\n * Finds the top most AST node for a given block.\n * This is either the previous connection, output connection or block depending\n * on what kind of connections the block has.\n * @param {!Blockly.Block} block The block that we want to find the top\n *     connection on.\n * @return {!Blockly.ASTNode} The AST node containing the top connection.\n * @private\n */\nBlockly.ASTNode.prototype.findTopASTNodeForBlock_ = function(block) {\n  var topConnection = block.previousConnection || block.outputConnection;\n  if (topConnection) {\n    return /** @type {!Blockly.ASTNode} */ (Blockly.ASTNode.createConnectionNode(\n        topConnection));\n  } else {\n    return /** @type {!Blockly.ASTNode} */ (Blockly.ASTNode.createBlockNode(\n        block));\n  }\n};\n\n/**\n * Get the AST node pointing to the input that the block is nested under or if\n * the block is not nested then get the stack AST node.\n * @param {Blockly.Block} block The source block of the current location.\n * @return {Blockly.ASTNode} The AST node pointing to the input connection or\n *     the top block of the stack this block is in.\n * @private\n */\nBlockly.ASTNode.prototype.getOutAstNodeForBlock_ = function(block) {\n  if (!block) {\n    return null;\n  }\n  var topBlock;\n  // If the block doesn't have a previous connection then it is the top of the\n  // substack.\n  topBlock = block.getTopStackBlock();\n  var topConnection = topBlock.previousConnection || topBlock.outputConnection;\n  // If the top connection has a parentInput, create an AST node pointing to\n  // that input.\n  if (topConnection && topConnection.targetConnection &&\n      topConnection.targetConnection.getParentInput()) {\n    return Blockly.ASTNode.createInputNode(\n        topConnection.targetConnection.getParentInput());\n  } else {\n    // Go to stack level if you are not underneath an input.\n    return Blockly.ASTNode.createStackNode(topBlock);\n  }\n};\n\n/**\n * Find the first editable field or input with a connection on a given block.\n * @param {!Blockly.Block} block The source block of the current location.\n * @return {Blockly.ASTNode} An AST node pointing to the first field or input.\n * Null if there are no editable fields or inputs with connections on the block.\n * @private\n */\nBlockly.ASTNode.prototype.findFirstFieldOrInput_ = function(block) {\n  var inputs = block.inputList;\n  for (var i = 0, input; (input = inputs[i]); i++) {\n    var fieldRow = input.fieldRow;\n    for (var j = 0, field; (field = fieldRow[j]); j++) {\n      if (field.isClickable() || Blockly.ASTNode.NAVIGATE_ALL_FIELDS) {\n        return Blockly.ASTNode.createFieldNode(field);\n      }\n    }\n    if (input.connection) {\n      return Blockly.ASTNode.createInputNode(input);\n    }\n  }\n  return null;\n};\n\n/**\n * Finds the source block of the location of this node.\n * @return {Blockly.Block} The source block of the location, or null if the node\n * is of type workspace.\n */\nBlockly.ASTNode.prototype.getSourceBlock = function() {\n  if (this.getType() === Blockly.ASTNode.types.BLOCK) {\n    return /** @type {Blockly.Block} */ (this.getLocation());\n  } else if (this.getType() === Blockly.ASTNode.types.STACK) {\n    return /** @type {Blockly.Block} */ (this.getLocation());\n  } else if (this.getType() === Blockly.ASTNode.types.WORKSPACE) {\n    return null;\n  } else {\n    return /** @type {Blockly.IASTNodeLocationWithBlock} */ (\n      this.getLocation()).getSourceBlock();\n  }\n};\n\n/**\n * Find the element to the right of the current element in the AST.\n * @return {Blockly.ASTNode} An AST node that wraps the next field, connection,\n *     block, or workspace. Or null if there is no node to the right.\n */\nBlockly.ASTNode.prototype.next = function() {\n  switch (this.type_) {\n    case Blockly.ASTNode.types.STACK:\n      return this.navigateBetweenStacks_(true);\n\n    case Blockly.ASTNode.types.OUTPUT:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      return Blockly.ASTNode.createBlockNode(connection.getSourceBlock());\n\n    case Blockly.ASTNode.types.FIELD:\n      return this.findNextForField_();\n\n    case Blockly.ASTNode.types.INPUT:\n      return this.findNextForInput_();\n\n    case Blockly.ASTNode.types.BLOCK:\n      var block = /** @type {!Blockly.Block} */ (this.location_);\n      var nextConnection = block.nextConnection;\n      return Blockly.ASTNode.createConnectionNode(nextConnection);\n\n    case Blockly.ASTNode.types.PREVIOUS:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      return Blockly.ASTNode.createBlockNode(connection.getSourceBlock());\n\n    case Blockly.ASTNode.types.NEXT:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      var targetConnection = connection.targetConnection;\n      return Blockly.ASTNode.createConnectionNode(targetConnection);\n  }\n\n  return null;\n};\n\n/**\n * Find the element one level below and all the way to the left of the current\n * location.\n * @return {Blockly.ASTNode} An AST node that wraps the next field, connection,\n * workspace, or block. Or null if there is nothing below this node.\n */\nBlockly.ASTNode.prototype.in = function() {\n  switch (this.type_) {\n    case Blockly.ASTNode.types.WORKSPACE:\n      var workspace = /** @type {!Blockly.Workspace} */ (this.location_);\n      var topBlocks = workspace.getTopBlocks(true);\n      if (topBlocks.length > 0) {\n        return Blockly.ASTNode.createStackNode(topBlocks[0]);\n      }\n      break;\n\n    case Blockly.ASTNode.types.STACK:\n      var block = /** @type {!Blockly.Block} */ (this.location_);\n      return this.findTopASTNodeForBlock_(block);\n\n    case Blockly.ASTNode.types.BLOCK:\n      var block = /** @type {!Blockly.Block} */ (this.location_);\n      return this.findFirstFieldOrInput_(block);\n\n    case Blockly.ASTNode.types.INPUT:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      var targetConnection = connection.targetConnection;\n      return Blockly.ASTNode.createConnectionNode(targetConnection);\n  }\n\n  return null;\n};\n\n/**\n * Find the element to the left of the current element in the AST.\n * @return {Blockly.ASTNode} An AST node that wraps the previous field,\n * connection, workspace or block. Or null if no node exists to the left.\n * null.\n */\nBlockly.ASTNode.prototype.prev = function() {\n  switch (this.type_) {\n    case Blockly.ASTNode.types.STACK:\n      return this.navigateBetweenStacks_(false);\n\n    case Blockly.ASTNode.types.OUTPUT:\n      return null;\n\n    case Blockly.ASTNode.types.FIELD:\n      return this.findPrevForField_();\n\n    case Blockly.ASTNode.types.INPUT:\n      return this.findPrevForInput_();\n\n    case Blockly.ASTNode.types.BLOCK:\n      var block = /** @type {!Blockly.Block} */ (this.location_);\n      var topConnection = block.previousConnection || block.outputConnection;\n      return Blockly.ASTNode.createConnectionNode(topConnection);\n\n    case Blockly.ASTNode.types.PREVIOUS:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      var targetConnection = connection.targetConnection;\n      if (targetConnection && !targetConnection.getParentInput()) {\n        return Blockly.ASTNode.createConnectionNode(targetConnection);\n      }\n      break;\n\n    case Blockly.ASTNode.types.NEXT:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      return Blockly.ASTNode.createBlockNode(connection.getSourceBlock());\n  }\n\n  return null;\n};\n\n/**\n * Find the next element that is one position above and all the way to the left\n * of the current location.\n * @return {Blockly.ASTNode} An AST node that wraps the next field, connection,\n *     workspace or block. Or null if we are at the workspace level.\n */\nBlockly.ASTNode.prototype.out = function() {\n  switch (this.type_) {\n    case Blockly.ASTNode.types.STACK:\n      var block = /** @type {!Blockly.Block} */ (this.location_);\n      var blockPos = block.getRelativeToSurfaceXY();\n      // TODO: Make sure this is in the bounds of the workspace.\n      var wsCoordinate = new Blockly.utils.Coordinate(\n          blockPos.x, blockPos.y + Blockly.ASTNode.DEFAULT_OFFSET_Y);\n      return Blockly.ASTNode.createWorkspaceNode(block.workspace, wsCoordinate);\n\n    case Blockly.ASTNode.types.OUTPUT:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      var target = connection.targetConnection;\n      if (target) {\n        return Blockly.ASTNode.createConnectionNode(target);\n      }\n      return Blockly.ASTNode.createStackNode(connection.getSourceBlock());\n\n    case Blockly.ASTNode.types.FIELD:\n      var field = /** @type {!Blockly.Field} */ (this.location_);\n      return Blockly.ASTNode.createBlockNode(field.getSourceBlock());\n\n    case Blockly.ASTNode.types.INPUT:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      return Blockly.ASTNode.createBlockNode(connection.getSourceBlock());\n\n    case Blockly.ASTNode.types.BLOCK:\n      var block = /** @type {!Blockly.Block} */ (this.location_);\n      return this.getOutAstNodeForBlock_(block);\n\n    case Blockly.ASTNode.types.PREVIOUS:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      return this.getOutAstNodeForBlock_(connection.getSourceBlock());\n\n    case Blockly.ASTNode.types.NEXT:\n      var connection = /** @type {!Blockly.Connection} */ (this.location_);\n      return this.getOutAstNodeForBlock_(connection.getSourceBlock());\n  }\n\n  return null;\n};\n"],"file":"ast_node.min.js"}