{"version":3,"sources":["../../../../src/blockly/core/keyboard_nav/marker.js"],"names":["goog","provide","require","Blockly","Marker","colour","curNode_","drawer_","type","prototype","setDrawer","drawer","getDrawer","getCurNode","setCurNode","newNode","oldNode","draw","hide","dispose"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,gBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,iBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,oBAAb,EAQAC,OAAO,CAACC,MAAR,CAAiB,UAAW,CAK1B,KAAKC,MAAL,CAAc,IAAd,CAOA,KAAKC,QAAL,CAAgB,IAAhB,CAOA,KAAKC,OAAL,CAAe,IAAf,CAMA,KAAKC,IAAL,CAAY,QACb,CA1BD,CAiCAL,OAAO,CAACC,MAAR,CAAeK,SAAf,CAAyBC,SAAzB,CAAqC,SAASC,CAAT,CAAiB,CACpD,KAAKJ,OAAL,CAAeI,CAChB,CAFD,CASAR,OAAO,CAACC,MAAR,CAAeK,SAAf,CAAyBG,SAAzB,CAAqC,UAAW,CAC9C,MAAO,MAAKL,OACb,CAFD,CASAJ,OAAO,CAACC,MAAR,CAAeK,SAAf,CAAyBI,UAAzB,CAAsC,UAAW,CAC/C,MAAO,MAAKP,QACb,CAFD,CAUAH,OAAO,CAACC,MAAR,CAAeK,SAAf,CAAyBK,UAAzB,CAAsC,SAASC,CAAT,CAAkB,CACtD,GAAIC,CAAAA,CAAO,CAAG,KAAKV,QAAnB,CACA,KAAKA,QAAL,CAAgBS,CAAhB,CACA,GAAI,KAAKR,OAAT,CAAkB,CAChB,KAAKA,OAAL,CAAaU,IAAb,CAAkBD,CAAlB,CAA2B,KAAKV,QAAhC,CACD,CACF,CAND,CAYAH,OAAO,CAACC,MAAR,CAAeK,SAAf,CAAyBQ,IAAzB,CAAgC,UAAW,CACzC,GAAI,KAAKV,OAAT,CAAkB,CAChB,KAAKA,OAAL,CAAaU,IAAb,CAAkB,KAAKX,QAAvB,CAAiC,KAAKA,QAAtC,CACD,CACF,CAJD,CASAH,OAAO,CAACC,MAAR,CAAeK,SAAf,CAAyBS,IAAzB,CAAgC,UAAW,CACzC,GAAI,KAAKX,OAAT,CAAkB,CAChB,KAAKA,OAAL,CAAaW,IAAb,EACD,CACF,CAJD,CASAf,OAAO,CAACC,MAAR,CAAeK,SAAf,CAAyBU,OAAzB,CAAmC,UAAW,CAC5C,GAAI,KAAKP,SAAL,EAAJ,CAAsB,CACpB,KAAKA,SAAL,GAAiBO,OAAjB,EACD,CACF,CAJD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The class representing a marker.\n * Used primarily for keyboard navigation to show a marked location.\n * @author aschmiedt@google.com (Abby Schmiedt)\n */\n'use strict';\n\ngoog.provide('Blockly.Marker');\n\ngoog.require('Blockly.ASTNode');\ngoog.require('Blockly.navigation');\n\n\n/**\n * Class for a marker.\n * This is used in keyboard navigation to save a location in the Blockly AST.\n * @constructor\n */\nBlockly.Marker = function() {\n  /**\n   * The colour of the marker.\n   * @type {?string}\n   */\n  this.colour = null;\n\n  /**\n   * The current location of the marker.\n   * @type {Blockly.ASTNode}\n   * @private\n   */\n  this.curNode_ = null;\n\n  /**\n   * The object in charge of drawing the visual representation of the current node.\n   * @type {Blockly.blockRendering.MarkerSvg}\n   * @private\n   */\n  this.drawer_ = null;\n\n  /**\n   * The type of the marker.\n   * @type {string}\n   */\n  this.type = 'marker';\n};\n\n/**\n * Sets the object in charge of drawing the marker.\n * @param {Blockly.blockRendering.MarkerSvg} drawer The object in charge of\n *     drawing the marker.\n */\nBlockly.Marker.prototype.setDrawer = function(drawer) {\n  this.drawer_ = drawer;\n};\n\n/**\n * Get the current drawer for the marker.\n * @return {Blockly.blockRendering.MarkerSvg} The object in charge of drawing\n *     the marker.\n */\nBlockly.Marker.prototype.getDrawer = function() {\n  return this.drawer_;\n};\n\n/**\n * Gets the current location of the marker.\n * @return {Blockly.ASTNode} The current field, connection, or block the marker\n *     is on.\n */\nBlockly.Marker.prototype.getCurNode = function() {\n  return this.curNode_;\n};\n\n/**\n * Set the location of the marker and call the update method.\n * Setting isStack to true will only work if the newLocation is the top most\n * output or previous connection on a stack.\n * @param {Blockly.ASTNode} newNode The new location of the marker.\n */\nBlockly.Marker.prototype.setCurNode = function(newNode) {\n  var oldNode = this.curNode_;\n  this.curNode_ = newNode;\n  if (this.drawer_) {\n    this.drawer_.draw(oldNode, this.curNode_);\n  }\n};\n\n/**\n * Redraw the current marker.\n * @package\n */\nBlockly.Marker.prototype.draw = function() {\n  if (this.drawer_) {\n    this.drawer_.draw(this.curNode_, this.curNode_);\n  }\n};\n\n/**\n * Hide the marker SVG.\n */\nBlockly.Marker.prototype.hide = function() {\n  if (this.drawer_) {\n    this.drawer_.hide();\n  }\n};\n\n/**\n * Dispose of this marker.\n */\nBlockly.Marker.prototype.dispose = function() {\n  if (this.getDrawer()) {\n    this.getDrawer().dispose();\n  }\n};\n"],"file":"marker.min.js"}