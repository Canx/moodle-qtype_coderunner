{"version":3,"sources":["../../../src/blockly/core/ui_events.js"],"names":["goog","provide","require","Blockly","Events","Ui","block","element","oldValue","newValue","superClass_","constructor","call","blockId","id","workspaceId","workspace","recordUndo","utils","object","inherits","Abstract","prototype","type","UI","toJson","json","fromJson"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,mBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,gBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,yBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EAgBAC,OAAO,CAACC,MAAR,CAAeC,EAAf,CAAoB,SAASC,CAAT,CAAgBC,CAAhB,CAAyBC,CAAzB,CAAmCC,CAAnC,CAA6C,CAC/DN,OAAO,CAACC,MAAR,CAAeC,EAAf,CAAkBK,WAAlB,CAA8BC,WAA9B,CAA0CC,IAA1C,CAA+C,IAA/C,EACA,KAAKC,OAAL,CAAeP,CAAK,CAAGA,CAAK,CAACQ,EAAT,CAAc,IAAlC,CACA,KAAKC,WAAL,CAAmBT,CAAK,CAAGA,CAAK,CAACU,SAAN,CAAgBF,EAAnB,OAAxB,CACA,KAAKP,OAAL,CAAeA,CAAf,CACA,KAAKC,QAAL,CAAgBA,CAAhB,CACA,KAAKC,QAAL,CAAgBA,CAAhB,CAEA,KAAKQ,UAAL,GACD,CATD,CAUAd,OAAO,CAACe,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BjB,OAAO,CAACC,MAAR,CAAeC,EAA7C,CAAiDF,OAAO,CAACC,MAAR,CAAeiB,QAAhE,EAMAlB,OAAO,CAACC,MAAR,CAAeC,EAAf,CAAkBiB,SAAlB,CAA4BC,IAA5B,CAAmCpB,OAAO,CAACC,MAAR,CAAeoB,EAAlD,CAMArB,OAAO,CAACC,MAAR,CAAeC,EAAf,CAAkBiB,SAAlB,CAA4BG,MAA5B,CAAqC,UAAW,CAC9C,GAAIC,CAAAA,CAAI,CAAGvB,OAAO,CAACC,MAAR,CAAeC,EAAf,CAAkBK,WAAlB,CAA8Be,MAA9B,CAAqCb,IAArC,CAA0C,IAA1C,CAAX,CACAc,CAAI,QAAJ,CAAkB,KAAKnB,OAAvB,CACA,GAAI,KAAKE,QAAL,SAAJ,CAAiC,CAC/BiB,CAAI,SAAJ,CAAmB,KAAKjB,QACzB,CACD,GAAI,KAAKI,OAAT,CAAkB,CAChBa,CAAI,QAAJ,CAAkB,KAAKb,OACxB,CACD,MAAOa,CAAAA,CACR,CAVD,CAgBAvB,OAAO,CAACC,MAAR,CAAeC,EAAf,CAAkBiB,SAAlB,CAA4BK,QAA5B,CAAuC,SAASD,CAAT,CAAe,CACpDvB,OAAO,CAACC,MAAR,CAAeC,EAAf,CAAkBK,WAAlB,CAA8BiB,QAA9B,CAAuCf,IAAvC,CAA4C,IAA5C,CAAkDc,CAAlD,EACA,KAAKnB,OAAL,CAAemB,CAAI,QAAnB,CACA,KAAKjB,QAAL,CAAgBiB,CAAI,SAApB,CACA,KAAKb,OAAL,CAAea,CAAI,QACpB,CALD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Events fired as a result of UI actions in Blockly's editor.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Events.Ui');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.Abstract');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for a UI event.\n * UI events are events that don't need to be sent over the wire for multi-user\n * editing to work (e.g. scrolling the workspace, zooming, opening toolbox\n * categories).\n * UI events do not undo or redo.\n * @param {Blockly.Block} block The affected block.\n * @param {string} element One of 'selected', 'comment', 'mutatorOpen', etc.\n * @param {*} oldValue Previous value of element.\n * @param {*} newValue New value of element.\n * @extends {Blockly.Events.Abstract}\n * @constructor\n */\nBlockly.Events.Ui = function(block, element, oldValue, newValue) {\n  Blockly.Events.Ui.superClass_.constructor.call(this);\n  this.blockId = block ? block.id : null;\n  this.workspaceId = block ? block.workspace.id : undefined;\n  this.element = element;\n  this.oldValue = oldValue;\n  this.newValue = newValue;\n  // UI events do not undo or redo.\n  this.recordUndo = false;\n};\nBlockly.utils.object.inherits(Blockly.Events.Ui, Blockly.Events.Abstract);\n\n/**\n * Type of this event.\n * @type {string}\n */\nBlockly.Events.Ui.prototype.type = Blockly.Events.UI;\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\nBlockly.Events.Ui.prototype.toJson = function() {\n  var json = Blockly.Events.Ui.superClass_.toJson.call(this);\n  json['element'] = this.element;\n  if (this.newValue !== undefined) {\n    json['newValue'] = this.newValue;\n  }\n  if (this.blockId) {\n    json['blockId'] = this.blockId;\n  }\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.Ui.prototype.fromJson = function(json) {\n  Blockly.Events.Ui.superClass_.fromJson.call(this, json);\n  this.element = json['element'];\n  this.newValue = json['newValue'];\n  this.blockId = json['blockId'];\n};\n"],"file":"ui_events.min.js"}