'use strict';goog.provide("Blockly.Events.BlockBase");goog.provide("Blockly.Events.BlockChange");goog.provide("Blockly.Events.BlockCreate");goog.provide("Blockly.Events.BlockDelete");goog.provide("Blockly.Events.BlockMove");goog.provide("Blockly.Events.Change");goog.provide("Blockly.Events.Create");goog.provide("Blockly.Events.Delete");goog.provide("Blockly.Events.Move");goog.require("Blockly.Events");goog.require("Blockly.Events.Abstract");goog.require("Blockly.utils.Coordinate");goog.require("Blockly.utils.object");goog.require("Blockly.utils.xml");Blockly.Events.BlockBase=function(a){Blockly.Events.BlockBase.superClass_.constructor.call(this);this.blockId=a.id;this.workspaceId=a.workspace.id};Blockly.utils.object.inherits(Blockly.Events.BlockBase,Blockly.Events.Abstract);Blockly.Events.BlockBase.prototype.toJson=function(){var a=Blockly.Events.BlockBase.superClass_.toJson.call(this);a.blockId=this.blockId;return a};Blockly.Events.BlockBase.prototype.fromJson=function(a){Blockly.Events.BlockBase.superClass_.fromJson.call(this,a);this.blockId=a.blockId};Blockly.Events.Change=function(a,b,c,d,e){if(!a){return}Blockly.Events.Change.superClass_.constructor.call(this,a);this.element=b;this.name=c;this.oldValue=d;this.newValue=e};Blockly.utils.object.inherits(Blockly.Events.Change,Blockly.Events.BlockBase);Blockly.Events.BlockChange=Blockly.Events.Change;Blockly.Events.Change.prototype.type=Blockly.Events.CHANGE;Blockly.Events.Change.prototype.toJson=function(){var a=Blockly.Events.Change.superClass_.toJson.call(this);a.element=this.element;if(this.name){a.name=this.name}a.newValue=this.newValue;return a};Blockly.Events.Change.prototype.fromJson=function(a){Blockly.Events.Change.superClass_.fromJson.call(this,a);this.element=a.element;this.name=a.name;this.newValue=a.newValue};Blockly.Events.Change.prototype.isNull=function(){return this.oldValue==this.newValue};Blockly.Events.Change.prototype.run=function(a){var b=this.getEventWorkspace_(),c=b.getBlockById(this.blockId);if(!c){console.warn("Can't change non-existent block: "+this.blockId);return}if(c.mutator){c.mutator.setVisible(!1)}var d=a?this.newValue:this.oldValue;switch(this.element){case"field":var e=c.getField(this.name);if(e){e.setValue(d)}else{console.warn("Can't set non-existent field: "+this.name)}break;case"comment":c.setCommentText(d||null);break;case"collapsed":c.setCollapsed(!!d);break;case"disabled":c.setEnabled(!d);break;case"inline":c.setInputsInline(!!d);break;case"mutation":var f="";if(c.mutationToDom){var g=c.mutationToDom();f=g&&Blockly.Xml.domToText(g)}if(c.domToMutation){var h=Blockly.Xml.textToDom(d||"<mutation/>");c.domToMutation(h)}Blockly.Events.fire(new Blockly.Events.Change(c,"mutation",null,f,d));break;default:console.warn("Unknown change type: "+this.element);}};Blockly.Events.Create=function(a){if(!a){return}Blockly.Events.Create.superClass_.constructor.call(this,a);if(a.workspace.rendered){this.xml=Blockly.Xml.blockToDomWithXY(a)}else{this.xml=Blockly.Xml.blockToDom(a)}this.ids=Blockly.Events.getDescendantIds(a)};Blockly.utils.object.inherits(Blockly.Events.Create,Blockly.Events.BlockBase);Blockly.Events.BlockCreate=Blockly.Events.Create;Blockly.Events.Create.prototype.type=Blockly.Events.CREATE;Blockly.Events.Create.prototype.toJson=function(){var a=Blockly.Events.Create.superClass_.toJson.call(this);a.xml=Blockly.Xml.domToText(this.xml);a.ids=this.ids;return a};Blockly.Events.Create.prototype.fromJson=function(a){Blockly.Events.Create.superClass_.fromJson.call(this,a);this.xml=Blockly.Xml.textToDom(a.xml);this.ids=a.ids};Blockly.Events.Create.prototype.run=function(a){var b=this.getEventWorkspace_();if(a){var c=Blockly.utils.xml.createElement("xml");c.appendChild(this.xml);Blockly.Xml.domToWorkspace(c,b)}else{for(var d=0,e,f;e=this.ids[d];d++){f=b.getBlockById(e);if(f){f.dispose(!1)}else if(e==this.blockId){console.warn("Can't uncreate non-existent block: "+e)}}}};Blockly.Events.Delete=function(a){if(!a){return}if(a.getParent()){throw Error("Connected blocks cannot be deleted.")}Blockly.Events.Delete.superClass_.constructor.call(this,a);if(a.workspace.rendered){this.oldXml=Blockly.Xml.blockToDomWithXY(a)}else{this.oldXml=Blockly.Xml.blockToDom(a)}this.ids=Blockly.Events.getDescendantIds(a)};Blockly.utils.object.inherits(Blockly.Events.Delete,Blockly.Events.BlockBase);Blockly.Events.BlockDelete=Blockly.Events.Delete;Blockly.Events.Delete.prototype.type=Blockly.Events.DELETE;Blockly.Events.Delete.prototype.toJson=function(){var a=Blockly.Events.Delete.superClass_.toJson.call(this);a.ids=this.ids;return a};Blockly.Events.Delete.prototype.fromJson=function(a){Blockly.Events.Delete.superClass_.fromJson.call(this,a);this.ids=a.ids};Blockly.Events.Delete.prototype.run=function(a){var b=this.getEventWorkspace_();if(a){for(var c=0,d,e;d=this.ids[c];c++){e=b.getBlockById(d);if(e){e.dispose(!1)}else if(d==this.blockId){console.warn("Can't delete non-existent block: "+d)}}}else{var f=Blockly.utils.xml.createElement("xml");f.appendChild(this.oldXml);Blockly.Xml.domToWorkspace(f,b)}};Blockly.Events.Move=function(a){if(!a){return}Blockly.Events.Move.superClass_.constructor.call(this,a);var b=this.currentLocation_();this.oldParentId=b.parentId;this.oldInputName=b.inputName;this.oldCoordinate=b.coordinate};Blockly.utils.object.inherits(Blockly.Events.Move,Blockly.Events.BlockBase);Blockly.Events.BlockMove=Blockly.Events.Move;Blockly.Events.Move.prototype.type=Blockly.Events.MOVE;Blockly.Events.Move.prototype.toJson=function(){var a=Blockly.Events.Move.superClass_.toJson.call(this);if(this.newParentId){a.newParentId=this.newParentId}if(this.newInputName){a.newInputName=this.newInputName}if(this.newCoordinate){a.newCoordinate=Math.round(this.newCoordinate.x)+","+Math.round(this.newCoordinate.y)}return a};Blockly.Events.Move.prototype.fromJson=function(a){Blockly.Events.Move.superClass_.fromJson.call(this,a);this.newParentId=a.newParentId;this.newInputName=a.newInputName;if(a.newCoordinate){var b=a.newCoordinate.split(",");this.newCoordinate=new Blockly.utils.Coordinate(+b[0],+b[1])}};Blockly.Events.Move.prototype.recordNew=function(){var a=this.currentLocation_();this.newParentId=a.parentId;this.newInputName=a.inputName;this.newCoordinate=a.coordinate};Blockly.Events.Move.prototype.currentLocation_=function(){var a=this.getEventWorkspace_(),b=a.getBlockById(this.blockId),c={},d=b.getParent();if(d){c.parentId=d.id;var e=d.getInputWithBlock(b);if(e){c.inputName=e.name}}else{c.coordinate=b.getRelativeToSurfaceXY()}return c};Blockly.Events.Move.prototype.isNull=function(){return this.oldParentId==this.newParentId&&this.oldInputName==this.newInputName&&Blockly.utils.Coordinate.equals(this.oldCoordinate,this.newCoordinate)};Blockly.Events.Move.prototype.run=function(a){var b=this.getEventWorkspace_(),c=b.getBlockById(this.blockId);if(!c){console.warn("Can't move non-existent block: "+this.blockId);return}var d=a?this.newParentId:this.oldParentId,e=a?this.newInputName:this.oldInputName,f=a?this.newCoordinate:this.oldCoordinate,g=null;if(d){g=b.getBlockById(d);if(!g){console.warn("Can't connect to non-existent block: "+d);return}}if(c.getParent()){c.unplug()}if(f){var h=c.getRelativeToSurfaceXY();c.moveBy(f.x-h.x,f.y-h.y)}else{var i=c.outputConnection||c.previousConnection,j;if(e){var k=g.getInput(e);if(k){j=k.connection}}else if(i.type==Blockly.PREVIOUS_STATEMENT){j=g.nextConnection}if(j){i.connect(j)}else{console.warn("Can't connect to non-existent input: "+e)}}};
//# sourceMappingURL=block_events.min.js.map
