{"version":3,"sources":["../../../src/blockly/core/field_label.js"],"names":["goog","provide","require","Blockly","FieldLabel","opt_value","opt_class","opt_config","class_","superClass_","constructor","call","utils","object","inherits","Field","prototype","DEFAULT_VALUE","fromJson","options","text","replaceMessageReferences","EDITABLE","configure_","config","initView","createTextElement_","dom","addClass","textElement_","doClassValidation_","opt_newValue","setClass","cssClass","removeClass","fieldRegistry","register"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,oBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,eAAb,EACAF,IAAI,CAACE,OAAL,CAAa,uBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,eAAb,EACAF,IAAI,CAACE,OAAL,CAAa,mBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,sBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,oBAAb,EAcAC,OAAO,CAACC,UAAR,CAAqB,SAASC,CAAT,CAAoBC,CAApB,CAA+BC,CAA/B,CAA2C,CAM9D,KAAKC,MAAL,CAAc,IAAd,CAEAL,OAAO,CAACC,UAAR,CAAmBK,WAAnB,CAA+BC,WAA/B,CAA2CC,IAA3C,CACI,IADJ,CACUN,CADV,CACqB,IADrB,CAC2BE,CAD3B,EAGA,GAAI,CAACA,CAAL,CAAiB,CACf,KAAKC,MAAL,CAAcF,CAAS,EAAI,IAC5B,CACF,CAdD,CAeAH,OAAO,CAACS,KAAR,CAAcC,MAAd,CAAqBC,QAArB,CAA8BX,OAAO,CAACC,UAAtC,CAAkDD,OAAO,CAACY,KAA1D,EAOAZ,OAAO,CAACC,UAAR,CAAmBY,SAAnB,CAA6BC,aAA7B,CAA6C,EAA7C,CAUAd,OAAO,CAACC,UAAR,CAAmBc,QAAnB,CAA8B,SAASC,CAAT,CAAkB,CAC9C,GAAIC,CAAAA,CAAI,CAAGjB,OAAO,CAACS,KAAR,CAAcS,wBAAd,CAAuCF,CAAO,KAA9C,CAAX,CACA,MAAO,IAAIhB,CAAAA,OAAO,CAACC,UAAZ,CAAuBgB,CAAvB,QAAwCD,CAAxC,CACR,CAHD,CAUAhB,OAAO,CAACC,UAAR,CAAmBY,SAAnB,CAA6BM,QAA7B,IAKAnB,OAAO,CAACC,UAAR,CAAmBY,SAAnB,CAA6BO,UAA7B,CAA0C,SAASC,CAAT,CAAiB,CACzDrB,OAAO,CAACC,UAAR,CAAmBK,WAAnB,CAA+Bc,UAA/B,CAA0CZ,IAA1C,CAA+C,IAA/C,CAAqDa,CAArD,EACA,KAAKhB,MAAL,CAAcgB,CAAM,CAAC,OAAD,CACrB,CAHD,CASArB,OAAO,CAACC,UAAR,CAAmBY,SAAnB,CAA6BS,QAA7B,CAAwC,UAAW,CACjD,KAAKC,kBAAL,GACA,GAAI,KAAKlB,MAAT,CAAiB,CACfL,OAAO,CAACS,KAAR,CAAce,GAAd,CAAkBC,QAAlB,CACoC,KAAKC,YADzC,CACwD,KAAKrB,MAD7D,CAED,CACF,CAND,CAcAL,OAAO,CAACC,UAAR,CAAmBY,SAAnB,CAA6Bc,kBAA7B,CAAkD,SAASC,CAAT,CAAuB,CACvE,GAAqB,IAAjB,GAAAA,CAAY,EAAaA,CAAY,SAAzC,CAAyD,CACvD,MAAO,KACR,CACD,MAAcA,CAAAA,CAAd,GACD,CALD,CAWA5B,OAAO,CAACC,UAAR,CAAmBY,SAAnB,CAA6BgB,QAA7B,CAAwC,SAASC,CAAT,CAAmB,CACzD,GAAI,KAAKJ,YAAT,CAAuB,CAGrB,GAAI,KAAKrB,MAAT,CAAiB,CACfL,OAAO,CAACS,KAAR,CAAce,GAAd,CAAkBO,WAAlB,CAA8B,KAAKL,YAAnC,CAAiD,KAAKrB,MAAtD,CACD,CACD,GAAIyB,CAAJ,CAAc,CACZ9B,OAAO,CAACS,KAAR,CAAce,GAAd,CAAkBC,QAAlB,CAA2B,KAAKC,YAAhC,CAA8CI,CAA9C,CACD,CACF,CACD,KAAKzB,MAAL,CAAcyB,CACf,CAZD,CAcA9B,OAAO,CAACgC,aAAR,CAAsBC,QAAtB,CAA+B,aAA/B,CAA8CjC,OAAO,CAACC,UAAtD","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Non-editable, non-serializable text field.  Used for titles,\n *    labels, etc.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldLabel');\n\ngoog.require('Blockly.Field');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.Size');\n\n\n/**\n * Class for a non-editable, non-serializable text field.\n * @param {string=} opt_value The initial value of the field. Should cast to a\n *    string. Defaults to an empty string if null or undefined.\n * @param {string=} opt_class Optional CSS class for the field's text.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/label#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.Field}\n * @constructor\n */\nBlockly.FieldLabel = function(opt_value, opt_class, opt_config) {\n  /**\n   * The html class name to use for this field.\n   * @type {?string}\n   * @private\n   */\n  this.class_ = null;\n\n  Blockly.FieldLabel.superClass_.constructor.call(\n      this, opt_value, null, opt_config);\n\n  if (!opt_config) {  // If the config was not passed use old configuration.\n    this.class_ = opt_class || null;\n  }\n};\nBlockly.utils.object.inherits(Blockly.FieldLabel, Blockly.Field);\n\n/**\n * The default value for this field.\n * @type {*}\n * @protected\n */\nBlockly.FieldLabel.prototype.DEFAULT_VALUE = '';\n\n/**\n * Construct a FieldLabel from a JSON arg object,\n * dereferencing any string table references.\n * @param {!Object} options A JSON object with options (text, and class).\n * @return {!Blockly.FieldLabel} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldLabel.fromJson = function(options) {\n  var text = Blockly.utils.replaceMessageReferences(options['text']);\n  return new Blockly.FieldLabel(text, undefined, options);\n};\n\n/**\n * Editable fields usually show some sort of UI indicating they are\n * editable. This field should not.\n * @type {boolean}\n */\nBlockly.FieldLabel.prototype.EDITABLE = false;\n\n/**\n * @override\n */\nBlockly.FieldLabel.prototype.configure_ = function(config) {\n  Blockly.FieldLabel.superClass_.configure_.call(this, config);\n  this.class_ = config['class'];\n};\n\n/**\n * Create block UI for this label.\n * @package\n */\nBlockly.FieldLabel.prototype.initView = function() {\n  this.createTextElement_();\n  if (this.class_) {\n    Blockly.utils.dom.addClass(\n        /** @type {!SVGTextElement} */ (this.textElement_), this.class_);\n  }\n};\n\n/**\n * Ensure that the input value casts to a valid string.\n * @param {*=} opt_newValue The input value.\n * @return {?string} A valid string, or null if invalid.\n * @protected\n */\nBlockly.FieldLabel.prototype.doClassValidation_ = function(opt_newValue) {\n  if (opt_newValue === null || opt_newValue === undefined) {\n    return null;\n  }\n  return String(opt_newValue);\n};\n\n/**\n * Set the css class applied to the field's textElement_.\n * @param {?string} cssClass The new css class name, or null to remove.\n */\nBlockly.FieldLabel.prototype.setClass = function(cssClass) {\n  if (this.textElement_) {\n    // This check isn't necessary, but it's faster than letting removeClass\n    // figure it out.\n    if (this.class_) {\n      Blockly.utils.dom.removeClass(this.textElement_, this.class_);\n    }\n    if (cssClass) {\n      Blockly.utils.dom.addClass(this.textElement_, cssClass);\n    }\n  }\n  this.class_ = cssClass;\n};\n\nBlockly.fieldRegistry.register('field_label', Blockly.FieldLabel);\n"],"file":"field_label.min.js"}