{"version":3,"sources":["../../../src/blockly/core/grid.js"],"names":["goog","provide","require","Blockly","Grid","pattern","options","gridPattern_","spacing_","length_","line1_","firstChild","line2_","nextSibling","snapToGrid_","prototype","scale_","dispose","shouldSnap","getSpacing","getPatternId","id","update","scale","safeSpacing","setAttribute","half","Math","floor","start","end","setLineAttributes_","line","width","x1","x2","y1","y2","moveTo","x","y","utils","userAgent","IE","EDGE","createDom","rnd","gridOptions","defs","gridPattern","dom","createSvgElement"],"mappings":"AAWA,aAEAA,IAAI,CAACC,OAAL,CAAa,cAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,mBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,yBAAb,EAYAC,OAAO,CAACC,IAAR,CAAe,SAASC,CAAT,CAAkBC,CAAlB,CAA2B,CAMxC,KAAKC,YAAL,CAAoBF,CAApB,CAOA,KAAKG,QAAL,CAAgBF,CAAO,QAAvB,CAOA,KAAKG,OAAL,CAAeH,CAAO,OAAtB,CAOA,KAAKI,MAAL,CAAyCL,CAAO,CAACM,UAAjD,CAOA,KAAKC,MAAL,CAAc,KAAKF,MAAL,EACgB,KAAKA,MAAL,CAAYG,WAD1C,CAQA,KAAKC,WAAL,CAAmBR,CAAO,KAC3B,CA3CD,CAmDAH,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBC,MAAvB,CAAgC,CAAhC,CAOAb,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBE,OAAvB,CAAiC,UAAW,CAC1C,KAAKV,YAAL,CAAoB,IACrB,CAFD,CASAJ,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBG,UAAvB,CAAoC,UAAW,CAC7C,MAAO,MAAKJ,WACb,CAFD,CASAX,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBI,UAAvB,CAAoC,UAAW,CAC7C,MAAO,MAAKX,QACb,CAFD,CAUAL,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBK,YAAvB,CAAsC,UAAW,CAC/C,MAAO,MAAKb,YAAL,CAAkBc,EAC1B,CAFD,CASAlB,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBO,MAAvB,CAAgC,SAASC,CAAT,CAAgB,CAC9C,KAAKP,MAAL,CAAcO,CAAd,CAEA,GAAIC,CAAAA,CAAW,CAAI,KAAKhB,QAAL,CAAgBe,CAAjB,EAA2B,GAA7C,CAEA,KAAKhB,YAAL,CAAkBkB,YAAlB,CAA+B,OAA/B,CAAwCD,CAAxC,EACA,KAAKjB,YAAL,CAAkBkB,YAAlB,CAA+B,QAA/B,CAAyCD,CAAzC,EAN8C,GAQ1CE,CAAAA,CAAI,CAAGC,IAAI,CAACC,KAAL,CAAW,KAAKpB,QAAL,CAAgB,CAA3B,EAAgC,EARG,CAS1CqB,CAAK,CAAGH,CAAI,CAAG,KAAKjB,OAAL,CAAe,CATY,CAU1CqB,CAAG,CAAGJ,CAAI,CAAG,KAAKjB,OAAL,CAAe,CAVc,CAY9CiB,CAAI,EAAIH,CAAR,CACAM,CAAK,EAAIN,CAAT,CACAO,CAAG,EAAIP,CAAP,CAEA,KAAKQ,kBAAL,CAAwB,KAAKrB,MAA7B,CAAqCa,CAArC,CAA4CM,CAA5C,CAAmDC,CAAnD,CAAwDJ,CAAxD,CAA8DA,CAA9D,EACA,KAAKK,kBAAL,CAAwB,KAAKnB,MAA7B,CAAqCW,CAArC,CAA4CG,CAA5C,CAAkDA,CAAlD,CAAwDG,CAAxD,CAA+DC,CAA/D,CACD,CAlBD,CA+BA3B,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBgB,kBAAvB,CAA4C,SAASC,CAAT,CAAeC,CAAf,CACxCC,CADwC,CACpCC,CADoC,CAChCC,CADgC,CAC5BC,CAD4B,CACxB,CAClB,GAAIL,CAAJ,CAAU,CACRA,CAAI,CAACP,YAAL,CAAkB,cAAlB,CAAkCQ,CAAlC,EACAD,CAAI,CAACP,YAAL,CAAkB,IAAlB,CAAwBS,CAAxB,EACAF,CAAI,CAACP,YAAL,CAAkB,IAAlB,CAAwBW,CAAxB,EACAJ,CAAI,CAACP,YAAL,CAAkB,IAAlB,CAAwBU,CAAxB,EACAH,CAAI,CAACP,YAAL,CAAkB,IAAlB,CAAwBY,CAAxB,CACD,CACF,CATD,CAkBAlC,OAAO,CAACC,IAAR,CAAaW,SAAb,CAAuBuB,MAAvB,CAAgC,SAASC,CAAT,CAAYC,CAAZ,CAAe,CAC7C,KAAKjC,YAAL,CAAkBkB,YAAlB,CAA+B,GAA/B,CAAoCc,CAApC,EACA,KAAKhC,YAAL,CAAkBkB,YAAlB,CAA+B,GAA/B,CAAoCe,CAApC,EAEA,GAAIrC,OAAO,CAACsC,KAAR,CAAcC,SAAd,CAAwBC,EAAxB,EAA8BxC,OAAO,CAACsC,KAAR,CAAcC,SAAd,CAAwBE,IAA1D,CAAgE,CAG9D,KAAKtB,MAAL,CAAY,KAAKN,MAAjB,CACD,CACF,CATD,CAmBAb,OAAO,CAACC,IAAR,CAAayC,SAAb,CAAyB,SAASC,CAAT,CAAcC,CAAd,CAA2BC,CAA3B,CAAiC,CAOxD,GAAIC,CAAAA,CAAW,CAAG9C,OAAO,CAACsC,KAAR,CAAcS,GAAd,CAAkBC,gBAAlB,CAAmC,SAAnC,CACd,CACE,GAAM,qBAAuBL,CAD/B,CAEE,aAAgB,gBAFlB,CADc,CAIXE,CAJW,CAAlB,CAKA,GAA4B,CAAxB,CAAAD,CAAW,OAAX,EAAsD,CAAzB,CAAAA,CAAW,QAA5C,CAA6D,CAC3D5C,OAAO,CAACsC,KAAR,CAAcS,GAAd,CAAkBC,gBAAlB,CAAmC,MAAnC,CACI,CAAC,OAAUJ,CAAW,OAAtB,CADJ,CACuCE,CADvC,EAEA,GAA4B,CAAxB,CAAAF,CAAW,OAAf,CAA+B,CAC7B5C,OAAO,CAACsC,KAAR,CAAcS,GAAd,CAAkBC,gBAAlB,CAAmC,MAAnC,CACI,CAAC,OAAUJ,CAAW,OAAtB,CADJ,CACuCE,CADvC,CAED,CAEF,CARD,IAQO,CAEL9C,OAAO,CAACsC,KAAR,CAAcS,GAAd,CAAkBC,gBAAlB,CAAmC,MAAnC,CAA2C,EAA3C,CAA+CF,CAA/C,CACD,CACD,MAAOA,CAAAA,CACR,CAzBD","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object for configuring and updating a workspace grid in\n * Blockly.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.Grid');\n\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.userAgent');\n\n\n/**\n * Class for a workspace's grid.\n * @param {!SVGElement} pattern The grid's SVG pattern, created during\n *     injection.\n * @param {!Object} options A dictionary of normalized options for the grid.\n *     See grid documentation:\n *     https://developers.google.com/blockly/guides/configure/web/grid\n * @constructor\n */\nBlockly.Grid = function(pattern, options) {\n  /**\n   * The grid's SVG pattern, created during injection.\n   * @type {!SVGElement}\n   * @private\n   */\n  this.gridPattern_ = pattern;\n\n  /**\n   * The spacing of the grid lines (in px).\n   * @type {number}\n   * @private\n   */\n  this.spacing_ = options['spacing'];\n\n  /**\n   * How long the grid lines should be (in px).\n   * @type {number}\n   * @private\n   */\n  this.length_ = options['length'];\n\n  /**\n   * The horizontal grid line, if it exists.\n   * @type {SVGElement}\n   * @private\n   */\n  this.line1_ = /** @type {SVGElement} */ (pattern.firstChild);\n\n  /**\n   * The vertical grid line, if it exists.\n   * @type {SVGElement}\n   * @private\n   */\n  this.line2_ = this.line1_ &&\n    (/** @type {SVGElement} */ (this.line1_.nextSibling));\n\n  /**\n   * Whether blocks should snap to the grid.\n   * @type {boolean}\n   * @private\n   */\n  this.snapToGrid_ = options['snap'];\n};\n\n/**\n * The scale of the grid, used to set stroke width on grid lines.\n * This should always be the same as the workspace scale.\n * @type {number}\n * @private\n */\nBlockly.Grid.prototype.scale_ = 1;\n\n/**\n * Dispose of this grid and unlink from the DOM.\n * @package\n * @suppress {checkTypes}\n */\nBlockly.Grid.prototype.dispose = function() {\n  this.gridPattern_ = null;\n};\n\n/**\n * Whether blocks should snap to the grid, based on the initial configuration.\n * @return {boolean} True if blocks should snap, false otherwise.\n * @package\n */\nBlockly.Grid.prototype.shouldSnap = function() {\n  return this.snapToGrid_;\n};\n\n/**\n * Get the spacing of the grid points (in px).\n * @return {number} The spacing of the grid points.\n * @package\n */\nBlockly.Grid.prototype.getSpacing = function() {\n  return this.spacing_;\n};\n\n/**\n * Get the id of the pattern element, which should be randomized to avoid\n * conflicts with other Blockly instances on the page.\n * @return {string} The pattern ID.\n * @package\n */\nBlockly.Grid.prototype.getPatternId = function() {\n  return this.gridPattern_.id;\n};\n\n/**\n * Update the grid with a new scale.\n * @param {number} scale The new workspace scale.\n * @package\n */\nBlockly.Grid.prototype.update = function(scale) {\n  this.scale_ = scale;\n  // MSIE freaks if it sees a 0x0 pattern, so set empty patterns to 100x100.\n  var safeSpacing = (this.spacing_ * scale) || 100;\n\n  this.gridPattern_.setAttribute('width', safeSpacing);\n  this.gridPattern_.setAttribute('height', safeSpacing);\n\n  var half = Math.floor(this.spacing_ / 2) + 0.5;\n  var start = half - this.length_ / 2;\n  var end = half + this.length_ / 2;\n\n  half *= scale;\n  start *= scale;\n  end *= scale;\n\n  this.setLineAttributes_(this.line1_, scale, start, end, half, half);\n  this.setLineAttributes_(this.line2_, scale, half, half, start, end);\n};\n\n/**\n * Set the attributes on one of the lines in the grid.  Use this to update the\n * length and stroke width of the grid lines.\n * @param {SVGElement} line Which line to update.\n * @param {number} width The new stroke size (in px).\n * @param {number} x1 The new x start position of the line (in px).\n * @param {number} x2 The new x end position of the line (in px).\n * @param {number} y1 The new y start position of the line (in px).\n * @param {number} y2 The new y end position of the line (in px).\n * @private\n */\nBlockly.Grid.prototype.setLineAttributes_ = function(line, width,\n    x1, x2, y1, y2) {\n  if (line) {\n    line.setAttribute('stroke-width', width);\n    line.setAttribute('x1', x1);\n    line.setAttribute('y1', y1);\n    line.setAttribute('x2', x2);\n    line.setAttribute('y2', y2);\n  }\n};\n\n/**\n * Move the grid to a new x and y position, and make sure that change is\n * visible.\n * @param {number} x The new x position of the grid (in px).\n * @param {number} y The new y position of the grid (in px).\n * @package\n */\nBlockly.Grid.prototype.moveTo = function(x, y) {\n  this.gridPattern_.setAttribute('x', x);\n  this.gridPattern_.setAttribute('y', y);\n\n  if (Blockly.utils.userAgent.IE || Blockly.utils.userAgent.EDGE) {\n    // IE/Edge doesn't notice that the x/y offsets have changed.\n    // Force an update.\n    this.update(this.scale_);\n  }\n};\n\n/**\n * Create the DOM for the grid described by options.\n * @param {string} rnd A random ID to append to the pattern's ID.\n * @param {!Object} gridOptions The object containing grid configuration.\n * @param {!SVGElement} defs The root SVG element for this workspace's defs.\n * @return {!SVGElement} The SVG element for the grid pattern.\n * @package\n */\nBlockly.Grid.createDom = function(rnd, gridOptions, defs) {\n  /*\n    <pattern id=\"blocklyGridPattern837493\" patternUnits=\"userSpaceOnUse\">\n      <rect stroke=\"#888\" />\n      <rect stroke=\"#888\" />\n    </pattern>\n  */\n  var gridPattern = Blockly.utils.dom.createSvgElement('pattern',\n      {\n        'id': 'blocklyGridPattern' + rnd,\n        'patternUnits': 'userSpaceOnUse'\n      }, defs);\n  if (gridOptions['length'] > 0 && gridOptions['spacing'] > 0) {\n    Blockly.utils.dom.createSvgElement('line',\n        {'stroke': gridOptions['colour']}, gridPattern);\n    if (gridOptions['length'] > 1) {\n      Blockly.utils.dom.createSvgElement('line',\n          {'stroke': gridOptions['colour']}, gridPattern);\n    }\n    // x1, y1, x1, x2 properties will be set later in update.\n  } else {\n    // Edge 16 doesn't handle empty patterns\n    Blockly.utils.dom.createSvgElement('line', {}, gridPattern);\n  }\n  return gridPattern;\n};\n"],"file":"grid.min.js"}