{"version":3,"sources":["../../../src/blockly/core/generator.js"],"names":["goog","provide","require","Blockly","Generator","name","name_","FUNCTION_NAME_PLACEHOLDER_REGEXP_","RegExp","FUNCTION_NAME_PLACEHOLDER_","NAME_TYPE","prototype","INFINITE_LOOP_TRAP","STATEMENT_PREFIX","STATEMENT_SUFFIX","INDENT","COMMENT_WRAP","ORDER_OVERRIDES","workspaceToCode","workspace","console","warn","getMainWorkspace","code","init","blocks","getTopBlocks","i","block","line","blockToCode","Array","isArray","outputConnection","scrubNakedValue","suppressPrefixSuffix","injectId","push","join","finish","replace","prefixLines","text","prefix","allNestedComments","comments","getDescendants","comment","length","getCommentText","opt_thisOnly","isEnabled","getNextBlock","isInsertionMarker","getChildren","func","type","Error","call","TypeError","scrub_","SyntaxError","valueToCode","outerOrder","isNaN","targetBlock","getInputTargetBlock","tuple","innerOrder","parensNeeded","outerOrderClass","Math","floor","innerOrderClass","statementToCode","addLoopTrap","branch","msg","id","RESERVED_WORDS_","addReservedWords","words","definitions_","functionNames_","variableDB_","provideFunction_","desiredName","functionName","getDistinctName","PROCEDURE_CATEGORY_NAME","codeText","oldCodeText","_block"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility functions for generating executable code from\n * Blockly code.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Generator');\n\ngoog.require('Blockly.Block');\n\n\n/**\n * Class for a code generator that translates the blocks into a language.\n * @param {string} name Language name of this generator.\n * @constructor\n */\nBlockly.Generator = function(name) {\n  this.name_ = name;\n  this.FUNCTION_NAME_PLACEHOLDER_REGEXP_ =\n      new RegExp(this.FUNCTION_NAME_PLACEHOLDER_, 'g');\n};\n\n/**\n * Category to separate generated function names from variables and procedures.\n */\nBlockly.Generator.NAME_TYPE = 'generated_function';\n\n/**\n * Arbitrary code to inject into locations that risk causing infinite loops.\n * Any instances of '%1' will be replaced by the block ID that failed.\n * E.g. '  checkTimeout(%1);\\n'\n * @type {?string}\n */\nBlockly.Generator.prototype.INFINITE_LOOP_TRAP = null;\n\n/**\n * Arbitrary code to inject before every statement.\n * Any instances of '%1' will be replaced by the block ID of the statement.\n * E.g. 'highlight(%1);\\n'\n * @type {?string}\n */\nBlockly.Generator.prototype.STATEMENT_PREFIX = null;\n\n/**\n * Arbitrary code to inject after every statement.\n * Any instances of '%1' will be replaced by the block ID of the statement.\n * E.g. 'highlight(%1);\\n'\n * @type {?string}\n */\nBlockly.Generator.prototype.STATEMENT_SUFFIX = null;\n\n/**\n * The method of indenting.  Defaults to two spaces, but language generators\n * may override this to increase indent or change to tabs.\n * @type {string}\n */\nBlockly.Generator.prototype.INDENT = '  ';\n\n/**\n * Maximum length for a comment before wrapping.  Does not account for\n * indenting level.\n * @type {number}\n */\nBlockly.Generator.prototype.COMMENT_WRAP = 60;\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array.<!Array.<number>>}\n */\nBlockly.Generator.prototype.ORDER_OVERRIDES = [];\n\n/**\n * Generate code for all blocks in the workspace to the specified language.\n * @param {Blockly.Workspace} workspace Workspace to generate code from.\n * @return {string} Generated code.\n */\nBlockly.Generator.prototype.workspaceToCode = function(workspace) {\n  if (!workspace) {\n    // Backwards compatibility from before there could be multiple workspaces.\n    console.warn('No workspace specified in workspaceToCode call.  Guessing.');\n    workspace = Blockly.getMainWorkspace();\n  }\n  var code = [];\n  this.init(workspace);\n  var blocks = workspace.getTopBlocks(true);\n  for (var i = 0, block; (block = blocks[i]); i++) {\n    var line = this.blockToCode(block);\n    if (Array.isArray(line)) {\n      // Value blocks return tuples of code and operator order.\n      // Top-level blocks don't care about operator order.\n      line = line[0];\n    }\n    if (line) {\n      if (block.outputConnection) {\n        // This block is a naked value.  Ask the language's code generator if\n        // it wants to append a semicolon, or something.\n        line = this.scrubNakedValue(line);\n        if (this.STATEMENT_PREFIX && !block.suppressPrefixSuffix) {\n          line = this.injectId(this.STATEMENT_PREFIX, block) + line;\n        }\n        if (this.STATEMENT_SUFFIX && !block.suppressPrefixSuffix) {\n          line = line + this.injectId(this.STATEMENT_SUFFIX, block);\n        }\n      }\n      code.push(line);\n    }\n  }\n  code = code.join('\\n');  // Blank line between each section.\n  code = this.finish(code);\n  // Final scrubbing of whitespace.\n  code = code.replace(/^\\s+\\n/, '');\n  code = code.replace(/\\n\\s+$/, '\\n');\n  code = code.replace(/[ \\t]+\\n/g, '\\n');\n  return code;\n};\n\n// The following are some helpful functions which can be used by multiple\n// languages.\n\n/**\n * Prepend a common prefix onto each line of code.\n * Intended for indenting code or adding comment markers.\n * @param {string} text The lines of code.\n * @param {string} prefix The common prefix.\n * @return {string} The prefixed lines of code.\n */\nBlockly.Generator.prototype.prefixLines = function(text, prefix) {\n  return prefix + text.replace(/(?!\\n$)\\n/g, '\\n' + prefix);\n};\n\n/**\n * Recursively spider a tree of blocks, returning all their comments.\n * @param {!Blockly.Block} block The block from which to start spidering.\n * @return {string} Concatenated list of comments.\n */\nBlockly.Generator.prototype.allNestedComments = function(block) {\n  var comments = [];\n  var blocks = block.getDescendants(true);\n  for (var i = 0; i < blocks.length; i++) {\n    var comment = blocks[i].getCommentText();\n    if (comment) {\n      comments.push(comment);\n    }\n  }\n  // Append an empty string to create a trailing line break when joined.\n  if (comments.length) {\n    comments.push('');\n  }\n  return comments.join('\\n');\n};\n\n/**\n * Generate code for the specified block (and attached blocks).\n * @param {Blockly.Block} block The block to generate code for.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string|!Array} For statement blocks, the generated code.\n *     For value blocks, an array containing the generated code and an\n *     operator order value.  Returns '' if block is null.\n */\nBlockly.Generator.prototype.blockToCode = function(block, opt_thisOnly) {\n  if (!block) {\n    return '';\n  }\n  if (!block.isEnabled()) {\n    // Skip past this block if it is disabled.\n    return opt_thisOnly ? '' : this.blockToCode(block.getNextBlock());\n  }\n  if (block.isInsertionMarker()) {\n    // Skip past insertion markers.\n    return opt_thisOnly ? '' : this.blockToCode(block.getChildren(false)[0]);\n  }\n\n  var func = this[block.type];\n  if (typeof func != 'function') {\n    throw Error('Language \"' + this.name_ + '\" does not know how to generate ' +\n        ' code for block type \"' + block.type + '\".');\n  }\n  // First argument to func.call is the value of 'this' in the generator.\n  // Prior to 24 September 2013 'this' was the only way to access the block.\n  // The current preferred method of accessing the block is through the second\n  // argument to func.call, which becomes the first parameter to the generator.\n  var code = func.call(block, block);\n  if (Array.isArray(code)) {\n    // Value blocks return tuples of code and operator order.\n    if (!block.outputConnection) {\n      throw TypeError('Expecting string from statement block: ' + block.type);\n    }\n    return [this.scrub_(block, code[0], opt_thisOnly), code[1]];\n  } else if (typeof code == 'string') {\n    if (this.STATEMENT_PREFIX && !block.suppressPrefixSuffix) {\n      code = this.injectId(this.STATEMENT_PREFIX, block) + code;\n    }\n    if (this.STATEMENT_SUFFIX && !block.suppressPrefixSuffix) {\n      code = code + this.injectId(this.STATEMENT_SUFFIX, block);\n    }\n    return this.scrub_(block, code, opt_thisOnly);\n  } else if (code === null) {\n    // Block has handled code generation itself.\n    return '';\n  } else {\n    throw SyntaxError('Invalid code generated: ' + code);\n  }\n};\n\n/**\n * Generate code representing the specified value input.\n * @param {!Blockly.Block} block The block containing the input.\n * @param {string} name The name of the input.\n * @param {number} outerOrder The maximum binding strength (minimum order value)\n *     of any operators adjacent to \"block\".\n * @return {string} Generated code or '' if no blocks are connected or the\n *     specified input does not exist.\n */\nBlockly.Generator.prototype.valueToCode = function(block, name, outerOrder) {\n  if (isNaN(outerOrder)) {\n    throw TypeError('Expecting valid order from block: ' + block.type);\n  }\n  var targetBlock = block.getInputTargetBlock(name);\n  if (!targetBlock) {\n    return '';\n  }\n  var tuple = this.blockToCode(targetBlock);\n  if (tuple === '') {\n    // Disabled block.\n    return '';\n  }\n  // Value blocks must return code and order of operations info.\n  // Statement blocks must only return code.\n  if (!Array.isArray(tuple)) {\n    throw TypeError('Expecting tuple from value block: ' + targetBlock.type);\n  }\n  var code = tuple[0];\n  var innerOrder = tuple[1];\n  if (isNaN(innerOrder)) {\n    throw TypeError('Expecting valid order from value block: ' +\n        targetBlock.type);\n  }\n  if (!code) {\n    return '';\n  }\n\n  // Add parentheses if needed.\n  var parensNeeded = false;\n  var outerOrderClass = Math.floor(outerOrder);\n  var innerOrderClass = Math.floor(innerOrder);\n  if (outerOrderClass <= innerOrderClass) {\n    if (outerOrderClass == innerOrderClass &&\n        (outerOrderClass == 0 || outerOrderClass == 99)) {\n      // Don't generate parens around NONE-NONE and ATOMIC-ATOMIC pairs.\n      // 0 is the atomic order, 99 is the none order.  No parentheses needed.\n      // In all known languages multiple such code blocks are not order\n      // sensitive.  In fact in Python ('a' 'b') 'c' would fail.\n    } else {\n      // The operators outside this code are stronger than the operators\n      // inside this code.  To prevent the code from being pulled apart,\n      // wrap the code in parentheses.\n      parensNeeded = true;\n      // Check for special exceptions.\n      for (var i = 0; i < this.ORDER_OVERRIDES.length; i++) {\n        if (this.ORDER_OVERRIDES[i][0] == outerOrder &&\n            this.ORDER_OVERRIDES[i][1] == innerOrder) {\n          parensNeeded = false;\n          break;\n        }\n      }\n    }\n  }\n  if (parensNeeded) {\n    // Technically, this should be handled on a language-by-language basis.\n    // However all known (sane) languages use parentheses for grouping.\n    code = '(' + code + ')';\n  }\n  return code;\n};\n\n/**\n * Generate a code string representing the blocks attached to the named\n * statement input. Indent the code.\n * This is mainly used in generators. When trying to generate code to evaluate\n * look at using workspaceToCode or blockToCode.\n * @param {!Blockly.Block} block The block containing the input.\n * @param {string} name The name of the input.\n * @return {string} Generated code or '' if no blocks are connected.\n */\nBlockly.Generator.prototype.statementToCode = function(block, name) {\n  var targetBlock = block.getInputTargetBlock(name);\n  var code = this.blockToCode(targetBlock);\n  // Value blocks must return code and order of operations info.\n  // Statement blocks must only return code.\n  if (typeof code != 'string') {\n    throw TypeError('Expecting code from statement block: ' +\n        (targetBlock && targetBlock.type));\n  }\n  if (code) {\n    code = this.prefixLines(/** @type {string} */ (code), this.INDENT);\n  }\n  return code;\n};\n\n/**\n * Add an infinite loop trap to the contents of a loop.\n * Add statement suffix at the start of the loop block (right after the loop\n * statement executes), and a statement prefix to the end of the loop block\n * (right before the loop statement executes).\n * @param {string} branch Code for loop contents.\n * @param {!Blockly.Block} block Enclosing block.\n * @return {string} Loop contents, with infinite loop trap added.\n */\nBlockly.Generator.prototype.addLoopTrap = function(branch, block) {\n  if (this.INFINITE_LOOP_TRAP) {\n    branch = this.prefixLines(this.injectId(this.INFINITE_LOOP_TRAP, block),\n        this.INDENT) + branch;\n  }\n  if (this.STATEMENT_SUFFIX && !block.suppressPrefixSuffix) {\n    branch = this.prefixLines(this.injectId(this.STATEMENT_SUFFIX, block),\n        this.INDENT) + branch;\n  }\n  if (this.STATEMENT_PREFIX && !block.suppressPrefixSuffix) {\n    branch = branch + this.prefixLines(this.injectId(this.STATEMENT_PREFIX,\n        block), this.INDENT);\n  }\n  return branch;\n};\n\n/**\n * Inject a block ID into a message to replace '%1'.\n * Used for STATEMENT_PREFIX, STATEMENT_SUFFIX, and INFINITE_LOOP_TRAP.\n * @param {string} msg Code snippet with '%1'.\n * @param {!Blockly.Block} block Block which has an ID.\n * @return {string} Code snippet with ID.\n */\nBlockly.Generator.prototype.injectId = function(msg, block) {\n  var id = block.id.replace(/\\$/g, '$$$$');  // Issue 251.\n  return msg.replace(/%1/g, '\\'' + id + '\\'');\n};\n\n/**\n * Comma-separated list of reserved words.\n * @type {string}\n * @protected\n */\nBlockly.Generator.prototype.RESERVED_WORDS_ = '';\n\n/**\n * Add one or more words to the list of reserved words for this language.\n * @param {string} words Comma-separated list of words to add to the list.\n *     No spaces.  Duplicates are ok.\n */\nBlockly.Generator.prototype.addReservedWords = function(words) {\n  this.RESERVED_WORDS_ += words + ',';\n};\n\n/**\n * This is used as a placeholder in functions defined using\n * Blockly.Generator.provideFunction_.  It must not be legal code that could\n * legitimately appear in a function definition (or comment), and it must\n * not confuse the regular expression parser.\n * @type {string}\n * @protected\n */\nBlockly.Generator.prototype.FUNCTION_NAME_PLACEHOLDER_ = '{leCUI8hutHZI4480Dc}';\n\n/**\n * A dictionary of definitions to be printed before the code.\n * @type {Object}\n * @protected\n */\nBlockly.Generator.prototype.definitions_;\n\n/**\n * A dictionary mapping desired function names in definitions_ to actual\n * function names (to avoid collisions with user functions).\n * @type {Object}\n * @protected\n */\nBlockly.Generator.prototype.functionNames_;\n\n/**\n * A database of variable names.\n * @type {Blockly.Names}\n * @protected\n */\nBlockly.Generator.prototype.variableDB_;\n\n/**\n * Define a function to be included in the generated code.\n * The first time this is called with a given desiredName, the code is\n * saved and an actual name is generated.  Subsequent calls with the\n * same desiredName have no effect but have the same return value.\n *\n * It is up to the caller to make sure the same desiredName is not\n * used for different code values.\n *\n * The code gets output when Blockly.Generator.finish() is called.\n *\n * @param {string} desiredName The desired name of the function (e.g., isPrime).\n * @param {!Array.<string>} code A list of statements.  Use '  ' for indents.\n * @return {string} The actual name of the new function.  This may differ\n *     from desiredName if the former has already been taken by the user.\n * @protected\n */\nBlockly.Generator.prototype.provideFunction_ = function(desiredName, code) {\n  if (!this.definitions_[desiredName]) {\n    var functionName = this.variableDB_.getDistinctName(desiredName,\n        Blockly.PROCEDURE_CATEGORY_NAME);\n    this.functionNames_[desiredName] = functionName;\n    var codeText = code.join('\\n').replace(\n        this.FUNCTION_NAME_PLACEHOLDER_REGEXP_, functionName);\n    // Change all '  ' indents into the desired indent.\n    // To avoid an infinite loop of replacements, change all indents to '\\0'\n    // character first, then replace them all with the indent.\n    // We are assuming that no provided functions contain a literal null char.\n    var oldCodeText;\n    while (oldCodeText != codeText) {\n      oldCodeText = codeText;\n      codeText = codeText.replace(/^(( {2})*) {2}/gm, '$1\\0');\n    }\n    codeText = codeText.replace(/\\0/g, this.INDENT);\n    this.definitions_[desiredName] = codeText;\n  }\n  return this.functionNames_[desiredName];\n};\n\n/**\n * Hook for code to run before code generation starts.\n * Subclasses may override this, e.g. to initialise the database of variable\n * names.\n * @param {!Blockly.Workspace} _workspace Workspace to generate code from.\n */\nBlockly.Generator.prototype.init = function(_workspace) {\n  // Optionally override\n};\n\n/**\n * Common tasks for generating code from blocks.  This is called from\n * blockToCode and is called on every block, not just top level blocks.\n * Subclasses may override this, e.g. to generate code for statements following\n * the block, or to handle comments for the specified block and any connected\n * value blocks.\n * @param {!Blockly.Block} _block The current block.\n * @param {string} code The code created for this block.\n * @param {boolean=} _opt_thisOnly True to generate code for only this\n *     statement.\n * @return {string} Code with comments and subsequent blocks added.\n * @protected\n */\nBlockly.Generator.prototype.scrub_ = function(_block, code, _opt_thisOnly) {\n  // Optionally override\n  return code;\n};\n\n/**\n * Hook for code to run at end of code generation.\n * Subclasses may override this, e.g. to prepend the generated code with the\n * variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.Generator.prototype.finish = function(code) {\n  // Optionally override\n  return code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.\n * Subclasses may override this, e.g. if their language does not allow\n * naked values.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.Generator.prototype.scrubNakedValue = function(line) {\n  // Optionally override\n  return line;\n};\n"],"file":"generator.min.js"}