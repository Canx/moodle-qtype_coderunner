{"version":3,"sources":["../../../src/blockly/core/extensions.js"],"names":["goog","provide","require","Blockly","Extensions","ALL_","register","name","initFn","trim","Error","registerMixin","mixinObj","mixin","registerMutator","opt_helperFn","opt_blockList","errorPrefix","checkHasFunction_","domToMutation","mutationToDom","hasMutatorDialog","checkMutatorDialog_","Mutator","setMutator","apply","unregister","console","warn","block","isMutator","extensionFn","checkNoMutatorProperties_","mutatorProperties","getMutatorProperties_","checkBlockHasMutatorProperties_","mutatorPropertiesMatch_","func","propertyName","mutationName","properties","length","id","object","hasCompose","compose","hasDecompose","decompose","result","push","oldProperties","newProperties","i","buildTooltipForDropdown","dropdownName","lookupTable","blockTypesChecked","document","utils","runAfterPageLoad","key","checkMessageReferences","type","indexOf","checkDropdownOptionsInTable_","setTooltip","value","getFieldValue","tooltip","warning","replaceMessageReferences","bind","dropdown","getField","isOptionListDynamic","options","getOptions","optionKey","buildTooltipWithFieldText","msgTemplate","fieldName","field","replace","getText","extensionParentTooltip_","tooltipWhenNotConnected_","parent","getParent","getInputsInline"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Extensions are functions that help initialize blocks, usually\n *      adding dynamic behavior such as onchange handlers and mutators. These\n *      are applied using Block.applyExtension(), or the JSON \"extensions\"\n *      array attribute.\n * @author Anm@anm.me (Andrew n marshall)\n */\n'use strict';\n\n/**\n * @name Blockly.Extensions\n * @namespace\n */\ngoog.provide('Blockly.Extensions');\n\ngoog.require('Blockly.utils');\n\n\n/**\n * The set of all registered extensions, keyed by extension name/id.\n * @private\n */\nBlockly.Extensions.ALL_ = {};\n\n/**\n * Registers a new extension function. Extensions are functions that help\n * initialize blocks, usually adding dynamic behavior such as onchange\n * handlers and mutators. These are applied using Block.applyExtension(), or\n * the JSON \"extensions\" array attribute.\n * @param {string} name The name of this extension.\n * @param {Function} initFn The function to initialize an extended block.\n * @throws {Error} if the extension name is empty, the extension is already\n *     registered, or extensionFn is not a function.\n */\nBlockly.Extensions.register = function(name, initFn) {\n  if ((typeof name != 'string') || (name.trim() == '')) {\n    throw Error('Error: Invalid extension name \"' + name + '\"');\n  }\n  if (Blockly.Extensions.ALL_[name]) {\n    throw Error('Error: Extension \"' + name + '\" is already registered.');\n  }\n  if (typeof initFn != 'function') {\n    throw Error('Error: Extension \"' + name + '\" must be a function');\n  }\n  Blockly.Extensions.ALL_[name] = initFn;\n};\n\n/**\n * Registers a new extension function that adds all key/value of mixinObj.\n * @param {string} name The name of this extension.\n * @param {!Object} mixinObj The values to mix in.\n * @throws {Error} if the extension name is empty or the extension is already\n *     registered.\n */\nBlockly.Extensions.registerMixin = function(name, mixinObj) {\n  if (!mixinObj || typeof mixinObj != 'object') {\n    throw Error('Error: Mixin \"' + name + '\" must be a object');\n  }\n  Blockly.Extensions.register(name, function() {\n    this.mixin(mixinObj);\n  });\n};\n\n/**\n * Registers a new extension function that adds a mutator to the block.\n * At register time this performs some basic sanity checks on the mutator.\n * The wrapper may also add a mutator dialog to the block, if both compose and\n * decompose are defined on the mixin.\n * @param {string} name The name of this mutator extension.\n * @param {!Object} mixinObj The values to mix in.\n * @param {(function())=} opt_helperFn An optional function to apply after\n *     mixing in the object.\n * @param {!Array.<string>=} opt_blockList A list of blocks to appear in the\n *     flyout of the mutator dialog.\n * @throws {Error} if the mutation is invalid or can't be applied to the block.\n */\nBlockly.Extensions.registerMutator = function(name, mixinObj, opt_helperFn,\n    opt_blockList) {\n  var errorPrefix = 'Error when registering mutator \"' + name + '\": ';\n\n  // Sanity check the mixin object before registering it.\n  Blockly.Extensions.checkHasFunction_(\n      errorPrefix, mixinObj.domToMutation, 'domToMutation');\n  Blockly.Extensions.checkHasFunction_(\n      errorPrefix, mixinObj.mutationToDom, 'mutationToDom');\n\n  var hasMutatorDialog =\n      Blockly.Extensions.checkMutatorDialog_(mixinObj, errorPrefix);\n\n  if (opt_helperFn && (typeof opt_helperFn != 'function')) {\n    throw Error('Extension \"' + name + '\" is not a function');\n  }\n\n  // Sanity checks passed.\n  Blockly.Extensions.register(name, function() {\n    if (hasMutatorDialog) {\n      if (!Blockly.Mutator) {\n        throw Error(errorPrefix + 'Missing require for Blockly.Mutator');\n      }\n      this.setMutator(new Blockly.Mutator(opt_blockList || []));\n    }\n    // Mixin the object.\n    this.mixin(mixinObj);\n\n    if (opt_helperFn) {\n      opt_helperFn.apply(this);\n    }\n  });\n};\n\n/**\n * Unregisters the extension registered with the given name.\n * @param {string} name The name of the extension to unregister.\n */\nBlockly.Extensions.unregister = function(name) {\n  if (Blockly.Extensions.ALL_[name]) {\n    delete Blockly.Extensions.ALL_[name];\n  } else {\n    console.warn('No extension mapping for name \"' + name +\n        '\" found to unregister');\n  }\n};\n\n/**\n * Applies an extension method to a block. This should only be called during\n * block construction.\n * @param {string} name The name of the extension.\n * @param {!Blockly.Block} block The block to apply the named extension to.\n * @param {boolean} isMutator True if this extension defines a mutator.\n * @throws {Error} if the extension is not found.\n */\nBlockly.Extensions.apply = function(name, block, isMutator) {\n  var extensionFn = Blockly.Extensions.ALL_[name];\n  if (typeof extensionFn != 'function') {\n    throw Error('Error: Extension \"' + name + '\" not found.');\n  }\n  if (isMutator) {\n    // Fail early if the block already has mutation properties.\n    Blockly.Extensions.checkNoMutatorProperties_(name, block);\n  } else {\n    // Record the old properties so we can make sure they don't change after\n    // applying the extension.\n    var mutatorProperties = Blockly.Extensions.getMutatorProperties_(block);\n  }\n  extensionFn.apply(block);\n\n  if (isMutator) {\n    var errorPrefix = 'Error after applying mutator \"' + name + '\": ';\n    Blockly.Extensions.checkBlockHasMutatorProperties_(errorPrefix, block);\n  } else {\n    if (!Blockly.Extensions.mutatorPropertiesMatch_(\n        /** @type {!Array.<Object>} */ (mutatorProperties), block)) {\n      throw Error('Error when applying extension \"' + name + '\": ' +\n          'mutation properties changed when applying a non-mutator extension.');\n    }\n  }\n};\n\n/**\n * Check that the given value is a function.\n * @param {string} errorPrefix The string to prepend to any error message.\n * @param {*} func Function to check.\n * @param {string} propertyName Which property to check.\n * @throws {Error} if the property does not exist or is not a function.\n * @private\n */\nBlockly.Extensions.checkHasFunction_ = function(errorPrefix, func,\n    propertyName) {\n  if (!func) {\n    throw Error(errorPrefix +\n        'missing required property \"' + propertyName + '\"');\n  } else if (typeof func != 'function') {\n    throw Error(errorPrefix +\n        '\" required property \"' + propertyName + '\" must be a function');\n  }\n};\n\n/**\n * Check that the given block does not have any of the four mutator properties\n * defined on it.  This function should be called before applying a mutator\n * extension to a block, to make sure we are not overwriting properties.\n * @param {string} mutationName The name of the mutation to reference in error\n *     messages.\n * @param {!Blockly.Block} block The block to check.\n * @throws {Error} if any of the properties already exist on the block.\n * @private\n */\nBlockly.Extensions.checkNoMutatorProperties_ = function(mutationName, block) {\n  var properties = Blockly.Extensions.getMutatorProperties_(block);\n  if (properties.length) {\n    throw Error('Error: tried to apply mutation \"' + mutationName +\n        '\" to a block that already has mutator functions.' +\n        '  Block id: ' + block.id);\n  }\n};\n\n/**\n * Check that the given object has both or neither of the functions required\n * to have a mutator dialog.\n * These functions are 'compose' and 'decompose'.  If a block has one, it must\n * have both.\n * @param {!Object} object The object to check.\n * @param {string} errorPrefix The string to prepend to any error message.\n * @return {boolean} True if the object has both functions.  False if it has\n *     neither function.\n * @throws {Error} if the object has only one of the functions.\n * @private\n */\nBlockly.Extensions.checkMutatorDialog_ = function(object, errorPrefix) {\n  var hasCompose = object.compose !== undefined;\n  var hasDecompose = object.decompose !== undefined;\n\n  if (hasCompose && hasDecompose) {\n    if (typeof object.compose != 'function') {\n      throw Error(errorPrefix + 'compose must be a function.');\n    } else if (typeof object.decompose != 'function') {\n      throw Error(errorPrefix + 'decompose must be a function.');\n    }\n    return true;\n  } else if (!hasCompose && !hasDecompose) {\n    return false;\n  } else {\n    throw Error(errorPrefix +\n        'Must have both or neither of \"compose\" and \"decompose\"');\n  }\n};\n\n/**\n * Check that a block has required mutator properties.  This should be called\n * after applying a mutation extension.\n * @param {string} errorPrefix The string to prepend to any error message.\n * @param {!Blockly.Block} block The block to inspect.\n * @private\n */\nBlockly.Extensions.checkBlockHasMutatorProperties_ = function(errorPrefix,\n    block) {\n  if (typeof block.domToMutation != 'function') {\n    throw Error(errorPrefix + 'Applying a mutator didn\\'t add \"domToMutation\"');\n  }\n  if (typeof block.mutationToDom != 'function') {\n    throw Error(errorPrefix + 'Applying a mutator didn\\'t add \"mutationToDom\"');\n  }\n\n  // A block with a mutator isn't required to have a mutation dialog, but\n  // it should still have both or neither of compose and decompose.\n  Blockly.Extensions.checkMutatorDialog_(block, errorPrefix);\n};\n\n/**\n * Get a list of values of mutator properties on the given block.\n * @param {!Blockly.Block} block The block to inspect.\n * @return {!Array.<Object>} A list with all of the defined properties, which\n *     should be functions, but may be anything other than undefined.\n * @private\n */\nBlockly.Extensions.getMutatorProperties_ = function(block) {\n  var result = [];\n  // List each function explicitly by reference to allow for renaming\n  // during compilation.\n  if (block.domToMutation !== undefined) {\n    result.push(block.domToMutation);\n  }\n  if (block.mutationToDom !== undefined) {\n    result.push(block.mutationToDom);\n  }\n  if (block.compose !== undefined) {\n    result.push(block.compose);\n  }\n  if (block.decompose !== undefined) {\n    result.push(block.decompose);\n  }\n  return result;\n};\n\n/**\n * Check that the current mutator properties match a list of old mutator\n * properties.  This should be called after applying a non-mutator extension,\n * to verify that the extension didn't change properties it shouldn't.\n * @param {!Array.<Object>} oldProperties The old values to compare to.\n * @param {!Blockly.Block} block The block to inspect for new values.\n * @return {boolean} True if the property lists match.\n * @private\n */\nBlockly.Extensions.mutatorPropertiesMatch_ = function(oldProperties, block) {\n  var newProperties = Blockly.Extensions.getMutatorProperties_(block);\n  if (newProperties.length != oldProperties.length) {\n    return false;\n  }\n  for (var i = 0; i < newProperties.length; i++) {\n    if (oldProperties[i] != newProperties[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Builds an extension function that will map a dropdown value to a tooltip\n * string.\n *\n * This method includes multiple checks to ensure tooltips, dropdown options,\n * and message references are aligned. This aims to catch errors as early as\n * possible, without requiring developers to manually test tooltips under each\n * option. After the page is loaded, each tooltip text string will be checked\n * for matching message keys in the internationalized string table. Deferring\n * this until the page is loaded decouples loading dependencies. Later, upon\n * loading the first block of any given type, the extension will validate every\n * dropdown option has a matching tooltip in the lookupTable.  Errors are\n * reported as warnings in the console, and are never fatal.\n * @param {string} dropdownName The name of the field whose value is the key\n *     to the lookup table.\n * @param {!Object.<string, string>} lookupTable The table of field values to\n *     tooltip text.\n * @return {!Function} The extension function.\n */\nBlockly.Extensions.buildTooltipForDropdown = function(dropdownName,\n    lookupTable) {\n  // List of block types already validated, to minimize duplicate warnings.\n  var blockTypesChecked = [];\n\n  // Check the tooltip string messages for invalid references.\n  // Wait for load, in case Blockly.Msg is not yet populated.\n  // runAfterPageLoad() does not run in a Node.js environment due to lack of\n  // document object, in which case skip the validation.\n  if (typeof document == 'object') {  // Relies on document.readyState\n    Blockly.utils.runAfterPageLoad(function() {\n      for (var key in lookupTable) {\n        // Will print warnings if reference is missing.\n        Blockly.utils.checkMessageReferences(lookupTable[key]);\n      }\n    });\n  }\n\n  /**\n   * The actual extension.\n   * @this {Blockly.Block}\n   */\n  var extensionFn = function() {\n    if (this.type && blockTypesChecked.indexOf(this.type) == -1) {\n      Blockly.Extensions.checkDropdownOptionsInTable_(\n          this, dropdownName, lookupTable);\n      blockTypesChecked.push(this.type);\n    }\n\n    this.setTooltip(function() {\n      var value = String(this.getFieldValue(dropdownName));\n      var tooltip = lookupTable[value];\n      if (tooltip == null) {\n        if (blockTypesChecked.indexOf(this.type) == -1) {\n          // Warn for missing values on generated tooltips.\n          var warning = 'No tooltip mapping for value ' + value +\n              ' of field ' + dropdownName;\n          if (this.type != null) {\n            warning += (' of block type ' + this.type);\n          }\n          console.warn(warning + '.');\n        }\n      } else {\n        tooltip = Blockly.utils.replaceMessageReferences(tooltip);\n      }\n      return tooltip;\n    }.bind(this));\n  };\n  return extensionFn;\n};\n\n/**\n * Checks all options keys are present in the provided string lookup table.\n * Emits console warnings when they are not.\n * @param {!Blockly.Block} block The block containing the dropdown\n * @param {string} dropdownName The name of the dropdown\n * @param {!Object.<string, string>} lookupTable The string lookup table\n * @private\n */\nBlockly.Extensions.checkDropdownOptionsInTable_ = function(block, dropdownName,\n    lookupTable) {\n  // Validate all dropdown options have values.\n  var dropdown = block.getField(dropdownName);\n  if (!dropdown.isOptionListDynamic()) {\n    var options = dropdown.getOptions();\n    for (var i = 0; i < options.length; ++i) {\n      var optionKey = options[i][1];  // label, then value\n      if (lookupTable[optionKey] == null) {\n        console.warn('No tooltip mapping for value ' + optionKey +\n           ' of field ' + dropdownName + ' of block type ' + block.type);\n      }\n    }\n  }\n};\n\n/**\n * Builds an extension function that will install a dynamic tooltip. The\n * tooltip message should include the string '%1' and that string will be\n * replaced with the text of the named field.\n * @param {string} msgTemplate The template form to of the message text, with\n *     %1 placeholder.\n * @param {string} fieldName The field with the replacement text.\n * @return {!Function} The extension function.\n */\nBlockly.Extensions.buildTooltipWithFieldText = function(msgTemplate,\n    fieldName) {\n  // Check the tooltip string messages for invalid references.\n  // Wait for load, in case Blockly.Msg is not yet populated.\n  // runAfterPageLoad() does not run in a Node.js environment due to lack of\n  // document object, in which case skip the validation.\n  if (typeof document == 'object') {  // Relies on document.readyState\n    Blockly.utils.runAfterPageLoad(function() {\n      // Will print warnings if reference is missing.\n      Blockly.utils.checkMessageReferences(msgTemplate);\n    });\n  }\n\n  /**\n   * The actual extension.\n   * @this {Blockly.Block}\n   */\n  var extensionFn = function() {\n    this.setTooltip(function() {\n      var field = this.getField(fieldName);\n      return Blockly.utils.replaceMessageReferences(msgTemplate)\n          .replace('%1', field ? field.getText() : '');\n    }.bind(this));\n  };\n  return extensionFn;\n};\n\n/**\n * Configures the tooltip to mimic the parent block when connected. Otherwise,\n * uses the tooltip text at the time this extension is initialized. This takes\n * advantage of the fact that all other values from JSON are initialized before\n * extensions.\n * @this {Blockly.Block}\n * @private\n */\nBlockly.Extensions.extensionParentTooltip_ = function() {\n  this.tooltipWhenNotConnected_ = this.tooltip;\n  this.setTooltip(function() {\n    var parent = this.getParent();\n    return (parent && parent.getInputsInline() && parent.tooltip) ||\n        this.tooltipWhenNotConnected_;\n  }.bind(this));\n};\nBlockly.Extensions.register('parent_tooltip_when_inline',\n    Blockly.Extensions.extensionParentTooltip_);\n"],"file":"extensions.min.js"}