{"version":3,"sources":["../../../src/blockly/core/variable_map.js"],"names":["goog","provide","require","Blockly","VariableMap","workspace","variableMap_","Object","create","prototype","clear","renameVariable","variable","newName","type","conflictVar","getVariable","blocks","getAllBlocks","Events","setGroup","getId","renameVariableAndUses_","renameVariableWithConflict_","renameVariableById","id","getVariableById","Error","fire","VarRename","name","i","length","updateVarName","oldCase","renameVarById","VarDelete","variableList","getVariablesOfType","variableIndex","indexOf","splice","createVariable","opt_type","opt_id","utils","genUid","VariableModel","variables","push","deleteVariable","tempVar","deleteVariableById","variableName","uses","getVariableUsesById","block","procedureName","getFieldValue","deleteText","Msg","replace","alert","map","confirmText","confirm","ok","deleteVariableInternal","console","warn","existingGroup","getGroup","dispose","list","j","Names","equals","keys","key","variable_list","slice","getVariableTypes","ws","variableMap","object","mixin","getPotentialVariableMap","types","hasEmpty","getAllVariables","all_variables","concat","getAllVariableNames","allNames","blockVariables","getVarModels"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object representing a map of variables and their types.\n * @author marisaleung@google.com (Marisa Leung)\n */\n'use strict';\n\ngoog.provide('Blockly.VariableMap');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.VarDelete');\ngoog.require('Blockly.Events.VarRename');\ngoog.require('Blockly.Msg');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.object');\n\n\n/**\n * Class for a variable map.  This contains a dictionary data structure with\n * variable types as keys and lists of variables as values.  The list of\n * variables are the type indicated by the key.\n * @param {!Blockly.Workspace} workspace The workspace this map belongs to.\n * @constructor\n */\nBlockly.VariableMap = function(workspace) {\n  /**\n   * A map from variable type to list of variable names.  The lists contain all\n   * of the named variables in the workspace, including variables\n   * that are not currently in use.\n   * @type {!Object.<string, !Array.<Blockly.VariableModel>>}\n   * @private\n   */\n  this.variableMap_ = Object.create(null);\n\n  /**\n   * The workspace this map belongs to.\n   * @type {!Blockly.Workspace}\n   */\n  this.workspace = workspace;\n};\n\n/**\n * Clear the variable map.\n */\nBlockly.VariableMap.prototype.clear = function() {\n  this.variableMap_ = Object.create(null);\n};\n\n/* Begin functions for renaming variables. */\n\n/**\n * Rename the given variable by updating its name in the variable map.\n * @param {!Blockly.VariableModel} variable Variable to rename.\n * @param {string} newName New variable name.\n * @package\n */\nBlockly.VariableMap.prototype.renameVariable = function(variable, newName) {\n  var type = variable.type;\n  var conflictVar = this.getVariable(newName, type);\n  var blocks = this.workspace.getAllBlocks(false);\n  Blockly.Events.setGroup(true);\n  try {\n    // The IDs may match if the rename is a simple case change (name1 -> Name1).\n    if (!conflictVar || conflictVar.getId() == variable.getId()) {\n      this.renameVariableAndUses_(variable, newName, blocks);\n    } else {\n      this.renameVariableWithConflict_(variable, newName, conflictVar, blocks);\n    }\n  } finally {\n    Blockly.Events.setGroup(false);\n  }\n};\n\n/**\n * Rename a variable by updating its name in the variable map. Identify the\n * variable to rename with the given ID.\n * @param {string} id ID of the variable to rename.\n * @param {string} newName New variable name.\n */\nBlockly.VariableMap.prototype.renameVariableById = function(id, newName) {\n  var variable = this.getVariableById(id);\n  if (!variable) {\n    throw Error('Tried to rename a variable that didn\\'t exist. ID: ' + id);\n  }\n\n  this.renameVariable(variable, newName);\n};\n\n/**\n * Update the name of the given variable and refresh all references to it.\n * The new name must not conflict with any existing variable names.\n * @param {!Blockly.VariableModel} variable Variable to rename.\n * @param {string} newName New variable name.\n * @param {!Array.<!Blockly.Block>} blocks The list of all blocks in the\n *     workspace.\n * @private\n */\nBlockly.VariableMap.prototype.renameVariableAndUses_ = function(variable,\n    newName, blocks) {\n  Blockly.Events.fire(new Blockly.Events.VarRename(variable, newName));\n  variable.name = newName;\n  for (var i = 0; i < blocks.length; i++) {\n    blocks[i].updateVarName(variable);\n  }\n};\n\n/**\n * Update the name of the given variable to the same name as an existing\n * variable.  The two variables are coalesced into a single variable with the ID\n * of the existing variable that was already using newName.\n * Refresh all references to the variable.\n * @param {!Blockly.VariableModel} variable Variable to rename.\n * @param {string} newName New variable name.\n * @param {!Blockly.VariableModel} conflictVar The variable that was already\n *     using newName.\n * @param {!Array.<!Blockly.Block>} blocks The list of all blocks in the\n *     workspace.\n * @private\n */\nBlockly.VariableMap.prototype.renameVariableWithConflict_ = function(variable,\n    newName, conflictVar, blocks) {\n  var type = variable.type;\n  var oldCase = conflictVar.name;\n\n  if (newName != oldCase) {\n    // Simple rename to change the case and update references.\n    this.renameVariableAndUses_(conflictVar, newName, blocks);\n  }\n\n  // These blocks now refer to a different variable.\n  // These will fire change events.\n  for (var i = 0; i < blocks.length; i++) {\n    blocks[i].renameVarById(variable.getId(), conflictVar.getId());\n  }\n\n  // Finally delete the original variable, which is now unreferenced.\n  Blockly.Events.fire(new Blockly.Events.VarDelete(variable));\n  // And remove it from the list.\n  var variableList = this.getVariablesOfType(type);\n  var variableIndex = variableList.indexOf(variable);\n  this.variableMap_[type].splice(variableIndex, 1);\n\n};\n\n/* End functions for renaming variables. */\n\n/**\n * Create a variable with a given name, optional type, and optional ID.\n * @param {string} name The name of the variable. This must be unique across\n *     variables and procedures.\n * @param {?string=} opt_type The type of the variable like 'int' or 'string'.\n *     Does not need to be unique. Field_variable can filter variables based on\n *     their type. This will default to '' which is a specific type.\n * @param {?string=} opt_id The unique ID of the variable. This will default to\n *     a UUID.\n * @return {!Blockly.VariableModel} The newly created variable.\n */\nBlockly.VariableMap.prototype.createVariable = function(name,\n    opt_type, opt_id) {\n  var variable = this.getVariable(name, opt_type);\n  if (variable) {\n    if (opt_id && variable.getId() != opt_id) {\n      throw Error('Variable \"' + name + '\" is already in use and its id is \"' +\n          variable.getId() + '\" which conflicts with the passed in ' +\n          'id, \"' + opt_id + '\".');\n    }\n    // The variable already exists and has the same ID.\n    return variable;\n  }\n  if (opt_id && this.getVariableById(opt_id)) {\n    throw Error('Variable id, \"' + opt_id + '\", is already in use.');\n  }\n  var id = opt_id || Blockly.utils.genUid();\n  var type = opt_type || '';\n  variable = new Blockly.VariableModel(this.workspace, name, type, id);\n\n  var variables = this.variableMap_[type] || [];\n  variables.push(variable);\n  // Delete the list of variables of this type, and re-add it so that\n  // the most recent addition is at the end.\n  // This is used so the toolbox's set block is set to the most recent variable.\n  delete this.variableMap_[type];\n  this.variableMap_[type] = variables;\n\n  return variable;\n};\n\n/* Begin functions for variable deletion. */\n\n/**\n * Delete a variable.\n * @param {!Blockly.VariableModel} variable Variable to delete.\n */\nBlockly.VariableMap.prototype.deleteVariable = function(variable) {\n  var variableList = this.variableMap_[variable.type];\n  for (var i = 0, tempVar; (tempVar = variableList[i]); i++) {\n    if (tempVar.getId() == variable.getId()) {\n      variableList.splice(i, 1);\n      Blockly.Events.fire(new Blockly.Events.VarDelete(variable));\n      return;\n    }\n  }\n};\n\n/**\n * Delete a variables by the passed in ID and all of its uses from this\n * workspace. May prompt the user for confirmation.\n * @param {string} id ID of variable to delete.\n */\nBlockly.VariableMap.prototype.deleteVariableById = function(id) {\n  var variable = this.getVariableById(id);\n  if (variable) {\n    // Check whether this variable is a function parameter before deleting.\n    var variableName = variable.name;\n    var uses = this.getVariableUsesById(id);\n    for (var i = 0, block; (block = uses[i]); i++) {\n      if (block.type == 'procedures_defnoreturn' ||\n        block.type == 'procedures_defreturn') {\n        var procedureName = block.getFieldValue('NAME');\n        var deleteText = Blockly.Msg['CANNOT_DELETE_VARIABLE_PROCEDURE'].\n            replace('%1', variableName).\n            replace('%2', procedureName);\n        Blockly.alert(deleteText);\n        return;\n      }\n    }\n\n    var map = this;\n    if (uses.length > 1) {\n      // Confirm before deleting multiple blocks.\n      var confirmText = Blockly.Msg['DELETE_VARIABLE_CONFIRMATION'].\n          replace('%1', String(uses.length)).\n          replace('%2', variableName);\n      Blockly.confirm(confirmText,\n          function(ok) {\n            if (ok && variable) {\n              map.deleteVariableInternal(variable, uses);\n            }\n          });\n    } else {\n      // No confirmation necessary for a single block.\n      map.deleteVariableInternal(variable, uses);\n    }\n  } else {\n    console.warn(\"Can't delete non-existent variable: \" + id);\n  }\n};\n\n/**\n * Deletes a variable and all of its uses from this workspace without asking the\n * user for confirmation.\n * @param {!Blockly.VariableModel} variable Variable to delete.\n * @param {!Array.<!Blockly.Block>} uses An array of uses of the variable.\n * @package\n */\nBlockly.VariableMap.prototype.deleteVariableInternal = function(variable,\n    uses) {\n  var existingGroup = Blockly.Events.getGroup();\n  if (!existingGroup) {\n    Blockly.Events.setGroup(true);\n  }\n  try {\n    for (var i = 0; i < uses.length; i++) {\n      uses[i].dispose(true);\n    }\n    this.deleteVariable(variable);\n  } finally {\n    if (!existingGroup) {\n      Blockly.Events.setGroup(false);\n    }\n  }\n};\n\n/* End functions for variable deletion. */\n\n/**\n * Find the variable by the given name and type and return it.  Return null if\n *     it is not found.\n * @param {string} name The name to check for.\n * @param {?string=} opt_type The type of the variable.  If not provided it\n *     defaults to the empty string, which is a specific type.\n * @return {Blockly.VariableModel} The variable with the given name, or null if\n *     it was not found.\n */\nBlockly.VariableMap.prototype.getVariable = function(name, opt_type) {\n  var type = opt_type || '';\n  var list = this.variableMap_[type];\n  if (list) {\n    for (var j = 0, variable; (variable = list[j]); j++) {\n      if (Blockly.Names.equals(variable.name, name)) {\n        return variable;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Find the variable by the given ID and return it. Return null if it is not\n *     found.\n * @param {string} id The ID to check for.\n * @return {Blockly.VariableModel} The variable with the given ID.\n */\nBlockly.VariableMap.prototype.getVariableById = function(id) {\n  var keys = Object.keys(this.variableMap_);\n  for (var i = 0; i < keys.length; i++ ) {\n    var key = keys[i];\n    for (var j = 0, variable; (variable = this.variableMap_[key][j]); j++) {\n      if (variable.getId() == id) {\n        return variable;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Get a list containing all of the variables of a specified type. If type is\n *     null, return list of variables with empty string type.\n * @param {?string} type Type of the variables to find.\n * @return {!Array.<!Blockly.VariableModel>} The sought after variables of the\n *     passed in type. An empty array if none are found.\n */\nBlockly.VariableMap.prototype.getVariablesOfType = function(type) {\n  type = type || '';\n  var variable_list = this.variableMap_[type];\n  if (variable_list) {\n    return variable_list.slice();\n  }\n  return [];\n};\n\n/**\n * Return all variable and potential variable types.  This list always contains\n * the empty string.\n * @param {?Blockly.Workspace} ws The workspace used to look for potential\n * variables. This can be different than the workspace stored on this object\n * if the passed in ws is a flyout workspace.\n * @return {!Array.<string>} List of variable types.\n * @package\n */\nBlockly.VariableMap.prototype.getVariableTypes = function(ws) {\n  var variableMap = {};\n  Blockly.utils.object.mixin(variableMap, this.variableMap_);\n  if (ws && ws.getPotentialVariableMap()) {\n    Blockly.utils.object.mixin(variableMap,\n        ws.getPotentialVariableMap().variableMap_);\n  }\n  var types = Object.keys(variableMap);\n  var hasEmpty = false;\n  for (var i = 0; i < types.length; i++) {\n    if (types[i] == '') {\n      hasEmpty = true;\n    }\n  }\n  if (!hasEmpty) {\n    types.push('');\n  }\n  return types;\n};\n\n/**\n * Return all variables of all types.\n * @return {!Array.<!Blockly.VariableModel>} List of variable models.\n */\nBlockly.VariableMap.prototype.getAllVariables = function() {\n  var all_variables = [];\n  for (var key in this.variableMap_) {\n    all_variables = all_variables.concat(this.variableMap_[key]);\n  }\n  return all_variables;\n};\n\n/**\n * Returns all of the variable names of all types.\n * @return {!Array.<string>} All of the variable names of all types.\n */\nBlockly.VariableMap.prototype.getAllVariableNames = function() {\n  var allNames = [];\n  for (var key in this.variableMap_) {\n    var variables = this.variableMap_[key];\n    for (var i = 0, variable; (variable = variables[i]); i++) {\n      allNames.push(variable.name);\n    }\n  }\n  return allNames;\n};\n\n/**\n * Find all the uses of a named variable.\n * @param {string} id ID of the variable to find.\n * @return {!Array.<!Blockly.Block>} Array of block usages.\n */\nBlockly.VariableMap.prototype.getVariableUsesById = function(id) {\n  var uses = [];\n  var blocks = this.workspace.getAllBlocks(false);\n  // Iterate through every block and check the name.\n  for (var i = 0; i < blocks.length; i++) {\n    var blockVariables = blocks[i].getVarModels();\n    if (blockVariables) {\n      for (var j = 0; j < blockVariables.length; j++) {\n        if (blockVariables[j].getId() == id) {\n          uses.push(blocks[i]);\n        }\n      }\n    }\n  }\n  return uses;\n};\n"],"file":"variable_map.min.js"}