{"version":3,"sources":["../../../src/blockly/core/touch.js"],"names":["goog","provide","require","Blockly","Touch","TOUCH_ENABLED","utils","global","document","documentElement","touchIdentifier_","TOUCH_MAP","longPid_","longStart","e","gesture","longStop_","changedTouches","length","setTimeout","button","clientX","clientY","handleRightClick","LONGPRESS","clearTimeout","clearTouchIdentifier","shouldHandleEvent","isMouseOrTouchEvent","checkTouchIdentifier","getTouchIdentifierFromEvent","pointerId","identifier","type","setClientFromTouch","string","startsWith","touchPoint","isTouchEvent","splitEventByTouches","events","i","newEvent","target","stopPropagation","preventDefault","push"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Touch handling for Blockly.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\n/**\n * @name Blockly.Touch\n * @namespace\n */\ngoog.provide('Blockly.Touch');\n\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.global');\ngoog.require('Blockly.utils.string');\n\n\n/**\n  * Whether touch is enabled in the browser.\n  * Copied from Closure's goog.events.BrowserFeature.TOUCH_ENABLED\n  */\nBlockly.Touch.TOUCH_ENABLED =\n    ('ontouchstart' in Blockly.utils.global ||\n     !!(Blockly.utils.global['document'] && document.documentElement &&\n        'ontouchstart' in document.documentElement) ||\n     // IE10 uses non-standard touch events, so it has a different check.\n     !!(Blockly.utils.global['navigator'] &&\n        (Blockly.utils.global['navigator']['maxTouchPoints'] ||\n         Blockly.utils.global['navigator']['msMaxTouchPoints'])));\n\n/**\n * Which touch events are we currently paying attention to?\n * @type {?string}\n * @private\n */\nBlockly.Touch.touchIdentifier_ = null;\n\n/**\n * The TOUCH_MAP lookup dictionary specifies additional touch events to fire,\n * in conjunction with mouse events.\n * @type {Object}\n */\nBlockly.Touch.TOUCH_MAP = {};\nif (Blockly.utils.global['PointerEvent']) {\n  Blockly.Touch.TOUCH_MAP = {\n    'mousedown': ['pointerdown'],\n    'mouseenter': ['pointerenter'],\n    'mouseleave': ['pointerleave'],\n    'mousemove': ['pointermove'],\n    'mouseout': ['pointerout'],\n    'mouseover': ['pointerover'],\n    'mouseup': ['pointerup', 'pointercancel'],\n    'touchend': ['pointerup'],\n    'touchcancel': ['pointercancel']\n  };\n} else if (Blockly.Touch.TOUCH_ENABLED) {\n  Blockly.Touch.TOUCH_MAP = {\n    'mousedown': ['touchstart'],\n    'mousemove': ['touchmove'],\n    'mouseup': ['touchend', 'touchcancel']\n  };\n}\n\n/**\n * PID of queued long-press task.\n * @private\n */\nBlockly.longPid_ = 0;\n\n/**\n * Context menus on touch devices are activated using a long-press.\n * Unfortunately the contextmenu touch event is currently (2015) only supported\n * by Chrome.  This function is fired on any touchstart event, queues a task,\n * which after about a second opens the context menu.  The tasks is killed\n * if the touch event terminates early.\n * @param {!Event} e Touch start event.\n * @param {Blockly.Gesture} gesture The gesture that triggered this longStart.\n * @package\n */\nBlockly.longStart = function(e, gesture) {\n  Blockly.longStop_();\n  // Punt on multitouch events.\n  if (e.changedTouches && e.changedTouches.length != 1) {\n    return;\n  }\n  Blockly.longPid_ = setTimeout(function() {\n    // Additional check to distinguish between touch events and pointer events\n    if (e.changedTouches) {\n      // TouchEvent\n      e.button = 2;  // Simulate a right button click.\n      // e was a touch event.  It needs to pretend to be a mouse event.\n      e.clientX = e.changedTouches[0].clientX;\n      e.clientY = e.changedTouches[0].clientY;\n    }\n\n    // Let the gesture route the right-click correctly.\n    if (gesture) {\n      gesture.handleRightClick(e);\n    }\n\n  }, Blockly.LONGPRESS);\n};\n\n/**\n * Nope, that's not a long-press.  Either touchend or touchcancel was fired,\n * or a drag hath begun.  Kill the queued long-press task.\n * @package\n */\nBlockly.longStop_ = function() {\n  if (Blockly.longPid_) {\n    clearTimeout(Blockly.longPid_);\n    Blockly.longPid_ = 0;\n  }\n};\n\n/**\n * Clear the touch identifier that tracks which touch stream to pay attention\n * to.  This ends the current drag/gesture and allows other pointers to be\n * captured.\n */\nBlockly.Touch.clearTouchIdentifier = function() {\n  Blockly.Touch.touchIdentifier_ = null;\n};\n\n/**\n * Decide whether Blockly should handle or ignore this event.\n * Mouse and touch events require special checks because we only want to deal\n * with one touch stream at a time.  All other events should always be handled.\n * @param {!Event} e The event to check.\n * @return {boolean} True if this event should be passed through to the\n *     registered handler; false if it should be blocked.\n */\nBlockly.Touch.shouldHandleEvent = function(e) {\n  return !Blockly.Touch.isMouseOrTouchEvent(e) ||\n      Blockly.Touch.checkTouchIdentifier(e);\n};\n\n/**\n * Get the touch identifier from the given event.  If it was a mouse event, the\n * identifier is the string 'mouse'.\n * @param {!Event} e Mouse event or touch event.\n * @return {string} The touch identifier from the first changed touch, if\n *     defined.  Otherwise 'mouse'.\n */\nBlockly.Touch.getTouchIdentifierFromEvent = function(e) {\n  return e.pointerId != undefined ? e.pointerId :\n      (e.changedTouches && e.changedTouches[0] &&\n      e.changedTouches[0].identifier !== undefined &&\n      e.changedTouches[0].identifier !== null) ?\n      e.changedTouches[0].identifier : 'mouse';\n};\n\n/**\n * Check whether the touch identifier on the event matches the current saved\n * identifier.  If there is no identifier, that means it's a mouse event and\n * we'll use the identifier \"mouse\".  This means we won't deal well with\n * multiple mice being used at the same time.  That seems okay.\n * If the current identifier was unset, save the identifier from the\n * event.  This starts a drag/gesture, during which touch events with other\n * identifiers will be silently ignored.\n * @param {!Event} e Mouse event or touch event.\n * @return {boolean} Whether the identifier on the event matches the current\n *     saved identifier.\n */\nBlockly.Touch.checkTouchIdentifier = function(e) {\n  var identifier = Blockly.Touch.getTouchIdentifierFromEvent(e);\n\n  // if (Blockly.touchIdentifier_ )is insufficient because Android touch\n  // identifiers may be zero.\n  if (Blockly.Touch.touchIdentifier_ !== undefined &&\n      Blockly.Touch.touchIdentifier_ !== null) {\n    // We're already tracking some touch/mouse event.  Is this from the same\n    // source?\n    return Blockly.Touch.touchIdentifier_ == identifier;\n  }\n  if (e.type == 'mousedown' || e.type == 'touchstart' ||\n      e.type == 'pointerdown') {\n    // No identifier set yet, and this is the start of a drag.  Set it and\n    // return.\n    Blockly.Touch.touchIdentifier_ = identifier;\n    return true;\n  }\n  // There was no identifier yet, but this wasn't a start event so we're going\n  // to ignore it.  This probably means that another drag finished while this\n  // pointer was down.\n  return false;\n};\n\n/**\n * Set an event's clientX and clientY from its first changed touch.  Use this to\n * make a touch event work in a mouse event handler.\n * @param {!Event} e A touch event.\n */\nBlockly.Touch.setClientFromTouch = function(e) {\n  if (Blockly.utils.string.startsWith(e.type, 'touch')) {\n    // Map the touch event's properties to the event.\n    var touchPoint = e.changedTouches[0];\n    e.clientX = touchPoint.clientX;\n    e.clientY = touchPoint.clientY;\n  }\n};\n\n/**\n * Check whether a given event is a mouse or touch event.\n * @param {!Event} e An event.\n * @return {boolean} True if it is a mouse or touch event; false otherwise.\n */\nBlockly.Touch.isMouseOrTouchEvent = function(e) {\n  return Blockly.utils.string.startsWith(e.type, 'touch') ||\n      Blockly.utils.string.startsWith(e.type, 'mouse') ||\n      Blockly.utils.string.startsWith(e.type, 'pointer');\n};\n\n/**\n * Check whether a given event is a touch event or a pointer event.\n * @param {!Event} e An event.\n * @return {boolean} True if it is a touch event; false otherwise.\n */\nBlockly.Touch.isTouchEvent = function(e) {\n  return Blockly.utils.string.startsWith(e.type, 'touch') ||\n      Blockly.utils.string.startsWith(e.type, 'pointer');\n};\n\n/**\n * Split an event into an array of events, one per changed touch or mouse\n * point.\n * @param {!Event} e A mouse event or a touch event with one or more changed\n * touches.\n * @return {!Array.<!Event>} An array of mouse or touch events.  Each touch\n *     event will have exactly one changed touch.\n */\nBlockly.Touch.splitEventByTouches = function(e) {\n  var events = [];\n  if (e.changedTouches) {\n    for (var i = 0; i < e.changedTouches.length; i++) {\n      var newEvent = {\n        type: e.type,\n        changedTouches: [e.changedTouches[i]],\n        target: e.target,\n        stopPropagation: function() { e.stopPropagation(); },\n        preventDefault: function() { e.preventDefault(); }\n      };\n      events[i] = newEvent;\n    }\n  } else {\n    events.push(e);\n  }\n  return events;\n};\n"],"file":"touch.min.js"}