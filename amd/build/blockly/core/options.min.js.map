{"version":3,"sources":["../../../src/blockly/core/options.js"],"names":["goog","provide","require","Blockly","Options","options","readOnly","toolboxContents","hasCategories","hasTrashcan","hasCollapse","hasComments","hasDisable","hasSounds","toolboxDef","Array","isArray","parseToolboxTree","utils","toolbox","convertToolboxToJSON","maxTrashcanContents","rtl","horizontalLayout","toolboxAtStart","toolboxPosition","TOOLBOX_AT_TOP","TOOLBOX_AT_BOTTOM","TOOLBOX_AT_RIGHT","TOOLBOX_AT_LEFT","hasCss","pathToMedia","oneBasedIndex","keyMap","user","createDefaultKeyMap","renderer","plugins","RTL","collapse","comments","disable","maxBlocks","maxInstances","moveOptions","parseMoveOptions","hasScrollbars","scrollbars","languageTree","gridOptions","parseGridOptions_","zoomOptions","parseZoomOptions_","theme","parseThemeOptions_","rendererOverrides","gridPattern","parentWorkspace","BlocklyOptions","prototype","setMetrics","getMetrics","move","wheel","drag","zoom","controls","startScale","maxScale","minScale","scaleSpeed","pinch","grid","spacing","colour","length","snap","Themes","Classic","registry","getObject","Type","THEME","Theme","defineTheme","name","IdGenerator","getNextUniqueId","tree","userAgent","IE","outerHTML","Element","Xml","textToDom","nodeName","toLowerCase","TypeError"],"mappings":"AAUA,aAEAA,IAAI,CAACC,OAAL,CAAa,iBAAb,EAEAD,IAAI,CAACE,OAAL,CAAa,eAAb,EACAF,IAAI,CAACE,OAAL,CAAa,wBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,kBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,qBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,2BAAb,EACAF,IAAI,CAACE,OAAL,CAAa,uBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,uBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,yBAAb,EACAF,IAAI,CAACE,OAAL,CAAa,aAAb,EAUAC,OAAO,CAACC,OAAR,CAAkB,SAASC,CAAT,CAAkB,CAClC,GAAIC,CAAAA,CAAQ,CAAG,CAAC,CAACD,CAAO,SAAxB,CACA,GAAIC,CAAJ,CAAc,IACRC,CAAAA,CAAe,CAAG,IADV,CAERC,CAAa,GAFL,CAGRC,CAAW,GAHH,CAIRC,CAAW,GAJH,CAKRC,CAAW,GALH,CAMRC,CAAU,GANF,CAORC,CAAS,GACd,CARD,IAQO,CACL,GAAIC,CAAAA,CAAU,CAAGT,CAAO,QAAxB,CACA,GAAI,CAACU,KAAK,CAACC,OAAN,CAAcF,CAAd,CAAL,CAAgC,CAC9BA,CAAU,CAAGX,OAAO,CAACC,OAAR,CAAgBa,gBAAhB,CAAiCH,CAAU,EAAI,IAA/C,CACd,CAJI,GAKDP,CAAAA,CAAe,CAAGJ,OAAO,CAACe,KAAR,CAAcC,OAAd,CAAsBC,oBAAtB,CAA2CN,CAA3C,CALjB,CAMDN,CAAa,CAAGL,OAAO,CAACe,KAAR,CAAcC,OAAd,CAAsBX,aAAtB,CAAoCD,CAApC,CANf,CAODE,CAAW,CAAGJ,CAAO,SAPpB,CAQL,GAAII,CAAW,SAAf,CAA+B,CAC7BA,CAAW,CAAGD,CACf,CACD,GAAIa,CAAAA,CAAmB,CAAGhB,CAAO,oBAAjC,CACA,GAAII,CAAJ,CAAiB,CACf,GAAIY,CAAmB,SAAvB,CAAuC,CACrCA,CAAmB,CAAG,EACvB,CACF,CAJD,IAIO,CACLA,CAAmB,CAAG,CACvB,CACD,GAAIX,CAAAA,CAAW,CAAGL,CAAO,SAAzB,CACA,GAAIK,CAAW,SAAf,CAA+B,CAC7BA,CAAW,CAAGF,CACf,CACD,GAAIG,CAAAA,CAAW,CAAGN,CAAO,SAAzB,CACA,GAAIM,CAAW,SAAf,CAA+B,CAC7BA,CAAW,CAAGH,CACf,CACD,GAAII,CAAAA,CAAU,CAAGP,CAAO,QAAxB,CACA,GAAIO,CAAU,SAAd,CAA8B,CAC5BA,CAAU,CAAGJ,CACd,CACD,GAAIK,CAAAA,CAAS,CAAGR,CAAO,OAAvB,CACA,GAAIQ,CAAS,SAAb,CAA6B,CAC3BA,CAAS,GACV,CACF,CA7CiC,GA8C9BS,CAAAA,CAAG,CAAG,CAAC,CAACjB,CAAO,IA9Ce,CA+C9BkB,CAAgB,CAAGlB,CAAO,iBA/CI,CAgDlC,GAAIkB,CAAgB,SAApB,CAAoC,CAClCA,CAAgB,GACjB,CACD,GAAIC,CAAAA,CAAc,CAAGnB,CAAO,gBAA5B,CACAmB,CAAc,CAAsB,KAAnB,GAAAA,CAAjB,CAEA,GAAID,CAAJ,CAAsB,CACpB,GAAIE,CAAAA,CAAe,CAAGD,CAAc,CAChCrB,OAAO,CAACuB,cADwB,CACPvB,OAAO,CAACwB,iBACtC,CAHD,IAGO,CACL,GAAIF,CAAAA,CAAe,CAAID,CAAc,EAAIF,CAAnB,CAClBnB,OAAO,CAACyB,gBADU,CACSzB,OAAO,CAAC0B,eACxC,CAED,GAAIC,CAAAA,CAAM,CAAGzB,CAAO,IAApB,CACA,GAAIyB,CAAM,SAAV,CAA0B,CACxBA,CAAM,GACP,CACD,GAAIC,CAAAA,CAAW,CAAG,gDAAlB,CACA,GAAI1B,CAAO,MAAX,CAAsB,CACpB0B,CAAW,CAAG1B,CAAO,MACtB,CAFD,IAEO,IAAIA,CAAO,KAAX,CAAqB,CAE1B0B,CAAW,CAAG1B,CAAO,KAAP,CAAkB,QACjC,CACD,GAAIA,CAAO,cAAP,SAAJ,CAA4C,CAC1C,GAAI2B,CAAAA,CAAa,GAClB,CAFD,IAEO,CACL,GAAIA,CAAAA,CAAa,CAAG,CAAC,CAAC3B,CAAO,cAC9B,CA7EiC,GA8E9B4B,CAAAA,CAAM,CAAG5B,CAAO,OAAP,EAAqBF,OAAO,CAAC+B,IAAR,CAAaD,MAAb,CAAoBE,mBAApB,EA9EA,CAgF9BC,CAAQ,CAAG/B,CAAO,SAAP,EAAuB,OAhFJ,CAkF9BgC,CAAO,CAAGhC,CAAO,QAAP,EAAsB,EAlFF,CAqFlC,KAAKiC,GAAL,CAAWhB,CAAX,CAEA,KAAKU,aAAL,CAAqBA,CAArB,CAEA,KAAKO,QAAL,CAAgB7B,CAAhB,CAEA,KAAK8B,QAAL,CAAgB7B,CAAhB,CAEA,KAAK8B,OAAL,CAAe7B,CAAf,CAEA,KAAKN,QAAL,CAAgBA,CAAhB,CAEA,KAAKoC,SAAL,CAAiBrC,CAAO,UAAP,KAAjB,CAEA,KAAKsC,YAAL,CAAoBtC,CAAO,aAA3B,CAEA,KAAK0B,WAAL,CAAmBA,CAAnB,CAEA,KAAKvB,aAAL,CAAqBA,CAArB,CAEA,KAAKoC,WAAL,CAAmBzC,OAAO,CAACC,OAAR,CAAgByC,gBAAhB,CAAiCxC,CAAjC,CAA0CG,CAA1C,CAAnB,CAEA,KAAKsC,aAAL,CAAqB,KAAKF,WAAL,CAAiBG,UAAtC,CAEA,KAAKtC,WAAL,CAAmBA,CAAnB,CAEA,KAAKY,mBAAL,CAA2BA,CAA3B,CAEA,KAAKR,SAAL,CAAiBA,CAAjB,CAEA,KAAKiB,MAAL,CAAcA,CAAd,CAEA,KAAKP,gBAAL,CAAwBA,CAAxB,CAEA,KAAKyB,YAAL,CAAoBzC,CAApB,CAEA,KAAK0C,WAAL,CAAmB9C,OAAO,CAACC,OAAR,CAAgB8C,iBAAhB,CAAkC7C,CAAlC,CAAnB,CAEA,KAAK8C,WAAL,CAAmBhD,OAAO,CAACC,OAAR,CAAgBgD,iBAAhB,CAAkC/C,CAAlC,CAAnB,CAEA,KAAKoB,eAAL,CAAuBA,CAAvB,CAEA,KAAK4B,KAAL,CAAalD,OAAO,CAACC,OAAR,CAAgBkD,kBAAhB,CAAmCjD,CAAnC,CAAb,CAEA,KAAK4B,MAAL,CAAcA,CAAd,CAEA,KAAKG,QAAL,CAAgBA,CAAhB,CAEA,KAAKmB,iBAAL,CAAyBlD,CAAO,kBAAhC,CAOA,KAAKmD,WAAL,CAAmB,IAAnB,CAOA,KAAKC,eAAL,CAAuBpD,CAAO,gBAA9B,CAMA,KAAKgC,OAAL,CAAeA,CAChB,CA1JD,CAkKAlC,OAAO,CAACuD,cAAR,CAAyB,UAAW,CAAE,CAAtC,CAQAvD,OAAO,CAACC,OAAR,CAAgBuD,SAAhB,CAA0BC,UAA1B,CAMAzD,OAAO,CAACC,OAAR,CAAgBuD,SAAhB,CAA0BE,UAA1B,CAUA1D,OAAO,CAACC,OAAR,CAAgByC,gBAAhB,CAAmC,SAASxC,CAAT,CAAkBG,CAAlB,CAAiC,IAC9DsD,CAAAA,CAAI,CAAGzD,CAAO,KAAP,EAAmB,EADoC,CAE9DuC,CAAW,CAAG,EAFgD,CAGlE,GAAIkB,CAAI,WAAJ,WAAoCzD,CAAO,WAAP,SAAxC,CAA6E,CAC3EuC,CAAW,CAACG,UAAZ,CAAyBvC,CAC1B,CAFD,IAEO,CACLoC,CAAW,CAACG,UAAZ,CAAyB,CAAC,CAACe,CAAI,WAAN,EAAwB,CAAC,CAACzD,CAAO,WAC3D,CACD,GAAI,CAACuC,CAAW,CAACG,UAAb,EAA2Be,CAAI,MAAJ,SAA/B,CAA4D,CAE1DlB,CAAW,CAACmB,KAAZ,GACD,CAHD,IAGO,CACLnB,CAAW,CAACmB,KAAZ,CAAoB,CAAC,CAACD,CAAI,MAC3B,CACD,GAAI,CAAClB,CAAW,CAACG,UAAjB,CAA6B,CAC3BH,CAAW,CAACoB,IAAZ,GACD,CAFD,IAEO,IAAIF,CAAI,KAAJ,SAAJ,CAAgC,CAErClB,CAAW,CAACoB,IAAZ,GACD,CAHM,IAGA,CACLpB,CAAW,CAACoB,IAAZ,CAAmB,CAAC,CAACF,CAAI,KAC1B,CACD,MAAOlB,CAAAA,CACR,CAvBD,CAiCAzC,OAAO,CAACC,OAAR,CAAgBgD,iBAAhB,CAAoC,SAAS/C,CAAT,CAAkB,IAChD4D,CAAAA,CAAI,CAAG5D,CAAO,KAAP,EAAmB,EADsB,CAEhD8C,CAAW,CAAG,EAFkC,CAGpD,GAAIc,CAAI,SAAJ,SAAJ,CAAoC,CAClCd,CAAW,CAACe,QAAZ,GACD,CAFD,IAEO,CACLf,CAAW,CAACe,QAAZ,CAAuB,CAAC,CAACD,CAAI,SAC9B,CACD,GAAIA,CAAI,MAAJ,SAAJ,CAAiC,CAC/Bd,CAAW,CAACY,KAAZ,GACD,CAFD,IAEO,CACLZ,CAAW,CAACY,KAAZ,CAAoB,CAAC,CAACE,CAAI,MAC3B,CACD,GAAIA,CAAI,WAAJ,SAAJ,CAAsC,CACpCd,CAAW,CAACgB,UAAZ,CAAyB,CAC1B,CAFD,IAEO,CACLhB,CAAW,CAACgB,UAAZ,EAAgCF,CAAI,WACrC,CACD,GAAIA,CAAI,SAAJ,SAAJ,CAAoC,CAClCd,CAAW,CAACiB,QAAZ,CAAuB,CACxB,CAFD,IAEO,CACLjB,CAAW,CAACiB,QAAZ,EAA8BH,CAAI,SACnC,CACD,GAAIA,CAAI,SAAJ,SAAJ,CAAoC,CAClCd,CAAW,CAACkB,QAAZ,CAAuB,EACxB,CAFD,IAEO,CACLlB,CAAW,CAACkB,QAAZ,EAA8BJ,CAAI,SACnC,CACD,GAAIA,CAAI,WAAJ,SAAJ,CAAsC,CACpCd,CAAW,CAACmB,UAAZ,CAAyB,GAC1B,CAFD,IAEO,CACLnB,CAAW,CAACmB,UAAZ,EAAgCL,CAAI,WACrC,CACD,GAAIA,CAAI,MAAJ,SAAJ,CAAiC,CAC/Bd,CAAW,CAACoB,KAAZ,CAAoBpB,CAAW,CAACY,KAAZ,EAAqBZ,CAAW,CAACe,QACtD,CAFD,IAEO,CACLf,CAAW,CAACoB,KAAZ,CAAoB,CAAC,CAACN,CAAI,MAC3B,CACD,MAAOd,CAAAA,CACR,CAvCD,CAiDAhD,OAAO,CAACC,OAAR,CAAgB8C,iBAAhB,CAAoC,SAAS7C,CAAT,CAAkB,IAChDmE,CAAAA,CAAI,CAAGnE,CAAO,KAAP,EAAmB,EADsB,CAEhD4C,CAAW,CAAG,EAFkC,CAGpDA,CAAW,CAACwB,OAAZ,CAAsB,CAAOD,CAAI,QAAX,EAA2B,CAAjD,CACAvB,CAAW,CAACyB,MAAZ,CAAqBF,CAAI,OAAJ,EAAkB,MAAvC,CACAvB,CAAW,CAAC0B,MAAZ,CACKH,CAAI,OAAJ,SAAD,CAAiC,CAAjC,EAA4CA,CAAI,OADpD,CAEAvB,CAAW,CAAC2B,IAAZ,CAAyC,CAAtB,CAAA3B,CAAW,CAACwB,OAAZ,EAA2B,CAAC,CAACD,CAAI,KAApD,CACA,MAAOvB,CAAAA,CACR,CATD,CAkBA9C,OAAO,CAACC,OAAR,CAAgBkD,kBAAhB,CAAqC,SAASjD,CAAT,CAAkB,CACrD,GAAIgD,CAAAA,CAAK,CAAGhD,CAAO,MAAP,EAAoBF,OAAO,CAAC0E,MAAR,CAAeC,OAA/C,CACA,GAAoB,QAAhB,QAAOzB,CAAAA,CAAX,CAA8B,CAC5B,MACElD,CAAAA,OAAO,CAAC4E,QAAR,CAAiBC,SAAjB,CAA2B7E,OAAO,CAAC4E,QAAR,CAAiBE,IAAjB,CAAsBC,KAAjD,CAAwD7B,CAAxD,CACH,CAHD,IAGO,IAAIA,CAAK,WAAYlD,CAAAA,OAAO,CAACgF,KAA7B,CAAoC,CACzC,MAAsC9B,CAAAA,CACvC,CACD,MAAOlD,CAAAA,OAAO,CAACgF,KAAR,CAAcC,WAAd,CAA0B/B,CAAK,CAACgC,IAAN,EAC5B,UAAYlF,OAAO,CAACe,KAAR,CAAcoE,WAAd,CAA0BC,eAA1B,EADV,CACwDlC,CADxD,CAER,CAVD,CAkBAlD,OAAO,CAACC,OAAR,CAAgBa,gBAAhB,CAAmC,SAASuE,CAAT,CAAe,CAChD,GAAIA,CAAJ,CAAU,CACR,GAAmB,QAAf,QAAOA,CAAAA,CAAX,CAA6B,CAC3B,GAAIrF,OAAO,CAACe,KAAR,CAAcuE,SAAd,CAAwBC,EAAxB,EAA8BF,CAAI,CAACG,SAAvC,CAAkD,CAKhDH,CAAI,CAAGA,CAAI,CAACG,SACb,CAND,IAMO,IAAI,EAAEH,CAAI,WAAYI,CAAAA,OAAlB,CAAJ,CAAgC,CACrCJ,CAAI,CAAG,IACR,CACF,CACD,GAAmB,QAAf,QAAOA,CAAAA,CAAX,CAA6B,CAC3BA,CAAI,CAAGrF,OAAO,CAAC0F,GAAR,CAAYC,SAAZ,CAAsBN,CAAtB,CAAP,CACA,GAAmC,KAA/B,EAAAA,CAAI,CAACO,QAAL,CAAcC,WAAd,EAAJ,CAA0C,CACxC,KAAMC,CAAAA,SAAS,CAAC,sCAAD,CAChB,CACF,CACF,CAlBD,IAkBO,CACLT,CAAI,CAAG,IACR,CACD,MAAOA,CAAAA,CACR,CAvBD","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object that controls settings for the workspace.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.Options');\n\ngoog.require('Blockly.Theme');\ngoog.require('Blockly.Themes.Classic');\ngoog.require('Blockly.registry');\ngoog.require('Blockly.user.keyMap');\ngoog.require('Blockly.utils.IdGenerator');\ngoog.require('Blockly.utils.Metrics');\ngoog.require('Blockly.utils.toolbox');\ngoog.require('Blockly.utils.userAgent');\ngoog.require('Blockly.Xml');\n\n\n/**\n * Parse the user-specified options, using reasonable defaults where behaviour\n * is unspecified.\n * @param {!Blockly.BlocklyOptions} options Dictionary of options.\n *     Specification: https://developers.google.com/blockly/guides/get-started/web#configuration\n * @constructor\n */\nBlockly.Options = function(options) {\n  var readOnly = !!options['readOnly'];\n  if (readOnly) {\n    var toolboxContents = null;\n    var hasCategories = false;\n    var hasTrashcan = false;\n    var hasCollapse = false;\n    var hasComments = false;\n    var hasDisable = false;\n    var hasSounds = false;\n  } else {\n    var toolboxDef = options['toolbox'];\n    if (!Array.isArray(toolboxDef)) {\n      toolboxDef = Blockly.Options.parseToolboxTree(toolboxDef || null);\n    }\n    var toolboxContents = Blockly.utils.toolbox.convertToolboxToJSON(toolboxDef);\n    var hasCategories = Blockly.utils.toolbox.hasCategories(toolboxContents);\n    var hasTrashcan = options['trashcan'];\n    if (hasTrashcan === undefined) {\n      hasTrashcan = hasCategories;\n    }\n    var maxTrashcanContents = options['maxTrashcanContents'];\n    if (hasTrashcan) {\n      if (maxTrashcanContents === undefined) {\n        maxTrashcanContents = 32;\n      }\n    } else {\n      maxTrashcanContents = 0;\n    }\n    var hasCollapse = options['collapse'];\n    if (hasCollapse === undefined) {\n      hasCollapse = hasCategories;\n    }\n    var hasComments = options['comments'];\n    if (hasComments === undefined) {\n      hasComments = hasCategories;\n    }\n    var hasDisable = options['disable'];\n    if (hasDisable === undefined) {\n      hasDisable = hasCategories;\n    }\n    var hasSounds = options['sounds'];\n    if (hasSounds === undefined) {\n      hasSounds = true;\n    }\n  }\n  var rtl = !!options['rtl'];\n  var horizontalLayout = options['horizontalLayout'];\n  if (horizontalLayout === undefined) {\n    horizontalLayout = false;\n  }\n  var toolboxAtStart = options['toolboxPosition'];\n  toolboxAtStart = toolboxAtStart !== 'end';\n\n  if (horizontalLayout) {\n    var toolboxPosition = toolboxAtStart ?\n        Blockly.TOOLBOX_AT_TOP : Blockly.TOOLBOX_AT_BOTTOM;\n  } else {\n    var toolboxPosition = (toolboxAtStart == rtl) ?\n        Blockly.TOOLBOX_AT_RIGHT : Blockly.TOOLBOX_AT_LEFT;\n  }\n\n  var hasCss = options['css'];\n  if (hasCss === undefined) {\n    hasCss = true;\n  }\n  var pathToMedia = 'https://blockly-demo.appspot.com/static/media/';\n  if (options['media']) {\n    pathToMedia = options['media'];\n  } else if (options['path']) {\n    // 'path' is a deprecated option which has been replaced by 'media'.\n    pathToMedia = options['path'] + 'media/';\n  }\n  if (options['oneBasedIndex'] === undefined) {\n    var oneBasedIndex = true;\n  } else {\n    var oneBasedIndex = !!options['oneBasedIndex'];\n  }\n  var keyMap = options['keyMap'] || Blockly.user.keyMap.createDefaultKeyMap();\n\n  var renderer = options['renderer'] || 'geras';\n\n  var plugins = options['plugins'] || {};\n\n  /** @type {boolean} */\n  this.RTL = rtl;\n  /** @type {boolean} */\n  this.oneBasedIndex = oneBasedIndex;\n  /** @type {boolean} */\n  this.collapse = hasCollapse;\n  /** @type {boolean} */\n  this.comments = hasComments;\n  /** @type {boolean} */\n  this.disable = hasDisable;\n  /** @type {boolean} */\n  this.readOnly = readOnly;\n  /** @type {number} */\n  this.maxBlocks = options['maxBlocks'] || Infinity;\n  /** @type {?Object.<string, number>} */\n  this.maxInstances = options['maxInstances'];\n  /** @type {string} */\n  this.pathToMedia = pathToMedia;\n  /** @type {boolean} */\n  this.hasCategories = hasCategories;\n  /** @type {!Object} */\n  this.moveOptions = Blockly.Options.parseMoveOptions(options, hasCategories);\n  /** @deprecated  January 2019 */\n  this.hasScrollbars = this.moveOptions.scrollbars;\n  /** @type {boolean} */\n  this.hasTrashcan = hasTrashcan;\n  /** @type {number} */\n  this.maxTrashcanContents = maxTrashcanContents;\n  /** @type {boolean} */\n  this.hasSounds = hasSounds;\n  /** @type {boolean} */\n  this.hasCss = hasCss;\n  /** @type {boolean} */\n  this.horizontalLayout = horizontalLayout;\n  /** @type {Array.<Blockly.utils.toolbox.Toolbox>} */\n  this.languageTree = toolboxContents;\n  /** @type {!Object} */\n  this.gridOptions = Blockly.Options.parseGridOptions_(options);\n  /** @type {!Object} */\n  this.zoomOptions = Blockly.Options.parseZoomOptions_(options);\n  /** @type {number} */\n  this.toolboxPosition = toolboxPosition;\n  /** @type {!Blockly.Theme} */\n  this.theme = Blockly.Options.parseThemeOptions_(options);\n  /** @type {!Object<string,Blockly.Action>} */\n  this.keyMap = keyMap;\n  /** @type {string} */\n  this.renderer = renderer;\n  /** @type {?Object} */\n  this.rendererOverrides = options['rendererOverrides'];\n\n  /**\n   * The SVG element for the grid pattern.\n   * Created during injection.\n   * @type {SVGElement}\n   */\n  this.gridPattern = null;\n\n  /**\n   * The parent of the current workspace, or null if there is no parent\n   * workspace.\n   * @type {Blockly.Workspace}\n   */\n  this.parentWorkspace = options['parentWorkspace'];\n\n  /**\n   * Map of plugin type to name of registered plugin or plugin class.\n   * @type {!Object.<string, (function(new:?, ...?)|string)>}\n   */\n  this.plugins = plugins;\n};\n\n/**\n * Blockly options.\n * This interface is further described in\n * `typings/parts/blockly-interfaces.d.ts`.\n * @interface\n */\nBlockly.BlocklyOptions = function() {};\n\n/**\n * If set, sets the translation of the workspace to match the scrollbars.\n * @param {!{x:number,y:number}} xyRatio Contains an x and/or y property which\n *     is a float between 0 and 1 specifying the degree of scrolling.\n * @return {void}\n */\nBlockly.Options.prototype.setMetrics;\n\n/**\n * Return an object with the metrics required to size the workspace.\n * @return {!Blockly.utils.Metrics} Contains size and position metrics.\n */\nBlockly.Options.prototype.getMetrics;\n\n/**\n * Parse the user-specified move options, using reasonable defaults where\n *    behaviour is unspecified.\n * @param {!Object} options Dictionary of options.\n * @param {boolean} hasCategories Whether the workspace has categories or not.\n * @return {!Object} A dictionary of normalized options.\n * @private\n */\nBlockly.Options.parseMoveOptions = function(options, hasCategories) {\n  var move = options['move'] || {};\n  var moveOptions = {};\n  if (move['scrollbars'] === undefined && options['scrollbars'] === undefined) {\n    moveOptions.scrollbars = hasCategories;\n  } else {\n    moveOptions.scrollbars = !!move['scrollbars'] || !!options['scrollbars'];\n  }\n  if (!moveOptions.scrollbars || move['wheel'] === undefined) {\n    // Defaults to false so that developers' settings don't appear to change.\n    moveOptions.wheel = false;\n  } else {\n    moveOptions.wheel = !!move['wheel'];\n  }\n  if (!moveOptions.scrollbars) {\n    moveOptions.drag = false;\n  } else if (move['drag'] === undefined) {\n    // Defaults to true if scrollbars is true.\n    moveOptions.drag = true;\n  } else {\n    moveOptions.drag = !!move['drag'];\n  }\n  return moveOptions;\n};\n\n/**\n * Parse the user-specified zoom options, using reasonable defaults where\n * behaviour is unspecified.  See zoom documentation:\n *   https://developers.google.com/blockly/guides/configure/web/zoom\n * @param {!Object} options Dictionary of options.\n * @return {!Object} A dictionary of normalized options.\n * @private\n */\nBlockly.Options.parseZoomOptions_ = function(options) {\n  var zoom = options['zoom'] || {};\n  var zoomOptions = {};\n  if (zoom['controls'] === undefined) {\n    zoomOptions.controls = false;\n  } else {\n    zoomOptions.controls = !!zoom['controls'];\n  }\n  if (zoom['wheel'] === undefined) {\n    zoomOptions.wheel = false;\n  } else {\n    zoomOptions.wheel = !!zoom['wheel'];\n  }\n  if (zoom['startScale'] === undefined) {\n    zoomOptions.startScale = 1;\n  } else {\n    zoomOptions.startScale = Number(zoom['startScale']);\n  }\n  if (zoom['maxScale'] === undefined) {\n    zoomOptions.maxScale = 3;\n  } else {\n    zoomOptions.maxScale = Number(zoom['maxScale']);\n  }\n  if (zoom['minScale'] === undefined) {\n    zoomOptions.minScale = 0.3;\n  } else {\n    zoomOptions.minScale = Number(zoom['minScale']);\n  }\n  if (zoom['scaleSpeed'] === undefined) {\n    zoomOptions.scaleSpeed = 1.2;\n  } else {\n    zoomOptions.scaleSpeed = Number(zoom['scaleSpeed']);\n  }\n  if (zoom['pinch'] === undefined) {\n    zoomOptions.pinch = zoomOptions.wheel || zoomOptions.controls;\n  } else {\n    zoomOptions.pinch = !!zoom['pinch'];\n  }\n  return zoomOptions;\n};\n\n/**\n * Parse the user-specified grid options, using reasonable defaults where\n * behaviour is unspecified. See grid documentation:\n *   https://developers.google.com/blockly/guides/configure/web/grid\n * @param {!Object} options Dictionary of options.\n * @return {!Object} A dictionary of normalized options.\n * @private\n */\nBlockly.Options.parseGridOptions_ = function(options) {\n  var grid = options['grid'] || {};\n  var gridOptions = {};\n  gridOptions.spacing = Number(grid['spacing']) || 0;\n  gridOptions.colour = grid['colour'] || '#888';\n  gridOptions.length =\n      (grid['length'] === undefined) ? 1 : Number(grid['length']);\n  gridOptions.snap = gridOptions.spacing > 0 && !!grid['snap'];\n  return gridOptions;\n};\n\n/**\n * Parse the user-specified theme options, using the classic theme as a default.\n *   https://developers.google.com/blockly/guides/configure/web/themes\n * @param {!Object} options Dictionary of options.\n * @return {!Blockly.Theme} A Blockly Theme.\n * @private\n */\nBlockly.Options.parseThemeOptions_ = function(options) {\n  var theme = options['theme'] || Blockly.Themes.Classic;\n  if (typeof theme == 'string') {\n    return /** @type {!Blockly.Theme} */ (\n      Blockly.registry.getObject(Blockly.registry.Type.THEME, theme));\n  } else if (theme instanceof Blockly.Theme) {\n    return /** @type {!Blockly.Theme} */ (theme);\n  }\n  return Blockly.Theme.defineTheme(theme.name ||\n      ('builtin' + Blockly.utils.IdGenerator.getNextUniqueId()), theme);\n};\n\n/**\n * Parse the provided toolbox tree into a consistent DOM format.\n * @param {Node|NodeList|?string} tree DOM tree of blocks, or text representation\n *    of same.\n * @return {Node} DOM tree of blocks, or null.\n */\nBlockly.Options.parseToolboxTree = function(tree) {\n  if (tree) {\n    if (typeof tree != 'string') {\n      if (Blockly.utils.userAgent.IE && tree.outerHTML) {\n        // In this case the tree will not have been properly built by the\n        // browser. The HTML will be contained in the element, but it will\n        // not have the proper DOM structure since the browser doesn't support\n        // XSLTProcessor (XML -> HTML).\n        tree = tree.outerHTML;\n      } else if (!(tree instanceof Element)) {\n        tree = null;\n      }\n    }\n    if (typeof tree == 'string') {\n      tree = Blockly.Xml.textToDom(tree);\n      if (tree.nodeName.toLowerCase() != 'xml') {\n        throw TypeError('Toolbox should be an <xml> document.');\n      }\n    }\n  } else {\n    tree = null;\n  }\n  return tree;\n};\n"],"file":"options.min.js"}