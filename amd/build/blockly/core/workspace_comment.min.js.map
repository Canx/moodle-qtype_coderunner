{"version":3,"sources":["../../../src/blockly/core/workspace_comment.js"],"names":["goog","provide","require","Blockly","WorkspaceComment","workspace","content","height","width","opt_id","id","getCommentById","utils","genUid","addTopComment","xy_","Coordinate","height_","width_","RTL","deletable_","movable_","editable_","content_","isComment","fireCreateEvent","prototype","dispose","Events","isEnabled","fire","CommentDelete","removeTopComment","getHeight","setHeight","getWidth","setWidth","getXY","x","y","moveBy","dx","dy","event","CommentMove","translate","recordNew","isDeletable","options","readOnly","setDeletable","deletable","isMovable","setMovable","movable","isEditable","setEditable","editable","getContent","setContent","CommentChange","toXmlWithXY","opt_noId","element","toXml","setAttribute","Math","round","commentElement","xml","createElement","textContent","comment","existingGroup","getGroup","setGroup","CommentCreate","fromXml","xmlComment","info","parseAttributes","h","w","commentX","parseInt","getAttribute","commentY","isNaN","xmlH","xmlW"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Object representing a code comment on the workspace.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.WorkspaceComment');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.CommentChange');\ngoog.require('Blockly.Events.CommentCreate');\ngoog.require('Blockly.Events.CommentDelete');\ngoog.require('Blockly.Events.CommentMove');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.xml');\n\n\n/**\n * Class for a workspace comment.\n * @param {!Blockly.Workspace} workspace The block's workspace.\n * @param {string} content The content of this workspace comment.\n * @param {number} height Height of the comment.\n * @param {number} width Width of the comment.\n * @param {string=} opt_id Optional ID.  Use this ID if provided, otherwise\n *     create a new ID.\n * @constructor\n */\nBlockly.WorkspaceComment = function(workspace, content, height, width, opt_id) {\n  /** @type {string} */\n  this.id = (opt_id && !workspace.getCommentById(opt_id)) ?\n      opt_id : Blockly.utils.genUid();\n\n  workspace.addTopComment(this);\n\n  /**\n   * The comment's position in workspace units.  (0, 0) is at the workspace's\n   * origin; scale does not change this value.\n   * @type {!Blockly.utils.Coordinate}\n   * @protected\n   */\n  this.xy_ = new Blockly.utils.Coordinate(0, 0);\n\n  /**\n   * The comment's height in workspace units.  Scale does not change this value.\n   * @type {number}\n   * @private\n   */\n  this.height_ = height;\n\n  /**\n   * The comment's width in workspace units.  Scale does not change this value.\n   * @type {number}\n   * @private\n   */\n  this.width_ = width;\n\n  /**\n   * @type {!Blockly.Workspace}\n   */\n  this.workspace = workspace;\n\n  /**\n   * @protected\n   * @type {boolean}\n   */\n  this.RTL = workspace.RTL;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.deletable_ = true;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.movable_ = true;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.editable_ = true;\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  this.content_ = content;\n\n  /**\n   * @package\n   * @type {boolean}\n   */\n  this.isComment = true;\n\n  Blockly.WorkspaceComment.fireCreateEvent(this);\n};\n\n/**\n * Dispose of this comment.\n * @package\n */\nBlockly.WorkspaceComment.prototype.dispose = function() {\n  if (!this.workspace) {\n    // The comment has already been deleted.\n    return;\n  }\n\n  if (Blockly.Events.isEnabled()) {\n    Blockly.Events.fire(new Blockly.Events.CommentDelete(this));\n  }\n\n  // Remove from the list of top comments and the comment database.\n  this.workspace.removeTopComment(this);\n  this.workspace = null;\n};\n\n// Height, width, x, and y are all stored on even non-rendered comments, to\n// preserve state if you pass the contents through a headless workspace.\n\n/**\n * Get comment height.\n * @return {number} Comment height.\n * @package\n */\nBlockly.WorkspaceComment.prototype.getHeight = function() {\n  return this.height_;\n};\n\n/**\n * Set comment height.\n * @param {number} height Comment height.\n * @package\n */\nBlockly.WorkspaceComment.prototype.setHeight = function(height) {\n  this.height_ = height;\n};\n\n/**\n * Get comment width.\n * @return {number} Comment width.\n * @package\n */\nBlockly.WorkspaceComment.prototype.getWidth = function() {\n  return this.width_;\n};\n\n/**\n * Set comment width.\n * @param {number} width comment width.\n * @package\n */\nBlockly.WorkspaceComment.prototype.setWidth = function(width) {\n  this.width_ = width;\n};\n\n/**\n * Get stored location.\n * @return {!Blockly.utils.Coordinate} The comment's stored location.\n *   This is not valid if the comment is currently being dragged.\n * @package\n */\nBlockly.WorkspaceComment.prototype.getXY = function() {\n  return new Blockly.utils.Coordinate(this.xy_.x, this.xy_.y);\n};\n\n/**\n * Move a comment by a relative offset.\n * @param {number} dx Horizontal offset, in workspace units.\n * @param {number} dy Vertical offset, in workspace units.\n * @package\n */\nBlockly.WorkspaceComment.prototype.moveBy = function(dx, dy) {\n  var event = new Blockly.Events.CommentMove(this);\n  this.xy_.translate(dx, dy);\n  event.recordNew();\n  Blockly.Events.fire(event);\n};\n\n/**\n * Get whether this comment is deletable or not.\n * @return {boolean} True if deletable.\n * @package\n */\nBlockly.WorkspaceComment.prototype.isDeletable = function() {\n  return this.deletable_ &&\n      !(this.workspace && this.workspace.options.readOnly);\n};\n\n/**\n * Set whether this comment is deletable or not.\n * @param {boolean} deletable True if deletable.\n * @package\n */\nBlockly.WorkspaceComment.prototype.setDeletable = function(deletable) {\n  this.deletable_ = deletable;\n};\n\n/**\n * Get whether this comment is movable or not.\n * @return {boolean} True if movable.\n * @package\n */\nBlockly.WorkspaceComment.prototype.isMovable = function() {\n  return this.movable_ &&\n      !(this.workspace && this.workspace.options.readOnly);\n};\n\n/**\n * Set whether this comment is movable or not.\n * @param {boolean} movable True if movable.\n * @package\n */\nBlockly.WorkspaceComment.prototype.setMovable = function(movable) {\n  this.movable_ = movable;\n};\n\n/**\n * Get whether this comment is editable or not.\n * @return {boolean} True if editable.\n */\nBlockly.WorkspaceComment.prototype.isEditable = function() {\n  return this.editable_ &&\n      !(this.workspace && this.workspace.options.readOnly);\n};\n\n/**\n * Set whether this comment is editable or not.\n * @param {boolean} editable True if editable.\n */\nBlockly.WorkspaceComment.prototype.setEditable = function(editable) {\n  this.editable_ = editable;\n};\n\n/**\n * Returns this comment's text.\n * @return {string} Comment text.\n * @package\n */\nBlockly.WorkspaceComment.prototype.getContent = function() {\n  return this.content_;\n};\n\n/**\n * Set this comment's content.\n * @param {string} content Comment content.\n * @package\n */\nBlockly.WorkspaceComment.prototype.setContent = function(content) {\n  if (this.content_ != content) {\n    Blockly.Events.fire(\n        new Blockly.Events.CommentChange(this, this.content_, content));\n    this.content_ = content;\n  }\n};\n\n/**\n * Encode a comment subtree as XML with XY coordinates.\n * @param {boolean=} opt_noId True if the encoder should skip the comment ID.\n * @return {!Element} Tree of XML elements.\n * @package\n */\nBlockly.WorkspaceComment.prototype.toXmlWithXY = function(opt_noId) {\n  var element = this.toXml(opt_noId);\n  element.setAttribute('x', Math.round(this.xy_.x));\n  element.setAttribute('y', Math.round(this.xy_.y));\n  element.setAttribute('h', this.height_);\n  element.setAttribute('w', this.width_);\n  return element;\n};\n\n/**\n * Encode a comment subtree as XML, but don't serialize the XY coordinates.\n * This method avoids some expensive metrics-related calls that are made in\n * toXmlWithXY().\n * @param {boolean=} opt_noId True if the encoder should skip the comment ID.\n * @return {!Element} Tree of XML elements.\n * @package\n */\nBlockly.WorkspaceComment.prototype.toXml = function(opt_noId) {\n  var commentElement = Blockly.utils.xml.createElement('comment');\n  if (!opt_noId) {\n    commentElement.id = this.id;\n  }\n  commentElement.textContent = this.getContent();\n  return commentElement;\n};\n\n/**\n * Fire a create event for the given workspace comment, if comments are enabled.\n * @param {!Blockly.WorkspaceComment} comment The comment that was just created.\n * @package\n */\nBlockly.WorkspaceComment.fireCreateEvent = function(comment) {\n  if (Blockly.Events.isEnabled()) {\n    var existingGroup = Blockly.Events.getGroup();\n    if (!existingGroup) {\n      Blockly.Events.setGroup(true);\n    }\n    try {\n      Blockly.Events.fire(new Blockly.Events.CommentCreate(comment));\n    } finally {\n      if (!existingGroup) {\n        Blockly.Events.setGroup(false);\n      }\n    }\n  }\n};\n\n/**\n * Decode an XML comment tag and create a comment on the workspace.\n * @param {!Element} xmlComment XML comment element.\n * @param {!Blockly.Workspace} workspace The workspace.\n * @return {!Blockly.WorkspaceComment} The created workspace comment.\n * @package\n */\nBlockly.WorkspaceComment.fromXml = function(xmlComment, workspace) {\n  var info = Blockly.WorkspaceComment.parseAttributes(xmlComment);\n\n  var comment = new Blockly.WorkspaceComment(\n      workspace, info.content, info.h, info.w, info.id);\n\n  var commentX = parseInt(xmlComment.getAttribute('x'), 10);\n  var commentY = parseInt(xmlComment.getAttribute('y'), 10);\n  if (!isNaN(commentX) && !isNaN(commentY)) {\n    comment.moveBy(commentX, commentY);\n  }\n\n  Blockly.WorkspaceComment.fireCreateEvent(comment);\n  return comment;\n};\n\n/**\n * Decode an XML comment tag and return the results in an object.\n * @param {!Element} xml XML comment element.\n * @return {{w: number, h: number, x: number, y: number, content: string}} An\n *     object containing the id, size, position, and comment string.\n * @package\n */\nBlockly.WorkspaceComment.parseAttributes = function(xml) {\n  var xmlH = xml.getAttribute('h');\n  var xmlW = xml.getAttribute('w');\n\n  return {\n    // @type {string}\n    id: xml.getAttribute('id'),\n    // The height of the comment in workspace units, or 100 if not specified.\n    // @type {number}\n    h: xmlH ? parseInt(xmlH, 10) : 100,\n    // The width of the comment in workspace units, or 100 if not specified.\n    // @type {number}\n    w: xmlW ? parseInt(xmlW, 10) : 100,\n    // The x position of the comment in workspace coordinates, or NaN if not\n    // specified in the XML.\n    // @type {number}\n    x: parseInt(xml.getAttribute('x'), 10),\n    // The y position of the comment in workspace coordinates, or NaN if not\n    // specified in the XML.\n    // @type {number}\n    y: parseInt(xml.getAttribute('y'), 10),\n    // @type {string}\n    content: xml.textContent\n  };\n};\n"],"file":"workspace_comment.min.js"}