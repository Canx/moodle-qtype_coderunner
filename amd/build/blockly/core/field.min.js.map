{"version":3,"sources":["../../../src/blockly/core/field.js"],"names":["goog","provide","require","requireType","Blockly","Field","value","opt_validator","opt_config","value_","DEFAULT_VALUE","validator_","tooltip_","size_","utils","Size","cursorSvg_","markerSvg_","fieldGroup_","borderRect_","textElement_","textContent_","mouseDownWrapper_","constants_","configure_","setValue","setValidator","prototype","name","disposed","maxDisplayLength","sourceBlock_","isDirty_","visible_","clickTarget_","getText_","showEditor_","NBSP","EDITABLE","SERIALIZABLE","config","tooltip","replaceMessageReferences","setTooltip","setSourceBlock","block","Error","getConstants","workspace","rendered","getRenderer","getSourceBlock","init","dom","createSvgElement","isVisible","style","display","sourceBlockSvg","getSvgRoot","appendChild","initView","updateEditable","bindEvents_","initModel","createBorderRect_","createTextElement_","FIELD_BORDER_RECT_RADIUS","height","width","FIELD_TEXT_BASELINE_CENTER","setAttribute","document","createTextNode","Tooltip","bindMouseEvents","getClickTarget_","bindEventWithChecks_","onMouseDown_","fromXml","fieldElement","textContent","toXml","getValue","dispose","DropDownDiv","hideIfOwner","WidgetDiv","unbindMouseEvents","unbindEvent_","removeNode","group","isEditable","addClass","removeClass","cursor","CURSOR","isClickable","isCurrentlyEditable","isSerializable","console","warn","setVisible","visible","root","handler","getValidator","classValidator","text","callValidator","classResult","userValidator","userResult","call","applyColour","render_","nodeValue","getDisplayText_","updateSize_","showEditor","opt_e","updateWidth","opt_margin","constants","xOffset","FIELD_BORDER_RECT_X_PADDING","totalWidth","totalHeight","FIELD_TEXT_HEIGHT","contentWidth","getFastTextWidth","FIELD_TEXT_FONTSIZE","FIELD_TEXT_FONTWEIGHT","FIELD_TEXT_FONTFAMILY","Math","max","FIELD_BORDER_RECT_HEIGHT","positionTextElement_","positionBorderRect_","halfHeight","RTL","FIELD_TEXT_BASELINE","getSize","getScaledBBox","bBox","getHeightWidth","scale","xy","getAbsoluteXY_","scaledWidth","scaledHeight","userAgent","GECKO","x","y","EDGE","IE","getBoundingClientRect","getPageOffset","Rect","getText","length","substring","replace","setText","markDirty","forceRerender","render","bumpNeighbours","updateMarkers_","newValue","validatedValue","doClassValidation_","processValidation_","localValidator","source","oldValue","Events","isEnabled","fire","BlockChange","doValueUpdate_","doValueInvalid_","opt_newValue","e","gesture","getGesture","setStartField","newTip","clickTarget","referencesVariables","getParentInput","parentInput","inputs","inputList","idx","input","fieldRows","fieldRow","j","getFlipRtl","isTabNavigable","onBlocklyAction","setCursorSvg","cursorSvg","setMarkerSvg","markerSvg","keyboardAccessibilityMode","getCursor","draw","getMarker","navigation","MARKER_NAME"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Field.  Used for editable titles, variables, etc.\n * This is an abstract class that defines the UI on the block.  Actual\n * instances would be Blockly.FieldTextInput, Blockly.FieldDropdown, etc.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.Field');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockChange');\ngoog.require('Blockly.Gesture');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.dom');\ngoog.require('Blockly.utils.Rect');\ngoog.require('Blockly.utils.Size');\ngoog.require('Blockly.utils.style');\ngoog.require('Blockly.utils.userAgent');\n\ngoog.requireType('Blockly.blockRendering.ConstantProvider');\ngoog.requireType('Blockly.IASTNodeLocationSvg');\ngoog.requireType('Blockly.IASTNodeLocationWithBlock');\ngoog.requireType('Blockly.IBlocklyActionable');\ngoog.requireType('Blockly.IRegistrable');\n\n\n/**\n * Abstract class for an editable field.\n * @param {*} value The initial value of the field.\n * @param {?Function=} opt_validator  A function that is called to validate\n *    changes to the field's value. Takes in a value & returns a validated\n *    value, or null to abort the change.\n * @param {Object=} opt_config A map of options used to configure the field. See\n *    the individual field's documentation for a list of properties this\n *    parameter supports.\n * @constructor\n * @implements {Blockly.IASTNodeLocationSvg}\n * @implements {Blockly.IASTNodeLocationWithBlock}\n * @implements {Blockly.IBlocklyActionable}\n * @implements {Blockly.IRegistrable}\n */\nBlockly.Field = function(value, opt_validator, opt_config) {\n  /**\n   * A generic value possessed by the field.\n   * Should generally be non-null, only null when the field is created.\n   * @type {*}\n   * @protected\n   */\n  this.value_ = this.DEFAULT_VALUE;\n\n  /**\n   * Validation function called when user edits an editable field.\n   * @type {Function}\n   * @protected\n   */\n  this.validator_ = null;\n\n  /**\n   * Used to cache the field's tooltip value if setTooltip is called when the\n   * field is not yet initialized. Is *not* guaranteed to be accurate.\n   * @type {string|Function|!SVGElement}\n   * @private\n   */\n  this.tooltip_ = null;\n\n  /**\n   * The size of the area rendered by the field.\n   * @type {!Blockly.utils.Size}\n   * @protected\n   */\n  this.size_ = new Blockly.utils.Size(0, 0);\n\n  /**\n   * Holds the cursors svg element when the cursor is attached to the field.\n   * This is null if there is no cursor on the field.\n   * @type {SVGElement}\n   * @private\n   */\n  this.cursorSvg_ = null;\n\n  /**\n   * Holds the markers svg element when the marker is attached to the field.\n   * This is null if there is no marker on the field.\n   * @type {SVGElement}\n   * @private\n   */\n  this.markerSvg_ = null;\n\n  /**\n   * The rendered field's SVG group element.\n   * @type {SVGGElement}\n   * @protected\n   */\n  this.fieldGroup_ = null;\n\n  /**\n   * The rendered field's SVG border element.\n   * @type {SVGRectElement}\n   * @protected\n   */\n  this.borderRect_ = null;\n\n  /**\n   * The rendered field's SVG text element.\n   * @type {SVGTextElement}\n   * @protected\n   */\n  this.textElement_ = null;\n\n  /**\n   * The rendered field's text content element.\n   * @type {Text}\n   * @protected\n   */\n  this.textContent_ = null;\n\n  /**\n   * Mouse down event listener data.\n   * @type {?Blockly.EventData}\n   * @private\n   */\n  this.mouseDownWrapper_ = null;\n\n  /**\n   * Constants associated with the source block's renderer.\n   * @type {Blockly.blockRendering.ConstantProvider}\n   * @protected\n   */\n  this.constants_ = null;\n\n  opt_config && this.configure_(opt_config);\n  this.setValue(value);\n  opt_validator && this.setValidator(opt_validator);\n};\n\n/**\n * The default value for this field.\n * @type {*}\n * @protected\n */\nBlockly.Field.prototype.DEFAULT_VALUE = null;\n\n/**\n * Name of field.  Unique within each block.\n * Static labels are usually unnamed.\n * @type {string|undefined}\n */\nBlockly.Field.prototype.name = undefined;\n\n/**\n * Has this field been disposed of?\n * @type {boolean}\n * @package\n */\nBlockly.Field.prototype.disposed = false;\n\n/**\n * Maximum characters of text to display before adding an ellipsis.\n * @type {number}\n */\nBlockly.Field.prototype.maxDisplayLength = 50;\n\n/**\n * Block this field is attached to.  Starts as null, then set in init.\n * @type {Blockly.Block}\n * @protected\n */\nBlockly.Field.prototype.sourceBlock_ = null;\n\n/**\n * Does this block need to be re-rendered?\n * @type {boolean}\n * @protected\n */\nBlockly.Field.prototype.isDirty_ = true;\n\n/**\n * Is the field visible, or hidden due to the block being collapsed?\n * @type {boolean}\n * @protected\n */\nBlockly.Field.prototype.visible_ = true;\n\n/**\n * The element the click handler is bound to.\n * @type {Element}\n * @protected\n */\nBlockly.Field.prototype.clickTarget_ = null;\n\n/**\n * A developer hook to override the returned text of this field.\n * Override if the text representation of the value of this field\n * is not just a string cast of its value.\n * Return null to resort to a string cast.\n * @return {?string} Current text. Return null to resort to a string cast.\n * @protected\n */\nBlockly.Field.prototype.getText_;\n\n/**\n * An optional method that can be defined to show an editor when the field is\n *     clicked. Blockly will automatically set the field as clickable if this\n *     method is defined.\n * @param {Event=} opt_e Optional mouse event that triggered the field to open,\n *     or undefined if triggered programmatically.\n * @return {void}\n * @protected\n */\nBlockly.Field.prototype.showEditor_;\n\n/**\n * Non-breaking space.\n * @const\n */\nBlockly.Field.NBSP = '\\u00A0';\n\n/**\n * Editable fields usually show some sort of UI indicating they are editable.\n * They will also be saved by the XML renderer.\n * @type {boolean}\n */\nBlockly.Field.prototype.EDITABLE = true;\n\n/**\n * Serializable fields are saved by the XML renderer, non-serializable fields\n * are not. Editable fields should also be serializable. This is not the\n * case by default so that SERIALIZABLE is backwards compatible.\n * @type {boolean}\n */\nBlockly.Field.prototype.SERIALIZABLE = false;\n\n/**\n * Process the configuration map passed to the field.\n * @param {!Object} config A map of options used to configure the field. See\n *    the individual field's documentation for a list of properties this\n *    parameter supports.\n * @protected\n */\nBlockly.Field.prototype.configure_ = function(config) {\n  var tooltip = config['tooltip'];\n  if (typeof tooltip == 'string') {\n    tooltip = Blockly.utils.replaceMessageReferences(\n        config['tooltip']);\n  }\n  tooltip && this.setTooltip(tooltip);\n\n  // TODO (#2884): Possibly add CSS class config option.\n  // TODO (#2885): Possibly add cursor config option.\n};\n\n/**\n * Attach this field to a block.\n * @param {!Blockly.Block} block The block containing this field.\n */\nBlockly.Field.prototype.setSourceBlock = function(block) {\n  if (this.sourceBlock_) {\n    throw Error('Field already bound to a block.');\n  }\n  this.sourceBlock_ = block;\n};\n\n/**\n * Get the renderer constant provider.\n * @return {?Blockly.blockRendering.ConstantProvider} The renderer constant\n *     provider.\n */\nBlockly.Field.prototype.getConstants = function() {\n  if (!this.constants_ && this.sourceBlock_ && this.sourceBlock_.workspace &&\n      this.sourceBlock_.workspace.rendered) {\n    this.constants_ = this.sourceBlock_.workspace.getRenderer().getConstants();\n  }\n  return this.constants_;\n};\n\n/**\n * Get the block this field is attached to.\n * @return {Blockly.Block} The block containing this field.\n */\nBlockly.Field.prototype.getSourceBlock = function() {\n  return this.sourceBlock_;\n};\n\n/**\n * Initialize everything to render this field. Override\n * methods initModel and initView rather than this method.\n * @package\n */\nBlockly.Field.prototype.init = function() {\n  if (this.fieldGroup_) {\n    // Field has already been initialized once.\n    return;\n  }\n  this.fieldGroup_ = /** @type {!SVGGElement} **/\n      (Blockly.utils.dom.createSvgElement('g', {}, null));\n  if (!this.isVisible()) {\n    this.fieldGroup_.style.display = 'none';\n  }\n  var sourceBlockSvg = /** @type {!Blockly.BlockSvg} **/ (this.sourceBlock_);\n  sourceBlockSvg.getSvgRoot().appendChild(this.fieldGroup_);\n  this.initView();\n  this.updateEditable();\n  this.setTooltip(this.tooltip_);\n  this.bindEvents_();\n  this.initModel();\n};\n\n/**\n * Create the block UI for this field.\n * @package\n */\nBlockly.Field.prototype.initView = function() {\n  this.createBorderRect_();\n  this.createTextElement_();\n};\n\n/**\n * Initializes the model of the field after it has been installed on a block.\n * No-op by default.\n * @package\n */\nBlockly.Field.prototype.initModel = function() {\n};\n\n/**\n * Create a field border rect element. Not to be overridden by subclasses.\n * Instead modify the result of the function inside initView, or create a\n * separate function to call.\n * @protected\n */\nBlockly.Field.prototype.createBorderRect_ = function() {\n  this.borderRect_ = /** @type {!SVGRectElement} **/\n      (Blockly.utils.dom.createSvgElement('rect',\n          {\n            'rx': this.getConstants().FIELD_BORDER_RECT_RADIUS,\n            'ry': this.getConstants().FIELD_BORDER_RECT_RADIUS,\n            'x': 0,\n            'y': 0,\n            'height': this.size_.height,\n            'width': this.size_.width,\n            'class': 'blocklyFieldRect'\n          }, this.fieldGroup_));\n};\n\n/**\n * Create a field text element. Not to be overridden by subclasses. Instead\n * modify the result of the function inside initView, or create a separate\n * function to call.\n * @protected\n */\nBlockly.Field.prototype.createTextElement_ = function() {\n  this.textElement_ = /** @type {!SVGTextElement} **/\n      (Blockly.utils.dom.createSvgElement('text',\n          {\n            'class': 'blocklyText',\n          }, this.fieldGroup_));\n  if (this.getConstants().FIELD_TEXT_BASELINE_CENTER) {\n    this.textElement_.setAttribute('dominant-baseline', 'central');\n  }\n  this.textContent_ = document.createTextNode('');\n  this.textElement_.appendChild(this.textContent_);\n};\n\n/**\n * Bind events to the field. Can be overridden by subclasses if they need to do\n * custom input handling.\n * @protected\n */\nBlockly.Field.prototype.bindEvents_ = function() {\n  Blockly.Tooltip.bindMouseEvents(this.getClickTarget_());\n  this.mouseDownWrapper_ =\n      Blockly.bindEventWithChecks_(\n          this.getClickTarget_(), 'mousedown', this, this.onMouseDown_);\n};\n\n/**\n * Sets the field's value based on the given XML element. Should only be\n * called by Blockly.Xml.\n * @param {!Element} fieldElement The element containing info about the\n *    field's state.\n * @package\n */\nBlockly.Field.prototype.fromXml = function(fieldElement) {\n  this.setValue(fieldElement.textContent);\n};\n\n/**\n * Serializes this field's value to XML. Should only be called by Blockly.Xml.\n * @param {!Element} fieldElement The element to populate with info about the\n *    field's state.\n * @return {!Element} The element containing info about the field's state.\n * @package\n */\nBlockly.Field.prototype.toXml = function(fieldElement) {\n  fieldElement.textContent = this.getValue();\n  return fieldElement;\n};\n\n/**\n * Dispose of all DOM objects and events belonging to this editable field.\n * @package\n */\nBlockly.Field.prototype.dispose = function() {\n  Blockly.DropDownDiv.hideIfOwner(this);\n  Blockly.WidgetDiv.hideIfOwner(this);\n  Blockly.Tooltip.unbindMouseEvents(this.getClickTarget_());\n\n  if (this.mouseDownWrapper_) {\n    Blockly.unbindEvent_(this.mouseDownWrapper_);\n  }\n\n  Blockly.utils.dom.removeNode(this.fieldGroup_);\n\n  this.disposed = true;\n};\n\n/**\n * Add or remove the UI indicating if this field is editable or not.\n */\nBlockly.Field.prototype.updateEditable = function() {\n  var group = this.fieldGroup_;\n  if (!this.EDITABLE || !group) {\n    return;\n  }\n  if (this.sourceBlock_.isEditable()) {\n    Blockly.utils.dom.addClass(group, 'blocklyEditableText');\n    Blockly.utils.dom.removeClass(group, 'blocklyNonEditableText');\n    group.style.cursor = this.CURSOR;\n  } else {\n    Blockly.utils.dom.addClass(group, 'blocklyNonEditableText');\n    Blockly.utils.dom.removeClass(group, 'blocklyEditableText');\n    group.style.cursor = '';\n  }\n};\n\n/**\n * Check whether this field defines the showEditor_ function.\n * @return {boolean} Whether this field is clickable.\n */\nBlockly.Field.prototype.isClickable = function() {\n  return !!this.sourceBlock_ && this.sourceBlock_.isEditable() &&\n      !!this.showEditor_ && (typeof this.showEditor_ === 'function');\n};\n\n/**\n * Check whether this field is currently editable.  Some fields are never\n * EDITABLE (e.g. text labels). Other fields may be EDITABLE but may exist on\n * non-editable blocks.\n * @return {boolean} Whether this field is editable and on an editable block\n */\nBlockly.Field.prototype.isCurrentlyEditable = function() {\n  return this.EDITABLE && !!this.sourceBlock_ && this.sourceBlock_.isEditable();\n};\n\n/**\n * Check whether this field should be serialized by the XML renderer.\n * Handles the logic for backwards compatibility and incongruous states.\n * @return {boolean} Whether this field should be serialized or not.\n */\nBlockly.Field.prototype.isSerializable = function() {\n  var isSerializable = false;\n  if (this.name) {\n    if (this.SERIALIZABLE) {\n      isSerializable = true;\n    } else if (this.EDITABLE) {\n      console.warn('Detected an editable field that was not serializable.' +\n        ' Please define SERIALIZABLE property as true on all editable custom' +\n        ' fields. Proceeding with serialization.');\n      isSerializable = true;\n    }\n  }\n  return isSerializable;\n};\n\n/**\n * Gets whether this editable field is visible or not.\n * @return {boolean} True if visible.\n */\nBlockly.Field.prototype.isVisible = function() {\n  return this.visible_;\n};\n\n/**\n * Sets whether this editable field is visible or not. Should only be called\n * by input.setVisible.\n * @param {boolean} visible True if visible.\n * @package\n */\nBlockly.Field.prototype.setVisible = function(visible) {\n  if (this.visible_ == visible) {\n    return;\n  }\n  this.visible_ = visible;\n  var root = this.getSvgRoot();\n  if (root) {\n    root.style.display = visible ? 'block' : 'none';\n  }\n};\n\n/**\n * Sets a new validation function for editable fields, or clears a previously\n * set validator.\n *\n * The validator function takes in the new field value, and returns\n * validated value. The validated value could be the input value, a modified\n * version of the input value, or null to abort the change.\n *\n * If the function does not return anything (or returns undefined) the new\n * value is accepted as valid. This is to allow for fields using the\n * validated function as a field-level change event notification.\n *\n * @param {Function} handler The validator function\n *     or null to clear a previous validator.\n */\nBlockly.Field.prototype.setValidator = function(handler) {\n  this.validator_ = handler;\n};\n\n/**\n * Gets the validation function for editable fields, or null if not set.\n * @return {Function} Validation function, or null.\n */\nBlockly.Field.prototype.getValidator = function() {\n  return this.validator_;\n};\n\n/**\n * Validates a change.  Does nothing.  Subclasses may override this.\n * @param {string} text The user's text.\n * @return {string} No change needed.\n * @deprecated May 2019. Override doClassValidation and other relevant 'do'\n *  functions instead.\n */\nBlockly.Field.prototype.classValidator = function(text) {\n  return text;\n};\n\n/**\n * Calls the validation function for this field, as well as all the validation\n * function for the field's class and its parents.\n * @param {string} text Proposed text.\n * @return {?string} Revised text, or null if invalid.\n * @deprecated May 2019. setValue now contains all relevant logic.\n */\nBlockly.Field.prototype.callValidator = function(text) {\n  var classResult = this.classValidator(text);\n  if (classResult === null) {\n    // Class validator rejects value.  Game over.\n    return null;\n  } else if (classResult !== undefined) {\n    text = classResult;\n  }\n  var userValidator = this.getValidator();\n  if (userValidator) {\n    var userResult = userValidator.call(this, text);\n    if (userResult === null) {\n      // User validator rejects value.  Game over.\n      return null;\n    } else if (userResult !== undefined) {\n      text = userResult;\n    }\n  }\n  return text;\n};\n\n/**\n * Gets the group element for this editable field.\n * Used for measuring the size and for positioning.\n * @return {!SVGGElement} The group element.\n */\nBlockly.Field.prototype.getSvgRoot = function() {\n  return /** @type {!SVGGElement} */ (this.fieldGroup_);\n};\n\n/**\n * Updates the field to match the colour/style of the block. Should only be\n * called by BlockSvg.applyColour().\n * @package\n */\nBlockly.Field.prototype.applyColour = function() {\n  // Non-abstract sub-classes may wish to implement this. See FieldDropdown.\n};\n\n/**\n * Used by getSize() to move/resize any DOM elements, and get the new size.\n *\n * All rendering that has an effect on the size/shape of the block should be\n * done here, and should be triggered by getSize().\n * @protected\n */\nBlockly.Field.prototype.render_ = function() {\n  if (this.textContent_) {\n    this.textContent_.nodeValue = this.getDisplayText_();\n  }\n  this.updateSize_();\n};\n\n/**\n * Show an editor when the field is clicked only if the field is clickable.\n * @param {Event=} opt_e Optional mouse event that triggered the field to open,\n *     or undefined if triggered programmatically.\n * @package\n */\nBlockly.Field.prototype.showEditor = function(opt_e) {\n  if (this.isClickable()) {\n    this.showEditor_(opt_e);\n  }\n};\n\n/**\n * Updates the width of the field. Redirects to updateSize_().\n * @deprecated May 2019  Use Blockly.Field.updateSize_() to force an update\n * to the size of the field, or Blockly.utils.dom.getTextWidth() to\n * check the size of the field.\n */\nBlockly.Field.prototype.updateWidth = function() {\n  console.warn('Deprecated call to updateWidth, call' +\n    ' Blockly.Field.updateSize_ to force an update to the size of the' +\n    ' field, or Blockly.utils.dom.getTextWidth() to check the size' +\n    ' of the field.');\n  this.updateSize_();\n};\n\n/**\n * Updates the size of the field based on the text.\n * @param {number=} opt_margin margin to use when positioning the text element.\n * @protected\n */\nBlockly.Field.prototype.updateSize_ = function(opt_margin) {\n  var constants = this.getConstants();\n  var xOffset = opt_margin != undefined ? opt_margin :\n      (this.borderRect_ ? this.getConstants().FIELD_BORDER_RECT_X_PADDING : 0);\n  var totalWidth = xOffset * 2;\n  var totalHeight = constants.FIELD_TEXT_HEIGHT;\n\n  var contentWidth = 0;\n  if (this.textElement_) {\n    contentWidth = Blockly.utils.dom.getFastTextWidth(this.textElement_,\n        constants.FIELD_TEXT_FONTSIZE,\n        constants.FIELD_TEXT_FONTWEIGHT,\n        constants.FIELD_TEXT_FONTFAMILY);\n    totalWidth += contentWidth;\n  }\n  if (this.borderRect_) {\n    totalHeight = Math.max(totalHeight, constants.FIELD_BORDER_RECT_HEIGHT);\n  }\n\n  this.size_.height = totalHeight;\n  this.size_.width = totalWidth;\n\n  this.positionTextElement_(xOffset, contentWidth);\n  this.positionBorderRect_();\n};\n\n/**\n * Position a field's text element after a size change.  This handles both LTR\n * and RTL positioning.\n * @param {number} xOffset x offset to use when positioning the text element.\n * @param {number} contentWidth The content width.\n * @protected\n */\nBlockly.Field.prototype.positionTextElement_ = function(xOffset, contentWidth) {\n  if (!this.textElement_) {\n    return;\n  }\n  var constants = this.getConstants();\n  var halfHeight = this.size_.height / 2;\n\n  this.textElement_.setAttribute('x', this.sourceBlock_.RTL ?\n      this.size_.width - contentWidth - xOffset : xOffset);\n  this.textElement_.setAttribute('y', constants.FIELD_TEXT_BASELINE_CENTER ?\n      halfHeight : halfHeight - constants.FIELD_TEXT_HEIGHT / 2 +\n      constants.FIELD_TEXT_BASELINE);\n};\n\n/**\n * Position a field's border rect after a size change.\n * @protected\n */\nBlockly.Field.prototype.positionBorderRect_ = function() {\n  if (!this.borderRect_) {\n    return;\n  }\n  this.borderRect_.setAttribute('width', this.size_.width);\n  this.borderRect_.setAttribute('height', this.size_.height);\n  this.borderRect_.setAttribute('rx',\n      this.getConstants().FIELD_BORDER_RECT_RADIUS);\n  this.borderRect_.setAttribute('ry',\n      this.getConstants().FIELD_BORDER_RECT_RADIUS);\n};\n\n\n/**\n * Returns the height and width of the field.\n *\n * This should *in general* be the only place render_ gets called from.\n * @return {!Blockly.utils.Size} Height and width.\n */\nBlockly.Field.prototype.getSize = function() {\n  if (!this.isVisible()) {\n    return new Blockly.utils.Size(0, 0);\n  }\n\n  if (this.isDirty_) {\n    this.render_();\n    this.isDirty_ = false;\n  } else if (this.visible_ && this.size_.width == 0) {\n    // If the field is not visible the width will be 0 as well, one of the\n    // problems with the old system.\n    console.warn('Deprecated use of setting size_.width to 0 to rerender a' +\n      ' field. Set field.isDirty_ to true instead.');\n    this.render_();\n  }\n  return this.size_;\n};\n\n/**\n * Returns the bounding box of the rendered field, accounting for workspace\n * scaling.\n * @return {!Blockly.utils.Rect} An object with top, bottom, left, and right in\n *     pixels relative to the top left corner of the page (window coordinates).\n * @package\n */\nBlockly.Field.prototype.getScaledBBox = function() {\n  if (!this.borderRect_) {\n    // Browsers are inconsistent in what they return for a bounding box.\n    // - Webkit / Blink: fill-box / object bounding box\n    // - Gecko / Triden / EdgeHTML: stroke-box\n    var bBox = this.sourceBlock_.getHeightWidth();\n    var scale = this.sourceBlock_.workspace.scale;\n    var xy = this.getAbsoluteXY_();\n    var scaledWidth = bBox.width * scale;\n    var scaledHeight = bBox.height * scale;\n\n    if (Blockly.utils.userAgent.GECKO) {\n      xy.x += 1.5 * scale;\n      xy.y += 1.5 * scale;\n      scaledWidth += 1 * scale;\n      scaledHeight += 1 * scale;\n    } else {\n      if (!Blockly.utils.userAgent.EDGE && !Blockly.utils.userAgent.IE) {\n        xy.x -= 0.5 * scale;\n        xy.y -= 0.5 * scale;\n      }\n      scaledWidth += 1 * scale;\n      scaledHeight += 1 * scale;\n    }\n  } else {\n    var bBox = this.borderRect_.getBoundingClientRect();\n    var xy = Blockly.utils.style.getPageOffset(this.borderRect_);\n    var scaledWidth = bBox.width;\n    var scaledHeight = bBox.height;\n  }\n  return new Blockly.utils.Rect(\n      xy.y,\n      xy.y + scaledHeight,\n      xy.x,\n      xy.x + scaledWidth\n  );\n};\n\n/**\n * Get the text from this field to display on the block. May differ from\n * ``getText`` due to ellipsis, and other formatting.\n * @return {string} Text to display.\n * @protected\n */\nBlockly.Field.prototype.getDisplayText_ = function() {\n  var text = this.getText();\n  if (!text) {\n    // Prevent the field from disappearing if empty.\n    return Blockly.Field.NBSP;\n  }\n  if (text.length > this.maxDisplayLength) {\n    // Truncate displayed string and add an ellipsis ('...').\n    text = text.substring(0, this.maxDisplayLength - 2) + '\\u2026';\n  }\n  // Replace whitespace with non-breaking spaces so the text doesn't collapse.\n  text = text.replace(/\\s/g, Blockly.Field.NBSP);\n  if (this.sourceBlock_ && this.sourceBlock_.RTL) {\n    // The SVG is LTR, force text to be RTL.\n    text += '\\u200F';\n  }\n  return text;\n};\n\n/**\n * Get the text from this field.\n * @return {string} Current text.\n */\nBlockly.Field.prototype.getText = function() {\n  if (this.getText_) {\n    var text = this.getText_.call(this);\n    if (text !== null) {\n      return String(text);\n    }\n  }\n  return String(this.getValue());\n};\n\n/**\n * Set the text in this field.  Trigger a rerender of the source block.\n * @param {*} _newText New text.\n * @deprecated 2019 setText should not be used directly. Use setValue instead.\n */\nBlockly.Field.prototype.setText = function(_newText) {\n  throw Error('setText method is deprecated');\n};\n\n/**\n * Force a rerender of the block that this field is installed on, which will\n * rerender this field and adjust for any sizing changes.\n * Other fields on the same block will not rerender, because their sizes have\n * already been recorded.\n * @package\n */\nBlockly.Field.prototype.markDirty = function() {\n  this.isDirty_ = true;\n  this.constants_ = null;\n};\n\n/**\n * Force a rerender of the block that this field is installed on, which will\n * rerender this field and adjust for any sizing changes.\n * Other fields on the same block will not rerender, because their sizes have\n * already been recorded.\n * @package\n */\nBlockly.Field.prototype.forceRerender = function() {\n  this.isDirty_ = true;\n  if (this.sourceBlock_ && this.sourceBlock_.rendered) {\n    this.sourceBlock_.render();\n    this.sourceBlock_.bumpNeighbours();\n    this.updateMarkers_();\n  }\n};\n\n/**\n * Used to change the value of the field. Handles validation and events.\n * Subclasses should override doClassValidation_ and doValueUpdate_ rather\n * than this method.\n * @param {*} newValue New value.\n */\nBlockly.Field.prototype.setValue = function(newValue) {\n  var doLogging = false;\n  if (newValue === null) {\n    doLogging && console.log('null, return');\n    // Not a valid value to check.\n    return;\n  }\n\n  var validatedValue = this.doClassValidation_(newValue);\n  // Class validators might accidentally forget to return, we'll ignore that.\n  newValue = this.processValidation_(newValue, validatedValue);\n  if (newValue instanceof Error) {\n    doLogging && console.log('invalid class validation, return');\n    return;\n  }\n\n  var localValidator = this.getValidator();\n  if (localValidator) {\n    validatedValue = localValidator.call(this, newValue);\n    // Local validators might accidentally forget to return, we'll ignore that.\n    newValue = this.processValidation_(newValue, validatedValue);\n    if (newValue instanceof Error) {\n      doLogging && console.log('invalid local validation, return');\n      return;\n    }\n  }\n  var source = this.sourceBlock_;\n  if (source && source.disposed) {\n    doLogging && console.log('source disposed, return');\n    return;\n  }\n  var oldValue = this.getValue();\n  if (oldValue === newValue) {\n    doLogging && console.log('same, return');\n    return;\n  }\n\n  if (source && Blockly.Events.isEnabled()) {\n    Blockly.Events.fire(new Blockly.Events.BlockChange(\n        source, 'field', this.name || null, oldValue, newValue));\n  }\n  this.doValueUpdate_(newValue);\n  if (this.isDirty_) {\n    this.forceRerender();\n  }\n  doLogging && console.log(this.value_);\n};\n\n/**\n * Process the result of validation.\n * @param {*} newValue New value.\n * @param {*} validatedValue Validated value.\n * @return {*} New value, or an Error object.\n * @private\n */\nBlockly.Field.prototype.processValidation_ = function(newValue,\n    validatedValue) {\n  if (validatedValue === null) {\n    this.doValueInvalid_(newValue);\n    if (this.isDirty_) {\n      this.forceRerender();\n    }\n    return Error();\n  }\n  if (validatedValue !== undefined) {\n    newValue = validatedValue;\n  }\n  return newValue;\n};\n\n/**\n * Get the current value of the field.\n * @return {*} Current value.\n */\nBlockly.Field.prototype.getValue = function() {\n  return this.value_;\n};\n\n/**\n * Used to validate a value. Returns input by default. Can be overridden by\n * subclasses, see FieldDropdown.\n * @param {*=} opt_newValue The value to be validated.\n * @return {*} The validated value, same as input by default.\n * @protected\n * @suppress {deprecated} Suppress deprecated this.classValidator call.\n */\nBlockly.Field.prototype.doClassValidation_ = function(opt_newValue) {\n  if (opt_newValue === null || opt_newValue === undefined) {\n    return null;\n  }\n  // For backwards compatibility.\n  opt_newValue = this.classValidator(/** @type {string} */ (opt_newValue));\n  return opt_newValue;\n};\n\n/**\n * Used to update the value of a field. Can be overridden by subclasses to do\n * custom storage of values/updating of external things.\n * @param {*} newValue The value to be saved.\n * @protected\n */\nBlockly.Field.prototype.doValueUpdate_ = function(newValue) {\n  this.value_ = newValue;\n  this.isDirty_ = true;\n};\n\n/**\n * Used to notify the field an invalid value was input. Can be overridden by\n * subclasses, see FieldTextInput.\n * No-op by default.\n * @param {*} _invalidValue The input value that was determined to be invalid.\n * @protected\n */\nBlockly.Field.prototype.doValueInvalid_ = function(_invalidValue) {\n  // NOP\n};\n\n/**\n * Handle a mouse down event on a field.\n * @param {!Event} e Mouse down event.\n * @protected\n */\nBlockly.Field.prototype.onMouseDown_ = function(e) {\n  if (!this.sourceBlock_ || !this.sourceBlock_.workspace) {\n    return;\n  }\n  var gesture = this.sourceBlock_.workspace.getGesture(e);\n  if (gesture) {\n    gesture.setStartField(this);\n  }\n};\n\n/**\n * Change the tooltip text for this field.\n * @param {string|Function|!SVGElement} newTip Text for tooltip or a parent\n *    element to link to for its tooltip.\n */\nBlockly.Field.prototype.setTooltip = function(newTip) {\n  var clickTarget = this.getClickTarget_();\n  if (!clickTarget) {\n    // Field has not been initialized yet.\n    this.tooltip_ = newTip;\n    return;\n  }\n\n  if (!newTip && newTip !== '') {  // If null or undefined.\n    clickTarget.tooltip = this.sourceBlock_;\n  } else {\n    clickTarget.tooltip = newTip;\n  }\n};\n\n/**\n * The element to bind the click handler to. If not set explicitly, defaults\n * to the SVG root of the field. When this element is\n * clicked on an editable field, the editor will open.\n * @return {!Element} Element to bind click handler to.\n * @protected\n */\nBlockly.Field.prototype.getClickTarget_ = function() {\n  return this.clickTarget_ || this.getSvgRoot();\n};\n\n/**\n * Return the absolute coordinates of the top-left corner of this field.\n * The origin (0,0) is the top-left corner of the page body.\n * @return {!Blockly.utils.Coordinate} Object with .x and .y properties.\n * @protected\n */\nBlockly.Field.prototype.getAbsoluteXY_ = function() {\n  return Blockly.utils.style.getPageOffset(\n      /** @type {!SVGRectElement} */ (this.getClickTarget_()));\n};\n\n/**\n * Whether this field references any Blockly variables.  If true it may need to\n * be handled differently during serialization and deserialization.  Subclasses\n * may override this.\n * @return {boolean} True if this field has any variable references.\n * @package\n */\nBlockly.Field.prototype.referencesVariables = function() {\n  return false;\n};\n\n/**\n * Search through the list of inputs and their fields in order to find the\n * parent input of a field.\n * @return {Blockly.Input} The input that the field belongs to.\n * @package\n */\nBlockly.Field.prototype.getParentInput = function() {\n  var parentInput = null;\n  var block = this.sourceBlock_;\n  var inputs = block.inputList;\n\n  for (var idx = 0; idx < block.inputList.length; idx++) {\n    var input = inputs[idx];\n    var fieldRows = input.fieldRow;\n    for (var j = 0; j < fieldRows.length; j++) {\n      if (fieldRows[j] === this) {\n        parentInput = input;\n        break;\n      }\n    }\n  }\n  return parentInput;\n};\n\n/**\n * Returns whether or not we should flip the field in RTL.\n * @return {boolean} True if we should flip in RTL.\n */\nBlockly.Field.prototype.getFlipRtl = function() {\n  return false;\n};\n\n/**\n * Returns whether or not the field is tab navigable.\n * @return {boolean} True if the field is tab navigable.\n */\nBlockly.Field.prototype.isTabNavigable = function() {\n  return false;\n};\n\n/**\n * Handles the given action.\n * This is only triggered when keyboard accessibility mode is enabled.\n * @param {!Blockly.Action} _action The action to be handled.\n * @return {boolean} True if the field handled the action, false otherwise.\n * @package\n */\nBlockly.Field.prototype.onBlocklyAction = function(_action) {\n  return false;\n};\n\n/**\n * Add the cursor svg to this fields svg group.\n * @param {SVGElement} cursorSvg The svg root of the cursor to be added to the\n *     field group.\n * @package\n */\nBlockly.Field.prototype.setCursorSvg = function(cursorSvg) {\n  if (!cursorSvg) {\n    this.cursorSvg_ = null;\n    return;\n  }\n\n  this.fieldGroup_.appendChild(cursorSvg);\n  this.cursorSvg_ = cursorSvg;\n};\n\n/**\n * Add the marker svg to this fields svg group.\n * @param {SVGElement} markerSvg The svg root of the marker to be added to the\n *     field group.\n * @package\n */\nBlockly.Field.prototype.setMarkerSvg = function(markerSvg) {\n  if (!markerSvg) {\n    this.markerSvg_ = null;\n    return;\n  }\n\n  this.fieldGroup_.appendChild(markerSvg);\n  this.markerSvg_ = markerSvg;\n};\n\n/**\n * Redraw any attached marker or cursor svgs if needed.\n * @protected\n */\nBlockly.Field.prototype.updateMarkers_ = function() {\n  var workspace =\n    /** @type {!Blockly.WorkspaceSvg} */ (this.sourceBlock_.workspace);\n  if (workspace.keyboardAccessibilityMode && this.cursorSvg_) {\n    workspace.getCursor().draw();\n  }\n  if (workspace.keyboardAccessibilityMode && this.markerSvg_) {\n    workspace.getMarker(Blockly.navigation.MARKER_NAME).draw();\n  }\n};\n"],"file":"field.min.js"}