{"version":3,"sources":["../../../src/blockly/core/ws_comment_events.js"],"names":["goog","provide","require","Blockly","Events","CommentBase","comment","commentId","id","workspaceId","workspace","group","getGroup","recordUndo","utils","object","inherits","Abstract","prototype","toJson","json","superClass_","call","fromJson","CommentChange","oldContents","newContents","constructor","oldContents_","newContents_","type","COMMENT_CHANGE","isNull","run","forward","getEventWorkspace_","getCommentById","console","warn","contents","setContent","CommentCreate","xml","toXmlWithXY","COMMENT_CREATE","Xml","domToText","textToDom","CommentCreateDeleteHelper","event","create","createElement","appendChild","domToWorkspace","dispose","CommentDelete","COMMENT_DELETE","CommentMove","comment_","oldCoordinate_","getXY","newCoordinate_","recordNew","Error","COMMENT_MOVE","setOldCoordinate","xy","Math","round","x","y","split","Coordinate","equals","target","current","moveBy"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Classes for all comment events.\n * @author fenichel@google.com (Rachel Fenichel)\n */\n'use strict';\n\ngoog.provide('Blockly.Events.CommentBase');\ngoog.provide('Blockly.Events.CommentChange');\ngoog.provide('Blockly.Events.CommentCreate');\ngoog.provide('Blockly.Events.CommentDelete');\ngoog.provide('Blockly.Events.CommentMove');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.Abstract');\ngoog.require('Blockly.utils.Coordinate');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.xml');\n// TODO: Fix recursive dependency.\n// goog.require('Blockly.Xml');\n\n\n/**\n * Abstract class for a comment event.\n * @param {Blockly.WorkspaceComment} comment The comment this event corresponds\n *     to.\n * @extends {Blockly.Events.Abstract}\n * @constructor\n */\nBlockly.Events.CommentBase = function(comment) {\n  /**\n   * The ID of the comment this event pertains to.\n   * @type {string}\n   */\n  this.commentId = comment.id;\n\n  /**\n   * The workspace identifier for this event.\n   * @type {string}\n   */\n  this.workspaceId = comment.workspace.id;\n\n  /**\n   * The event group id for the group this event belongs to. Groups define\n   * events that should be treated as an single action from the user's\n   * perspective, and should be undone together.\n   * @type {string}\n   */\n  this.group = Blockly.Events.getGroup();\n\n  /**\n   * Sets whether the event should be added to the undo stack.\n   * @type {boolean}\n   */\n  this.recordUndo = Blockly.Events.recordUndo;\n};\nBlockly.utils.object.inherits(Blockly.Events.CommentBase,\n    Blockly.Events.Abstract);\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\nBlockly.Events.CommentBase.prototype.toJson = function() {\n  var json = Blockly.Events.CommentBase.superClass_.toJson.call(this);\n  if (this.commentId) {\n    json['commentId'] = this.commentId;\n  }\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.CommentBase.prototype.fromJson = function(json) {\n  Blockly.Events.CommentBase.superClass_.fromJson.call(this, json);\n  this.commentId = json['commentId'];\n};\n\n/**\n * Class for a comment change event.\n * @param {Blockly.WorkspaceComment} comment The comment that is being changed.\n *     Null for a blank event.\n * @param {string} oldContents Previous contents of the comment.\n * @param {string} newContents New contents of the comment.\n * @extends {Blockly.Events.CommentBase}\n * @constructor\n */\nBlockly.Events.CommentChange = function(comment, oldContents, newContents) {\n  if (!comment) {\n    return;  // Blank event to be populated by fromJson.\n  }\n  Blockly.Events.CommentChange.superClass_.constructor.call(this, comment);\n  this.oldContents_ = oldContents;\n  this.newContents_ = newContents;\n};\nBlockly.utils.object.inherits(Blockly.Events.CommentChange,\n    Blockly.Events.CommentBase);\n\n/**\n * Type of this event.\n * @type {string}\n */\nBlockly.Events.CommentChange.prototype.type = Blockly.Events.COMMENT_CHANGE;\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\nBlockly.Events.CommentChange.prototype.toJson = function() {\n  var json = Blockly.Events.CommentChange.superClass_.toJson.call(this);\n  json['newContents'] = this.newContents_;\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.CommentChange.prototype.fromJson = function(json) {\n  Blockly.Events.CommentChange.superClass_.fromJson.call(this, json);\n  this.newContents_ = json['newValue'];\n};\n\n/**\n * Does this event record any change of state?\n * @return {boolean} False if something changed.\n */\nBlockly.Events.CommentChange.prototype.isNull = function() {\n  return this.oldContents_ == this.newContents_;\n};\n\n/**\n * Run a change event.\n * @param {boolean} forward True if run forward, false if run backward (undo).\n */\nBlockly.Events.CommentChange.prototype.run = function(forward) {\n  var workspace = this.getEventWorkspace_();\n  var comment = workspace.getCommentById(this.commentId);\n  if (!comment) {\n    console.warn('Can\\'t change non-existent comment: ' + this.commentId);\n    return;\n  }\n  var contents = forward ? this.newContents_ : this.oldContents_;\n\n  comment.setContent(contents);\n};\n\n/**\n * Class for a comment creation event.\n * @param {Blockly.WorkspaceComment} comment The created comment.\n *     Null for a blank event.\n * @extends {Blockly.Events.CommentBase}\n * @constructor\n */\nBlockly.Events.CommentCreate = function(comment) {\n  if (!comment) {\n    return;  // Blank event to be populated by fromJson.\n  }\n  Blockly.Events.CommentCreate.superClass_.constructor.call(this, comment);\n\n  this.xml = comment.toXmlWithXY();\n};\nBlockly.utils.object.inherits(Blockly.Events.CommentCreate,\n    Blockly.Events.CommentBase);\n\n/**\n * Type of this event.\n * @type {string}\n */\nBlockly.Events.CommentCreate.prototype.type = Blockly.Events.COMMENT_CREATE;\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\n// TODO (#1266): \"Full\" and \"minimal\" serialization.\nBlockly.Events.CommentCreate.prototype.toJson = function() {\n  var json = Blockly.Events.CommentCreate.superClass_.toJson.call(this);\n  json['xml'] = Blockly.Xml.domToText(this.xml);\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.CommentCreate.prototype.fromJson = function(json) {\n  Blockly.Events.CommentCreate.superClass_.fromJson.call(this, json);\n  this.xml = Blockly.Xml.textToDom(json['xml']);\n};\n\n/**\n * Run a creation event.\n * @param {boolean} forward True if run forward, false if run backward (undo).\n */\nBlockly.Events.CommentCreate.prototype.run = function(forward) {\n  Blockly.Events.CommentCreateDeleteHelper(this, forward);\n};\n\n/**\n * Helper function for Comment[Create|Delete]\n * @param {!Blockly.Events.CommentCreate|!Blockly.Events.CommentDelete} event\n *     The event to run.\n * @param {boolean} create if True then Create, if False then Delete\n */\nBlockly.Events.CommentCreateDeleteHelper = function(event, create) {\n  var workspace = event.getEventWorkspace_();\n  if (create) {\n    var xml = Blockly.utils.xml.createElement('xml');\n    xml.appendChild(event.xml);\n    Blockly.Xml.domToWorkspace(xml, workspace);\n  } else {\n    var comment = workspace.getCommentById(event.commentId);\n    if (comment) {\n      comment.dispose(false, false);\n    } else {\n      // Only complain about root-level block.\n      console.warn(\"Can't uncreate non-existent comment: \" + event.commentId);\n    }\n  }\n};\n/**\n * Class for a comment deletion event.\n * @param {Blockly.WorkspaceComment} comment The deleted comment.\n *     Null for a blank event.\n * @extends {Blockly.Events.CommentBase}\n * @constructor\n */\nBlockly.Events.CommentDelete = function(comment) {\n  if (!comment) {\n    return;  // Blank event to be populated by fromJson.\n  }\n  Blockly.Events.CommentDelete.superClass_.constructor.call(this, comment);\n\n  this.xml = comment.toXmlWithXY();\n};\nBlockly.utils.object.inherits(Blockly.Events.CommentDelete,\n    Blockly.Events.CommentBase);\n\n/**\n * Type of this event.\n * @type {string}\n */\nBlockly.Events.CommentDelete.prototype.type = Blockly.Events.COMMENT_DELETE;\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\n// TODO (#1266): \"Full\" and \"minimal\" serialization.\nBlockly.Events.CommentDelete.prototype.toJson = function() {\n  var json = Blockly.Events.CommentDelete.superClass_.toJson.call(this);\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.CommentDelete.prototype.fromJson = function(json) {\n  Blockly.Events.CommentDelete.superClass_.fromJson.call(this, json);\n};\n\n/**\n * Run a creation event.\n * @param {boolean} forward True if run forward, false if run backward (undo).\n */\nBlockly.Events.CommentDelete.prototype.run = function(forward) {\n  Blockly.Events.CommentCreateDeleteHelper(this, !forward);\n};\n\n/**\n * Class for a comment move event.  Created before the move.\n * @param {Blockly.WorkspaceComment} comment The comment that is being moved.\n *     Null for a blank event.\n * @extends {Blockly.Events.CommentBase}\n * @constructor\n */\nBlockly.Events.CommentMove = function(comment) {\n  if (!comment) {\n    return;  // Blank event to be populated by fromJson.\n  }\n  Blockly.Events.CommentMove.superClass_.constructor.call(this, comment);\n\n  /**\n   * The comment that is being moved.  Will be cleared after recording the new\n   * location.\n   * @type {Blockly.WorkspaceComment}\n   */\n  this.comment_ = comment;\n\n  /**\n   * The location before the move, in workspace coordinates.\n   * @type {!Blockly.utils.Coordinate}\n   */\n  this.oldCoordinate_ = comment.getXY();\n\n  /**\n   * The location after the move, in workspace coordinates.\n   * @type {Blockly.utils.Coordinate}\n   */\n  this.newCoordinate_ = null;\n};\nBlockly.utils.object.inherits(Blockly.Events.CommentMove,\n    Blockly.Events.CommentBase);\n\n/**\n * Record the comment's new location.  Called after the move.  Can only be\n * called once.\n */\nBlockly.Events.CommentMove.prototype.recordNew = function() {\n  if (!this.comment_) {\n    throw Error('Tried to record the new position of a comment on the ' +\n        'same event twice.');\n  }\n  this.newCoordinate_ = this.comment_.getXY();\n  this.comment_ = null;\n};\n\n/**\n * Type of this event.\n * @type {string}\n */\nBlockly.Events.CommentMove.prototype.type = Blockly.Events.COMMENT_MOVE;\n\n/**\n * Override the location before the move.  Use this if you don't create the\n * event until the end of the move, but you know the original location.\n * @param {!Blockly.utils.Coordinate} xy The location before the move,\n *     in workspace coordinates.\n */\nBlockly.Events.CommentMove.prototype.setOldCoordinate = function(xy) {\n  this.oldCoordinate_ = xy;\n};\n\n/**\n * Encode the event as JSON.\n * @return {!Object} JSON representation.\n */\n// TODO (#1266): \"Full\" and \"minimal\" serialization.\nBlockly.Events.CommentMove.prototype.toJson = function() {\n  var json = Blockly.Events.CommentMove.superClass_.toJson.call(this);\n  if (this.newCoordinate_) {\n    json['newCoordinate'] = Math.round(this.newCoordinate_.x) + ',' +\n        Math.round(this.newCoordinate_.y);\n  }\n  return json;\n};\n\n/**\n * Decode the JSON event.\n * @param {!Object} json JSON representation.\n */\nBlockly.Events.CommentMove.prototype.fromJson = function(json) {\n  Blockly.Events.CommentMove.superClass_.fromJson.call(this, json);\n\n  if (json['newCoordinate']) {\n    var xy = json['newCoordinate'].split(',');\n    this.newCoordinate_ =\n        new Blockly.utils.Coordinate(Number(xy[0]), Number(xy[1]));\n  }\n};\n\n/**\n * Does this event record any change of state?\n * @return {boolean} False if something changed.\n */\nBlockly.Events.CommentMove.prototype.isNull = function() {\n  return Blockly.utils.Coordinate.equals(this.oldCoordinate_,\n      this.newCoordinate_);\n};\n\n/**\n * Run a move event.\n * @param {boolean} forward True if run forward, false if run backward (undo).\n */\nBlockly.Events.CommentMove.prototype.run = function(forward) {\n  var workspace = this.getEventWorkspace_();\n  var comment = workspace.getCommentById(this.commentId);\n  if (!comment) {\n    console.warn('Can\\'t move non-existent comment: ' + this.commentId);\n    return;\n  }\n\n  var target = forward ? this.newCoordinate_ : this.oldCoordinate_;\n  // TODO: Check if the comment is being dragged, and give up if so.\n  var current = comment.getXY();\n  comment.moveBy(target.x - current.x, target.y - current.y);\n};\n"],"file":"ws_comment_events.min.js"}