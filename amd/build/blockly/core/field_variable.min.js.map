{"version":3,"sources":["../../../src/blockly/core/field_variable.js"],"names":["goog","provide","require","Blockly","FieldVariable","varName","opt_validator","opt_variableTypes","opt_defaultType","opt_config","menuGenerator_","dropdownCreate","defaultVariableName","size_","utils","Size","configure_","setValidator","setTypes_","object","inherits","FieldDropdown","fromJson","options","replaceMessageReferences","prototype","SERIALIZABLE","config","superClass_","call","initModel","variable_","variable","Variables","getOrCreateVariablePackage","sourceBlock_","workspace","defaultType_","doValueUpdate_","getId","shouldAddBorderRect_","getConstants","FIELD_DROPDOWN_NO_BORDER_RECT_SHADOW","type","fromXml","fieldElement","id","getAttribute","variableName","textContent","variableType","Error","Xml","domToText","setValue","toXml","name","setAttribute","setSourceBlock","block","isShadow","getValue","getText","getVariable","getValidator","validator_","doClassValidation_","opt_newValue","newId","console","warn","typeIsAllowed_","typeList","getVariableTypes_","i","length","variableTypes","getVariableTypes","defaultType","Array","isArray","isInArray","refreshVariableName","forceRerender","variableModelList","variables","getVariablesOfType","concat","sort","VariableModel","compareByName","push","Msg","RENAME_VARIABLE_ID","replace","DELETE_VARIABLE_ID","onItemSelected_","menu","menuItem","renameVariable","deleteVariableById","referencesVariables","fieldRegistry","register"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Variable input field.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.FieldVariable');\n\ngoog.require('Blockly.Events');\ngoog.require('Blockly.Events.BlockChange');\ngoog.require('Blockly.FieldDropdown');\ngoog.require('Blockly.fieldRegistry');\ngoog.require('Blockly.Msg');\ngoog.require('Blockly.utils');\ngoog.require('Blockly.utils.object');\ngoog.require('Blockly.utils.Size');\ngoog.require('Blockly.VariableModel');\ngoog.require('Blockly.Variables');\ngoog.require('Blockly.Xml');\n\n\n\n/**\n * Class for a variable's dropdown field.\n * @param {?string} varName The default name for the variable.  If null,\n *     a unique variable name will be generated.\n * @param {Function=} opt_validator A function that is called to validate\n *    changes to the field's value. Takes in a variable ID  & returns a\n *    validated variable ID, or null to abort the change.\n * @param {Array.<string>=} opt_variableTypes A list of the types of variables\n *     to include in the dropdown.\n * @param {string=} opt_defaultType The type of variable to create if this\n *     field's value is not explicitly set.  Defaults to ''.\n * @param {Object=} opt_config A map of options used to configure the field.\n *    See the [field creation documentation]{@link https://developers.google.com/blockly/guides/create-custom-blocks/fields/built-in-fields/variable#creation}\n *    for a list of properties this parameter supports.\n * @extends {Blockly.FieldDropdown}\n * @constructor\n */\nBlockly.FieldVariable = function(varName, opt_validator, opt_variableTypes,\n    opt_defaultType, opt_config) {\n  // The FieldDropdown constructor expects the field's initial value to be\n  // the first entry in the menu generator, which it may or may not be.\n  // Just do the relevant parts of the constructor.\n\n  /**\n   * An array of options for a dropdown list,\n   * or a function which generates these options.\n   * @type {(!Array.<!Array>|\n   *    !function(this:Blockly.FieldDropdown): !Array.<!Array>)}\n   * @protected\n   */\n  this.menuGenerator_ = Blockly.FieldVariable.dropdownCreate;\n\n  /**\n   * The initial variable name passed to this field's constructor, or an\n   * empty string if a name wasn't provided. Used to create the initial\n   * variable.\n   * @type {string}\n   */\n  this.defaultVariableName = varName || '';\n\n  /**\n   * The size of the area rendered by the field.\n   * @type {Blockly.utils.Size}\n   * @protected\n   * @override\n   */\n  this.size_ = new Blockly.utils.Size(0, 0);\n\n  opt_config && this.configure_(opt_config);\n  opt_validator && this.setValidator(opt_validator);\n\n  if (!opt_config) {  // Only do one kind of configuration or the other.\n    this.setTypes_(opt_variableTypes, opt_defaultType);\n  }\n};\nBlockly.utils.object.inherits(Blockly.FieldVariable, Blockly.FieldDropdown);\n\n/**\n * Construct a FieldVariable from a JSON arg object,\n * dereferencing any string table references.\n * @param {!Object} options A JSON object with options (variable,\n *                          variableTypes, and defaultType).\n * @return {!Blockly.FieldVariable} The new field instance.\n * @package\n * @nocollapse\n */\nBlockly.FieldVariable.fromJson = function(options) {\n  var varName = Blockly.utils.replaceMessageReferences(options['variable']);\n  return new Blockly.FieldVariable(\n      varName, undefined, undefined, undefined, options);\n};\n\n/**\n * Serializable fields are saved by the XML renderer, non-serializable fields\n * are not. Editable fields should also be serializable.\n * @type {boolean}\n */\nBlockly.FieldVariable.prototype.SERIALIZABLE = true;\n\n/**\n * Configure the field based on the given map of options.\n * @param {!Object} config A map of options to configure the field based on.\n * @protected\n */\nBlockly.FieldVariable.prototype.configure_ = function(config) {\n  Blockly.FieldVariable.superClass_.configure_.call(this, config);\n  this.setTypes_(config['variableTypes'], config['defaultType']);\n};\n\n/**\n * Initialize the model for this field if it has not already been initialized.\n * If the value has not been set to a variable by the first render, we make up a\n * variable rather than let the value be invalid.\n * @package\n */\nBlockly.FieldVariable.prototype.initModel = function() {\n  if (this.variable_) {\n    return; // Initialization already happened.\n  }\n  var variable = Blockly.Variables.getOrCreateVariablePackage(\n      this.sourceBlock_.workspace, null,\n      this.defaultVariableName, this.defaultType_);\n\n  // Don't call setValue because we don't want to cause a rerender.\n  this.doValueUpdate_(variable.getId());\n};\n\n/**\n * @override\n */\nBlockly.FieldVariable.prototype.shouldAddBorderRect_ = function() {\n  return Blockly.FieldVariable.superClass_.shouldAddBorderRect_.call(this) &&\n    (!this.getConstants().FIELD_DROPDOWN_NO_BORDER_RECT_SHADOW ||\n        this.sourceBlock_.type != 'variables_get');\n};\n\n/**\n * Initialize this field based on the given XML.\n * @param {!Element} fieldElement The element containing information about the\n *    variable field's state.\n */\nBlockly.FieldVariable.prototype.fromXml = function(fieldElement) {\n  var id = fieldElement.getAttribute('id');\n  var variableName = fieldElement.textContent;\n  // 'variabletype' should be lowercase, but until July 2019 it was sometimes\n  // recorded as 'variableType'.  Thus we need to check for both.\n  var variableType = fieldElement.getAttribute('variabletype') ||\n      fieldElement.getAttribute('variableType') || '';\n\n  var variable = Blockly.Variables.getOrCreateVariablePackage(\n      this.sourceBlock_.workspace, id, variableName, variableType);\n\n  // This should never happen :)\n  if (variableType != null && variableType !== variable.type) {\n    throw Error('Serialized variable type with id \\'' +\n      variable.getId() + '\\' had type ' + variable.type + ', and ' +\n      'does not match variable field that references it: ' +\n      Blockly.Xml.domToText(fieldElement) + '.');\n  }\n\n  this.setValue(variable.getId());\n};\n\n/**\n * Serialize this field to XML.\n * @param {!Element} fieldElement The element to populate with info about the\n *    field's state.\n * @return {!Element} The element containing info about the field's state.\n */\nBlockly.FieldVariable.prototype.toXml = function(fieldElement) {\n  // Make sure the variable is initialized.\n  this.initModel();\n\n  fieldElement.id = this.variable_.getId();\n  fieldElement.textContent = this.variable_.name;\n  if (this.variable_.type) {\n    fieldElement.setAttribute('variabletype', this.variable_.type);\n  }\n  return fieldElement;\n};\n\n/**\n * Attach this field to a block.\n * @param {!Blockly.Block} block The block containing this field.\n */\nBlockly.FieldVariable.prototype.setSourceBlock = function(block) {\n  if (block.isShadow()) {\n    throw Error('Variable fields are not allowed to exist on shadow blocks.');\n  }\n  Blockly.FieldVariable.superClass_.setSourceBlock.call(this, block);\n};\n\n/**\n * Get the variable's ID.\n * @return {string} Current variable's ID.\n */\nBlockly.FieldVariable.prototype.getValue = function() {\n  return this.variable_ ? this.variable_.getId() : null;\n};\n\n/**\n * Get the text from this field, which is the selected variable's name.\n * @return {string} The selected variable's name, or the empty string if no\n *     variable is selected.\n */\nBlockly.FieldVariable.prototype.getText = function() {\n  return this.variable_ ? this.variable_.name : '';\n};\n\n/**\n * Get the variable model for the selected variable.\n * Not guaranteed to be in the variable map on the workspace (e.g. if accessed\n * after the variable has been deleted).\n * @return {Blockly.VariableModel} The selected variable, or null if none was\n *     selected.\n * @package\n */\nBlockly.FieldVariable.prototype.getVariable = function() {\n  return this.variable_;\n};\n\n/**\n * Gets the validation function for this field, or null if not set.\n * Returns null if the variable is not set, because validators should not\n * run on the initial setValue call, because the field won't be attached to\n * a block and workspace at that point.\n * @return {Function} Validation function, or null.\n */\nBlockly.FieldVariable.prototype.getValidator = function() {\n  // Validators shouldn't operate on the initial setValue call.\n  // Normally this is achieved by calling setValidator after setValue, but\n  // this is not a possibility with variable fields.\n  if (this.variable_) {\n    return this.validator_;\n  }\n  return null;\n};\n\n/**\n * Ensure that the id belongs to a valid variable of an allowed type.\n * @param {*=} opt_newValue The id of the new variable to set.\n * @return {?string} The validated id, or null if invalid.\n * @protected\n */\nBlockly.FieldVariable.prototype.doClassValidation_ = function(opt_newValue) {\n  if (opt_newValue === null) {\n    return null;\n  }\n  var newId = /** @type {string} */ (opt_newValue);\n  var variable = Blockly.Variables.getVariable(\n      this.sourceBlock_.workspace, newId);\n  if (!variable) {\n    console.warn('Variable id doesn\\'t point to a real variable! ' +\n        'ID was ' + newId);\n    return null;\n  }\n  // Type Checks.\n  var type = variable.type;\n  if (!this.typeIsAllowed_(type)) {\n    console.warn('Variable type doesn\\'t match this field!  Type was ' + type);\n    return null;\n  }\n  return newId;\n};\n\n/**\n * Update the value of this variable field, as well as its variable and text.\n *\n * The variable ID should be valid at this point, but if a variable field\n * validator returns a bad ID, this could break.\n * @param {*} newId The value to be saved.\n * @protected\n */\nBlockly.FieldVariable.prototype.doValueUpdate_ = function(newId) {\n  this.variable_ = Blockly.Variables.getVariable(\n      this.sourceBlock_.workspace, /** @type {string} */ (newId));\n  Blockly.FieldVariable.superClass_.doValueUpdate_.call(this, newId);\n};\n\n/**\n * Check whether the given variable type is allowed on this field.\n * @param {string} type The type to check.\n * @return {boolean} True if the type is in the list of allowed types.\n * @private\n */\nBlockly.FieldVariable.prototype.typeIsAllowed_ = function(type) {\n  var typeList = this.getVariableTypes_();\n  if (!typeList) {\n    return true; // If it's null, all types are valid.\n  }\n  for (var i = 0; i < typeList.length; i++) {\n    if (type == typeList[i]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Return a list of variable types to include in the dropdown.\n * @return {!Array.<string>} Array of variable types.\n * @throws {Error} if variableTypes is an empty array.\n * @private\n */\nBlockly.FieldVariable.prototype.getVariableTypes_ = function() {\n  // TODO (#1513): Try to avoid calling this every time the field is edited.\n  var variableTypes = this.variableTypes;\n  if (variableTypes === null) {\n    // If variableTypes is null, return all variable types.\n    if (this.sourceBlock_ && this.sourceBlock_.workspace) {\n      return this.sourceBlock_.workspace.getVariableTypes();\n    }\n  }\n  variableTypes = variableTypes || [''];\n  if (variableTypes.length == 0) {\n    // Throw an error if variableTypes is an empty list.\n    var name = this.getText();\n    throw Error('\\'variableTypes\\' of field variable ' +\n      name + ' was an empty list');\n  }\n  return variableTypes;\n};\n\n/**\n * Parse the optional arguments representing the allowed variable types and the\n * default variable type.\n * @param {Array.<string>=} opt_variableTypes A list of the types of variables\n *     to include in the dropdown.  If null or undefined, variables of all types\n *     will be displayed in the dropdown.\n * @param {string=} opt_defaultType The type of the variable to create if this\n *     field's value is not explicitly set.  Defaults to ''.\n * @private\n */\nBlockly.FieldVariable.prototype.setTypes_ = function(opt_variableTypes,\n    opt_defaultType) {\n  // If you expected that the default type would be the same as the only entry\n  // in the variable types array, tell the Blockly team by commenting on #1499.\n  var defaultType = opt_defaultType || '';\n  // Set the allowable variable types.  Null means all types on the workspace.\n  if (opt_variableTypes == null || opt_variableTypes == undefined) {\n    var variableTypes = null;\n  } else if (Array.isArray(opt_variableTypes)) {\n    var variableTypes = opt_variableTypes;\n    // Make sure the default type is valid.\n    var isInArray = false;\n    for (var i = 0; i < variableTypes.length; i++) {\n      if (variableTypes[i] == defaultType) {\n        isInArray = true;\n      }\n    }\n    if (!isInArray) {\n      throw Error('Invalid default type \\'' + defaultType + '\\' in ' +\n          'the definition of a FieldVariable');\n    }\n  } else {\n    throw Error('\\'variableTypes\\' was not an array in the definition of ' +\n        'a FieldVariable');\n  }\n  // Only update the field once all checks pass.\n  this.defaultType_ = defaultType;\n  this.variableTypes = variableTypes;\n};\n\n/**\n * Refreshes the name of the variable by grabbing the name of the model.\n * Used when a variable gets renamed, but the ID stays the same. Should only\n * be called by the block.\n * @package\n */\nBlockly.FieldVariable.prototype.refreshVariableName = function() {\n  this.forceRerender();\n};\n\n/**\n * Return a sorted list of variable names for variable dropdown menus.\n * Include a special option at the end for creating a new variable name.\n * @return {!Array.<!Array>} Array of variable names/id tuples.\n * @this {Blockly.FieldVariable}\n */\nBlockly.FieldVariable.dropdownCreate = function() {\n  if (!this.variable_) {\n    throw Error('Tried to call dropdownCreate on a variable field with no' +\n        ' variable selected.');\n  }\n  var name = this.getText();\n  var variableModelList = [];\n  if (this.sourceBlock_ && this.sourceBlock_.workspace) {\n    var variableTypes = this.getVariableTypes_();\n    // Get a copy of the list, so that adding rename and new variable options\n    // doesn't modify the workspace's list.\n    for (var i = 0; i < variableTypes.length; i++) {\n      var variableType = variableTypes[i];\n      var variables =\n        this.sourceBlock_.workspace.getVariablesOfType(variableType);\n      variableModelList = variableModelList.concat(variables);\n    }\n  }\n  variableModelList.sort(Blockly.VariableModel.compareByName);\n\n  var options = [];\n  for (var i = 0; i < variableModelList.length; i++) {\n    // Set the UUID as the internal representation of the variable.\n    options[i] = [variableModelList[i].name, variableModelList[i].getId()];\n  }\n  options.push([Blockly.Msg['RENAME_VARIABLE'], Blockly.RENAME_VARIABLE_ID]);\n  if (Blockly.Msg['DELETE_VARIABLE']) {\n    options.push(\n        [\n          Blockly.Msg['DELETE_VARIABLE'].replace('%1', name),\n          Blockly.DELETE_VARIABLE_ID\n        ]\n    );\n  }\n\n  return options;\n};\n\n/**\n * Handle the selection of an item in the variable dropdown menu.\n * Special case the 'Rename variable...' and 'Delete variable...' options.\n * In the rename case, prompt the user for a new name.\n * @param {!Blockly.Menu} menu The Menu component clicked.\n * @param {!Blockly.MenuItem} menuItem The MenuItem selected within menu.\n * @protected\n */\nBlockly.FieldVariable.prototype.onItemSelected_ = function(menu, menuItem) {\n  var id = menuItem.getValue();\n  // Handle special cases.\n  if (this.sourceBlock_ && this.sourceBlock_.workspace) {\n    if (id == Blockly.RENAME_VARIABLE_ID) {\n      // Rename variable.\n      Blockly.Variables.renameVariable(\n          this.sourceBlock_.workspace, this.variable_);\n      return;\n    } else if (id == Blockly.DELETE_VARIABLE_ID) {\n      // Delete variable.\n      this.sourceBlock_.workspace.deleteVariableById(this.variable_.getId());\n      return;\n    }\n  }\n  // Handle unspecial case.\n  this.setValue(id);\n};\n\n/**\n * Overrides referencesVariables(), indicating this field refers to a variable.\n * @return {boolean} True.\n * @package\n * @override\n */\nBlockly.FieldVariable.prototype.referencesVariables = function() {\n  return true;\n};\n\nBlockly.fieldRegistry.register('field_variable', Blockly.FieldVariable);\n"],"file":"field_variable.min.js"}