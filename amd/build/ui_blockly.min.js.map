{"version":3,"sources":["../src/ui_blockly.js"],"names":["define","$","Blockly","BlocklyUi","textareaId","width","height","templateParams","url","xhr","textArea","document","getElementById","workspace","Code","Python","blocklyDiv","createElement","id","class","tabindex","style","parentNode","insertBefore","XMLHttpRequest","blocklyUi","overrideMimeType","fail","onload","readyState","DONE","status","inject","toolbox","responseText","value","xmlCode","Xml","textToDom","domToWorkspace","err","console","log","window","location","protocol","host","open","send","prototype","getElement","failed","failMessage","sync","workspaceState","workspaceToDom","code","workspaceToCode","appendChild","XMLSerializer","serializeToString","destroy","resize","svgResize","hasFocus","Constructor"],"mappings":"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","sourcesContent":["define(['jquery', 'qtype_coderunner/blockly/browser'], function($, Blockly) {\n/* 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON templateParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n */\n        function BlocklyUi(textareaId, width, height, templateParams) {\n\n            var url, xhr, textArea;\n\n            textArea = document.getElementById(textareaId);\n            this.textArea = textArea;\n            this.templateParams = templateParams;\n            this.workspace = null;\n\n            this.Code = Blockly.Python;\n\n            this.blocklyDiv = document.createElement(\"div\");\n            this.blocklyDiv.id = \"blockly_\" + textareaId;\n            this.blocklyDiv.class = \"coderunner_blockly\";\n            this.blocklyDiv.tabindex = 1;\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n\n            textArea.parentNode.insertBefore(this.blocklyDiv, textArea);\n\n            // Load toolbox XML from file\n            xhr = new XMLHttpRequest();\n            xhr.blocklyUi = this;\n            xhr.overrideMimeType('text/xml');\n\n            this.fail = false;\n            xhr.onload = function() {\n                try {\n                    if (xhr.readyState === xhr.DONE && xhr.status === 200) {\n                        //this.toolbox = Blockly.Xml.textToDom(xhr.respondeXML);\n                        xhr.blocklyUi.workspace = Blockly.inject(xhr.blocklyUi.blocklyDiv, {toolbox: xhr.responseText});\n                    }\n                    // Load blockly state if exists\n                    if (textArea.value != \"\") {\n                        var xmlCode = Blockly.Xml.textToDom(textArea.value);\n                        Blockly.Xml.domToWorkspace(xmlCode, xhr.blocklyUi.workspace);\n                    }\n                }\n                catch(err) {\n                    xhr.blocklyUi.fail = true;\n                    console.log(err);\n                }\n            };\n            url = window.location.protocol + '//' + window.location.host;\n            url += \"/question/type/coderunner/amd/src/blockly/toolbox.xml\";\n\n            xhr.open(\"GET\", url, true);\n            xhr.send();\n        }\n\n/* 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n */\n        BlocklyUi.prototype.getElement = function() {\n            return this.blocklyDiv;\n        };\n\n/* 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n */\n        BlocklyUi.prototype.failed = function() {\n            return this.fail;\n        };\n\n/* 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n */\n        BlocklyUi.prototype.failMessage = function() {\n\n        };\n\n/* 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n */\n        BlocklyUi.prototype.sync = function() {\n            // Generate and save blocky state\n            var workspaceState = Blockly.Xml.workspaceToDom(this.workspace);\n\n            // Append code node to workspaceState\n            var code = this.Code.workspaceToCode(this.workspace);\n            var xmlCode = Blockly.Xml.textToDom(\"<code>\" + code + \"</code>\");\n            workspaceState.appendChild(xmlCode);\n            this.textArea.value = (new XMLSerializer()).serializeToString(workspaceState);\n        };\n\n/* 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n */\n        BlocklyUi.prototype.destroy = function() {\n            // TODO\n        };\n\n/* 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n */\n        //BlocklyUi.prototype.resize = function(w, h) {\n        BlocklyUi.prototype.resize = function(width, height) {\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n            Blockly.svgResize(this.workspace);\n        };\n\n/* 8. A hasFocus() method that returns true if the UI element has focus.\n */\n        BlocklyUi.prototype.hasFocus = function() {\n\n        };\n\n/* The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n */\n       return {\n            Constructor: BlocklyUi\n        };\n\n});\n"],"file":"ui_blockly.min.js"}