{"version":3,"sources":["../src/ui_blockly.js"],"names":["define","$","Blockly","BlocklyUi","textareaId","width","height","templateParams","textArea","document","getElementById","xml","toolbox","Xml","textToDom","parentNode","insertBefore","blocklyDiv","createElement","id","class","tabindex","style","fail","workspace","inject","err","console","log","prototype","getElement","failed","failMessage","sync","destroy","resize","svgResize","hasFocus","Constructor"],"mappings":"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","sourcesContent":["define(['jquery', 'qtype_coderunner/blockly/browser'], function($, Blockly) {\n/* 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON templateParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n */\n        function BlocklyUi(textareaId, width, height, templateParams) {\n\n            this.textArea = document.getElementById(textareaId);\n            this.templateParams = templateParams;\n\n            var xml;\n            xml = \"<xml id='toolbox' style='display: none'>\";\n            xml += \"<category name='Control'>\";\n            xml += \"<block type='controls_if'></block>\";\n            xml += \"<block type='controls_whileUntil'></block>\";\n            xml += \"<block type='controls_for'></block>\";\n            xml += \"</category>\";\n            xml += \"<category name='Logic'>\";\n            xml += \"<block type='logic_compare'></block>\";\n            xml += \"<block type='logic_operation'></block>\";\n            xml += \"<block type='logic_boolean'></block>\";\n            xml += \"</category>\";\n            xml += \"</xml>\";\n\n            this.toolbox = Blockly.Xml.textToDom(xml);\n\n            this.textArea.parentNode.insertBefore(this.toolbox, this.textArea);\n\n            this.blocklyDiv = document.createElement(\"div\");\n            this.blocklyDiv.id = \"blockly_\" + textareaId;\n            this.blocklyDiv.class = \"coderunner_blockly\";\n            this.blocklyDiv.tabindex = 1;\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n\n            this.textArea.parentNode.insertBefore(this.blocklyDiv, this.textArea);\n\n            this.fail = false;\n            this.workspace = null;\n            try {\n                this.workspace = Blockly.inject(this.blocklyDiv, {\n                    toolbox: document.getElementById('toolbox')\n                    });\n            }\n            catch(err) {\n                this.fail = true;\n                console.log(err);\n            }\n        }\n\n/* 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n */\n        BlocklyUi.prototype.getElement = function() {\n            return this.blocklyDiv;\n        };\n\n/* 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n */\n        BlocklyUi.prototype.failed = function() {\n            return this.fail;\n        };\n\n/* 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n */\n        BlocklyUi.prototype.failMessage = function() {\n\n        };\n\n/* 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n */\n        BlocklyUi.prototype.sync = function() {\n            // TODO: generate code in textArea\n        };\n\n/* 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n */\n        BlocklyUi.prototype.destroy = function() {\n            // TODO\n        };\n\n/* 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n */\n        //BlocklyUi.prototype.resize = function(w, h) {\n        BlocklyUi.prototype.resize = function(width, height) {\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n            Blockly.svgResize(this.workspace);\n        };\n\n/* 8. A hasFocus() method that returns true if the UI element has focus.\n */\n        BlocklyUi.prototype.hasFocus = function() {\n\n        };\n\n/* The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n */\n       return {\n            Constructor: BlocklyUi\n        };\n\n});\n"],"file":"ui_blockly.min.js"}