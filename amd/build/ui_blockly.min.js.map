{"version":3,"sources":["../src/ui_blockly.js"],"names":["define","$","Blockly","BlocklyUi","textareaId","width","height","templateParams","textArea","document","getElementById","xml","toolbox","Xml","textToDom","Code","Python","parentNode","insertBefore","blocklyDiv","createElement","id","class","tabindex","style","fail","workspace","inject","value","xmlCode","domToWorkspace","err","console","log","prototype","getElement","failed","failMessage","sync","workspaceState","workspaceToDom","code","workspaceToCode","appendChild","XMLSerializer","serializeToString","destroy","resize","svgResize","hasFocus","Constructor"],"mappings":"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","sourcesContent":["define(['jquery', 'qtype_coderunner/blockly/browser'], function($, Blockly) {\n/* 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON templateParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n */\n        function BlocklyUi(textareaId, width, height, templateParams) {\n\n            this.textArea = document.getElementById(textareaId);\n            this.templateParams = templateParams;\n\n            var xml;\n            xml = \"<xml id='toolbox' style='display: none'>\";\n            xml += \"<category name='Control'>\";\n            xml += \"<block type='controls_if'></block>\";\n            xml += \"<block type='controls_whileUntil'></block>\";\n            xml += \"<block type='controls_for'></block>\";\n            xml += \"</category>\";\n            xml += \"<category name='Logic'>\";\n            xml += \"<block type='logic_compare'></block>\";\n            xml += \"<block type='logic_operation'></block>\";\n            xml += \"<block type='logic_boolean'></block>\";\n            xml += \"</category>\";\n            xml += \"<category name='Other'>\";\n            xml += \"<block type='math_number'></block>\";\n            xml += \"<block type='text'></block>\";\n            xml += \"<block type='text_print'></block>\";\n            xml += \"</category>\";\n            xml += \"</xml>\";\n\n            this.toolbox = Blockly.Xml.textToDom(xml);\n            this.Code = Blockly.Python;\n\n            this.textArea.parentNode.insertBefore(this.toolbox, this.textArea);\n\n            this.blocklyDiv = document.createElement(\"div\");\n            this.blocklyDiv.id = \"blockly_\" + textareaId;\n            this.blocklyDiv.class = \"coderunner_blockly\";\n            this.blocklyDiv.tabindex = 1;\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n\n            this.textArea.parentNode.insertBefore(this.blocklyDiv, this.textArea);\n\n            this.fail = false;\n            this.workspace = null;\n            try {\n                // Create workspace with toolbox\n                this.workspace = Blockly.inject(this.blocklyDiv, {\n                    toolbox: document.getElementById('toolbox')\n                    });\n\n                // TODO: Load blockly state\n                // Problem. We need to load code and blockly state from textArea!!\n                // We need to extract from textArea the workspace state only!\n                if (this.textArea.value != \"\") {\n                    this.xmlCode = Blockly.Xml.textToDom(this.textArea.value);\n                    Blockly.Xml.domToWorkspace(this.xmlCode, this.workspace);\n                }\n            }\n            catch(err) {\n                this.fail = true;\n                console.log(err);\n            }\n        }\n\n/* 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n */\n        BlocklyUi.prototype.getElement = function() {\n            return this.blocklyDiv;\n        };\n\n/* 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n */\n        BlocklyUi.prototype.failed = function() {\n            return this.fail;\n        };\n\n/* 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n */\n        BlocklyUi.prototype.failMessage = function() {\n\n        };\n\n/* 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n */\n        BlocklyUi.prototype.sync = function() {\n            // Generate and save blocky state\n            var workspaceState = Blockly.Xml.workspaceToDom(this.workspace);\n\n            // Append code node to workspaceState\n            var code = this.Code.workspaceToCode(this.workspace);\n            var xmlCode = Blockly.Xml.textToDom(\"<code>\" + code + \"</code>\");\n            workspaceState.appendChild(xmlCode);\n            this.textArea.value = (new XMLSerializer()).serializeToString(workspaceState);\n        };\n\n/* 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n */\n        BlocklyUi.prototype.destroy = function() {\n            // TODO\n        };\n\n/* 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n */\n        //BlocklyUi.prototype.resize = function(w, h) {\n        BlocklyUi.prototype.resize = function(width, height) {\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n            Blockly.svgResize(this.workspace);\n        };\n\n/* 8. A hasFocus() method that returns true if the UI element has focus.\n */\n        BlocklyUi.prototype.hasFocus = function() {\n\n        };\n\n/* The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n */\n       return {\n            Constructor: BlocklyUi\n        };\n\n});\n"],"file":"ui_blockly.min.js"}