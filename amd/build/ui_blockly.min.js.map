{"version":3,"sources":["../src/ui_blockly.js"],"names":["define","$","Blockly","BlocklyUi","textareaId","width","height","templateParams","textArea","document","getElementById","console","log","xml","toolbox","Xml","textToDom","parentNode","insertBefore","blocklyDiv","createElement","id","class","tabindex","style","fail","workspace","inject","domToWorkspace","removeChild","err","prototype","getElement","failed","failMessage","sync","destroy","resize","hasFocus","Constructor"],"mappings":"AAAAA,OAAM,+BAAC,CAAC,QAAD,CAAW,kCAAX,CAAD,CAAiD,SAASC,CAAT,CAAYC,CAAZ,CAAqB,CASpE,QAASC,CAAAA,CAAT,CAAmBC,CAAnB,CAA+BC,CAA/B,CAAsCC,CAAtC,CAA8CC,CAA9C,CAA8D,CAE1D,KAAKC,QAAL,CAAgBC,QAAQ,CAACC,cAAT,CAAwBN,CAAxB,CAAhB,CACA,KAAKG,cAAL,CAAsBA,CAAtB,CAEAI,OAAO,CAACC,GAAR,CAAY,WAAaN,CAAzB,EACAK,OAAO,CAACC,GAAR,CAAY,YAAcP,CAA1B,EAGA,GAAIQ,CAAAA,CAAG,CAWA,8CAXP,CAYAA,CAAG,EAAI,sCAAP,CACAA,CAAG,EAAI,8CAAP,CACAA,CAAG,EAAI,QAAP,CAEA,KAAKC,OAAL,CAAeZ,CAAO,CAACa,GAAR,CAAYC,SAAZ,CAAsBH,CAAtB,CAAf,CAEA,KAAKL,QAAL,CAAcS,UAAd,CAAyBC,YAAzB,CAAsC,KAAKJ,OAA3C,CAAoD,KAAKN,QAAzD,EAEA,KAAKW,UAAL,CAAkBV,QAAQ,CAACW,aAAT,CAAuB,KAAvB,CAAlB,CACA,KAAKD,UAAL,CAAgBE,EAAhB,CAAqB,WAAajB,CAAlC,CACA,KAAKe,UAAL,CAAgBG,KAAhB,CAAwB,oBAAxB,CACA,KAAKH,UAAL,CAAgBI,QAAhB,CAA2B,CAA3B,CACA,KAAKJ,UAAL,CAAgBK,KAAhB,CAAsBlB,MAAtB,CAA+BA,CAA/B,CACA,KAAKa,UAAL,CAAgBK,KAAhB,CAAsBnB,KAAtB,CAA8BA,CAA9B,CAEA,KAAKG,QAAL,CAAcS,UAAd,CAAyBC,YAAzB,CAAsC,KAAKC,UAA3C,CAAuD,KAAKX,QAA5D,EAEA,KAAKiB,IAAL,IACA,KAAKC,SAAL,CAAiB,IAAjB,CACA,GAAI,CACA,KAAKA,SAAL,CAAiBxB,CAAO,CAACyB,MAAR,CAAe,KAAKR,UAApB,CAAjB,CACAjB,CAAO,CAACa,GAAR,CAAYa,cAAZ,CAA2B,KAAKd,OAAhC,CAAyC,KAAKY,SAA9C,EACA,KAAKlB,QAAL,CAAcS,UAAd,CAAyBY,WAAzB,CAAqC,KAAKV,UAA1C,CACH,CACD,MAAMW,CAAN,CAAW,CACP,KAAKL,IAAL,IACAd,OAAO,CAACC,GAAR,CAAYkB,CAAZ,CACH,CACJ,CAKD3B,CAAS,CAAC4B,SAAV,CAAoBC,UAApB,CAAiC,UAAW,CACxC,MAAO,MAAKb,UACf,CAFD,CAWAhB,CAAS,CAAC4B,SAAV,CAAoBE,MAApB,CAA6B,UAAW,CACpC,MAAO,MAAKR,IACf,CAFD,CAOAtB,CAAS,CAAC4B,SAAV,CAAoBG,WAApB,CAAkC,UAAW,CAE5C,CAFD,CAOA/B,CAAS,CAAC4B,SAAV,CAAoBI,IAApB,CAA2B,UAAW,CAErC,CAFD,CAQAhC,CAAS,CAAC4B,SAAV,CAAoBK,OAApB,CAA8B,UAAW,CAExC,CAFD,CAQAjC,CAAS,CAAC4B,SAAV,CAAoBM,MAApB,CAA6B,UAAW,CAEvC,CAFD,CAMAlC,CAAS,CAAC4B,SAAV,CAAoBO,QAApB,CAA+B,UAAW,CAEzC,CAFD,CAOD,MAAO,CACFC,WAAW,CAAEpC,CADX,CAIb,CAzHK,CAAN","sourcesContent":["define(['jquery', 'qtype_coderunner/blockly/browser'], function($, Blockly) {\n/* 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON templateParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n */\n        function BlocklyUi(textareaId, width, height, templateParams) {\n\n            this.textArea = document.getElementById(textareaId);\n            this.templateParams = templateParams;\n\n            console.log(\"Altura: \" + height);\n            console.log(\"Anchura: \" + width);\n\n\n            var xml;\n            //xml = \"<xml id='toolbox' style='display: none'>\";\n            //xml += \"<block type='controls_if'></block>\";\n            //xml += \"<block type='controls_repeat_ext'></block>\";\n            //xml += \"<block type='logic_compare'></block>\";\n            //xml += \"<block type='math_number'></block>\";\n            //xml += \"<block type='math_arithmetic'></block>\";\n            //xml += \"<block type='text'></block>\";\n            //xml += \"<block type='text_print'></block>\";\n            //xml += \"</xml>\";\n\n            xml =  \"<xml id=\\\"toolbox\\\" style=\\\"display: none\\\">\";\n            xml += \"<block type=\\\"controls_if\\\"></block>\";\n            xml += \"<block type=\\\"controls_whileUntil\\\"></block>\";\n            xml += \"</xml>\";\n\n            this.toolbox = Blockly.Xml.textToDom(xml);\n\n            this.textArea.parentNode.insertBefore(this.toolbox, this.textArea);\n\n            this.blocklyDiv = document.createElement(\"div\");\n            this.blocklyDiv.id = \"blockly_\" + textareaId;\n            this.blocklyDiv.class = \"coderunner_blockly\";\n            this.blocklyDiv.tabindex = 1;\n            this.blocklyDiv.style.height = height;\n            this.blocklyDiv.style.width = width;\n\n            this.textArea.parentNode.insertBefore(this.blocklyDiv, this.textArea);\n\n            this.fail = false;\n            this.workspace = null;\n            try {\n                this.workspace = Blockly.inject(this.blocklyDiv);\n                Blockly.Xml.domToWorkspace(this.toolbox, this.workspace);\n                this.textArea.parentNode.removeChild(this.blocklyDiv);\n            }\n            catch(err) {\n                this.fail = true;\n                console.log(err);\n            }\n        }\n\n/* 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n */\n        BlocklyUi.prototype.getElement = function() {\n            return this.blocklyDiv;\n        };\n\n/* 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n */\n        BlocklyUi.prototype.failed = function() {\n            return this.fail;\n        };\n\n/* 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n */\n        BlocklyUi.prototype.failMessage = function() {\n\n        };\n\n/* 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n */\n        BlocklyUi.prototype.sync = function() {\n            // TODO: generate code in textArea\n        };\n\n/* 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n */\n        BlocklyUi.prototype.destroy = function() {\n            // TODO\n        };\n\n/* 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n */\n        //BlocklyUi.prototype.resize = function(w, h) {\n        BlocklyUi.prototype.resize = function() {\n            //Blockly.svgResize(this.workspace);\n        };\n\n/* 8. A hasFocus() method that returns true if the UI element has focus.\n */\n        BlocklyUi.prototype.hasFocus = function() {\n\n        };\n\n/* The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n */\n       return {\n            Constructor: BlocklyUi\n        };\n\n});\n"],"file":"ui_blockly.min.js"}