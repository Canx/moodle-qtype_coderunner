{"version":3,"sources":["../src/ui_blockly.js"],"names":["define","$","require","url","Blockly","BlocklyUi","textareaId","width","height","templateParams","textArea","locale","toolbox","that","document","getElementById","blocklyDiv","createElement","id","class","tabindex","style","parentNode","insertBefore","fail","msg","loadBlockly_","err","console","log","setLocale","workspace","inject","relativeUrl","value","xmlCode","Xml","textToDom","domToWorkspace","prototype","getElement","failed","failMessage","sync","workspaceState","workspaceToDom","code","Python","workspaceToCode","appendChild","XMLSerializer","serializeToString","destroy","dispose","removeChild","resize","svgResize","hasFocus","Constructor"],"mappings":"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","sourcesContent":["define(['jquery', 'require', 'core/url', 'qtype_coderunner/blockly/browser'], function($, require, url, Blockly) {\n\n        // A constructor SomeUiName(textareaId, width, height, params) that\n        // builds an HTML component of the given width and height. textareaId is the\n        // ID of the textArea from which the UI element should obtain its initial\n        // serialisation and to which it should write the serialisation when its save\n        // or destroy methods are called. params is a JavaScript object,\n        // decoded from the JSON templateParams defined by the question plus any\n        // additional data required, such as the 'lang' in the case of Ace.\n        function BlocklyUi(textareaId, width, height, templateParams) {\n\n            var textArea, locale, toolbox, that;\n\n            that = this;\n            locale = templateParams[\"locale\"];\n            toolbox = templateParams[\"toolbox\"];\n            textArea = document.getElementById(textareaId);\n\n            this.textArea = textArea;\n\n            this.blocklyDiv = document.createElement(\"div\");\n            this.blocklyDiv.id = \"blockly_\" + textareaId;\n            this.blocklyDiv.class = \"coderunner_blockly\";\n            this.blocklyDiv.tabindex = 1;\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n\n            textArea.parentNode.insertBefore(this.blocklyDiv, textArea);\n\n            // Load msg file and initialize blockly\n            that.fail = false;\n            try {\n                if (locale) {\n                    require(['./blockly/msg/' + locale], function(msg) {\n                        loadBlockly_(msg);\n                    });\n                } else {\n                    loadBlockly_();\n                }\n            }\n            catch(err) {\n                that.fail = true;\n                console.log(err);\n            }\n\n            var loadBlockly_ = function(msg) {\n               // Do not load locale if not configured or is english (already loaded)\n               if (msg && locale != \"en\") {\n                   Blockly.setLocale(msg);\n               }\n\n               that.workspace = Blockly.inject(that.blocklyDiv, {\n                    \"toolbox\": toolbox,\n                    \"media\": url.relativeUrl(\"question/type/coderunner/amd/src/blockly/media/\", \"\", false)\n                  });\n\n               // Load blockly state if exists\n               if (textArea.value != \"\") {\n                   var xmlCode = Blockly.Xml.textToDom(textArea.value);\n                   Blockly.Xml.domToWorkspace(xmlCode, that.workspace);\n               }\n            };\n        }\n\n        // A getElement() method that returns the HTML element that the\n        // InterfaceWrapper is to insert into the document tree.\n        BlocklyUi.prototype.getElement = function() {\n            return this.blocklyDiv;\n        };\n\n        // A method failed() that should return true unless the constructor\n        // failed (e.g. because it was not able to de-serialise the text area's\n        // contents). The wrapper will call destroy() on the object if failed()\n        // returns true and abort the use of the UI element. The text area will\n        // have the uiloadfailed class added, which CSS will display in some\n        // error mode (e.g. a red border).\n        BlocklyUi.prototype.failed = function() {\n            return this.fail;\n        };\n\n        // A method failMessage() that will be called only when failed() returns\n        // True. It should be a defined CodeRunner language string key.\n        BlocklyUi.prototype.failMessage = function() {\n\n        };\n\n        // A sync() method that copies the serialised represention of the UI plugin's\n        // data to the related TextArea. This is used when submit is clicked.\n        BlocklyUi.prototype.sync = function() {\n            // Generate and save blocky state\n            var workspaceState = Blockly.Xml.workspaceToDom(this.workspace);\n\n            // Append code node to workspaceState\n            var code = Blockly.Python.workspaceToCode(this.workspace);\n            var xmlCode = Blockly.Xml.textToDom(\"<code><![CDATA[\" + code + \"]]></code>\");\n            workspaceState.appendChild(xmlCode);\n            this.textArea.value = (new XMLSerializer()).serializeToString(workspaceState);\n        };\n\n        // A destroy() method that should sync the contents to the text area then\n        // destroy any HTML elements or other created content. This method is called\n        // when CTRL-ALT-M is typed by the user to turn off all UI plugins\n        BlocklyUi.prototype.destroy = function() {\n            if (this.workspace) {\n                this.workspace.dispose();\n            }\n            if (this.blocklyDiv) {\n                this.blocklyDiv.parentNode.removeChild(this.blocklyDiv);\n                this.blocklyDiv = null;\n            }\n        };\n\n        // A resize(width, height) method that should resize the entire UI element\n        // to the given dimensions.\n        BlocklyUi.prototype.resize = function(width, height) {\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n\n            if(this.workspace) {\n                Blockly.svgResize(this.workspace);\n            }\n        };\n\n        // A hasFocus() method that returns true if the UI element has focus.\n        BlocklyUi.prototype.hasFocus = function() {\n            // TODO\n        };\n\n       // The return value from the module define is a record with a single field\n       // 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n       return {\n            Constructor: BlocklyUi\n        };\n\n});\n"],"file":"ui_blockly.min.js"}