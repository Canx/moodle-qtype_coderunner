{"version":3,"sources":["../src/ui_blockly.js"],"names":["define","$","require","Blockly","BlocklyUi","textareaId","width","height","templateParams","url","xhr","xmlToolbox","textArea","locale","that","toolbox","document","getElementById","blocklyDiv","createElement","id","class","tabindex","style","parentNode","insertBefore","XMLHttpRequest","overrideMimeType","window","location","protocol","host","open","send","onload","fail","msg","loadBlockly_","err","console","log","readyState","DONE","status","setLocale","Xml","textToDom","responseText","workspace","inject","value","xmlCode","domToWorkspace","prototype","getElement","failed","failMessage","sync","workspaceState","workspaceToDom","code","Python","workspaceToCode","appendChild","XMLSerializer","serializeToString","destroy","dispose","removeChild","resize","svgResize","hasFocus","Constructor"],"mappings":"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","sourcesContent":["define(['jquery', 'require', 'qtype_coderunner/blockly/browser'], function($, require, Blockly) {\n/* 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON templateParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n */\n        function BlocklyUi(textareaId, width, height, templateParams) {\n\n            var url, xhr, xmlToolbox, textArea, locale, that;\n\n            var that = this;\n            var locale = templateParams[\"locale\"];\n            var toolbox = templateParams[\"toolbox\"];\n\n            textArea = document.getElementById(textareaId);\n            this.textArea = textArea;\n\n            this.blocklyDiv = document.createElement(\"div\");\n            this.blocklyDiv.id = \"blockly_\" + textareaId;\n            this.blocklyDiv.class = \"coderunner_blockly\";\n            this.blocklyDiv.tabindex = 1;\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n\n            textArea.parentNode.insertBefore(this.blocklyDiv, textArea);\n\n            // Load toolbox XML from file\n            xhr = new XMLHttpRequest();\n            xhr.overrideMimeType('text/xml');\n            url = window.location.protocol + '//' + window.location.host;\n            url += \"/question/type/coderunner/amd/src/blockly/toolbox.xml\";\n            xhr.open(\"GET\", url, true);\n            xhr.send();\n\n            // Load msg file and initialize blockly when toolbox is received\n            xhr.onload = function() {\n                that.fail = false;\n                try {\n                    if (locale) {\n                        require(['./blockly/msg/' + locale], function(msg) {\n                            loadBlockly_(msg);\n                        });\n                    } else {\n                        loadBlockly_();\n                    }\n                }\n                catch(err) {\n                    that.fail = true;\n                    console.log(err);\n                }\n            };\n\n            var loadBlockly_ = function(msg) {\n               if (xhr.readyState === xhr.DONE && xhr.status === 200) {\n                    if (msg) {\n                        Blockly.setLocale(msg);\n                    }\n\n                    // Load toolbox from templateParams if exists, or default if not.\n                    if (toolbox) {\n                       xmlToolbox = Blockly.Xml.textToDom(toolbox);\n                    }\n                    else {\n                       xmlToolbox = Blockly.Xml.textToDom(xhr.responseText);\n                    }\n                    that.workspace = Blockly.inject(that.blocklyDiv, {toolbox: xmlToolbox});\n                }\n\n                // Load blockly state if exists\n                if (textArea.value != \"\") {\n                    var xmlCode = Blockly.Xml.textToDom(textArea.value);\n                    Blockly.Xml.domToWorkspace(xmlCode, that.workspace);\n                }\n            };\n        }\n\n/* 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n */\n        BlocklyUi.prototype.getElement = function() {\n            return this.blocklyDiv;\n        };\n\n/* 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n */\n        BlocklyUi.prototype.failed = function() {\n            return this.fail;\n        };\n\n/* 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n */\n        BlocklyUi.prototype.failMessage = function() {\n\n        };\n\n/* 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n */\n        BlocklyUi.prototype.sync = function() {\n            // Generate and save blocky state\n            var workspaceState = Blockly.Xml.workspaceToDom(this.workspace);\n\n            // Append code node to workspaceState\n            var code = Blockly.Python.workspaceToCode(this.workspace);\n            var xmlCode = Blockly.Xml.textToDom(\"<code>\" + code + \"</code>\");\n            workspaceState.appendChild(xmlCode);\n            this.textArea.value = (new XMLSerializer()).serializeToString(workspaceState);\n        };\n\n/* 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n */\n        BlocklyUi.prototype.destroy = function() {\n            if (this.workspace) {\n                this.workspace.dispose();\n            }\n            if (this.blocklyDiv) {\n                this.blocklyDiv.parentNode.removeChild(this.blocklyDiv);\n                this.blocklyDiv = null;\n            }\n        };\n\n/* 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n */\n        BlocklyUi.prototype.resize = function(width, height) {\n            this.blocklyDiv.style.height = height + \"px\";\n            this.blocklyDiv.style.width = width + \"px\";\n\n            if(this.workspace) {\n                Blockly.svgResize(this.workspace);\n            }\n        };\n\n/* 8. A hasFocus() method that returns true if the UI element has focus.\n */\n        BlocklyUi.prototype.hasFocus = function() {\n            // TODO\n        };\n\n/* The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n */\n       return {\n            Constructor: BlocklyUi\n        };\n\n});\n"],"file":"ui_blockly.min.js"}