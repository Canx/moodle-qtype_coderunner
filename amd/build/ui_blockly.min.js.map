{"version":3,"sources":["../src/ui_blockly.js"],"names":["define","$","Blockly","BlocklyUi","textareaId","width","height","templateParams","textArea","document","getElementById","blocklyDiv","createElement","attr","id","class","tabindex","toolbox","blocklyWorkspace","inject","fail","err","prototype","getElement","failed","failMessage","sync","destroy","resize","hasFocus","Constructor"],"mappings":"AAAAA,OAAM,+BAAC,CAAC,QAAD,CAAW,uCAAX,CAAD,CAAsD,SAASC,CAAT,CAAYC,CAAZ,CAAqB,CASzE,QAASC,CAAAA,CAAT,CAAmBC,CAAnB,CAA+BC,CAA/B,CAAsCC,CAAtC,CAA8CC,CAA9C,CAA8D,CAC1D,KAAKC,QAAL,CAAgBP,CAAC,CAACQ,QAAQ,CAACC,cAAT,CAAwBN,CAAxB,CAAD,CAAjB,CACA,KAAKG,cAAL,CAAsBA,CAAtB,CAEA,KAAKI,UAAL,CAAkBV,CAAC,CAACQ,QAAQ,CAACG,aAAT,CAAuB,SAAvB,CAAD,CAAnB,CACA,KAAKD,UAAL,CAAgBE,IAAhB,CAAqB,CACjBC,EAAE,CAAQ,WAAaV,CADN,CAEjBW,KAAK,CAAK,oBAFO,CAGjBC,QAAQ,CAAE,CAHO,CAIjB,OAAUV,CAJO,CAKjB,MAAUD,CALO,CAArB,EAOA,KAAKY,OAAL,CAAe,0CAAf,CACA,KAAKA,OAAL,EAAgB,oCAAhB,CACA,KAAKA,OAAL,EAAgB,4CAAhB,CACA,KAAKA,OAAL,EAAgB,sCAAhB,CACA,KAAKA,OAAL,EAAgB,oCAAhB,CACA,KAAKA,OAAL,EAAgB,wCAAhB,CACA,KAAKA,OAAL,EAAgB,6BAAhB,CACA,KAAKA,OAAL,EAAgB,mCAAhB,CACA,KAAKA,OAAL,EAAgB,QAAhB,CAEA,GAAI,CACA,KAAKC,gBAAL,CAAwBhB,CAAO,CAACiB,MAAR,CAAe,KAAKR,UAApB,CAAgC,CAACM,OAAO,CAAE,KAAKA,OAAf,CAAhC,CAAxB,CACA,KAAKG,IAAL,GACH,CACD,MAAMC,CAAN,CAAW,CACP,KAAKD,IAAL,GACH,CACJ,CAKDjB,CAAS,CAACmB,SAAV,CAAoBC,UAApB,CAAiC,UAAW,CACxC,MAAO,MAAKZ,UACf,CAFD,CAWAR,CAAS,CAACmB,SAAV,CAAoBE,MAApB,CAA6B,UAAW,CACpC,MAAO,MAAKJ,IACf,CAFD,CAOAjB,CAAS,CAACmB,SAAV,CAAoBG,WAApB,CAAkC,UAAW,CAE5C,CAFD,CAOAtB,CAAS,CAACmB,SAAV,CAAoBI,IAApB,CAA2B,UAAW,CAErC,CAFD,CAQAvB,CAAS,CAACmB,SAAV,CAAoBK,OAApB,CAA8B,UAAW,CAExC,CAFD,CAOAxB,CAAS,CAACmB,SAAV,CAAoBM,MAApB,CAA6B,UAAW,CAEvC,CAFD,CAMAzB,CAAS,CAACmB,SAAV,CAAoBO,QAApB,CAA+B,UAAW,CAEzC,CAFD,CAOD,MAAO,CACFC,WAAW,CAAE3B,CADX,CAIb,CApGK,CAAN","sourcesContent":["define(['jquery', 'qtype_coderunner/node-blockly/browser'], function($, Blockly) {\n/* 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON templateParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n */\n        function BlocklyUi(textareaId, width, height, templateParams) {\n            this.textArea = $(document.getElementById(textareaId));\n            this.templateParams = templateParams;\n\n            this.blocklyDiv = $(document.createElement(\"blockly\"));\n            this.blocklyDiv.attr({\n                id      : \"blockly_\" + textareaId,\n                class   : \"coderunner_blockly\",\n                tabindex: 1,\n                \"height\": height,\n                \"width\" : width\n            });\n            this.toolbox = \"<xml id='toolbox' style='display: none'>\";\n            this.toolbox += \"<block type='controls_if'></block>\";\n            this.toolbox += \"<block type='controls_repeat_ext'></block>\";\n            this.toolbox += \"<block type='logic_compare'></block>\";\n            this.toolbox += \"<block type='math_number'></block>\";\n            this.toolbox += \"<block type='math_arithmetic'></block>\";\n            this.toolbox += \"<block type='text'></block>\";\n            this.toolbox += \"<block type='text_print'></block>\";\n            this.toolbox += \"</xml>\";\n\n            try {\n                this.blocklyWorkspace = Blockly.inject(this.blocklyDiv, {toolbox: this.toolbox});\n                this.fail = false;\n            }\n            catch(err) {\n                this.fail = true;\n            }\n        }\n\n/* 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n */\n        BlocklyUi.prototype.getElement = function() {\n            return this.blocklyDiv;\n        };\n\n/* 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n */\n        BlocklyUi.prototype.failed = function() {\n            return this.fail;\n        };\n\n/* 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n */\n        BlocklyUi.prototype.failMessage = function() {\n\n        };\n\n/* 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n */\n        BlocklyUi.prototype.sync = function() {\n            // TODO: generate code in textArea\n        };\n\n/* 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n */\n        BlocklyUi.prototype.destroy = function() {\n            // TODO\n        };\n\n/* 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n */\n        BlocklyUi.prototype.resize = function() {\n            // TODO\n        };\n\n/* 8. A hasFocus() method that returns true if the UI element has focus.\n */\n        BlocklyUi.prototype.hasFocus = function() {\n\n        };\n\n/* The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n */\n       return {\n            Constructor: BlocklyUi\n        };\n\n});\n"],"file":"ui_blockly.min.js"}